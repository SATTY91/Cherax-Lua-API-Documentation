
-- !!! DO NOT MODIFY THIS FILE !!!
-- GTA 5 Natives for Cherax Mod Menu. Generated with NativeGenerator on 23-11-2023 21:19:51.
-- https://raw.githubusercontent.com/alloc8or/gta5-nativedb-data/master/natives.json

---@class integer*: integer
---@class number*: integer
---@class any*: integer
---@class V3*: integer
---@class boolean*: integer

local InvokeBool,InvokeFloat,InvokeInt,InvokeString,InvokeVoid=Natives.InvokeBool,Natives.InvokeFloat,Natives.InvokeInt,Natives.InvokeString,Natives.InvokeVoid
local function InvokeV3(Hash,...)return V3.New(Natives.InvokeV3(Hash,...))end
_G.System={
	--[=[Pauses execution of the current script, please note this behavior is only seen when called from one of the game script files(ysc). In order to wait an asi script use "static void WAIT(DWORD time);" found in main.h]=]
	Wait=function(ms--[[@param ms integer]])return InvokeVoid(0x4EDE34FBADD967A6,ms)end;
	--[=[Examples:
 g_384A = SYSTEM::START_NEW_SCRIPT("cellphone_flashhand", 1424);
 l_10D = SYSTEM::START_NEW_SCRIPT("taxiService", 1828);
 SYSTEM::START_NEW_SCRIPT("AM_MP_YACHT", 5000);
 SYSTEM::START_NEW_SCRIPT("emergencycall", 512);
 SYSTEM::START_NEW_SCRIPT("emergencycall", 512); 
 SYSTEM::START_NEW_SCRIPT("FM_maintain_cloud_header_data", 1424);
 SYSTEM::START_NEW_SCRIPT("FM_Mission_Controller", 31000);
 SYSTEM::START_NEW_SCRIPT("tennis_family", 3650);
 SYSTEM::START_NEW_SCRIPT("Celebrations", 3650);

Decompiled examples of usage when starting a script:
 
    SCRIPT::REQUEST_SCRIPT(a_0);
    if (SCRIPT::HAS_SCRIPT_LOADED(a_0)) {
        SYSTEM::START_NEW_SCRIPT(a_0, v_3);
        SCRIPT::SET_SCRIPT_AS_NO_LONGER_NEEDED(a_0);
        return 1;
    }
 
or:

    v_2 = "MrsPhilips2";
    SCRIPT::REQUEST_SCRIPT(v_2);
    while (!SCRIPT::HAS_SCRIPT_LOADED(v_2)) {
    SCRIPT::REQUEST_SCRIPT(v_2);
    SYSTEM::WAIT(0);
    }
    sub_8792(36);
    SYSTEM::START_NEW_SCRIPT(v_2, 17000);
    SCRIPT::SET_SCRIPT_AS_NO_LONGER_NEEDED(v_2);]=]
	StartNewScript=function(scriptName--[[@param scriptName string]],stackSize--[[@param stackSize integer]])return InvokeInt(0xE81651AD79516E48,scriptName,stackSize)end;---@return integer
	--[=[return : script thread id, 0 if failed
Pass pointer to struct of args in p1, size of struct goes into p2]=]
	StartNewScriptWithArgs=function(scriptName--[[@param scriptName string]],args--[[@param args any*]],argCount--[[@param argCount integer]],stackSize--[[@param stackSize integer]])return InvokeInt(0xB8BA7F44DF1575E1,scriptName,args,argCount,stackSize)end;---@return integer
	StartNewScriptWithNameHash=function(scriptHash--[[@param scriptHash integer]],stackSize--[[@param stackSize integer]])return InvokeInt(0xEB1C67C3A5333A92,scriptHash,stackSize)end;---@return integer
	StartNewScriptWithNameHashAndArgs=function(scriptHash--[[@param scriptHash integer]],args--[[@param args any*]],argCount--[[@param argCount integer]],stackSize--[[@param stackSize integer]])return InvokeInt(0xC4BB298BD441BE78,scriptHash,args,argCount,stackSize)end;---@return integer
	--[=[Counts up. Every 1000 is 1 real-time second. Use SETTIMERA(int value) to set the timer (e.g.: SETTIMERA(0)).]=]
	Timera=function()return InvokeInt(0x83666F9FB8FEBD4B)end;---@return integer
	Timerb=function()return InvokeInt(0xC9D9444186B5A374)end;---@return integer
	Settimera=function(value--[[@param value integer]])return InvokeVoid(0xC1B1E9A034A63A62,value)end;
	Settimerb=function(value--[[@param value integer]])return InvokeVoid(0x5AE11BC36633DE4E,value)end;
	--[=[Gets the current frame time.]=]
	Timestep=function()return InvokeFloat(0x0000000050597EE2)end;---@return number
	Sin=function(value--[[@param value number]])return InvokeFloat(0x0BADBFA3B172435F,value+.0)end;---@return number
	Cos=function(value--[[@param value number]])return InvokeFloat(0xD0FFB162F40A139C,value+.0)end;---@return number
	Sqrt=function(value--[[@param value number]])return InvokeFloat(0x71D93B57D07F9804,value+.0)end;---@return number
	Pow=function(base--[[@param base number]],exponent--[[@param exponent number]])return InvokeFloat(0xE3621CC40F31FE2E,base+.0,exponent+.0)end;---@return number
	Log10=function(value--[[@param value number]])return InvokeFloat(0xE816E655DE37FE20,value+.0)end;---@return number
	--[=[Calculates the magnitude of a vector.]=]
	Vmag=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeFloat(0x652D2EEEF1D3E62C,x+.0,y+.0,z+.0)end;---@return number
	--[=[Calculates the magnitude of a vector but does not perform Sqrt operations. (Its way faster)]=]
	Vmag2=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeFloat(0xA8CEACB4F35AE058,x+.0,y+.0,z+.0)end;---@return number
	--[=[Calculates distance between vectors.]=]
	Vdist=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]])return InvokeFloat(0x2A488C176D52CCA5,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0)end;---@return number
	--[=[Calculates distance between vectors but does not perform Sqrt operations. (Its way faster)]=]
	Vdist2=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]])return InvokeFloat(0xB7A628320EFF8E47,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0)end;---@return number
	ShiftLeft=function(value--[[@param value integer]],bitShift--[[@param bitShift integer]])return InvokeInt(0xEDD95A39E5544DE8,value,bitShift)end;---@return integer
	ShiftRight=function(value--[[@param value integer]],bitShift--[[@param bitShift integer]])return InvokeInt(0x97EF1E5BCE9DC075,value,bitShift)end;---@return integer
	Floor=function(value--[[@param value number]])return InvokeInt(0xF34EE736CF047844,value+.0)end;---@return integer
	--[=[I'm guessing this rounds a float value up to the next whole number, and FLOOR rounds it down]=]
	Ceil=function(value--[[@param value number]])return InvokeInt(0x11E019C8F43ACC8A,value+.0)end;---@return integer
	Round=function(value--[[@param value number]])return InvokeInt(0xF2DB717A73826179,value+.0)end;---@return integer
	ToFloat=function(value--[[@param value integer]])return InvokeFloat(0xBBDA792448DB5A89,value)end;---@return number
	--[=[THREAD_PRIO_HIGHEST = 0
THREAD_PRIO_NORMAL = 1
THREAD_PRIO_LOWEST = 2
THREAD_PRIO_MANUAL_UPDATE = 100]=]
	SetThisThreadPriority=function(priority--[[@param priority integer]])return InvokeVoid(0x42B65DEEF2EDF2A1,priority)end;
}
_G.App={
	AppDataValid=function()return InvokeBool(0x846AA8E7D55EE5B6)end;---@return boolean
	AppGetInt=function(property--[[@param property string]])return InvokeInt(0xD3A58A12C77D9D4B,property)end;---@return integer
	AppGetFloat=function(property--[[@param property string]])return InvokeFloat(0x1514FB24C02C2322,property)end;---@return number
	AppGetString=function(property--[[@param property string]])return InvokeString(0x749B023950D2311C,property)end;---@return string
	AppSetInt=function(property--[[@param property string]],value--[[@param value integer]])return InvokeVoid(0x607E8E3D3E4F9611,property,value)end;
	AppSetFloat=function(property--[[@param property string]],value--[[@param value number]])return InvokeVoid(0x25D7687C68E0DAA4,property,value+.0)end;
	AppSetString=function(property--[[@param property string]],value--[[@param value string]])return InvokeVoid(0x3FF2FCEC4B7721B4,property,value)end;
	--[=[Called in the gamescripts like:
APP::APP_SET_APP("car");
APP::APP_SET_APP("dog");]=]
	AppSetApp=function(appName--[[@param appName string]])return InvokeVoid(0xCFD0406ADAF90D2B,appName)end;
	AppSetBlock=function(blockName--[[@param blockName string]])return InvokeVoid(0x262AB456A3D21F93,blockName)end;
	AppClearBlock=function()return InvokeVoid(0x5FE1DF3342DB7DBA)end;
	AppCloseApp=function()return InvokeVoid(0xE41C65E07A5F05FC)end;
	AppCloseBlock=function()return InvokeVoid(0xE8E3FCF72EAC0EF8)end;
	AppHasLinkedSocialClubAccount=function()return InvokeBool(0x71EEE69745088DA0)end;---@return boolean
	AppHasSyncedData=function(appName--[[@param appName string]])return InvokeBool(0xCA52279A7271517F,appName)end;---@return boolean
	AppSaveData=function()return InvokeVoid(0x95C5D356CDA6E85F)end;
	AppGetDeletedFileStatus=function()return InvokeInt(0xC9853A2BE3DED1A6)end;---@return integer
	AppDeleteAppData=function(appName--[[@param appName string]])return InvokeBool(0x44151AEA95C8A003,appName)end;---@return boolean
}
_G.Audio={
	--[=[All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/RFb4GTny

AUDIO::PLAY_PED_RINGTONE("Remote_Ring", PLAYER::PLAYER_PED_ID(), 1);
AUDIO::PLAY_PED_RINGTONE("Dial_and_Remote_Ring", PLAYER::PLAYER_PED_ID(), 1);
]=]
	PlayPedRingtone=function(ringtoneName--[[@param ringtoneName string]],ped--[[@param ped integer]],p2--[[@param p2 boolean]])return InvokeVoid(0xF9E56683CA8E11A5,ringtoneName,ped,p2)end;
	IsPedRingtonePlaying=function(ped--[[@param ped integer]])return InvokeBool(0x1E8E5E20937E3137,ped)end;---@return boolean
	StopPedRingtone=function(ped--[[@param ped integer]])return InvokeVoid(0x6C5AE23EFA885092,ped)end;
	IsMobilePhoneCallOngoing=function()return InvokeBool(0x7497D2CE2C30D24C)end;---@return boolean
	IsMobileInterferenceActive=function()return InvokeBool(0xC8B1B2425604CDD0)end;---@return boolean
	CreateNewScriptedConversation=function()return InvokeVoid(0xD2C91A0B572AAE56)end;
	--[=[NOTE: ones that are -1, 0 - 35 are determined by a function where it gets a TextLabel from a global then runs,
GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME and depending on what the result is it goes in check order of 0 - 9 then A - Z then z (lowercase). So it will then return 0 - 35 or -1 if it's 'z'. The func to handle that ^^ is func_67 in dialog_handler.c atleast in TU27 Xbox360 scripts.

p0 is -1, 0 - 35
p1 is a char or string (whatever you wanna call it)
p2 is Global 10597 + i * 6. 'i' is a while(i < 70) loop
p3 is again -1, 0 - 35 
p4 is again -1, 0 - 35 
p5 is either 0 or 1 (bool ?)
p6 is either 0 or 1 (The func to determine this is bool)
p7 is either 0 or 1 (The func to determine this is bool)
p8 is either 0 or 1 (The func to determine this is bool)
p9 is 0 - 3 (Determined by func_60 in dialogue_handler.c)
p10 is either 0 or 1 (The func to determine this is bool)
p11 is either 0 or 1 (The func to determine this is bool)
p12 is unknown as in TU27 X360 scripts it only goes to p11.]=]
	AddLineToConversation=function(index--[[@param index integer]],p1--[[@param p1 string]],p2--[[@param p2 string]],p3--[[@param p3 integer]],p4--[[@param p4 integer]],p5--[[@param p5 boolean]],p6--[[@param p6 boolean]],p7--[[@param p7 boolean]],p8--[[@param p8 boolean]],p9--[[@param p9 integer]],p10--[[@param p10 boolean]],p11--[[@param p11 boolean]],p12--[[@param p12 boolean]])return InvokeVoid(0xC5EF963405593646,index,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12)end;
	--[=[4 calls in the b617d scripts. The only one with p0 and p2 in clear text:

AUDIO::ADD_PED_TO_CONVERSATION(5, l_AF, "DINAPOLI");

=================================================
One of the 2 calls in dialogue_handler.c p0 is in a while-loop, and so is determined to also possibly be 0 - 15.]=]
	AddPedToConversation=function(index--[[@param index integer]],ped--[[@param ped integer]],p2--[[@param p2 string]])return InvokeVoid(0x95D9F4BC443956E7,index,ped,p2)end;
	SetPositionForNullConvPed=function(p0--[[@param p0 any]],p1--[[@param p1 number]],p2--[[@param p2 number]],p3--[[@param p3 number]])return InvokeVoid(0x33E3C6C6F2F0B506,p0,p1+.0,p2+.0,p3+.0)end;
	SetEntityForNullConvPed=function(p0--[[@param p0 integer]],entity--[[@param entity integer]])return InvokeVoid(0x892B6AB8F33606F5,p0,entity)end;
	--[=[This native controls where the game plays audio from. By default the microphone is positioned on the player.
When p0 is true the game will play audio from the 3 positions inputted.
It is recommended to set all 3 positions to the same value as mixing different positions doesn't seem to work well.
The scripts mostly use it with only one position such as in fbi3.c: 
AUDIO::SET_MICROPHONE_POSITION(true, ENTITY::GET_ENTITY_COORDS(iLocal_3091, true), ENTITY::GET_ENTITY_COORDS(iLocal_3091, true), ENTITY::GET_ENTITY_COORDS(iLocal_3091, true));]=]
	SetMicrophonePosition=function(toggle--[[@param toggle boolean]],x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],x3--[[@param x3 number]],y3--[[@param y3 number]],z3--[[@param z3 number]])return InvokeVoid(0xB6AE90EDDE95C762,toggle,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,x3+.0,y3+.0,z3+.0)end;
	SetConversationAudioControlledByAnim=function(p0--[[@param p0 boolean]])return InvokeVoid(0x0B568201DD99F0EB,p0)end;
	SetConversationAudioPlaceholder=function(p0--[[@param p0 boolean]])return InvokeVoid(0x61631F5DF50D1C34,p0)end;
	StartScriptPhoneConversation=function(p0--[[@param p0 boolean]],p1--[[@param p1 boolean]])return InvokeVoid(0x252E5F915EABB675,p0,p1)end;
	PreloadScriptPhoneConversation=function(p0--[[@param p0 boolean]],p1--[[@param p1 boolean]])return InvokeVoid(0x6004BCB0E226AAEA,p0,p1)end;
	StartScriptConversation=function(p0--[[@param p0 boolean]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],p3--[[@param p3 boolean]])return InvokeVoid(0x6B17C62C9635D2DC,p0,p1,p2,p3)end;
	PreloadScriptConversation=function(p0--[[@param p0 boolean]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],p3--[[@param p3 boolean]])return InvokeVoid(0x3B3CAD6166916D87,p0,p1,p2,p3)end;
	StartPreloadedConversation=function()return InvokeVoid(0x23641AFE870AF385)end;
	GetIsPreloadedConversationReady=function()return InvokeBool(0xE73364DB90778FFA)end;---@return boolean
	IsScriptedConversationOngoing=function()return InvokeBool(0x16754C556D2EDE3D)end;---@return boolean
	IsScriptedConversationLoaded=function()return InvokeBool(0xDF0D54BE7A776737)end;---@return boolean
	GetCurrentScriptedConversationLine=function()return InvokeInt(0x480357EE890C295A)end;---@return integer
	PauseScriptedConversation=function(p0--[[@param p0 boolean]])return InvokeVoid(0x8530AD776CD72B12,p0)end;
	RestartScriptedConversation=function()return InvokeVoid(0x9AEB285D1818C9AC)end;
	StopScriptedConversation=function(p0--[[@param p0 boolean]])return InvokeInt(0xD79DEEFB53455EBA,p0)end;---@return integer
	SkipToNextScriptedConversationLine=function()return InvokeVoid(0x9663FE6B7A61EB00)end;
	--[=[Example from carsteal3.c: AUDIO::INTERRUPT_CONVERSATION(PLAYER::PLAYER_PED_ID(), "CST4_CFAA", "FRANKLIN");
Voicelines can be found in GTAV\x64\audio\sfx in files starting with "SS_" which seems to mean scripted speech.]=]
	InterruptConversation=function(ped--[[@param ped integer]],voiceline--[[@param voiceline string]],speaker--[[@param speaker string]])return InvokeVoid(0xA018A12E5C5C2FA6,ped,voiceline,speaker)end;
	--[=[One call found in the b617d scripts:

AUDIO::INTERRUPT_CONVERSATION_AND_PAUSE(NETWORK::NET_TO_PED(l_3989._f26F[0/*1*/]), "CONV_INTERRUPT_QUIT_IT", "LESTER");]=]
	InterruptConversationAndPause=function(ped--[[@param ped integer]],p1--[[@param p1 string]],speaker--[[@param speaker string]])return InvokeVoid(0x8A694D7A68F8DC38,ped,p1,speaker)end;
	GetVariationChosenForScriptedLine=function(p0--[[@param p0 any*]])return InvokeInt(0xAA19F5572C38B564,p0)end;---@return integer
	SetNoDuckingForConversation=function(p0--[[@param p0 boolean]])return InvokeVoid(0xB542DE8C3D1CB210,p0)end;
	--[=[This native does absolutely nothing, just a nullsub]=]
	RegisterScriptWithAudio=function(p0--[[@param p0 integer]])return InvokeVoid(0xC6ED9D5092438D91,p0)end;
	--[=[This native does absolutely nothing, just a nullsub]=]
	UnregisterScriptWithAudio=function()return InvokeVoid(0xA8638BE228D4751A)end;
	--[=[All occurrences and usages found in b617d: https://pastebin.com/NzZZ2Tmm
Full list of mission audio bank names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/missionAudioBankNames.json
p2 is always -1]=]
	RequestMissionAudioBank=function(audioBank--[[@param audioBank string]],p1--[[@param p1 boolean]],p2--[[@param p2 any]])return InvokeBool(0x7345BDD95E62E0F2,audioBank,p1,p2)end;---@return boolean
	--[=[All occurrences and usages found in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/XZ1tmGEz
Full list of ambient audio bank names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientAudioBankNames.json
p2 is always -1]=]
	RequestAmbientAudioBank=function(audioBank--[[@param audioBank string]],p1--[[@param p1 boolean]],p2--[[@param p2 any]])return InvokeBool(0xFE02FFBED8CA9D99,audioBank,p1,p2)end;---@return boolean
	--[=[All occurrences and usages found in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/AkmDAVn6
Full list of script audio bank names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scriptAudioBankNames.json
p2 is always -1]=]
	RequestScriptAudioBank=function(audioBank--[[@param audioBank string]],p1--[[@param p1 boolean]],p2--[[@param p2 any]])return InvokeBool(0x2F844A8B08D76685,audioBank,p1,p2)end;---@return boolean
	--[=[p2 is always -1]=]
	HintMissionAudioBank=function(audioBank--[[@param audioBank string]],p1--[[@param p1 boolean]],p2--[[@param p2 any]])return InvokeBool(0x40763EA7B9B783E7,audioBank,p1,p2)end;---@return boolean
	--[=[p2 is always -1]=]
	HintAmbientAudioBank=function(audioBank--[[@param audioBank string]],p1--[[@param p1 boolean]],p2--[[@param p2 any]])return InvokeBool(0x8F8C0E370AE62F5C,audioBank,p1,p2)end;---@return boolean
	--[=[p2 is always -1]=]
	HintScriptAudioBank=function(audioBank--[[@param audioBank string]],p1--[[@param p1 boolean]],p2--[[@param p2 any]])return InvokeBool(0xFB380A29641EC31A,audioBank,p1,p2)end;---@return boolean
	ReleaseMissionAudioBank=function()return InvokeVoid(0x0EC92A1BF0857187)end;
	ReleaseAmbientAudioBank=function()return InvokeVoid(0x65475A218FFAA93D)end;
	--[=[Full list of script audio bank names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scriptAudioBankNames.json]=]
	ReleaseNamedScriptAudioBank=function(audioBank--[[@param audioBank string]])return InvokeVoid(0x77ED170667F50170,audioBank)end;
	ReleaseScriptAudioBank=function()return InvokeVoid(0x7A2D8AD0A9EB9C3F)end;
	UnhintAmbientAudioBank=function()return InvokeVoid(0x19AF7ED9B9D23058)end;
	UnhintScriptAudioBank=function()return InvokeVoid(0x9AC92EED5E4793AB)end;
	UnhintNamedScriptAudioBank=function(audioBank--[[@param audioBank string]])return InvokeVoid(0x11579D940949C49E,audioBank)end;
	GetSoundId=function()return InvokeInt(0x430386FE9BF80B45)end;---@return integer
	ReleaseSoundId=function(soundId--[[@param soundId integer]])return InvokeVoid(0x353FC880830B88FA,soundId)end;
	--[=[All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/A8Ny8AHZ

Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json]=]
	PlaySound=function(soundId--[[@param soundId integer]],audioName--[[@param audioName string]],audioRef--[[@param audioRef string]],p3--[[@param p3 boolean]],p4--[[@param p4 any]],p5--[[@param p5 boolean]])return InvokeVoid(0x7FF4944CC209192D,soundId,audioName,audioRef,p3,p4,p5)end;
	--[=[List: https://pastebin.com/DCeRiaLJ

All occurrences as of Cayo Perico Heist DLC (b2189), sorted alphabetically and identical lines removed: https://git.io/JtLxM

Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json]=]
	PlaySoundFrontend=function(soundId--[[@param soundId integer]],audioName--[[@param audioName string]],audioRef--[[@param audioRef string]],p3--[[@param p3 boolean]])return InvokeVoid(0x67C540AA08E4A6F5,soundId,audioName,audioRef,p3)end;
	--[=[Only call found in the b617d scripts:

AUDIO::PLAY_DEFERRED_SOUND_FRONTEND("BACK", "HUD_FREEMODE_SOUNDSET");

Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json]=]
	PlayDeferredSoundFrontend=function(soundName--[[@param soundName string]],soundsetName--[[@param soundsetName string]])return InvokeVoid(0xCADA5A0D0702381E,soundName,soundsetName)end;
	--[=[All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/f2A7vTj0 
No changes made in b678d.

gtaforums.com/topic/795622-audio-for-mods

Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json]=]
	PlaySoundFromEntity=function(soundId--[[@param soundId integer]],audioName--[[@param audioName string]],entity--[[@param entity integer]],audioRef--[[@param audioRef string]],isNetwork--[[@param isNetwork boolean]],p5--[[@param p5 any]])return InvokeVoid(0xE65F427EB70AB1ED,soundId,audioName,entity,audioRef,isNetwork,p5)end;
	--[=[Only used with "formation_flying_blips_soundset" and "biker_formation_blips_soundset".
p1 is always the model of p2]=]
	PlaySoundFromEntityHash=function(soundId--[[@param soundId integer]],model--[[@param model integer]],entity--[[@param entity integer]],soundSetHash--[[@param soundSetHash integer]],p4--[[@param p4 any]],p5--[[@param p5 any]])return InvokeVoid(0x5B9853296731E88D,soundId,model,entity,soundSetHash,p4,p5)end;
	--[=[All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/eeFc5DiW

gtaforums.com/topic/795622-audio-for-mods

Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json]=]
	PlaySoundFromCoord=function(soundId--[[@param soundId integer]],audioName--[[@param audioName string]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],audioRef--[[@param audioRef string]],isNetwork--[[@param isNetwork boolean]],range--[[@param range integer]],p8--[[@param p8 boolean]])return InvokeVoid(0x8D8686B622B88120,soundId,audioName,x+.0,y+.0,z+.0,audioRef,isNetwork,range,p8)end;
	UpdateSoundCoord=function(soundId--[[@param soundId integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0x7EC3C679D0E7E46B,soundId,x+.0,y+.0,z+.0)end;
	StopSound=function(soundId--[[@param soundId integer]])return InvokeVoid(0xA3B0C41BA5CC0BB5,soundId)end;
	--[=[Could this be used alongside either, 
SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES or _SET_NETWORK_ID_SYNC_TO_PLAYER to make it so other players can hear the sound while online? It'd be a bit troll-fun to be able to play the Zancudo UFO creepy sounds globally.]=]
	GetNetworkIdFromSoundId=function(soundId--[[@param soundId integer]])return InvokeInt(0x2DE3F0A134FFBC0D,soundId)end;---@return integer
	GetSoundIdFromNetworkId=function(netId--[[@param netId integer]])return InvokeInt(0x75262FD12D0A1C84,netId)end;---@return integer
	SetVariableOnSound=function(soundId--[[@param soundId integer]],variable--[[@param variable string]],p2--[[@param p2 number]])return InvokeVoid(0xAD6B3148A78AE9B6,soundId,variable,p2+.0)end;
	--[=[From the scripts, p0:

"ArmWrestlingIntensity",
"INOUT",
"Monkey_Stream",
"ZoomLevel"]=]
	SetVariableOnStream=function(variable--[[@param variable string]],p1--[[@param p1 number]])return InvokeVoid(0x2F9D3834AEB9EF79,variable,p1+.0)end;
	OverrideUnderwaterStream=function(p0--[[@param p0 string]],p1--[[@param p1 boolean]])return InvokeVoid(0xF2A9CDABCEA04BD6,p0,p1)end;
	--[=[AUDIO::SET_VARIABLE_ON_UNDER_WATER_STREAM("inTunnel", 1.0);
AUDIO::SET_VARIABLE_ON_UNDER_WATER_STREAM("inTunnel", 0.0);]=]
	SetVariableOnUnderWaterStream=function(variableName--[[@param variableName string]],value--[[@param value number]])return InvokeVoid(0x733ADF241531E5C2,variableName,value+.0)end;
	HasSoundFinished=function(soundId--[[@param soundId integer]])return InvokeBool(0xFCBDCE714A7C88E5,soundId)end;---@return boolean
	--[=[Plays ambient speech. See also _0x444180DB.

ped: The ped to play the ambient speech.
speechName: Name of the speech to play, eg. "GENERIC_HI".
speechParam: Can be one of the following:
SPEECH_PARAMS_STANDARD
SPEECH_PARAMS_ALLOW_REPEAT
SPEECH_PARAMS_BEAT
SPEECH_PARAMS_FORCE
SPEECH_PARAMS_FORCE_FRONTEND
SPEECH_PARAMS_FORCE_NO_REPEAT_FRONTEND
SPEECH_PARAMS_FORCE_NORMAL
SPEECH_PARAMS_FORCE_NORMAL_CLEAR
SPEECH_PARAMS_FORCE_NORMAL_CRITICAL
SPEECH_PARAMS_FORCE_SHOUTED
SPEECH_PARAMS_FORCE_SHOUTED_CLEAR
SPEECH_PARAMS_FORCE_SHOUTED_CRITICAL
SPEECH_PARAMS_FORCE_PRELOAD_ONLY
SPEECH_PARAMS_MEGAPHONE
SPEECH_PARAMS_HELI
SPEECH_PARAMS_FORCE_MEGAPHONE
SPEECH_PARAMS_FORCE_HELI
SPEECH_PARAMS_INTERRUPT
SPEECH_PARAMS_INTERRUPT_SHOUTED
SPEECH_PARAMS_INTERRUPT_SHOUTED_CLEAR
SPEECH_PARAMS_INTERRUPT_SHOUTED_CRITICAL
SPEECH_PARAMS_INTERRUPT_NO_FORCE
SPEECH_PARAMS_INTERRUPT_FRONTEND
SPEECH_PARAMS_INTERRUPT_NO_FORCE_FRONTEND
SPEECH_PARAMS_ADD_BLIP
SPEECH_PARAMS_ADD_BLIP_ALLOW_REPEAT
SPEECH_PARAMS_ADD_BLIP_FORCE
SPEECH_PARAMS_ADD_BLIP_SHOUTED
SPEECH_PARAMS_ADD_BLIP_SHOUTED_FORCE
SPEECH_PARAMS_ADD_BLIP_INTERRUPT
SPEECH_PARAMS_ADD_BLIP_INTERRUPT_FORCE
SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED
SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED_CLEAR
SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED_CRITICAL
SPEECH_PARAMS_SHOUTED
SPEECH_PARAMS_SHOUTED_CLEAR
SPEECH_PARAMS_SHOUTED_CRITICAL

Note: A list of Name and Parameters can be found here https://pastebin.com/1GZS5dCL

Full list of speeches and voices names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/speeches.json]=]
	PlayPedAmbientSpeechNative=function(ped--[[@param ped integer]],speechName--[[@param speechName string]],speechParam--[[@param speechParam string]],p3--[[@param p3 any]])return InvokeVoid(0x8E04FEDD28D42462,ped,speechName,speechParam,p3)end;
	--[=[Plays ambient speech. See also _0x5C57B85D.

See PLAY_PED_AMBIENT_SPEECH_NATIVE for parameter specifications.

Full list of speeches and voices names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/speeches.json]=]
	PlayPedAmbientSpeechAndCloneNative=function(ped--[[@param ped integer]],speechName--[[@param speechName string]],speechParam--[[@param speechParam string]],p3--[[@param p3 any]])return InvokeVoid(0xC6941B4A3A8FBBB9,ped,speechName,speechParam,p3)end;
	--[=[This is the same as PLAY_PED_AMBIENT_SPEECH_NATIVE and PLAY_PED_AMBIENT_SPEECH_AND_CLONE_NATIVE but it will allow you to play a speech file from a specific voice file. It works on players and all peds, even animals.

EX (C#):
GTA.Native.Function.Call(Hash.PLAY_PED_AMBIENT_SPEECH_WITH_VOICE_NATIVE, Game.Player.Character, "GENERIC_INSULT_HIGH", "s_m_y_sheriff_01_white_full_01", "SPEECH_PARAMS_FORCE_SHOUTED", 0);

The first param is the ped you want to play it on, the second is the speech name, the third is the voice name, the fourth is the speech param, and the last param is usually always 0.

Full list of speeches and voices names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/speeches.json]=]
	PlayPedAmbientSpeechWithVoiceNative=function(ped--[[@param ped integer]],speechName--[[@param speechName string]],voiceName--[[@param voiceName string]],speechParam--[[@param speechParam string]],p4--[[@param p4 boolean]])return InvokeVoid(0x3523634255FC3318,ped,speechName,voiceName,speechParam,p4)end;
	--[=[Full list of speeches and voices names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/speeches.json]=]
	PlayAmbientSpeechFromPositionNative=function(speechName--[[@param speechName string]],voiceName--[[@param voiceName string]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],speechParam--[[@param speechParam string]])return InvokeVoid(0xED640017ED337E45,speechName,voiceName,x+.0,y+.0,z+.0,speechParam)end;
	--[=[This native enables the audio flag "TrevorRageIsOverridden" and sets the voice effect to `voiceEffect`]=]
	OverrideTrevorRage=function(voiceEffect--[[@param voiceEffect string]])return InvokeVoid(0x13AD665062541A7E,voiceEffect)end;
	ResetTrevorRage=function()return InvokeVoid(0xE78503B10C4314E0)end;
	SetPlayerAngry=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xEA241BB04110F091,ped,toggle)end;
	--[=[Needs another parameter [int p2]. The signature is PED::PLAY_PAIN(Ped ped, int painID, int p1, int p2);

Last 2 parameters always seem to be 0.

EX: Function.Call(Hash.PLAY_PAIN, TestPed, 6, 0, 0);

Known Pain IDs
________________________

1 - Doesn't seem to do anything. Does NOT crash the game like previously said. (Latest patch)
6 - Scream (Short)
7 - Scared Scream (Kinda Long)
8 - On Fire
]=]
	PlayPain=function(ped--[[@param ped integer]],painID--[[@param painID integer]],p1--[[@param p1 integer]],p3--[[@param p3 any]])return InvokeVoid(0xBC9AE166038A5CEC,ped,painID,p1,p3)end;
	ReleaseWeaponAudio=function()return InvokeVoid(0xCE4AC0439F607045)end;
	--[=[mode can be any of these: 
SLOWMO_T1_TRAILER_SMASH
SLOWMO_T1_RAYFIRE_EXPLOSION
SLOWMO_PROLOGUE_VAULT
NIGEL_02_SLOWMO_SETTING
JSH_EXIT_TUNNEL_SLOWMO
SLOWMO_BIG_SCORE_JUMP
SLOWMO_FIB4_TRUCK_SMASH
SLOWMO_EXTREME_04
SLOW_MO_METH_HOUSE_RAYFIRE
BARRY_02_SLOWMO
BARRY_01_SLOWMO]=]
	ActivateAudioSlowmoMode=function(mode--[[@param mode string]])return InvokeVoid(0xD01005D2BA2EB778,mode)end;
	--[=[see ACTIVATE_AUDIO_SLOWMO_MODE for modes]=]
	DeactivateAudioSlowmoMode=function(mode--[[@param mode string]])return InvokeVoid(0xDDC635D5B3262C56,mode)end;
	--[=[Audio List
gtaforums.com/topic/795622-audio-for-mods/

All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/FTeAj4yZ]=]
	SetAmbientVoiceName=function(ped--[[@param ped integer]],name--[[@param name string]])return InvokeVoid(0x6C8065A3B780185B,ped,name)end;
	SetAmbientVoiceNameHash=function(ped--[[@param ped integer]],hash--[[@param hash integer]])return InvokeVoid(0x9A53DED9921DE990,ped,hash)end;
	GetAmbientVoiceNameHash=function(ped--[[@param ped integer]])return InvokeInt(0x5E203DA2BA15D436,ped)end;---@return integer
	--[=[Assigns some ambient voice to the ped.]=]
	SetPedVoiceFull=function(ped--[[@param ped integer]])return InvokeVoid(0x40CF0D12D142A9E8,ped)end;
	SetPedRaceAndVoiceGroup=function(ped--[[@param ped integer]],p1--[[@param p1 integer]],voiceGroup--[[@param voiceGroup integer]])return InvokeVoid(0x1B7ABE26CBCBF8C7,ped,p1,voiceGroup)end;
	--[=[From the scripts:

AUDIO::SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("PAIGE_PVG"));
AUDIO::SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("TALINA_PVG"));
AUDIO::SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("FEMALE_LOST_BLACK_PVG"));
AUDIO::SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("FEMALE_LOST_WHITE_PVG"));]=]
	SetPedVoiceGroup=function(ped--[[@param ped integer]],voiceGroupHash--[[@param voiceGroupHash integer]])return InvokeVoid(0x7CDC8C3B89F661B3,ped,voiceGroupHash)end;
	--[=[Dat151RelType == 29]=]
	SetPedVoiceGroupFromRaceToPvg=function(ped--[[@param ped integer]],voiceGroupHash--[[@param voiceGroupHash integer]])return InvokeVoid(0x0BABC1345ABBFB16,ped,voiceGroupHash)end;
	--[=[BOOL p1: 0 = Female; 1 = Male]=]
	SetPedGender=function(ped--[[@param ped integer]],p1--[[@param p1 boolean]])return InvokeVoid(0xA5342D390CDA41D6,ped,p1)end;
	StopCurrentPlayingSpeech=function(ped--[[@param ped integer]])return InvokeVoid(0x7A73D05A607734C7,ped)end;
	StopCurrentPlayingAmbientSpeech=function(ped--[[@param ped integer]])return InvokeVoid(0xB8BEC0CA6F0EDB0F,ped)end;
	IsAmbientSpeechPlaying=function(ped--[[@param ped integer]])return InvokeBool(0x9072C8B49907BFAD,ped)end;---@return boolean
	IsScriptedSpeechPlaying=function(p0--[[@param p0 integer]])return InvokeBool(0xCC9AA18DCC7084F4,p0)end;---@return boolean
	IsAnySpeechPlaying=function(ped--[[@param ped integer]])return InvokeBool(0x729072355FA39EC9,ped)end;---@return boolean
	IsAnyPositionalSpeechPlaying=function()return InvokeBool(0x30CA2EF91D15ADF8)end;---@return boolean
	--[=[Checks if the ped can play the speech or has the speech file, p2 is usually false.]=]
	DoesContextExistForThisPed=function(ped--[[@param ped integer]],speechName--[[@param speechName string]],p2--[[@param p2 boolean]])return InvokeBool(0x49B99BF3FDA89A7A,ped,speechName,p2)end;---@return boolean
	IsPedInCurrentConversation=function(ped--[[@param ped integer]])return InvokeBool(0x049E937F18F4020C,ped)end;---@return boolean
	--[=[Sets the ped drunk sounds.  Only works with PLAYER_PED_ID

====================================================

As mentioned above, this only sets the drunk sound to ped/player.

To give the Ped a drunk effect with drunk walking animation try using SET_PED_MOVEMENT_CLIPSET

Below is an example

if (!Function.Call<bool>(Hash.HAS_ANIM_SET_LOADED, "move_m@drunk@verydrunk"))
                {
                    Function.Call(Hash.REQUEST_ANIM_SET, "move_m@drunk@verydrunk");
                }
                Function.Call(Hash.SET_PED_MOVEMENT_CLIPSET, Ped.Handle, "move_m@drunk@verydrunk", 0x3E800000);



And to stop the effect use
RESET_PED_MOVEMENT_CLIPSET]=]
	SetPedIsDrunk=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x95D2D383D5396B8A,ped,toggle)end;
	--[=[Plays sounds from a ped with chop model. For example it used to play bark or sniff sounds. p1 is always 3 or 4294967295 in decompiled scripts. By a quick disassembling I can assume that this arg is unused.
This native is works only when you call it on the ped with right model (ac_chop only ?)
Speech Name can be: CHOP_SNIFF_SEQ CHOP_WHINE CHOP_LICKS_MOUTH CHOP_PANT bark GROWL SNARL BARK_SEQ]=]
	PlayAnimalVocalization=function(pedHandle--[[@param pedHandle integer]],p1--[[@param p1 integer]],speechName--[[@param speechName string]])return InvokeVoid(0xEE066C7006C49C0A,pedHandle,p1,speechName)end;
	IsAnimalVocalizationPlaying=function(pedHandle--[[@param pedHandle integer]])return InvokeBool(0xC265DF9FB44A9FBD,pedHandle)end;---@return boolean
	--[=[mood can be 0 or 1 (it's not a boolean value!). Effects audio of the animal.]=]
	SetAnimalMood=function(animal--[[@param animal integer]],mood--[[@param mood integer]])return InvokeVoid(0xCC97B29285B1DC3B,animal,mood)end;
	IsMobilePhoneRadioActive=function()return InvokeBool(0xB35CE999E8EF317E)end;---@return boolean
	SetMobilePhoneRadioState=function(state--[[@param state boolean]])return InvokeVoid(0xBF286C554784F3DF,state)end;
	--[=[Returns 255 (radio off index) if the function fails.]=]
	GetPlayerRadioStationIndex=function()return InvokeInt(0xE8AF77C4C06ADC93)end;---@return integer
	--[=[Returns active radio station name]=]
	GetPlayerRadioStationName=function()return InvokeString(0xF6D733C32076AD03)end;---@return string
	--[=[Converts radio station index to string. Use HUD::GET_FILENAME_FOR_AUDIO_CONVERSATION to get the user-readable text.]=]
	GetRadioStationName=function(radioStation--[[@param radioStation integer]])return InvokeString(0xB28ECA15046CA8B9,radioStation)end;---@return string
	GetPlayerRadioStationGenre=function()return InvokeInt(0xA571991A7FE6CCEB)end;---@return integer
	IsRadioRetuning=function()return InvokeBool(0xA151A7394A214E65)end;---@return boolean
	IsRadioFadedOut=function()return InvokeBool(0x0626A247D2405330)end;---@return boolean
	--[=[Tune Forward...]=]
	SetRadioRetuneUp=function()return InvokeVoid(0xFF266D1D0EB1195D)end;
	--[=[Tune Backwards...]=]
	SetRadioRetuneDown=function()return InvokeVoid(0xDD6BCF9E94425DF9)end;
	--[=[List of radio stations that are in the wheel, in clockwise order, as of LS Tuners DLC: https://git.io/J8a3k
An older list including hidden radio stations: https://pastebin.com/Kj9t38KF]=]
	SetRadioToStationName=function(stationName--[[@param stationName string]])return InvokeVoid(0xC69EDA28699D5107,stationName)end;
	--[=[List of radio stations that are in the wheel, in clockwise order, as of LS Tuners DLC: https://git.io/J8a3k
An older list including hidden radio stations: https://pastebin.com/Kj9t38KF]=]
	SetVehRadioStation=function(vehicle--[[@param vehicle integer]],radioStation--[[@param radioStation string]])return InvokeVoid(0x1B9C0099CB942AC6,vehicle,radioStation)end;
	SetVehHasNormalRadio=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0x3E45765F3FBB582F,vehicle)end;
	IsVehicleRadioOn=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x0BE4BE946463F917,vehicle)end;---@return boolean
	SetVehForcedRadioThisFrame=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0xC1805D05E6D4FE10,vehicle)end;
	--[=[Full list of static emitters by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/staticEmitters.json]=]
	SetEmitterRadioStation=function(emitterName--[[@param emitterName string]],radioStation--[[@param radioStation string]],p2--[[@param p2 any]])return InvokeVoid(0xACF57305B12AF907,emitterName,radioStation,p2)end;
	--[=[Example:
AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_01_STAGE", false);    AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_02_MAIN_ROOM", false);    AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_03_BACK_ROOM", false);

This turns off surrounding sounds not connected directly to peds.

Full list of static emitters by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/staticEmitters.json]=]
	SetStaticEmitterEnabled=function(emitterName--[[@param emitterName string]],toggle--[[@param toggle boolean]])return InvokeVoid(0x399D2D3B33F1B8EB,emitterName,toggle)end;
	--[=[Full list of static emitters by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/staticEmitters.json]=]
	LinkStaticEmitterToEntity=function(emitterName--[[@param emitterName string]],entity--[[@param entity integer]])return InvokeVoid(0x651D3228960D08AF,emitterName,entity)end;
	--[=[Sets radio station by index.]=]
	SetRadioToStationIndex=function(radioStation--[[@param radioStation integer]])return InvokeVoid(0xA619B168B8A8570F,radioStation)end;
	SetFrontendRadioActive=function(active--[[@param active boolean]])return InvokeVoid(0xF7F26C6E9CC9EBB8,active)end;
	--[=["news" that play on the radio after you've done something in story mode(?)]=]
	UnlockMissionNewsStory=function(newsStory--[[@param newsStory integer]])return InvokeVoid(0xB165AB7C248B2DC1,newsStory)end;
	IsMissionNewsStoryUnlocked=function(newsStory--[[@param newsStory integer]])return InvokeBool(0x66E49BF55B4B1874,newsStory)end;---@return boolean
	GetAudibleMusicTrackTextId=function()return InvokeInt(0x50B196FC9ED6545B)end;---@return integer
	PlayEndCreditsMusic=function(play--[[@param play boolean]])return InvokeVoid(0xCD536C4D33DCC900,play)end;
	SkipRadioForward=function()return InvokeVoid(0x6DDBBDD98E2E9C25)end;
	FreezeRadioStation=function(radioStation--[[@param radioStation string]])return InvokeVoid(0x344F393B027E38C3,radioStation)end;
	UnfreezeRadioStation=function(radioStation--[[@param radioStation string]])return InvokeVoid(0xFC00454CF60B91DD,radioStation)end;
	SetRadioAutoUnfreeze=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xC1AA9F53CE982990,toggle)end;
	SetInitialPlayerStation=function(radioStation--[[@param radioStation string]])return InvokeVoid(0x88795F13FACDA88D,radioStation)end;
	SetUserRadioControlEnabled=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x19F21E63AE6EAE4E,toggle)end;
	--[=[Only found this one in the decompiled scripts:

AUDIO::SET_RADIO_TRACK("RADIO_03_HIPHOP_NEW", "ARM1_RADIO_STARTS");
]=]
	SetRadioTrack=function(radioStation--[[@param radioStation string]],radioTrack--[[@param radioTrack string]])return InvokeVoid(0xB39786F201FEE30B,radioStation,radioTrack)end;
	SetRadioTrackWithStartOffset=function(radioStationName--[[@param radioStationName string]],mixName--[[@param mixName string]],p2--[[@param p2 integer]])return InvokeVoid(0x2CB0075110BE1E56,radioStationName,mixName,p2)end;
	SetNextRadioTrack=function(radioName--[[@param radioName string]],radioTrack--[[@param radioTrack string]],p2--[[@param p2 string]],p3--[[@param p3 string]])return InvokeVoid(0x55ECF4D13D9903B0,radioName,radioTrack,p2,p3)end;
	SetVehicleRadioLoud=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xBB6F1CAEC68B0BCE,vehicle,toggle)end;
	CanVehicleReceiveCbRadio=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x032A116663A4D5AC,vehicle)end;---@return boolean
	SetMobileRadioEnabledDuringGameplay=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x1098355A16064BB3,toggle)end;
	DoesPlayerVehHaveRadio=function()return InvokeBool(0x109697E2FFBAC8A1)end;---@return boolean
	IsPlayerVehRadioEnable=function()return InvokeBool(0x5F43D83FD6738741)end;---@return boolean
	--[=[can't seem to enable radio on cop cars etc]=]
	SetVehicleRadioEnabled=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x3B988190C0AA6C0B,vehicle,toggle)end;
	SetPositionedPlayerVehicleRadioEmitterEnabled=function(p0--[[@param p0 any]])return InvokeVoid(0xDA07819E452FFE8F,p0)end;
	--[=[Examples:

AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_KILL_MICHAEL", 1);
AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_KILL_MICHAEL", 1);
AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_KILL_TREVOR", 1);
AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_SAVE_MICHAEL_TREVOR", 1);
AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "OFF_ROAD_RADIO_ROCK_LIST", 1);
AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_06_COUNTRY", "MAGDEMO2_RADIO_DINGHY", 1);
AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_16_SILVERLAKE", "SEA_RACE_RADIO_PLAYLIST", 1);
AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "OFF_ROAD_RADIO_ROCK_LIST", 1);]=]
	SetCustomRadioTrackList=function(radioStation--[[@param radioStation string]],trackListName--[[@param trackListName string]],p2--[[@param p2 boolean]])return InvokeVoid(0x4E404A9361F75BB2,radioStation,trackListName,p2)end;
	--[=[3 calls in the b617d scripts, removed duplicate.

AUDIO::CLEAR_CUSTOM_RADIO_TRACK_LIST("RADIO_16_SILVERLAKE");
AUDIO::CLEAR_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK");]=]
	ClearCustomRadioTrackList=function(radioStation--[[@param radioStation string]])return InvokeVoid(0x1654F24A88A8E3FE,radioStation)end;
	GetNumUnlockedRadioStations=function()return InvokeInt(0xF1620ECB50E01DE7)end;---@return integer
	FindRadioStationIndex=function(stationNameHash--[[@param stationNameHash integer]])return InvokeInt(0x8D67489793FF428B,stationNameHash)end;---@return integer
	--[=[6 calls in the b617d scripts, removed identical lines:

AUDIO::SET_RADIO_STATION_MUSIC_ONLY("RADIO_01_CLASS_ROCK", 1);
AUDIO::SET_RADIO_STATION_MUSIC_ONLY(AUDIO::GET_RADIO_STATION_NAME(10), 0);
AUDIO::SET_RADIO_STATION_MUSIC_ONLY(AUDIO::GET_RADIO_STATION_NAME(10), 1);]=]
	SetRadioStationMusicOnly=function(radioStation--[[@param radioStation string]],toggle--[[@param toggle boolean]])return InvokeVoid(0x774BD811F656A122,radioStation,toggle)end;
	SetRadioFrontendFadeTime=function(fadeTime--[[@param fadeTime number]])return InvokeVoid(0x2C96CDB04FCA358E,fadeTime+.0)end;
	--[=[AUDIO::UNLOCK_RADIO_STATION_TRACK_LIST("RADIO_16_SILVERLAKE", "MIRRORPARK_LOCKED");]=]
	UnlockRadioStationTrackList=function(radioStation--[[@param radioStation string]],trackListName--[[@param trackListName string]])return InvokeVoid(0x031ACB6ABA18C729,radioStation,trackListName)end;
	LockRadioStationTrackList=function(radioStation--[[@param radioStation string]],trackListName--[[@param trackListName string]])return InvokeVoid(0xFF5E5EA2DCEEACF3,radioStation,trackListName)end;
	--[=[Just a nullsub (i.e. does absolutely nothing) since build 1604.]=]
	UpdateUnlockableDjRadioTracks=function(enableMixes--[[@param enableMixes boolean]])return InvokeVoid(0x47AED84213A47510,enableMixes)end;
	--[=[Disables the radio station (hides it from the radio wheel).]=]
	LockRadioStation=function(radioStationName--[[@param radioStationName string]],toggle--[[@param toggle boolean]])return InvokeVoid(0x477D9DB48F889591,radioStationName,toggle)end;
	--[=[Doesn't have an effect in Story Mode.]=]
	SetRadioStationAsFavourite=function(radioStation--[[@param radioStation string]],toggle--[[@param toggle boolean]])return InvokeVoid(0x4CAFEBFA21EC188D,radioStation,toggle)end;
	IsRadioStationFavourited=function(radioStation--[[@param radioStation string]])return InvokeBool(0x2B1784DB08AFEA79,radioStation)end;---@return boolean
	GetNextAudibleBeat=function(out1--[[@param out1 number*]],out2--[[@param out2 number*]],out3--[[@param out3 integer*]])return InvokeBool(0xC64A06D939F826F5,out1,out2,out3)end;---@return boolean
	--[=[Changes start time of a tracklist (milliseconds)
R* uses a random int: MISC::GET_RANDOM_INT_IN_RANGE(0, 13) * 60000)]=]
	ForceMusicTrackList=function(radioStation--[[@param radioStation string]],trackListName--[[@param trackListName string]],milliseconds--[[@param milliseconds integer]])return InvokeVoid(0x4E0AF9114608257C,radioStation,trackListName,milliseconds)end;
	GetCurrentTrackPlayTime=function(radioStationName--[[@param radioStationName string]])return InvokeInt(0x3E65CDE5215832C1,radioStationName)end;---@return integer
	GetCurrentTrackSoundName=function(radioStationName--[[@param radioStationName string]])return InvokeInt(0x34D66BC058019CE0,radioStationName)end;---@return integer
	SetVehicleMissileWarningEnabled=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xF3365489E0DD50F9,vehicle,toggle)end;
	--[=[Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json]=]
	SetAmbientZoneState=function(zoneName--[[@param zoneName string]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0xBDA07E5950085E46,zoneName,p1,p2)end;
	--[=[This function also has a p2, unknown. Signature AUDIO::CLEAR_AMBIENT_ZONE_STATE(const char* zoneName, bool p1, Any p2);

Still needs more research.

Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json]=]
	ClearAmbientZoneState=function(zoneName--[[@param zoneName string]],p1--[[@param p1 boolean]])return InvokeVoid(0x218DD44AAAC964FF,zoneName,p1)end;
	SetAmbientZoneListState=function(ambientZone--[[@param ambientZone string]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0x9748FA4DE50CCE3E,ambientZone,p1,p2)end;
	ClearAmbientZoneListState=function(ambientZone--[[@param ambientZone string]],p1--[[@param p1 boolean]])return InvokeVoid(0x120C48C614909FA4,ambientZone,p1)end;
	--[=[Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json]=]
	SetAmbientZoneStatePersistent=function(ambientZone--[[@param ambientZone string]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0x1D6650420CEC9D3B,ambientZone,p1,p2)end;
	--[=[Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json]=]
	SetAmbientZoneListStatePersistent=function(ambientZone--[[@param ambientZone string]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0xF3638DAE8C4045E1,ambientZone,p1,p2)end;
	--[=[Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json]=]
	IsAmbientZoneEnabled=function(ambientZone--[[@param ambientZone string]])return InvokeBool(0x01E2817A479A7F9B,ambientZone)end;---@return boolean
	RefreshClosestOceanShoreline=function()return InvokeVoid(0x5D2BFAAB8D956E0E)end;
	--[=[All occurrences found in b617d, sorted alphabetically and identical lines removed: 

AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_AK");
AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_CUSTOM");
AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_TOOTHLESS");
Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json]=]
	SetCutsceneAudioOverride=function(name--[[@param name string]])return InvokeVoid(0x3B4BF5F0859204D9,name)end;
	SetVariableOnSynchSceneAudio=function(variableName--[[@param variableName string]],value--[[@param value number]])return InvokeVoid(0xBCC29F935ED07688,variableName,value+.0)end;
	--[=[Plays the given police radio message.

All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/GBnsQ5hr
Full list of police report names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/policeReportNames.json]=]
	PlayPoliceReport=function(name--[[@param name string]],p1--[[@param p1 number]])return InvokeInt(0xDFEBD56D9BD1EB16,name,p1+.0)end;---@return integer
	CancelAllPoliceReports=function()return InvokeVoid(0xB4F90FAF7670B16F)end;
	--[=[Plays the siren sound of a vehicle which is otherwise activated when fastly double-pressing the horn key.
Only works on vehicles with a police siren.]=]
	BlipSiren=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0x1B9025BDA76822B6,vehicle)end;
	--[=[Overrides the vehicle's horn hash.
When changing this hash on a vehicle, it will not return the 'overwritten' hash. It will still always return the default horn hash (same as GET_VEHICLE_DEFAULT_HORN)

vehicle - the vehicle whose horn should be overwritten
mute - p1 seems to be an option for muting the horn
p2 - maybe a horn id, since the function AUDIO::GET_VEHICLE_DEFAULT_HORN(veh) exists?]=]
	OverrideVehHorn=function(vehicle--[[@param vehicle integer]],override--[[@param override boolean]],hornHash--[[@param hornHash integer]])return InvokeVoid(0x3CDC1E622CCE0356,vehicle,override,hornHash)end;
	--[=[Checks whether the horn of a vehicle is currently played.]=]
	IsHornActive=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x9D6BFC12B05C6121,vehicle)end;---@return boolean
	--[=[Makes pedestrians sound their horn longer, faster and more agressive when they use their horn.]=]
	SetAggressiveHorns=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x395BF71085D1B1D9,toggle)end;
	--[=[Does nothing (it's a nullsub).]=]
	SetRadioPositionAudioMute=function(p0--[[@param p0 boolean]])return InvokeVoid(0x02E93C796ABD3A97,p0)end;
	--[=[SET_VEHICLE_CONVERSATIONS_PERSIST?]=]
	SetVehicleConversationsPersist=function(p0--[[@param p0 boolean]],p1--[[@param p1 boolean]])return InvokeVoid(0x58BB377BEC7CD5F4,p0,p1)end;
	SetVehicleConversationsPersistNew=function(p0--[[@param p0 boolean]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0x9BD7BD55E4533183,p0,p1,p2)end;
	IsStreamPlaying=function()return InvokeBool(0xD11FA52EB849D978)end;---@return boolean
	GetStreamPlayTime=function()return InvokeInt(0x4E72BBDBCA58A3DB)end;---@return integer
	--[=[Example:
AUDIO::LOAD_STREAM("CAR_STEAL_1_PASSBY", "CAR_STEAL_1_SOUNDSET");

All found occurrences in the b678d decompiled scripts: https://pastebin.com/3rma6w5w

Stream names often ends with "_MASTER", "_SMALL" or "_STREAM". Also "_IN", "_OUT" and numbers.   

soundSet is often set to 0 in the scripts. These are common to end the soundSets: "_SOUNDS", "_SOUNDSET" and numbers.

Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json]=]
	LoadStream=function(streamName--[[@param streamName string]],soundSet--[[@param soundSet string]])return InvokeBool(0x1F1F957154EC51DF,streamName,soundSet)end;---@return boolean
	--[=[Example:
AUDIO::LOAD_STREAM_WITH_START_OFFSET("STASH_TOXIN_STREAM", 2400, "FBI_05_SOUNDS");

Only called a few times in the scripts.

Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json]=]
	LoadStreamWithStartOffset=function(streamName--[[@param streamName string]],startOffset--[[@param startOffset integer]],soundSet--[[@param soundSet string]])return InvokeBool(0x59C16B79F53B3712,streamName,startOffset,soundSet)end;---@return boolean
	PlayStreamFromPed=function(ped--[[@param ped integer]])return InvokeVoid(0x89049DD63C08B5D1,ped)end;
	PlayStreamFromVehicle=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0xB70374A758007DFA,vehicle)end;
	--[=[Used with AUDIO::LOAD_STREAM

Example from finale_heist2b.c4:
TASK::TASK_SYNCHRONIZED_SCENE(l_4C8[2/*14*/], l_4C8[2/*14*/]._f7, l_30A, "push_out_vault_l", 4.0, -1.5, 5, 713, 4.0, 0);
                    PED::SET_SYNCHRONIZED_SCENE_PHASE(l_4C8[2/*14*/]._f7, 0.0);
                    PED::FORCE_PED_AI_AND_ANIMATION_UPDATE(l_4C8[2/*14*/], 0, 0);
                    PED::SET_PED_COMBAT_ATTRIBUTES(l_4C8[2/*14*/], 38, 1);
                    PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(l_4C8[2/*14*/], 1);
                    if (AUDIO::LOAD_STREAM("Gold_Cart_Push_Anim_01", "BIG_SCORE_3B_SOUNDS")) {
                        AUDIO::PLAY_STREAM_FROM_OBJECT(l_36F[0/*1*/]);
                    }]=]
	PlayStreamFromObject=function(object--[[@param object integer]])return InvokeVoid(0xEBAA9B64D76356FD,object)end;
	PlayStreamFrontend=function()return InvokeVoid(0x58FCE43488F9F5F4)end;
	PlayStreamFromPosition=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0x21442F412E8DE56B,x+.0,y+.0,z+.0)end;
	StopStream=function()return InvokeVoid(0xA4718A1419D18151)end;
	StopPedSpeaking=function(ped--[[@param ped integer]],shaking--[[@param shaking boolean]])return InvokeVoid(0x9D64D7405520E3D3,ped,shaking)end;
	BlockAllSpeechFromPed=function(ped--[[@param ped integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0xF8AD2EED7C47E8FE,ped,p1,p2)end;
	StopPedSpeakingSynced=function(ped--[[@param ped integer]],p1--[[@param p1 boolean]])return InvokeVoid(0xAB6781A5F3101470,ped,p1)end;
	DisablePedPainAudio=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xA9A41C1E940FB0E8,ped,toggle)end;
	--[=[Common in the scripts:
AUDIO::IS_AMBIENT_SPEECH_DISABLED(PLAYER::PLAYER_PED_ID());]=]
	IsAmbientSpeechDisabled=function(ped--[[@param ped integer]])return InvokeBool(0x932C2D096A2C3FFF,ped)end;---@return boolean
	BlockSpeechContextGroup=function(p0--[[@param p0 string]],p1--[[@param p1 integer]])return InvokeVoid(0xA8A7D434AFB4B97B,p0,p1)end;
	UnblockSpeechContextGroup=function(p0--[[@param p0 string]])return InvokeVoid(0x2ACABED337622DF2,p0)end;
	SetSirenWithNoDriver=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x1FEF0683B96EBCF2,vehicle,toggle)end;
	SetSirenBypassMpDriverCheck=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xF584CF8529B51434,vehicle,toggle)end;
	TriggerSirenAudio=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0x66C3FB05206041BA,vehicle)end;
	SetHornPermanentlyOn=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0x9C11908013EA4715,vehicle)end;
	SetHornEnabled=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x76D683C108594D0E,vehicle,toggle)end;
	SetAudioVehiclePriority=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 any]])return InvokeVoid(0xE5564483E407F914,vehicle,p1)end;
	SetHornPermanentlyOnTime=function(vehicle--[[@param vehicle integer]],time--[[@param time number]])return InvokeVoid(0x9D3AF56E94C9AE98,vehicle,time+.0)end;
	UseSirenAsHorn=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xFA932DE350266EF8,vehicle,toggle)end;
	--[=[This native sets the audio of the specified vehicle to the audioName (p1).

Use the audioNameHash found in vehicles.meta

Example:
_SET_VEHICLE_AUDIO(veh, "ADDER");
The selected vehicle will now have the audio of the Adder.]=]
	ForceUseAudioGameObject=function(vehicle--[[@param vehicle integer]],audioName--[[@param audioName string]])return InvokeVoid(0x4F0C413926060B38,vehicle,audioName)end;
	PreloadVehicleAudioBank=function(vehicleModel--[[@param vehicleModel integer]])return InvokeVoid(0xCA4CEA6AE0000A7E,vehicleModel)end;
	SetVehicleStartupRevSound=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 string]],p2--[[@param p2 string]])return InvokeVoid(0xF1F8157B8C3F171C,vehicle,p1,p2)end;
	ResetVehicleStartupRevSound=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0xD2DCCD8E16E20997,vehicle)end;
	SetVehicleForceReverseWarning=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x97FFB4ADEED08066,p0,p1)end;
	IsVehicleAudiblyDamaged=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x5DB8010EE71FDEF2,vehicle)end;---@return boolean
	SetVehicleAudioEngineDamageFactor=function(vehicle--[[@param vehicle integer]],damageFactor--[[@param damageFactor number]])return InvokeVoid(0x59E7B488451F4D3A,vehicle,damageFactor+.0)end;
	--[=[intensity: 0.0f - 1.0f, only used once with 1.0f in R* Scripts (nigel2)
Makes an engine rattling noise when you decelerate, you need to be going faster to hear lower values]=]
	SetVehicleAudioBodyDamageFactor=function(vehicle--[[@param vehicle integer]],intensity--[[@param intensity number]])return InvokeVoid(0x01BB4D577D38BD9E,vehicle,intensity+.0)end;
	EnableVehicleFanbeltDamage=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x1C073274E065C6D2,vehicle,toggle)end;
	EnableVehicleExhaustPops=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x2BE4BC731D039D5A,vehicle,toggle)end;
	--[=[SET_VEHICLE_BOOST_ACTIVE(vehicle, 1, 0);
SET_VEHICLE_BOOST_ACTIVE(vehicle, 0, 0); 

Will give a boost-soundeffect.]=]
	SetVehicleBoostActive=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x4A04DE7CAB2739A1,vehicle,toggle)end;
	SetPlayerVehicleAlarmAudioActive=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x6FDDAD856E36988A,vehicle,toggle)end;
	SetScriptUpdateDoorAudio=function(doorHash--[[@param doorHash integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x06C0023BED16DD6B,doorHash,toggle)end;
	--[=[doorId: see SET_VEHICLE_DOOR_SHUT]=]
	PlayVehicleDoorOpenSound=function(vehicle--[[@param vehicle integer]],doorId--[[@param doorId integer]])return InvokeVoid(0x3A539D52857EA82D,vehicle,doorId)end;
	--[=[doorId: see SET_VEHICLE_DOOR_SHUT]=]
	PlayVehicleDoorCloseSound=function(vehicle--[[@param vehicle integer]],doorId--[[@param doorId integer]])return InvokeVoid(0x62A456AA4769EF34,vehicle,doorId)end;
	--[=[Works for planes only.]=]
	EnableStallWarningSounds=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xC15907D667F7CFB2,vehicle,toggle)end;
	--[=[Hardcoded to return 1]=]
	IsGameInControlOfMusic=function()return InvokeBool(0x6D28DC1671E334FD)end;---@return boolean
	SetGpsActive=function(active--[[@param active boolean]])return InvokeVoid(0x3BD3F52BA9B1E4E8,active)end;
	--[=[Called 38 times in the scripts. There are 5 different audioNames used.
 One unknown removed below.

AUDIO::PLAY_MISSION_COMPLETE_AUDIO("DEAD");
AUDIO::PLAY_MISSION_COMPLETE_AUDIO("FRANKLIN_BIG_01");
AUDIO::PLAY_MISSION_COMPLETE_AUDIO("GENERIC_FAILED");
AUDIO::PLAY_MISSION_COMPLETE_AUDIO("TREVOR_SMALL_01");]=]
	PlayMissionCompleteAudio=function(audioName--[[@param audioName string]])return InvokeVoid(0xB138AAB8A70D3C69,audioName)end;
	IsMissionCompletePlaying=function()return InvokeBool(0x19A30C23F5827F8A)end;---@return boolean
	IsMissionCompleteReadyForUi=function()return InvokeBool(0x6F259F82D873B8B8)end;---@return boolean
	BlockDeathJingle=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xF154B8D1775B2DEC,toggle)end;
	--[=[Used to prepare a scene where the surrounding sound is muted or a bit changed. This does not play any sound.

List of all usable scene names found in b617d. Sorted alphabetically and identical names removed: https://pastebin.com/MtM9N9CC
Full list of audio scene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/audioSceneNames.json]=]
	StartAudioScene=function(scene--[[@param scene string]])return InvokeBool(0x013A80FC08F6E4F2,scene)end;---@return boolean
	--[=[Full list of audio scene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/audioSceneNames.json]=]
	StopAudioScene=function(scene--[[@param scene string]])return InvokeVoid(0xDFE8422B3B94E688,scene)end;
	--[=[??]=]
	StopAudioScenes=function()return InvokeVoid(0xBAC7FC81A75EC1A1)end;
	--[=[Full list of audio scene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/audioSceneNames.json]=]
	IsAudioSceneActive=function(scene--[[@param scene string]])return InvokeBool(0xB65B60556E2A9225,scene)end;---@return boolean
	--[=[Full list of audio scene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/audioSceneNames.json]=]
	SetAudioSceneVariable=function(scene--[[@param scene string]],variable--[[@param variable string]],value--[[@param value number]])return InvokeVoid(0xEF21A9EF089A2668,scene,variable,value+.0)end;
	SetAudioScriptCleanupTime=function(time--[[@param time integer]])return InvokeVoid(0xA5F377B175A699C5,time)end;
	--[=[All found occurrences in b678d:
https://pastebin.com/ceu67jz8]=]
	AddEntityToAudioMixGroup=function(entity--[[@param entity integer]],groupName--[[@param groupName string]],p2--[[@param p2 number]])return InvokeVoid(0x153973AB99FE8980,entity,groupName,p2+.0)end;
	RemoveEntityFromAudioMixGroup=function(entity--[[@param entity integer]],p1--[[@param p1 number]])return InvokeVoid(0x18EB48CFC41F2EA0,entity,p1+.0)end;
	AudioIsMusicPlaying=function()return InvokeBool(0x845FFC3A4FEEFA3E)end;---@return boolean
	--[=[This is an alias of AUDIO_IS_MUSIC_PLAYING.]=]
	AudioIsScriptedMusicPlaying=function()return InvokeBool(0x2DD39BF3E2F9C47F)end;---@return boolean
	--[=[All music event names found in the b617d scripts: https://pastebin.com/GnYt0R3P
Full list of music event names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/musicEventNames.json]=]
	PrepareMusicEvent=function(eventName--[[@param eventName string]])return InvokeBool(0x1E5185B72EF5158A,eventName)end;---@return boolean
	--[=[All music event names found in the b617d scripts: https://pastebin.com/GnYt0R3P
Full list of music event names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/musicEventNames.json]=]
	CancelMusicEvent=function(eventName--[[@param eventName string]])return InvokeBool(0x5B17A90291133DA5,eventName)end;---@return boolean
	--[=[List of all usable event names found in b617d used with this native. Sorted alphabetically and identical names removed: https://pastebin.com/RzDFmB1W

All music event names found in the b617d scripts: https://pastebin.com/GnYt0R3P
Full list of music event names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/musicEventNames.json]=]
	TriggerMusicEvent=function(eventName--[[@param eventName string]])return InvokeBool(0x706D57B0F50DA710,eventName)end;---@return boolean
	IsMusicOneshotPlaying=function()return InvokeBool(0xA097AB275061FB21)end;---@return boolean
	GetMusicPlaytime=function()return InvokeInt(0xE7A0D23DC414507B)end;---@return integer
	SetGlobalRadioSignalLevel=function(p0--[[@param p0 any]])return InvokeVoid(0x159B7318403A1CD8,p0)end;
	RecordBrokenGlass=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]])return InvokeVoid(0xFBE20329593DEC9D,x+.0,y+.0,z+.0,radius+.0)end;
	ClearAllBrokenGlass=function()return InvokeVoid(0xB32209EFFDC04913)end;
	ScriptOverridesWindElevation=function(p0--[[@param p0 boolean]],p1--[[@param p1 any]])return InvokeVoid(0x70B8EC8FC108A634,p0,p1)end;
	SetPedWallaDensity=function(p0--[[@param p0 number]],p1--[[@param p1 number]])return InvokeVoid(0x149AEE66F0CB3A99,p0+.0,p1+.0)end;
	SetPedInteriorWallaDensity=function(p0--[[@param p0 number]],p1--[[@param p1 number]])return InvokeVoid(0x8BF907833BE275DE,p0+.0,p1+.0)end;
	ForcePedPanicWalla=function()return InvokeVoid(0x062D5EAD4DA2FA6A)end;
	--[=[Example:

bool prepareAlarm = AUDIO::PREPARE_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS");
Full list of alarm names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/alarmSounds.json]=]
	PrepareAlarm=function(alarmName--[[@param alarmName string]])return InvokeBool(0x9D74AE343DB65533,alarmName)end;---@return boolean
	--[=[Example:

This will start the alarm at Fort Zancudo.

AUDIO::START_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS", 1);

First parameter (char) is the name of the alarm.
Second parameter (bool) is unknown, it does not seem to make a difference if this one is 0 or 1.

----------

It DOES make a difference but it has to do with the duration or something I dunno yet

----------

 Found in the b617d scripts:

 AUDIO::START_ALARM("AGENCY_HEIST_FIB_TOWER_ALARMS", 0);
 AUDIO::START_ALARM("AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER", 1);
 AUDIO::START_ALARM("AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER_B", 0);
 AUDIO::START_ALARM("BIG_SCORE_HEIST_VAULT_ALARMS", a_0);
 AUDIO::START_ALARM("FBI_01_MORGUE_ALARMS", 1);
 AUDIO::START_ALARM("FIB_05_BIOTECH_LAB_ALARMS", 0);
 AUDIO::START_ALARM("JEWEL_STORE_HEIST_ALARMS", 0);
 AUDIO::START_ALARM("PALETO_BAY_SCORE_ALARM", 1);
 AUDIO::START_ALARM("PALETO_BAY_SCORE_CHICKEN_FACTORY_ALARM", 0);
 AUDIO::START_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS", 1);
 AUDIO::START_ALARM("PORT_OF_LS_HEIST_SHIP_ALARMS", 0);
 AUDIO::START_ALARM("PRISON_ALARMS", 0);
 AUDIO::START_ALARM("PROLOGUE_VAULT_ALARMS", 0);
Full list of alarm names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/alarmSounds.json]=]
	StartAlarm=function(alarmName--[[@param alarmName string]],p2--[[@param p2 boolean]])return InvokeVoid(0x0355EF116C4C97B2,alarmName,p2)end;
	--[=[Example:

This will stop the alarm at Fort Zancudo.

AUDIO::STOP_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS", 1);

First parameter (char) is the name of the alarm.
Second parameter (bool) has to be true (1) to have any effect.
Full list of alarm names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/alarmSounds.json]=]
	StopAlarm=function(alarmName--[[@param alarmName string]],toggle--[[@param toggle boolean]])return InvokeVoid(0xA1CADDCD98415A41,alarmName,toggle)end;
	StopAllAlarms=function(stop--[[@param stop boolean]])return InvokeVoid(0x2F794A877ADD4C92,stop)end;
	--[=[Example:

bool playing = AUDIO::IS_ALARM_PLAYING("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS");
Full list of alarm names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/alarmSounds.json]=]
	IsAlarmPlaying=function(alarmName--[[@param alarmName string]])return InvokeBool(0x226435CB96CCFC8C,alarmName)end;---@return boolean
	--[=[Returns hash of default vehicle horn

Hash is stored in audVehicleAudioEntity]=]
	GetVehicleDefaultHorn=function(vehicle--[[@param vehicle integer]])return InvokeInt(0x02165D55000219AC,vehicle)end;---@return integer
	GetVehicleDefaultHornIgnoreMods=function(vehicle--[[@param vehicle integer]])return InvokeInt(0xACB5DCCA1EC76840,vehicle)end;---@return integer
	ResetPedAudioFlags=function(ped--[[@param ped integer]])return InvokeVoid(0xF54BB7B61036F335,ped)end;
	--[=[Enables/disables ped's "loud" footstep sound.]=]
	SetPedFootstepsEventsEnabled=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x0653B735BFBDFE87,ped,toggle)end;
	--[=[Enables/disables ped's "quiet" footstep sound.]=]
	SetPedClothEventsEnabled=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x29DA3CA8D8B2692D,ped,toggle)end;
	--[=[Sets audio flag "OverridePlayerGroundMaterial"]=]
	OverridePlayerGroundMaterial=function(hash--[[@param hash integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xD2CC78CD3D0B50F9,hash,toggle)end;
	UseFootstepScriptSweeteners=function(ped--[[@param ped integer]],p1--[[@param p1 boolean]],hash--[[@param hash integer]])return InvokeVoid(0xBF4DC1784BE94DFA,ped,p1,hash)end;
	--[=[Sets audio flag "OverrideMicrophoneSettings"]=]
	OverrideMicrophoneSettings=function(hash--[[@param hash integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x75773E11BA459E90,hash,toggle)end;
	FreezeMicrophone=function()return InvokeVoid(0xD57AAAE0E2214D11)end;
	--[=[If value is set to true, and ambient siren sound will be played.
Appears to enable/disable an audio flag.]=]
	DistantCopCarSirens=function(value--[[@param value boolean]])return InvokeVoid(0x552369F549563AD5,value)end;
	SetSirenCanBeControlledByAudio=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 boolean]])return InvokeVoid(0x43FA0DFC5DF87815,vehicle,p1)end;
	EnableStuntJumpAudio=function()return InvokeVoid(0xB81CF134AEB56FFB)end;
	--[=[Possible flag names:
"ActivateSwitchWheelAudio"
"AllowAmbientSpeechInSlowMo"
"AllowCutsceneOverScreenFade"
"AllowForceRadioAfterRetune"
"AllowPainAndAmbientSpeechToPlayDuringCutscene"
"AllowPlayerAIOnMission"
"AllowPoliceScannerWhenPlayerHasNoControl"
"AllowRadioDuringSwitch"
"AllowRadioOverScreenFade"
"AllowScoreAndRadio"
"AllowScriptedSpeechInSlowMo"
"AvoidMissionCompleteDelay"
"DisableAbortConversationForDeathAndInjury"
"DisableAbortConversationForRagdoll"
"DisableBarks"
"DisableFlightMusic"
"DisableReplayScriptStreamRecording"
"EnableHeadsetBeep"
"ForceConversationInterrupt"
"ForceSeamlessRadioSwitch"
"ForceSniperAudio"
"FrontendRadioDisabled"
"HoldMissionCompleteWhenPrepared"
"IsDirectorModeActive"
"IsPlayerOnMissionForSpeech"
"ListenerReverbDisabled"
"LoadMPData"
"MobileRadioInGame"
"OnlyAllowScriptTriggerPoliceScanner"
"PlayMenuMusic"
"PoliceScannerDisabled"
"ScriptedConvListenerMaySpeak"
"SpeechDucksScore"
"SuppressPlayerScubaBreathing"
"WantedMusicDisabled"
"WantedMusicOnMission"

-------------------------------
No added flag names between b393d and b573d, including b573d.

#######################################################################

"IsDirectorModeActive" is an audio flag which will allow you to play speech infinitely without any pauses like in Director Mode.

-----------------------------------------------------------------------

All flag IDs and hashes:

ID: 00 | Hash: 0x0FED7A7F
ID: 01 | Hash: 0x20A7858F
ID: 02 | Hash: 0xA11C2259
ID: 03 | Hash: 0x08DE4700
ID: 04 | Hash: 0x989F652F
ID: 05 | Hash: 0x3C9E76BA
ID: 06 | Hash: 0xA805FEB0
ID: 07 | Hash: 0x4B94EA26
ID: 08 | Hash: 0x803ACD34
ID: 09 | Hash: 0x7C741226
ID: 10 | Hash: 0x31DB9EBD
ID: 11 | Hash: 0xDF386F18
ID: 12 | Hash: 0x669CED42
ID: 13 | Hash: 0x51F22743
ID: 14 | Hash: 0x2052B35C
ID: 15 | Hash: 0x071472DC
ID: 16 | Hash: 0xF9928BCC
ID: 17 | Hash: 0x7ADBDD48
ID: 18 | Hash: 0xA959BA1A
ID: 19 | Hash: 0xBBE89B60
ID: 20 | Hash: 0x87A08871
ID: 21 | Hash: 0xED1057CE
ID: 22 | Hash: 0x1584AD7A
ID: 23 | Hash: 0x8582CFCB
ID: 24 | Hash: 0x7E5E2FB0
ID: 25 | Hash: 0xAE4F72DB
ID: 26 | Hash: 0x5D16D1FA
ID: 27 | Hash: 0x06B2F4B8
ID: 28 | Hash: 0x5D4CDC96
ID: 29 | Hash: 0x8B5A48BA
ID: 30 | Hash: 0x98FBD539
ID: 31 | Hash: 0xD8CB0473
ID: 32 | Hash: 0x5CBB4874
ID: 33 | Hash: 0x2E9F93A9
ID: 34 | Hash: 0xD93BEA86
ID: 35 | Hash: 0x92109B7D
ID: 36 | Hash: 0xB7EC9E4D
ID: 37 | Hash: 0xCABDBB1D
ID: 38 | Hash: 0xB3FD4A52
ID: 39 | Hash: 0x370D94E5
ID: 40 | Hash: 0xA0F7938F
ID: 41 | Hash: 0xCBE1CE81
ID: 42 | Hash: 0xC27F1271
ID: 43 | Hash: 0x9E3258EB
ID: 44 | Hash: 0x551CDA5B
ID: 45 | Hash: 0xCB6D663C
ID: 46 | Hash: 0x7DACE87F
ID: 47 | Hash: 0xF9DE416F
ID: 48 | Hash: 0x882E6E9E
ID: 49 | Hash: 0x16B447E7
ID: 50 | Hash: 0xBD867739
ID: 51 | Hash: 0xA3A58604
ID: 52 | Hash: 0x7E046BBC
ID: 53 | Hash: 0xD95FDB98
ID: 54 | Hash: 0x5842C0ED
ID: 55 | Hash: 0x285FECC6
ID: 56 | Hash: 0x9351AC43
ID: 57 | Hash: 0x50032E75
ID: 58 | Hash: 0xAE6D0D59
ID: 59 | Hash: 0xD6351785
ID: 60 | Hash: 0xD25D71BC
ID: 61 | Hash: 0x1F7F6423
ID: 62 | Hash: 0xE24C3AA6
ID: 63 | Hash: 0xBFFDD2B7]=]
	SetAudioFlag=function(flagName--[[@param flagName string]],toggle--[[@param toggle boolean]])return InvokeVoid(0xB9EFD5C25018725A,flagName,toggle)end;
	--[=[p1 is always 0 in the scripts]=]
	PrepareSynchronizedAudioEvent=function(audioEvent--[[@param audioEvent string]],p1--[[@param p1 any]])return InvokeBool(0xC7ABCACA4985A766,audioEvent,p1)end;---@return boolean
	PrepareSynchronizedAudioEventForScene=function(sceneID--[[@param sceneID integer]],audioEvent--[[@param audioEvent string]])return InvokeBool(0x029FE7CD1B7E2E75,sceneID,audioEvent)end;---@return boolean
	PlaySynchronizedAudioEvent=function(sceneID--[[@param sceneID integer]])return InvokeBool(0x8B2FD4560E55DD2D,sceneID)end;---@return boolean
	StopSynchronizedAudioEvent=function(sceneID--[[@param sceneID integer]])return InvokeBool(0x92D6A88E64A94430,sceneID)end;---@return boolean
	InitSynchSceneAudioWithPosition=function(audioEvent--[[@param audioEvent string]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0xC8EDE9BDBCCBA6D4,audioEvent,x+.0,y+.0,z+.0)end;
	InitSynchSceneAudioWithEntity=function(audioEvent--[[@param audioEvent string]],entity--[[@param entity integer]])return InvokeVoid(0x950A154B8DAB6185,audioEvent,entity)end;
	--[=[Needs to be called every frame.
Audio mode to apply this frame: https://alloc8or.re/gta5/doc/enums/audSpecialEffectMode.txt]=]
	SetAudioSpecialEffectMode=function(mode--[[@param mode integer]])return InvokeVoid(0x12561FCBB62D5B9C,mode)end;
	--[=[Found in the b617d scripts, duplicates removed:  

AUDIO::SET_PORTAL_SETTINGS_OVERRIDE("V_CARSHOWROOM_PS_WINDOW_UNBROKEN", "V_CARSHOWROOM_PS_WINDOW_BROKEN");

 AUDIO::SET_PORTAL_SETTINGS_OVERRIDE("V_CIA_PS_WINDOW_UNBROKEN", "V_CIA_PS_WINDOW_BROKEN");

 AUDIO::SET_PORTAL_SETTINGS_OVERRIDE("V_DLC_HEIST_APARTMENT_DOOR_CLOSED", "V_DLC_HEIST_APARTMENT_DOOR_OPEN");

 AUDIO::SET_PORTAL_SETTINGS_OVERRIDE("V_FINALEBANK_PS_VAULT_INTACT", "V_FINALEBANK_PS_VAULT_BLOWN");

 AUDIO::SET_PORTAL_SETTINGS_OVERRIDE("V_MICHAEL_PS_BATHROOM_WITH_WINDOW", "V_MICHAEL_PS_BATHROOM_WITHOUT_WINDOW");]=]
	SetPortalSettingsOverride=function(p0--[[@param p0 string]],p1--[[@param p1 string]])return InvokeVoid(0x044DBAD7A7FA2BE5,p0,p1)end;
	--[=[ Found in the b617d scripts, duplicates removed: 

 AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE("V_CARSHOWROOM_PS_WINDOW_UNBROKEN");
 AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE("V_CIA_PS_WINDOW_UNBROKEN");
 AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE("V_DLC_HEIST_APARTMENT_DOOR_CLOSED");
 AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE("V_FINALEBANK_PS_VAULT_INTACT");
 AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE("V_MICHAEL_PS_BATHROOM_WITH_WINDOW");]=]
	RemovePortalSettingsOverride=function(p0--[[@param p0 string]])return InvokeVoid(0xB4BBFD9CD8B3922B,p0)end;
	--[=[STOP_S[MOKE_GRENADE_EXPLOSION_SOUNDS]?]=]
	StopSmokeGrenadeExplosionSounds=function()return InvokeVoid(0xE4E6DD5566D28C82)end;
	GetMusicVolSlider=function()return InvokeInt(0x3A48AB4445D499BE)end;---@return integer
	RequestTennisBanks=function(ped--[[@param ped integer]])return InvokeVoid(0x4ADA3F19BE4A6047,ped)end;
	UnrequestTennisBanks=function()return InvokeVoid(0x0150B6FF25A9E2E5)end;
	SetSkipMinigunSpinUpAudio=function(p0--[[@param p0 boolean]])return InvokeVoid(0xBEF34B1D9624D5DD,p0)end;
	StopCutsceneAudio=function()return InvokeVoid(0x806058BBDC136E06)end;
	HasLoadedMpDataSet=function()return InvokeBool(0x544810ED9DB6BBE6)end;---@return boolean
	HasLoadedSpDataSet=function()return InvokeBool(0x5B50ABB1FE3746F4)end;---@return boolean
	GetVehicleHornSoundIndex=function(vehicle--[[@param vehicle integer]])return InvokeInt(0xD53F3A29BCE2580E,vehicle)end;---@return integer
	SetVehicleHornSoundIndex=function(vehicle--[[@param vehicle integer]],value--[[@param value integer]])return InvokeVoid(0x0350E7E17BA767D0,vehicle,value)end;
}
_G.Brain={
	--[=[BRAIN::ADD_SCRIPT_TO_RANDOM_PED("pb_prostitute", ${s_f_y_hooker_01}, 100, 0);

- Nacorpio

-----

Hardcoded to not work in Multiplayer.]=]
	AddScriptToRandomPed=function(name--[[@param name string]],model--[[@param model integer]],p2--[[@param p2 number]],p3--[[@param p3 number]])return InvokeVoid(0x4EE5367468A65CCC,name,model,p2+.0,p3+.0)end;
	--[=[Registers a script for any object with a specific model hash.

BRAIN::REGISTER_OBJECT_SCRIPT_BRAIN("ob_telescope", ${prop_telescope_01}, 100, 4.0, -1, 9);

- Nacorpio]=]
	RegisterObjectScriptBrain=function(scriptName--[[@param scriptName string]],modelHash--[[@param modelHash integer]],p2--[[@param p2 integer]],activationRange--[[@param activationRange number]],p4--[[@param p4 integer]],p5--[[@param p5 integer]])return InvokeVoid(0x0BE84C318BA6EC22,scriptName,modelHash,p2,activationRange+.0,p4,p5)end;
	IsObjectWithinBrainActivationRange=function(object--[[@param object integer]])return InvokeBool(0xCCBA154209823057,object)end;---@return boolean
	RegisterWorldPointScriptBrain=function(scriptName--[[@param scriptName string]],activationRange--[[@param activationRange number]],p2--[[@param p2 integer]])return InvokeVoid(0x3CDC7136613284BD,scriptName,activationRange+.0,p2)end;
	--[=[Gets whether the world point the calling script is registered to is within desired range of the player.]=]
	IsWorldPointWithinBrainActivationRange=function()return InvokeBool(0xC5042CC6F5E3D450)end;---@return boolean
	EnableScriptBrainSet=function(brainSet--[[@param brainSet integer]])return InvokeVoid(0x67AA4D73F0CFA86B,brainSet)end;
	DisableScriptBrainSet=function(brainSet--[[@param brainSet integer]])return InvokeVoid(0x14D8518E9760F08F,brainSet)end;
	ReactivateAllWorldBrainsThatAreWaitingTillOutOfRange=function()return InvokeVoid(0x0B40ED49D7D6FF84)end;
	ReactivateAllObjectBrainsThatAreWaitingTillOutOfRange=function()return InvokeVoid(0x4D953DF78EBF8158)end;
	--[=[Possible values:

act_cinema
am_mp_carwash_launch
am_mp_carwash_control
am_mp_property_ext
chop
fairgroundHub
launcher_BasejumpHeli
launcher_BasejumpPack
launcher_CarWash
launcher_golf
launcher_Hunting_Ambient
launcher_MrsPhilips
launcher_OffroadRacing
launcher_pilotschool
launcher_Racing
launcher_rampage
launcher_rampage
launcher_range
launcher_stunts
launcher_stunts
launcher_tennis
launcher_Tonya
launcher_Triathlon
launcher_Yoga
ob_mp_bed_low
ob_mp_bed_med]=]
	ReactivateNamedWorldBrainsWaitingTillOutOfRange=function(scriptName--[[@param scriptName string]])return InvokeVoid(0x6D6840CEE8845831,scriptName)end;
	--[=[Looks like a cousin of above function _6D6840CEE8845831 as it was found among them. Must be similar

Here are possible values of argument - 

"ob_tv"
"launcher_Darts"]=]
	ReactivateNamedObjectBrainsWaitingTillOutOfRange=function(scriptName--[[@param scriptName string]])return InvokeVoid(0x6E91B04E08773030,scriptName)end;
}
_G.Cam={
	--[=[ease - smooth transition between the camera's positions
easeTime - Time in milliseconds for the transition to happen

If you have created a script (rendering) camera, and want to go back to the 
character (gameplay) camera, call this native with render set to 0.
Setting ease to 1 will smooth the transition.]=]
	RenderScriptCams=function(render--[[@param render boolean]],ease--[[@param ease boolean]],easeTime--[[@param easeTime integer]],p3--[[@param p3 boolean]],p4--[[@param p4 boolean]],p5--[[@param p5 any]])return InvokeVoid(0x07E5B515DB0636FC,render,ease,easeTime,p3,p4,p5)end;
	--[=[This native makes the gameplay camera zoom into first person/third person with a special effect.]=]
	StopRenderingScriptCamsUsingCatchUp=function(render--[[@param render boolean]],p1--[[@param p1 number]],p2--[[@param p2 integer]],p3--[[@param p3 any]])return InvokeVoid(0xC819F3CBB62BF692,render,p1+.0,p2,p3)end;
	--[=["DEFAULT_SCRIPTED_CAMERA"
"DEFAULT_ANIMATED_CAMERA"
"DEFAULT_SPLINE_CAMERA"
"DEFAULT_SCRIPTED_FLY_CAMERA"
"TIMED_SPLINE_CAMERA"]=]
	CreateCam=function(camName--[[@param camName string]],p1--[[@param p1 boolean]])return InvokeInt(0xC3981DCE61D9E13F,camName,p1)end;---@return integer
	--[=[camName is always set to "DEFAULT_SCRIPTED_CAMERA" in Rockstar's scripts.
------------
Camera names found in the b617d scripts:
"DEFAULT_ANIMATED_CAMERA"
"DEFAULT_SCRIPTED_CAMERA"
"DEFAULT_SCRIPTED_FLY_CAMERA"
"DEFAULT_SPLINE_CAMERA"
------------
Side Note: It seems p8 is basically to represent what would be the bool p1 within CREATE_CAM native. As well as the p9 since it's always 2 in scripts seems to represent what would be the last param within SET_CAM_ROT native which normally would be 2.]=]
	CreateCamWithParams=function(camName--[[@param camName string]],posX--[[@param posX number]],posY--[[@param posY number]],posZ--[[@param posZ number]],rotX--[[@param rotX number]],rotY--[[@param rotY number]],rotZ--[[@param rotZ number]],fov--[[@param fov number]],p8--[[@param p8 boolean]],p9--[[@param p9 integer]])return InvokeInt(0xB51194800B257161,camName,posX+.0,posY+.0,posZ+.0,rotX+.0,rotY+.0,rotZ+.0,fov+.0,p8,p9)end;---@return integer
	CreateCamera=function(camHash--[[@param camHash integer]],p1--[[@param p1 boolean]])return InvokeInt(0x5E3CF89C6BCCA67D,camHash,p1)end;---@return integer
	--[=[p9 uses 2 by default]=]
	CreateCameraWithParams=function(camHash--[[@param camHash integer]],posX--[[@param posX number]],posY--[[@param posY number]],posZ--[[@param posZ number]],rotX--[[@param rotX number]],rotY--[[@param rotY number]],rotZ--[[@param rotZ number]],fov--[[@param fov number]],p8--[[@param p8 boolean]],p9--[[@param p9 any]])return InvokeInt(0x6ABFA3E16460F22D,camHash,posX+.0,posY+.0,posZ+.0,rotX+.0,rotY+.0,rotZ+.0,fov+.0,p8,p9)end;---@return integer
	--[=[BOOL param indicates whether the cam should be destroyed if it belongs to the calling script.]=]
	DestroyCam=function(cam--[[@param cam integer]],bScriptHostCam--[[@param bScriptHostCam boolean]])return InvokeVoid(0x865908C81A2C22E9,cam,bScriptHostCam)end;
	--[=[BOOL param indicates whether the cam should be destroyed if it belongs to the calling script.]=]
	DestroyAllCams=function(bScriptHostCam--[[@param bScriptHostCam boolean]])return InvokeVoid(0x8E5FB15663F79120,bScriptHostCam)end;
	--[=[Returns whether or not the passed camera handle exists.]=]
	DoesCamExist=function(cam--[[@param cam integer]])return InvokeBool(0xA7A932170592B50E,cam)end;---@return boolean
	--[=[Set camera as active/inactive.]=]
	SetCamActive=function(cam--[[@param cam integer]],active--[[@param active boolean]])return InvokeVoid(0x026FB97D0A425F84,cam,active)end;
	--[=[Returns whether or not the passed camera handle is active.]=]
	IsCamActive=function(cam--[[@param cam integer]])return InvokeBool(0xDFB2B516207D3534,cam)end;---@return boolean
	IsCamRendering=function(cam--[[@param cam integer]])return InvokeBool(0x02EC0AF5C5A49B7A,cam)end;---@return boolean
	GetRenderingCam=function()return InvokeInt(0x5234F9F10919EABA)end;---@return integer
	GetCamCoord=function(cam--[[@param cam integer]])return InvokeV3(0xBAC038F7459AE5AE,cam)end;---@return V3
	--[=[The last parameter, as in other "ROT" methods, is usually 2.]=]
	GetCamRot=function(cam--[[@param cam integer]],rotationOrder--[[@param rotationOrder integer]])return InvokeV3(0x7D304C1C955E3E12,cam,rotationOrder)end;---@return V3
	GetCamFov=function(cam--[[@param cam integer]])return InvokeFloat(0xC3330A45CCCDB26A,cam)end;---@return number
	GetCamNearClip=function(cam--[[@param cam integer]])return InvokeFloat(0xC520A34DAFBF24B1,cam)end;---@return number
	GetCamFarClip=function(cam--[[@param cam integer]])return InvokeFloat(0xB60A9CFEB21CA6AA,cam)end;---@return number
	GetCamNearDof=function(cam--[[@param cam integer]])return InvokeFloat(0xC2612D223D915A1C,cam)end;---@return number
	GetCamFarDof=function(cam--[[@param cam integer]])return InvokeFloat(0x255F8DAFD540D397,cam)end;---@return number
	GetCamDofStrength=function(cam--[[@param cam integer]])return InvokeFloat(0x06D153C0B99B6128,cam)end;---@return number
	SetCamParams=function(cam--[[@param cam integer]],posX--[[@param posX number]],posY--[[@param posY number]],posZ--[[@param posZ number]],rotX--[[@param rotX number]],rotY--[[@param rotY number]],rotZ--[[@param rotZ number]],fieldOfView--[[@param fieldOfView number]],p8--[[@param p8 any]],p9--[[@param p9 integer]],p10--[[@param p10 integer]],p11--[[@param p11 integer]])return InvokeVoid(0xBFD8727AEA3CCEBA,cam,posX+.0,posY+.0,posZ+.0,rotX+.0,rotY+.0,rotZ+.0,fieldOfView+.0,p8,p9,p10,p11)end;
	--[=[Sets the position of the cam.]=]
	SetCamCoord=function(cam--[[@param cam integer]],posX--[[@param posX number]],posY--[[@param posY number]],posZ--[[@param posZ number]])return InvokeVoid(0x4D41783FB745E42E,cam,posX+.0,posY+.0,posZ+.0)end;
	--[=[Sets the rotation of the cam.
Last parameter unknown.

Last parameter seems to always be set to 2.]=]
	SetCamRot=function(cam--[[@param cam integer]],rotX--[[@param rotX number]],rotY--[[@param rotY number]],rotZ--[[@param rotZ number]],rotationOrder--[[@param rotationOrder integer]])return InvokeVoid(0x85973643155D0B07,cam,rotX+.0,rotY+.0,rotZ+.0,rotationOrder)end;
	--[=[Sets the field of view of the cam.
---------------------------------------------
Min: 1.0f
Max: 130.0f]=]
	SetCamFov=function(cam--[[@param cam integer]],fieldOfView--[[@param fieldOfView number]])return InvokeVoid(0xB13C14F66A00D047,cam,fieldOfView+.0)end;
	SetCamNearClip=function(cam--[[@param cam integer]],nearClip--[[@param nearClip number]])return InvokeVoid(0xC7848EFCCC545182,cam,nearClip+.0)end;
	SetCamFarClip=function(cam--[[@param cam integer]],farClip--[[@param farClip number]])return InvokeVoid(0xAE306F2A904BF86E,cam,farClip+.0)end;
	ForceCamFarClip=function(cam--[[@param cam integer]],p1--[[@param p1 number]])return InvokeVoid(0xAABD62873FFB1A33,cam,p1+.0)end;
	SetCamMotionBlurStrength=function(cam--[[@param cam integer]],strength--[[@param strength number]])return InvokeVoid(0x6F0F77FBA9A8F2E6,cam,strength+.0)end;
	SetCamNearDof=function(cam--[[@param cam integer]],nearDOF--[[@param nearDOF number]])return InvokeVoid(0x3FA4BF0A7AB7DE2C,cam,nearDOF+.0)end;
	SetCamFarDof=function(cam--[[@param cam integer]],farDOF--[[@param farDOF number]])return InvokeVoid(0xEDD91296CD01AEE0,cam,farDOF+.0)end;
	SetCamDofStrength=function(cam--[[@param cam integer]],dofStrength--[[@param dofStrength number]])return InvokeVoid(0x5EE29B4D7D5DF897,cam,dofStrength+.0)end;
	SetCamDofPlanes=function(cam--[[@param cam integer]],p1--[[@param p1 number]],p2--[[@param p2 number]],p3--[[@param p3 number]],p4--[[@param p4 number]])return InvokeVoid(0x3CF48F6F96E749DC,cam,p1+.0,p2+.0,p3+.0,p4+.0)end;
	SetCamUseShallowDofMode=function(cam--[[@param cam integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x16A96863A17552BB,cam,toggle)end;
	SetUseHiDof=function()return InvokeVoid(0xA13B0222F3D94A94)end;
	--[=[Only used in R* Script fm_mission_controller_2020]=]
	SetUseHiDofOnSyncedSceneThisUpdate=function()return InvokeVoid(0x731A880555DA3647)end;
	SetCamDofOverriddenFocusDistance=function(camera--[[@param camera integer]],p1--[[@param p1 number]])return InvokeVoid(0xF55E4046F6F831DC,camera,p1+.0)end;
	SetCamDofOverriddenFocusDistanceBlendLevel=function(p0--[[@param p0 any]],p1--[[@param p1 number]])return InvokeVoid(0xE111A7C0D200CBC5,p0,p1+.0)end;
	--[=[This native has its name defined inside its codE
]=]
	SetCamDofFnumberOfLens=function(camera--[[@param camera integer]],p1--[[@param p1 number]])return InvokeVoid(0x7DD234D6F3914C5B,camera,p1+.0)end;
	--[=[Native name labeled within its code]=]
	SetCamDofFocalLengthMultiplier=function(camera--[[@param camera integer]],multiplier--[[@param multiplier number]])return InvokeVoid(0x47B595D60664CFFA,camera,multiplier+.0)end;
	--[=[This native has a name defined inside its code]=]
	SetCamDofFocusDistanceBias=function(camera--[[@param camera integer]],p1--[[@param p1 number]])return InvokeVoid(0xC669EEA5D031B7DE,camera,p1+.0)end;
	--[=[This native has a name defined inside its code]=]
	SetCamDofMaxNearInFocusDistance=function(camera--[[@param camera integer]],p1--[[@param p1 number]])return InvokeVoid(0xC3654A441402562D,camera,p1+.0)end;
	--[=[This native has a name defined inside its code]=]
	SetCamDofMaxNearInFocusDistanceBlendLevel=function(camera--[[@param camera integer]],p1--[[@param p1 number]])return InvokeVoid(0x2C654B4943BDDF7C,camera,p1+.0)end;
	--[=[This native has a name defined inside its code]=]
	SetCamDofShouldKeepLookAtTargetInFocus=function(camera--[[@param camera integer]],state--[[@param state boolean]])return InvokeVoid(0x7CF3AF51DCFE4108,camera,state)end;
	--[=[Last param determines if its relative to the Entity]=]
	AttachCamToEntity=function(cam--[[@param cam integer]],entity--[[@param entity integer]],xOffset--[[@param xOffset number]],yOffset--[[@param yOffset number]],zOffset--[[@param zOffset number]],isRelative--[[@param isRelative boolean]])return InvokeVoid(0xFEDB7D269E8C60E3,cam,entity,xOffset+.0,yOffset+.0,zOffset+.0,isRelative)end;
	AttachCamToPedBone=function(cam--[[@param cam integer]],ped--[[@param ped integer]],boneIndex--[[@param boneIndex integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],heading--[[@param heading boolean]])return InvokeVoid(0x61A3DBA14AB7F411,cam,ped,boneIndex,x+.0,y+.0,z+.0,heading)end;
	HardAttachCamToPedBone=function(cam--[[@param cam integer]],ped--[[@param ped integer]],boneIndex--[[@param boneIndex integer]],p3--[[@param p3 number]],p4--[[@param p4 number]],p5--[[@param p5 number]],p6--[[@param p6 number]],p7--[[@param p7 number]],p8--[[@param p8 number]],p9--[[@param p9 boolean]])return InvokeVoid(0x149916F50C34A40D,cam,ped,boneIndex,p3+.0,p4+.0,p5+.0,p6+.0,p7+.0,p8+.0,p9)end;
	--[=[Example from am_mp_drone script: 

CAM::HARD_ATTACH_CAM_TO_ENTITY(Local_190.f_169, NETWORK::NET_TO_OBJ(Local_190.f_159), 0f, 0f, 180f, Var0, 1);]=]
	HardAttachCamToEntity=function(cam--[[@param cam integer]],entity--[[@param entity integer]],xRot--[[@param xRot number]],yRot--[[@param yRot number]],zRot--[[@param zRot number]],xOffset--[[@param xOffset number]],yOffset--[[@param yOffset number]],zOffset--[[@param zOffset number]],isRelative--[[@param isRelative boolean]])return InvokeVoid(0x202A5ED9CE01D6E7,cam,entity,xRot+.0,yRot+.0,zRot+.0,xOffset+.0,yOffset+.0,zOffset+.0,isRelative)end;
	--[=[This native works with vehicles only. Bone indexes are usually given by this native GET_ENTITY_BONE_INDEX_BY_NAME.]=]
	AttachCamToVehicleBone=function(cam--[[@param cam integer]],vehicle--[[@param vehicle integer]],boneIndex--[[@param boneIndex integer]],relativeRotation--[[@param relativeRotation boolean]],rotX--[[@param rotX number]],rotY--[[@param rotY number]],rotZ--[[@param rotZ number]],offsetX--[[@param offsetX number]],offsetY--[[@param offsetY number]],offsetZ--[[@param offsetZ number]],fixedDirection--[[@param fixedDirection boolean]])return InvokeVoid(0x8DB3F12A02CAEF72,cam,vehicle,boneIndex,relativeRotation,rotX+.0,rotY+.0,rotZ+.0,offsetX+.0,offsetY+.0,offsetZ+.0,fixedDirection)end;
	DetachCam=function(cam--[[@param cam integer]])return InvokeVoid(0xA2FABBE87F4BAD82,cam)end;
	--[=[The native seems to only be called once.

The native is used as so,
CAM::SET_CAM_INHERIT_ROLL_VEHICLE(l_544, getElem(2, &l_525, 4));
In the exile1 script.]=]
	SetCamInheritRollVehicle=function(cam--[[@param cam integer]],p1--[[@param p1 boolean]])return InvokeVoid(0x45F1DE9C34B93AE6,cam,p1)end;
	PointCamAtCoord=function(cam--[[@param cam integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0xF75497BB865F0803,cam,x+.0,y+.0,z+.0)end;
	--[=[p5 always seems to be 1 i.e TRUE]=]
	PointCamAtEntity=function(cam--[[@param cam integer]],entity--[[@param entity integer]],p2--[[@param p2 number]],p3--[[@param p3 number]],p4--[[@param p4 number]],p5--[[@param p5 boolean]])return InvokeVoid(0x5640BFF86B16E8DC,cam,entity,p2+.0,p3+.0,p4+.0,p5)end;
	--[=[Parameters p0-p5 seems correct. The bool p6 is unknown, but through every X360 script it's always 1. Please correct p0-p5 if any prove to be wrong. ]=]
	PointCamAtPedBone=function(cam--[[@param cam integer]],ped--[[@param ped integer]],boneIndex--[[@param boneIndex integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],p6--[[@param p6 boolean]])return InvokeVoid(0x68B2B5F33BA63C41,cam,ped,boneIndex,x+.0,y+.0,z+.0,p6)end;
	StopCamPointing=function(cam--[[@param cam integer]])return InvokeVoid(0xF33AB75780BA57DE,cam)end;
	--[=[Allows you to aim and shoot at the direction the camera is facing.]=]
	SetCamAffectsAiming=function(cam--[[@param cam integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x8C1DC7770C51DC8D,cam,toggle)end;
	--[=[Rotates the radar to match the camera's Z rotation]=]
	SetCamControlsMiniMapHeading=function(cam--[[@param cam integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x661B5C8654ADD825,cam,toggle)end;
	--[=[When set to true shadows appear more smooth but less detailed.
Set to false by default.]=]
	SetCamIsInsideVehicle=function(cam--[[@param cam integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xA2767257A320FC82,cam,toggle)end;
	AllowMotionBlurDecay=function(p0--[[@param p0 any]],p1--[[@param p1 boolean]])return InvokeVoid(0x271017B9BA825366,p0,p1)end;
	--[=[NOTE: Debugging functions are not present in the retail version of the game.]=]
	SetCamDebugName=function(camera--[[@param camera integer]],name--[[@param name string]])return InvokeVoid(0x1B93E0107865DD40,camera,name)end;
	GetDebugCam=function()return InvokeInt(0x77C3CEC46BE286F6)end;---@return integer
	--[=[I filled p1-p6 (the floats) as they are as other natives with 6 floats in a row are similar and I see no other method. So if a test from anyone proves them wrong please correct.

p7 (length) determines the length of the spline, affects camera path and duration of transition between previous node and this one

p8 big values ~100 will slow down the camera movement before reaching this node

p9 != 0 seems to override the rotation/pitch (bool?)]=]
	AddCamSplineNode=function(camera--[[@param camera integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],xRot--[[@param xRot number]],yRot--[[@param yRot number]],zRot--[[@param zRot number]],length--[[@param length integer]],smoothingStyle--[[@param smoothingStyle integer]],rotationOrder--[[@param rotationOrder integer]])return InvokeVoid(0x8609C75EC438FB3B,camera,x+.0,y+.0,z+.0,xRot+.0,yRot+.0,zRot+.0,length,smoothingStyle,rotationOrder)end;
	--[=[p0 is the spline camera to which the node is being added.
p1 is the camera used to create the node.
p3 is always 3 in scripts. It might be smoothing style or rotation order.]=]
	AddCamSplineNodeUsingCameraFrame=function(cam--[[@param cam integer]],cam2--[[@param cam2 integer]],length--[[@param length integer]],p3--[[@param p3 integer]])return InvokeVoid(0x0A9F2A468B328E74,cam,cam2,length,p3)end;
	--[=[p0 is the spline camera to which the node is being added.
p1 is the camera used to create the node.
p3 is always 3 in scripts. It might be smoothing style or rotation order.]=]
	AddCamSplineNodeUsingCamera=function(cam--[[@param cam integer]],cam2--[[@param cam2 integer]],length--[[@param length integer]],p3--[[@param p3 integer]])return InvokeVoid(0x0FB82563989CF4FB,cam,cam2,length,p3)end;
	--[=[p2 is always 2 in scripts. It might be smoothing style or rotation order.]=]
	AddCamSplineNodeUsingGameplayFrame=function(cam--[[@param cam integer]],length--[[@param length integer]],p2--[[@param p2 integer]])return InvokeVoid(0x609278246A29CA34,cam,length,p2)end;
	SetCamSplinePhase=function(cam--[[@param cam integer]],p1--[[@param p1 number]])return InvokeVoid(0x242B5874F0A4E052,cam,p1+.0)end;
	--[=[Can use this with SET_CAM_SPLINE_PHASE to set the float it this native returns.

(returns 1.0f when no nodes has been added, reached end of non existing spline)]=]
	GetCamSplinePhase=function(cam--[[@param cam integer]])return InvokeFloat(0xB5349E36C546509A,cam)end;---@return number
	--[=[I'm pretty sure the parameter is the camera as usual, but I am not certain so I'm going to leave it as is.]=]
	GetCamSplineNodePhase=function(cam--[[@param cam integer]])return InvokeFloat(0xD9D0E694C8282C96,cam)end;---@return number
	--[=[I named p1 as timeDuration as it is obvious. I'm assuming tho it is ran in ms(Milliseconds) as usual.]=]
	SetCamSplineDuration=function(cam--[[@param cam integer]],timeDuration--[[@param timeDuration integer]])return InvokeVoid(0x1381539FEE034CDA,cam,timeDuration)end;
	SetCamSplineSmoothingStyle=function(cam--[[@param cam integer]],smoothingStyle--[[@param smoothingStyle integer]])return InvokeVoid(0xD1B0F412F109EA5D,cam,smoothingStyle)end;
	GetCamSplineNodeIndex=function(cam--[[@param cam integer]])return InvokeInt(0xB22B17DF858716A6,cam)end;---@return integer
	SetCamSplineNodeEase=function(cam--[[@param cam integer]],easingFunction--[[@param easingFunction integer]],p2--[[@param p2 integer]],p3--[[@param p3 number]])return InvokeVoid(0x83B8201ED82A9A2D,cam,easingFunction,p2,p3+.0)end;
	SetCamSplineNodeVelocityScale=function(cam--[[@param cam integer]],p1--[[@param p1 integer]],scale--[[@param scale number]])return InvokeVoid(0xA6385DEB180F319F,cam,p1,scale+.0)end;
	OverrideCamSplineVelocity=function(cam--[[@param cam integer]],p1--[[@param p1 integer]],p2--[[@param p2 number]],p3--[[@param p3 number]])return InvokeVoid(0x40B62FA033EB0346,cam,p1,p2+.0,p3+.0)end;
	--[=[Max value for p1 is 15.]=]
	OverrideCamSplineMotionBlur=function(cam--[[@param cam integer]],p1--[[@param p1 integer]],p2--[[@param p2 number]],p3--[[@param p3 number]])return InvokeVoid(0x7DCF7C708D292D55,cam,p1,p2+.0,p3+.0)end;
	SetCamSplineNodeExtraFlags=function(cam--[[@param cam integer]],p1--[[@param p1 integer]],flags--[[@param flags integer]])return InvokeVoid(0x7BF1A54AE67AC070,cam,p1,flags)end;
	IsCamSplinePaused=function(cam--[[@param cam integer]])return InvokeBool(0x0290F35C0AD97864,cam)end;---@return boolean
	--[=[Previous declaration void SET_CAM_ACTIVE_WITH_INTERP(Cam camTo, Cam camFrom, int duration, BOOL easeLocation, BOOL easeRotation) is completely wrong. The last two params are integers not BOOLs...
]=]
	SetCamActiveWithInterp=function(camTo--[[@param camTo integer]],camFrom--[[@param camFrom integer]],duration--[[@param duration integer]],easeLocation--[[@param easeLocation integer]],easeRotation--[[@param easeRotation integer]])return InvokeVoid(0x9FBDA379383A52A4,camTo,camFrom,duration,easeLocation,easeRotation)end;
	IsCamInterpolating=function(cam--[[@param cam integer]])return InvokeBool(0x036F97C908C2B52C,cam)end;---@return boolean
	--[=[Possible shake types (updated b617d):

DEATH_FAIL_IN_EFFECT_SHAKE
DRUNK_SHAKE
FAMILY5_DRUG_TRIP_SHAKE
HAND_SHAKE
JOLT_SHAKE
LARGE_EXPLOSION_SHAKE
MEDIUM_EXPLOSION_SHAKE
SMALL_EXPLOSION_SHAKE
ROAD_VIBRATION_SHAKE
SKY_DIVING_SHAKE
VIBRATE_SHAKE

Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json]=]
	ShakeCam=function(cam--[[@param cam integer]],type--[[@param type string]],amplitude--[[@param amplitude number]])return InvokeVoid(0x6A25241C340D3822,cam,type,amplitude+.0)end;
	--[=[Example from michael2 script.

CAM::ANIMATED_SHAKE_CAM(l_5069, "shake_cam_all@", "light", "", 1f);]=]
	AnimatedShakeCam=function(cam--[[@param cam integer]],p1--[[@param p1 string]],p2--[[@param p2 string]],p3--[[@param p3 string]],amplitude--[[@param amplitude number]])return InvokeVoid(0xA2746EEAE3E577CD,cam,p1,p2,p3,amplitude+.0)end;
	IsCamShaking=function(cam--[[@param cam integer]])return InvokeBool(0x6B24BFE83A2BE47B,cam)end;---@return boolean
	SetCamShakeAmplitude=function(cam--[[@param cam integer]],amplitude--[[@param amplitude number]])return InvokeVoid(0xD93DB43B82BC0D00,cam,amplitude+.0)end;
	StopCamShaking=function(cam--[[@param cam integer]],p1--[[@param p1 boolean]])return InvokeVoid(0xBDECF64367884AC3,cam,p1)end;
	--[=[CAM::SHAKE_SCRIPT_GLOBAL("HAND_SHAKE", 0.2);

Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json]=]
	ShakeScriptGlobal=function(p0--[[@param p0 string]],p1--[[@param p1 number]])return InvokeVoid(0xF4C8CF9E353AFECA,p0,p1+.0)end;
	--[=[CAM::ANIMATED_SHAKE_SCRIPT_GLOBAL("SHAKE_CAM_medium", "medium", "", 0.5f);

Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json]=]
	AnimatedShakeScriptGlobal=function(p0--[[@param p0 string]],p1--[[@param p1 string]],p2--[[@param p2 string]],p3--[[@param p3 number]])return InvokeVoid(0xC2EAE3FB8CDBED31,p0,p1,p2,p3+.0)end;
	--[=[In drunk_controller.c4, sub_309
if (CAM::IS_SCRIPT_GLOBAL_SHAKING()) {
    CAM::STOP_SCRIPT_GLOBAL_SHAKING(0);
}]=]
	IsScriptGlobalShaking=function()return InvokeBool(0xC912AF078AF19212)end;---@return boolean
	--[=[In drunk_controller.c4, sub_309
if (CAM::IS_SCRIPT_GLOBAL_SHAKING()) {
    CAM::STOP_SCRIPT_GLOBAL_SHAKING(0);
}]=]
	StopScriptGlobalShaking=function(p0--[[@param p0 boolean]])return InvokeVoid(0x1C9D7949FA533490,p0)end;
	--[=[p1: 0..16]=]
	TriggerVehiclePartBrokenCameraShake=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 integer]],p2--[[@param p2 number]])return InvokeVoid(0x5D96CFB59DA076A0,vehicle,p1,p2+.0)end;
	--[=[Atleast one time in a script for the zRot Rockstar uses GET_ENTITY_HEADING to help fill the parameter.

p9 is unknown at this time.
p10 throughout all the X360 Scripts is always 2.

Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json]=]
	PlayCamAnim=function(cam--[[@param cam integer]],animName--[[@param animName string]],animDictionary--[[@param animDictionary string]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],xRot--[[@param xRot number]],yRot--[[@param yRot number]],zRot--[[@param zRot number]],p9--[[@param p9 boolean]],p10--[[@param p10 integer]])return InvokeBool(0x9A2D0FB2E7852392,cam,animName,animDictionary,x+.0,y+.0,z+.0,xRot+.0,yRot+.0,zRot+.0,p9,p10)end;---@return boolean
	IsCamPlayingAnim=function(cam--[[@param cam integer]],animName--[[@param animName string]],animDictionary--[[@param animDictionary string]])return InvokeBool(0xC90621D8A0CEECF2,cam,animName,animDictionary)end;---@return boolean
	SetCamAnimCurrentPhase=function(cam--[[@param cam integer]],phase--[[@param phase number]])return InvokeVoid(0x4145A4C44FF3B5A6,cam,phase+.0)end;
	GetCamAnimCurrentPhase=function(cam--[[@param cam integer]])return InvokeFloat(0xA10B2DB49E92A6B0,cam)end;---@return number
	--[=[Examples:

CAM::PLAY_SYNCHRONIZED_CAM_ANIM(l_2734, NETWORK::NETWORK_GET_LOCAL_SCENE_FROM_NETWORK_ID(l_2739), "PLAYER_EXIT_L_CAM", "mp_doorbell");

CAM::PLAY_SYNCHRONIZED_CAM_ANIM(l_F0D[7/*1*/], l_F4D[15/*1*/], "ah3b_attackheli_cam2", "missheistfbi3b_helicrash");]=]
	PlaySynchronizedCamAnim=function(p0--[[@param p0 any]],p1--[[@param p1 any]],animName--[[@param animName string]],animDictionary--[[@param animDictionary string]])return InvokeBool(0xE32EFE9AB4A9AA0C,p0,p1,animName,animDictionary)end;---@return boolean
	SetFlyCamHorizontalResponse=function(cam--[[@param cam integer]],p1--[[@param p1 number]],p2--[[@param p2 number]],p3--[[@param p3 number]])return InvokeVoid(0x503F5920162365B2,cam,p1+.0,p2+.0,p3+.0)end;
	SetFlyCamVerticalResponse=function(cam--[[@param cam integer]],p1--[[@param p1 number]],p2--[[@param p2 number]],p3--[[@param p3 number]])return InvokeVoid(0xE827B9382CFB41BA,cam,p1+.0,p2+.0,p3+.0)end;
	SetFlyCamMaxHeight=function(cam--[[@param cam integer]],height--[[@param height number]])return InvokeVoid(0xF9D02130ECDD1D77,cam,height+.0)end;
	SetFlyCamCoordAndConstrain=function(cam--[[@param cam integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0xC91C6C55199308CA,cam,x+.0,y+.0,z+.0)end;
	SetFlyCamVerticalControlsThisUpdate=function(cam--[[@param cam integer]])return InvokeVoid(0xC8B5C4A79CC18B94,cam)end;
	WasFlyCamConstrainedOnPreviousUdpate=function(cam--[[@param cam integer]])return InvokeBool(0x5C48A1D6E3B33179,cam)end;---@return boolean
	IsScreenFadedOut=function()return InvokeBool(0xB16FCE9DDC7BA182)end;---@return boolean
	IsScreenFadedIn=function()return InvokeBool(0x5A859503B0C08678)end;---@return boolean
	IsScreenFadingOut=function()return InvokeBool(0x797AC7CB535BA28F)end;---@return boolean
	IsScreenFadingIn=function()return InvokeBool(0x5C544BC6C57AC575)end;---@return boolean
	--[=[Fades the screen in.

duration: The time the fade should take, in milliseconds.]=]
	DoScreenFadeIn=function(duration--[[@param duration integer]])return InvokeVoid(0xD4E8E24955024033,duration)end;
	--[=[Fades the screen out.

duration: The time the fade should take, in milliseconds.]=]
	DoScreenFadeOut=function(duration--[[@param duration integer]])return InvokeVoid(0x891B5B39AC6302AF,duration)end;
	SetWidescreenBorders=function(p0--[[@param p0 boolean]],p1--[[@param p1 integer]])return InvokeVoid(0xDCD4EA924F42D01A,p0,p1)end;
	AreWidescreenBordersActive=function()return InvokeBool(0x4879E4FE39074CDF)end;---@return boolean
	GetGameplayCamCoord=function()return InvokeV3(0x14D6F5678D8F1B37)end;---@return V3
	--[=[p0 dosen't seem to change much, I tried it with 0, 1, 2:
0-Pitch(X): -70.000092
0-Roll(Y): -0.000001
0-Yaw(Z): -43.886459
1-Pitch(X): -70.000092
1-Roll(Y): -0.000001
1-Yaw(Z): -43.886463
2-Pitch(X): -70.000092
2-Roll(Y): -0.000002
2-Yaw(Z): -43.886467]=]
	GetGameplayCamRot=function(rotationOrder--[[@param rotationOrder integer]])return InvokeV3(0x837765A25378F0BB,rotationOrder)end;---@return V3
	GetGameplayCamFov=function()return InvokeFloat(0x65019750A0324133)end;---@return number
	--[=[some camera effect that is used in the drunk-cheat, and turned off (by setting it to 0.0) along with the shaking effects once the drunk cheat is disabled.]=]
	SetGameplayCamMotionBlurScalingThisUpdate=function(p0--[[@param p0 number]])return InvokeVoid(0x487A82C650EB7799,p0+.0)end;
	--[=[some camera effect that is (also) used in the drunk-cheat, and turned off (by setting it to 0.0) along with the shaking effects once the drunk cheat is disabled.]=]
	SetGameplayCamMaxMotionBlurStrengthThisUpdate=function(p0--[[@param p0 number]])return InvokeVoid(0x0225778816FDC28C,p0+.0)end;
	GetGameplayCamRelativeHeading=function()return InvokeFloat(0x743607648ADD4587)end;---@return number
	--[=[Sets the camera position relative to heading in float from -360 to +360.

Heading is alwyas 0 in aiming camera.]=]
	SetGameplayCamRelativeHeading=function(heading--[[@param heading number]])return InvokeVoid(0xB4EC2312F4E5B1F1,heading+.0)end;
	GetGameplayCamRelativePitch=function()return InvokeFloat(0x3A6867B4845BEDA2)end;---@return number
	--[=[This native sets the camera's pitch (rotation on the x-axis).]=]
	SetGameplayCamRelativePitch=function(angle--[[@param angle number]],scalingFactor--[[@param scalingFactor number]])return InvokeVoid(0x6D0858B8EDFD2B7D,angle+.0,scalingFactor+.0)end;
	ResetGameplayCamFullAttachParentTransformTimer=function()return InvokeVoid(0x7295C203DD659DFE)end;
	ForceCameraRelativeHeadingAndPitch=function(roll--[[@param roll number]],pitch--[[@param pitch number]],yaw--[[@param yaw number]])return InvokeVoid(0x48608C3464F58AB4,roll+.0,pitch+.0,yaw+.0)end;
	ForceBonnetCameraRelativeHeadingAndPitch=function(p0--[[@param p0 number]],p1--[[@param p1 number]])return InvokeVoid(0x28B022A17B068A3A,p0+.0,p1+.0)end;
	--[=[Does nothing]=]
	SetFirstPersonShooterCameraHeading=function(yaw--[[@param yaw number]])return InvokeVoid(0x103991D4A307D472,yaw+.0)end;
	SetFirstPersonShooterCameraPitch=function(pitch--[[@param pitch number]])return InvokeVoid(0x759E13EBC1C15C5A,pitch+.0)end;
	SetScriptedCameraIsFirstPersonThisFrame=function(p0--[[@param p0 boolean]])return InvokeVoid(0x469F2ECDEC046337,p0)end;
	--[=[Possible shake types (updated b617d):

DEATH_FAIL_IN_EFFECT_SHAKE
DRUNK_SHAKE
FAMILY5_DRUG_TRIP_SHAKE
HAND_SHAKE
JOLT_SHAKE
LARGE_EXPLOSION_SHAKE
MEDIUM_EXPLOSION_SHAKE
SMALL_EXPLOSION_SHAKE
ROAD_VIBRATION_SHAKE
SKY_DIVING_SHAKE
VIBRATE_SHAKE

Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json]=]
	ShakeGameplayCam=function(shakeName--[[@param shakeName string]],intensity--[[@param intensity number]])return InvokeVoid(0xFD55E49555E017CF,shakeName,intensity+.0)end;
	IsGameplayCamShaking=function()return InvokeBool(0x016C090630DF1F89)end;---@return boolean
	--[=[Sets the amplitude for the gameplay (i.e. 3rd or 1st) camera to shake. Used in script "drunk_controller.ysc.c4" to simulate making the player drunk.]=]
	SetGameplayCamShakeAmplitude=function(amplitude--[[@param amplitude number]])return InvokeVoid(0xA87E00932DB4D85D,amplitude+.0)end;
	StopGameplayCamShaking=function(p0--[[@param p0 boolean]])return InvokeVoid(0x0EF93E9F3D08C178,p0)end;
	--[=[Forces gameplay cam to specified ped as if you were the ped or spectating it]=]
	SetGameplayCamFollowPedThisUpdate=function(ped--[[@param ped integer]])return InvokeVoid(0x8BBACBF51DA047A8,ped)end;
	--[=[Examples when this function will return 0 are:
- During busted screen.
- When player is coming out from a hospital.
- When player is coming out from a police station.
- When player is buying gun from AmmuNation.]=]
	IsGameplayCamRendering=function()return InvokeBool(0x39B5D1B10383F0C8)end;---@return boolean
	IsInterpolatingFromScriptCams=function()return InvokeBool(0x3044240D2E0FA842)end;---@return boolean
	IsInterpolatingToScriptCams=function()return InvokeBool(0x705A276EBFF3133D)end;---@return boolean
	SetGameplayCamAltitudeFovScalingState=function(p0--[[@param p0 boolean]])return InvokeVoid(0xDB90C6CCA48940F1,p0)end;
	--[=[Shows the crosshair even if it wouldn't show normally. Only works for one frame, so make sure to call it repeatedly.]=]
	DisableGameplayCamAltitudeFovScalingThisUpdate=function()return InvokeVoid(0xEA7F0AD7E9BA676F)end;
	IsGameplayCamLookingBehind=function()return InvokeBool(0x70FDA869F3317EA9)end;---@return boolean
	SetGameplayCamIgnoreEntityCollisionThisUpdate=function(entity--[[@param entity integer]])return InvokeVoid(0x2AED6301F67007D5,entity)end;
	DisableCamCollisionForObject=function(entity--[[@param entity integer]])return InvokeVoid(0x49482F9FCD825AAA,entity)end;
	BypassCameraCollisionBuoyancyTestThisUpdate=function()return InvokeVoid(0xA7092AFE81944852)end;
	SetGameplayCamEntityToLimitFocusOverBoundingSphereThisUpdate=function(entity--[[@param entity integer]])return InvokeVoid(0xFD3151CD37EA2245,entity)end;
	--[=[Sets some flag on cinematic camera]=]
	DisableFirstPersonCameraWaterClippingTestThisUpdate=function()return InvokeVoid(0xB1381B97F70C7B30)end;
	SetFollowCamIgnoreAttachParentMovementThisUpdate=function()return InvokeVoid(0xDD79DF9F4D26E1C9)end;
	IsSphereVisible=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]])return InvokeBool(0xE33D59DA70B58FDF,x+.0,y+.0,z+.0,radius+.0)end;---@return boolean
	IsFollowPedCamActive=function()return InvokeBool(0xC6D3D26810C8E0F9)end;---@return boolean
	--[=[From the scripts:

CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_ATTACHED_TO_ROPE_CAMERA", 0);
CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_ON_EXILE1_LADDER_CAMERA", 1500);
CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_CAMERA", 0);
CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_CAMERA", 3000);
CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_FAMILY5_CAMERA", 0);
CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_CAMERA", 0);]=]
	SetFollowPedCamThisUpdate=function(camName--[[@param camName string]],p1--[[@param p1 integer]])return InvokeBool(0x44A113DD6FFC48D1,camName,p1)end;---@return boolean
	UseScriptCamForAmbientPopulationOriginThisFrame=function(p0--[[@param p0 boolean]],p1--[[@param p1 boolean]])return InvokeVoid(0x271401846BD26E92,p0,p1)end;
	SetFollowPedCamLadderAlignThisUpdate=function()return InvokeVoid(0xC8391C309684595A)end;
	--[=[minimum: Degrees between -180f and 180f.
maximum: Degrees between -180f and 180f.

Clamps the gameplay camera's current yaw.

Eg. SET_THIRD_PERSON_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(0.0f, 0.0f) will set the horizontal angle directly behind the player.]=]
	SetThirdPersonCamRelativeHeadingLimitsThisUpdate=function(minimum--[[@param minimum number]],maximum--[[@param maximum number]])return InvokeVoid(0x8F993D26E0CA5E8E,minimum+.0,maximum+.0)end;
	--[=[minimum: Degrees between -90f and 90f.
maximum: Degrees between -90f and 90f.

Clamps the gameplay camera's current pitch.

Eg. SET_THIRD_PERSON_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(0.0f, 0.0f) will set the vertical angle directly behind the player.]=]
	SetThirdPersonCamRelativePitchLimitsThisUpdate=function(minimum--[[@param minimum number]],maximum--[[@param maximum number]])return InvokeVoid(0xA516C198B7DCA1E1,minimum+.0,maximum+.0)end;
	--[=[Seems to animate the gameplay camera zoom.

Eg. SET_THIRD_PERSON_CAM_ORBIT_DISTANCE_LIMITS_THIS_UPDATE(1f, 1000f);
will animate the camera zooming in from 1000 meters away.

Game scripts use it like this:

// Setting this to 1 prevents V key from changing zoom
PLAYER::SET_PLAYER_FORCED_ZOOM(PLAYER::PLAYER_ID(), 1);

// These restrict how far you can move cam up/down left/right
CAM::SET_THIRD_PERSON_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(-20f, 50f);
CAM::SET_THIRD_PERSON_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(-60f, 0f);

CAM::SET_THIRD_PERSON_CAM_ORBIT_DISTANCE_LIMITS_THIS_UPDATE(1f, 1f);]=]
	SetThirdPersonCamOrbitDistanceLimitsThisUpdate=function(p0--[[@param p0 number]],distance--[[@param distance number]])return InvokeVoid(0xDF2E1F7742402E81,p0+.0,distance+.0)end;
	--[=[Forces gameplay cam to specified vehicle as if you were in it]=]
	SetInVehicleCamStateThisUpdate=function(p0--[[@param p0 integer]],p1--[[@param p1 integer]])return InvokeVoid(0xE9EA16D6E54CDCA4,p0,p1)end;
	--[=[Disables first person camera for the current frame.

Found in decompiled scripts:
GRAPHICS::DRAW_DEBUG_TEXT_2D("Disabling First Person Cam", 0.5, 0.8, 0.0, 0, 0, 255, 255);
CAM::DISABLE_ON_FOOT_FIRST_PERSON_VIEW_THIS_UPDATE();]=]
	DisableOnFootFirstPersonViewThisUpdate=function()return InvokeVoid(0xDE2EF5DA284CC8DF)end;
	DisableFirstPersonFlashEffectThisUpdate=function()return InvokeVoid(0x59424BD75174C9B1)end;
	BlockFirstPersonOrientationResetThisUpdate=function()return InvokeVoid(0x9F97DA93681F87EA)end;
	GetFollowPedCamZoomLevel=function()return InvokeInt(0x33E6C8EFD0CD93E9)end;---@return integer
	--[=[See viewmode enum in CAM.GET_FOLLOW_VEHICLE_CAM_VIEW_MODE for return value]=]
	GetFollowPedCamViewMode=function()return InvokeInt(0x8D4D46230B2C353A)end;---@return integer
	--[=[Sets the type of Player camera:

0 - Third Person Close
1 - Third Person Mid
2 - Third Person Far
4 - First Person]=]
	SetFollowPedCamViewMode=function(viewMode--[[@param viewMode integer]])return InvokeVoid(0x5A4F9EDF1673F704,viewMode)end;
	IsFollowVehicleCamActive=function()return InvokeBool(0xCBBDE6D335D6D496)end;---@return boolean
	SetFollowVehicleCamHighAngleModeThisUpdate=function(p0--[[@param p0 boolean]])return InvokeVoid(0x91EF6EE6419E5B97,p0)end;
	SetFollowVehicleCamHighAngleModeEveryUpdate=function(p0--[[@param p0 boolean]],p1--[[@param p1 boolean]])return InvokeVoid(0x9DFE13ECDC1EC196,p0,p1)end;
	SetTableGamesCameraThisUpdate=function(hash--[[@param hash integer]])return InvokeBool(0x79C0E43EB9B944E2,hash)end;---@return boolean
	GetFollowVehicleCamZoomLevel=function()return InvokeInt(0xEE82280AB767B690)end;---@return integer
	SetFollowVehicleCamZoomLevel=function(zoomLevel--[[@param zoomLevel integer]])return InvokeVoid(0x19464CB6E4078C8A,zoomLevel)end;
	--[=[Returns the type of camera:

enum _viewmode //0xA11D7CA8
{
	THIRD_PERSON_NEAR = 0,
	THIRD_PERSON_MEDIUM = 1,
	THIRD_PERSON_FAR = 2,
	CINEMATIC = 3,
	FIRST_PERSON = 4
};]=]
	GetFollowVehicleCamViewMode=function()return InvokeInt(0xA4FF579AC0E3AAAE)end;---@return integer
	--[=[Sets the type of Player camera in vehicles:
viewmode: see CAM.GET_FOLLOW_VEHICLE_CAM_VIEW_MODE]=]
	SetFollowVehicleCamViewMode=function(viewMode--[[@param viewMode integer]])return InvokeVoid(0xAC253D7842768F48,viewMode)end;
	--[=[context: see _GET_CAM_ACTIVE_VIEW_MODE_CONTEXT]=]
	GetCamViewModeForContext=function(context--[[@param context integer]])return InvokeInt(0xEE778F8C7E1142E2,context)end;---@return integer
	--[=[context: see _GET_CAM_ACTIVE_VIEW_MODE_CONTEXT, viewmode: see CAM.GET_FOLLOW_VEHICLE_CAM_VIEW_MODE]=]
	SetCamViewModeForContext=function(context--[[@param context integer]],viewMode--[[@param viewMode integer]])return InvokeVoid(0x2A2173E46DAECD12,context,viewMode)end;
	--[=[enum Context
{
	ON_FOOT,
	IN_VEHICLE,
	ON_BIKE,
	IN_BOAT,
	IN_AIRCRAFT,
	IN_SUBMARINE,
	IN_HELI,
	IN_TURRET
};]=]
	GetCamActiveViewModeContext=function()return InvokeInt(0x19CAFA3C87F7C2FF)end;---@return integer
	UseVehicleCamStuntSettingsThisUpdate=function()return InvokeVoid(0x6493CF69859B116A)end;
	--[=[Sets gameplay camera to hash]=]
	UseDedicatedStuntCameraThisUpdate=function(camName--[[@param camName string]])return InvokeVoid(0x425A920FDB9A0DDA,camName)end;
	ForceVehicleCamStuntSettingsThisUpdate=function()return InvokeVoid(0x0AA27680A0BD43FA)end;
	SetFollowVehicleCamSeatThisUpdate=function(seatIndex--[[@param seatIndex integer]])return InvokeVoid(0x5C90CAB09951A12F,seatIndex)end;
	IsAimCamActive=function()return InvokeBool(0x68EDDA28A5976D07)end;---@return boolean
	IsAimCamActiveInAccurateMode=function()return InvokeBool(0x74BD83EA840F6BC9)end;---@return boolean
	IsFirstPersonAimCamActive=function()return InvokeBool(0x5E346D934122613F)end;---@return boolean
	DisableAimCamThisUpdate=function()return InvokeVoid(0x1A31FE0049E542F6)end;
	GetFirstPersonAimCamZoomFactor=function()return InvokeFloat(0x7EC52CC40597D170)end;---@return number
	SetFirstPersonAimCamZoomFactor=function(zoomFactor--[[@param zoomFactor number]])return InvokeVoid(0x70894BD0915C5BCA,zoomFactor+.0)end;
	SetFirstPersonAimCamZoomFactorLimitsThisUpdate=function(p0--[[@param p0 number]],p1--[[@param p1 number]])return InvokeVoid(0xCED08CBE8EBB97C7,p0+.0,p1+.0)end;
	SetFirstPersonAimCamRelativeHeadingLimitsThisUpdate=function(p0--[[@param p0 number]],p1--[[@param p1 number]])return InvokeVoid(0x2F7F2B26DD3F18EE,p0+.0,p1+.0)end;
	SetFirstPersonAimCamRelativePitchLimitsThisUpdate=function(p0--[[@param p0 number]],p1--[[@param p1 number]])return InvokeVoid(0xBCFC632DB7673BF0,p0+.0,p1+.0)end;
	SetFirstPersonAimCamNearClipThisUpdate=function(p0--[[@param p0 number]])return InvokeVoid(0x0AF7B437918103B3,p0+.0)end;
	SetThirdPersonAimCamNearClipThisUpdate=function(p0--[[@param p0 number]])return InvokeVoid(0x42156508606DE65E,p0+.0)end;
	SetAllowCustomVehicleDriveByCamThisUpdate=function(p0--[[@param p0 boolean]])return InvokeVoid(0x4008EDF7D6E48175,p0)end;
	ForceTightspaceCustomFramingThisUpdate=function()return InvokeVoid(0x380B4968D1E09E55)end;
	GetFinalRenderedCamCoord=function()return InvokeV3(0xA200EB1EE790F448)end;---@return V3
	--[=[p0 seems to consistently be 2 across scripts

Function is called faily often by CAM::CREATE_CAM_WITH_PARAMS]=]
	GetFinalRenderedCamRot=function(rotationOrder--[[@param rotationOrder integer]])return InvokeV3(0x5B4E4C817FCC2DFB,rotationOrder)end;---@return V3
	GetFinalRenderedRemotePlayerCamRot=function(player--[[@param player integer]],rotationOrder--[[@param rotationOrder integer]])return InvokeV3(0x26903D9CD1175F2C,player,rotationOrder)end;---@return V3
	--[=[Gets some camera fov]=]
	GetFinalRenderedCamFov=function()return InvokeFloat(0x80EC114669DAEFF4)end;---@return number
	GetFinalRenderedRemotePlayerCamFov=function(player--[[@param player integer]])return InvokeFloat(0x5F35F6732C3FBBA0,player)end;---@return number
	GetFinalRenderedCamNearClip=function()return InvokeFloat(0xD0082607100D7193)end;---@return number
	GetFinalRenderedCamFarClip=function()return InvokeFloat(0xDFC8CBC606FDB0FC)end;---@return number
	GetFinalRenderedCamNearDof=function()return InvokeFloat(0xA03502FC581F7D9B)end;---@return number
	GetFinalRenderedCamFarDof=function()return InvokeFloat(0x9780F32BCAF72431)end;---@return number
	GetFinalRenderedCamMotionBlurStrength=function()return InvokeFloat(0x162F9D995753DC19)end;---@return number
	SetGameplayCoordHint=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],duration--[[@param duration integer]],blendOutDuration--[[@param blendOutDuration integer]],blendInDuration--[[@param blendInDuration integer]],p6--[[@param p6 integer]])return InvokeVoid(0xD51ADCD2D8BC0FB3,x+.0,y+.0,z+.0,duration,blendOutDuration,blendInDuration,p6)end;
	SetGameplayPedHint=function(ped--[[@param ped integer]],x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],p4--[[@param p4 boolean]],duration--[[@param duration integer]],blendOutDuration--[[@param blendOutDuration integer]],blendInDuration--[[@param blendInDuration integer]])return InvokeVoid(0x2B486269ACD548D3,ped,x1+.0,y1+.0,z1+.0,p4,duration,blendOutDuration,blendInDuration)end;
	--[=[Focuses the camera on the specified vehicle.]=]
	SetGameplayVehicleHint=function(vehicle--[[@param vehicle integer]],offsetX--[[@param offsetX number]],offsetY--[[@param offsetY number]],offsetZ--[[@param offsetZ number]],p4--[[@param p4 boolean]],time--[[@param time integer]],easeInTime--[[@param easeInTime integer]],easeOutTime--[[@param easeOutTime integer]])return InvokeVoid(0xA2297E18F3E71C2E,vehicle,offsetX+.0,offsetY+.0,offsetZ+.0,p4,time,easeInTime,easeOutTime)end;
	SetGameplayObjectHint=function(object--[[@param object integer]],xOffset--[[@param xOffset number]],yOffset--[[@param yOffset number]],zOffset--[[@param zOffset number]],p4--[[@param p4 boolean]],time--[[@param time integer]],easeInTime--[[@param easeInTime integer]],easeOutTime--[[@param easeOutTime integer]])return InvokeVoid(0x83E87508A2CA2AC6,object,xOffset+.0,yOffset+.0,zOffset+.0,p4,time,easeInTime,easeOutTime)end;
	--[=[p8 could be some sort of flag. Scripts use:
-244429742
0
1726668277
1844968929]=]
	SetGameplayEntityHint=function(entity--[[@param entity integer]],xOffset--[[@param xOffset number]],yOffset--[[@param yOffset number]],zOffset--[[@param zOffset number]],p4--[[@param p4 boolean]],time--[[@param time integer]],easeInTime--[[@param easeInTime integer]],easeOutTime--[[@param easeOutTime integer]],p8--[[@param p8 integer]])return InvokeVoid(0x189E955A8313E298,entity,xOffset+.0,yOffset+.0,zOffset+.0,p4,time,easeInTime,easeOutTime,p8)end;
	IsGameplayHintActive=function()return InvokeBool(0xE520FF1AD2785B40)end;---@return boolean
	StopGameplayHint=function(p0--[[@param p0 boolean]])return InvokeVoid(0xF46C581C61718916,p0)end;
	--[=[This native does absolutely nothing, just a nullsub]=]
	StopGameplayHintBeingCancelledThisUpdate=function(p0--[[@param p0 boolean]])return InvokeVoid(0xCCD078C2665D2973,p0)end;
	StopCodeGameplayHint=function(p0--[[@param p0 boolean]])return InvokeVoid(0x247ACBC4ABBC9D1C,p0)end;
	IsCodeGameplayHintActive=function()return InvokeBool(0xBF72910D0F26F025)end;---@return boolean
	SetGameplayHintFov=function(FOV--[[@param FOV number]])return InvokeVoid(0x513403FB9C56211F,FOV+.0)end;
	SetGameplayHintFollowDistanceScalar=function(value--[[@param value number]])return InvokeVoid(0xF8BDBF3D573049A1,value+.0)end;
	SetGameplayHintBaseOrbitPitchOffset=function(value--[[@param value number]])return InvokeVoid(0xD1F8363DFAD03848,value+.0)end;
	SetGameplayHintCameraRelativeSideOffset=function(xOffset--[[@param xOffset number]])return InvokeVoid(0x5D7B620DAE436138,xOffset+.0)end;
	SetGameplayHintCameraRelativeVerticalOffset=function(yOffset--[[@param yOffset number]])return InvokeVoid(0xC92717EF615B6704,yOffset+.0)end;
	SetGameplayHintCameraBlendToFollowPedMediumViewMode=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xE3433EADAAF7EE40,toggle)end;
	SetCinematicButtonActive=function(p0--[[@param p0 boolean]])return InvokeVoid(0x51669F7D1FB53D9F,p0)end;
	IsCinematicCamRendering=function()return InvokeBool(0xB15162CB5826E9E8)end;---@return boolean
	--[=[p0 argument found in the b617d scripts: "DRUNK_SHAKE"

Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json]=]
	ShakeCinematicCam=function(shakeType--[[@param shakeType string]],amount--[[@param amount number]])return InvokeVoid(0xDCE214D9ED58F3CF,shakeType,amount+.0)end;
	IsCinematicCamShaking=function()return InvokeBool(0xBBC08F6B4CB8FF0A)end;---@return boolean
	SetCinematicCamShakeAmplitude=function(p0--[[@param p0 number]])return InvokeVoid(0xC724C701C30B2FE7,p0+.0)end;
	StopCinematicCamShaking=function(p0--[[@param p0 boolean]])return InvokeVoid(0x2238E588E588A6D7,p0)end;
	DisableCinematicBonnetCameraThisUpdate=function()return InvokeVoid(0xADFF1B2A555F5FBA)end;
	DisableCinematicVehicleIdleModeThisUpdate=function()return InvokeVoid(0x62ECFCFDEE7885D6)end;
	--[=[Resets the vehicle idle camera timer. Calling this in a loop will disable the idle camera.]=]
	InvalidateCinematicVehicleIdleMode=function()return InvokeVoid(0x9E4CFFF989258472)end;
	--[=[Resets the idle camera timer. Calling that in a loop once every few seconds is enough to disable the idle cinematic camera.]=]
	InvalidateIdleCam=function()return InvokeVoid(0xF4F2C0D4EE209E20)end;
	IsCinematicIdleCamRendering=function()return InvokeBool(0xCA9D2AA3E326D720)end;---@return boolean
	IsCinematicFirstPersonVehicleInteriorCamRendering=function()return InvokeBool(0x4F32C0D5A90A9B40)end;---@return boolean
	--[=[hash is always JOAAT("CAMERA_MAN_SHOT") in decompiled scripts]=]
	CreateCinematicShot=function(p0--[[@param p0 integer]],time--[[@param time integer]],p2--[[@param p2 boolean]],entity--[[@param entity integer]])return InvokeVoid(0x741B0129D4560F31,p0,time,p2,entity)end;
	--[=[Hash is always JOAAT("CAMERA_MAN_SHOT") in decompiled scripts]=]
	IsCinematicShotActive=function(p0--[[@param p0 integer]])return InvokeBool(0xCC9F3371A7C28BC9,p0)end;---@return boolean
	--[=[Only used once in carsteal3 with p0 set to -1096069633 (CAMERA_MAN_SHOT)]=]
	StopCinematicShot=function(p0--[[@param p0 integer]])return InvokeVoid(0x7660C6E75D3A078E,p0)end;
	ForceCinematicRenderingThisUpdate=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xA41BCD7213805AAC,toggle)end;
	SetCinematicNewsChannelActiveThisUpdate=function()return InvokeVoid(0xDC9DA9E8789F5246)end;
	--[=[Toggles the vehicle cinematic cam; requires the player ped to be in a vehicle to work.]=]
	SetCinematicModeActive=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xDCF0754AC3D6FD4E,toggle)end;
	IsInVehicleMobilePhoneCameraRendering=function()return InvokeBool(0x1F2300CB7FA7B7F6)end;---@return boolean
	DisableCinematicSlowMoThisUpdate=function()return InvokeBool(0x17FCA7199A530203)end;---@return boolean
	IsBonnetCinematicCamRendering=function()return InvokeBool(0xD7360051C885628B)end;---@return boolean
	--[=[Tests some cinematic camera flags]=]
	IsCinematicCamInputActive=function()return InvokeBool(0xF5F1E89A970B7796)end;---@return boolean
	IgnoreMenuPreferenceForBonnetCameraThisUpdate=function()return InvokeVoid(0x7B8A361C1813FBEF)end;
	BypassCutsceneCamRenderingThisUpdate=function()return InvokeVoid(0xDB629FFD9285FA06)end;
	StopCutsceneCamShaking=function(p0--[[@param p0 any]])return InvokeVoid(0x324C5AA411DA7737,p0)end;
	--[=[Hardcoded to only work in multiplayer.]=]
	SetCutsceneCamFarClipThisUpdate=function(p0--[[@param p0 number]])return InvokeVoid(0x12DED8CA53D47EA5,p0+.0)end;
	GetFocusPedOnScreen=function(p0--[[@param p0 number]],p1--[[@param p1 integer]],p2--[[@param p2 number]],p3--[[@param p3 number]],p4--[[@param p4 number]],p5--[[@param p5 number]],p6--[[@param p6 number]],p7--[[@param p7 integer]],p8--[[@param p8 integer]])return InvokeInt(0x89215EC747DF244A,p0+.0,p1,p2+.0,p3+.0,p4+.0,p5+.0,p6+.0,p7,p8)end;---@return integer
	DisableNearClipScanThisUpdate=function()return InvokeVoid(0x5A43C76F7FC7BA5F)end;
	--[=[if p0 is 0, effect is cancelled

if p0 is 1, effect zooms in, gradually tilts cam clockwise apx 30 degrees, wobbles slowly. Motion blur is active until cancelled.

if p0 is 2, effect immediately tilts cam clockwise apx 30 degrees, begins to wobble slowly, then gradually tilts cam back to normal. The wobbling will continue until the effect is cancelled.]=]
	SetCamDeathFailEffectState=function(p0--[[@param p0 integer]])return InvokeVoid(0x80C8B1846639BB19,p0)end;
	SetFirstPersonFlashEffectType=function(p0--[[@param p0 any]])return InvokeVoid(0x5C41E6BABC9E2112,p0)end;
	--[=[From b617 scripts:

CAM::SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME("DINGHY");
CAM::SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME("ISSI2");
CAM::SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME("SPEEDO");]=]
	SetFirstPersonFlashEffectVehicleModelName=function(vehicleName--[[@param vehicleName string]])return InvokeVoid(0x21E253A7F8DA5DFB,vehicleName)end;
	SetFirstPersonFlashEffectVehicleModelHash=function(vehicleModel--[[@param vehicleModel integer]])return InvokeVoid(0x11FA5D3479C7DD47,vehicleModel)end;
	IsAllowedIndependentCameraModes=function()return InvokeBool(0xEAF0FA793D05C592)end;---@return boolean
	CameraPreventCollisionSettingsForTripleheadInInteriorsThisUpdate=function()return InvokeVoid(0x62374889A4D59F72)end;
	ReplayGetMaxDistanceAllowedFromPlayer=function()return InvokeFloat(0x8BFCEB5EA1B161B6)end;---@return number
}
_G.Clock={
	--[=[SET_CLOCK_TIME(12, 34, 56);]=]
	SetClockTime=function(hour--[[@param hour integer]],minute--[[@param minute integer]],second--[[@param second integer]])return InvokeVoid(0x47C3B5848C3E45D8,hour,minute,second)end;
	PauseClock=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x4055E40BD2DBEC1D,toggle)end;
	AdvanceClockTimeTo=function(hour--[[@param hour integer]],minute--[[@param minute integer]],second--[[@param second integer]])return InvokeVoid(0xC8CA9670B9D83B3B,hour,minute,second)end;
	AddToClockTime=function(hours--[[@param hours integer]],minutes--[[@param minutes integer]],seconds--[[@param seconds integer]])return InvokeVoid(0xD716F30D8C8980E2,hours,minutes,seconds)end;
	--[=[Gets the current ingame hour, expressed without zeros. (09:34 will be represented as 9)]=]
	GetClockHours=function()return InvokeInt(0x25223CA6B4D20B7F)end;---@return integer
	--[=[Gets the current ingame clock minute.]=]
	GetClockMinutes=function()return InvokeInt(0x13D2B8ADD79640F2)end;---@return integer
	--[=[Gets the current ingame clock second. Note that ingame clock seconds change really fast since a day in GTA is only 48 minutes in real life.]=]
	GetClockSeconds=function()return InvokeInt(0x494E97C2EF27C470)end;---@return integer
	SetClockDate=function(day--[[@param day integer]],month--[[@param month integer]],year--[[@param year integer]])return InvokeVoid(0xB096419DF0D06CE7,day,month,year)end;
	--[=[Gets the current day of the week.

0: Sunday
1: Monday
2: Tuesday
3: Wednesday
4: Thursday
5: Friday
6: Saturday]=]
	GetClockDayOfWeek=function()return InvokeInt(0xD972E4BD7AEB235F)end;---@return integer
	GetClockDayOfMonth=function()return InvokeInt(0x3D10BC92A4DB1D35)end;---@return integer
	GetClockMonth=function()return InvokeInt(0xBBC72712E80257A1)end;---@return integer
	GetClockYear=function()return InvokeInt(0x961777E64BDAF717)end;---@return integer
	GetMillisecondsPerGameMinute=function()return InvokeInt(0x2F8B4D1C595B11DB)end;---@return integer
	--[=[Gets system time as year, month, day, hour, minute and second.

Example usage:

    int year;
 int month;
    int day;
  int hour;
 int minute;
   int second;

 TIME::GET_POSIX_TIME(&year, &month, &day, &hour, &minute, &second);
]=]
	GetPosixTime=function(year--[[@param year integer*]],month--[[@param month integer*]],day--[[@param day integer*]],hour--[[@param hour integer*]],minute--[[@param minute integer*]],second--[[@param second integer*]])return InvokeVoid(0xDA488F299A5B164E,year,month,day,hour,minute,second)end;
	--[=[Gets current UTC time]=]
	GetUtcTime=function(year--[[@param year integer*]],month--[[@param month integer*]],day--[[@param day integer*]],hour--[[@param hour integer*]],minute--[[@param minute integer*]],second--[[@param second integer*]])return InvokeVoid(0x8117E09A19EEF4D3,year,month,day,hour,minute,second)end;
	--[=[Gets local system time as year, month, day, hour, minute and second.

Example usage:

int year;
int month;
int day;
int hour;
int minute;
int second;
or use std::tm struct

TIME::GET_LOCAL_TIME(&year, &month, &day, &hour, &minute, &second);
]=]
	GetLocalTime=function(year--[[@param year integer*]],month--[[@param month integer*]],day--[[@param day integer*]],hour--[[@param hour integer*]],minute--[[@param minute integer*]],second--[[@param second integer*]])return InvokeVoid(0x50C7A99057A69748,year,month,day,hour,minute,second)end;
}
_G.Cutscene={
	--[=[flags: Usually 8
Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json]=]
	RequestCutscene=function(cutsceneName--[[@param cutsceneName string]],flags--[[@param flags integer]])return InvokeVoid(0x7A86743F475D9E09,cutsceneName,flags)end;
	--[=[flags: Usually 8

playbackFlags: Which scenes should be played.
Example: 0x105 (bit 0, 2 and 8 set) will enable scene 1, 3 and 9.
Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json]=]
	RequestCutsceneWithPlaybackList=function(cutsceneName--[[@param cutsceneName string]],playbackFlags--[[@param playbackFlags integer]],flags--[[@param flags integer]])return InvokeVoid(0xC23DE0E91C30B58C,cutsceneName,playbackFlags,flags)end;
	RemoveCutscene=function()return InvokeVoid(0x440AF51A3462B86F)end;
	HasCutsceneLoaded=function()return InvokeBool(0xC59F528E9AB9F339)end;---@return boolean
	--[=[Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json]=]
	HasThisCutsceneLoaded=function(cutsceneName--[[@param cutsceneName string]])return InvokeBool(0x228D3D94F8A11C3C,cutsceneName)end;---@return boolean
	--[=[Sets the cutscene's owning thread ID.]=]
	SetScriptCanStartCutscene=function(threadId--[[@param threadId integer]])return InvokeVoid(0x8D9DF6ECA8768583,threadId)end;
	CanRequestAssetsForCutsceneEntity=function()return InvokeBool(0xB56BBBCC2955D9CB)end;---@return boolean
	IsCutscenePlaybackFlagSet=function(flag--[[@param flag integer]])return InvokeBool(0x71B74D2AE19338D0,flag)end;---@return boolean
	SetCutsceneEntityStreamingFlags=function(cutsceneEntName--[[@param cutsceneEntName string]],p1--[[@param p1 integer]],p2--[[@param p2 integer]])return InvokeVoid(0x4C61C75BEE8184C2,cutsceneEntName,p1,p2)end;
	--[=[Simply loads the cutscene and doesn't do extra stuff that REQUEST_CUTSCENE does.
Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json]=]
	RequestCutFile=function(cutsceneName--[[@param cutsceneName string]])return InvokeVoid(0x06A3524161C502BA,cutsceneName)end;
	--[=[Simply checks if the cutscene has loaded and doesn't check via CutSceneManager as opposed to HAS_[THIS]_CUTSCENE_LOADED.
Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json]=]
	HasCutFileLoaded=function(cutsceneName--[[@param cutsceneName string]])return InvokeBool(0xA1C996C2A744262E,cutsceneName)end;---@return boolean
	--[=[Simply unloads the cutscene and doesn't do extra stuff that REMOVE_CUTSCENE does.
Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json]=]
	RemoveCutFile=function(cutsceneName--[[@param cutsceneName string]])return InvokeVoid(0xD00D76A7DFC9D852,cutsceneName)end;
	--[=[Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json]=]
	GetCutFileConcatCount=function(cutsceneName--[[@param cutsceneName string]])return InvokeInt(0x0ABC54DE641DC0FC,cutsceneName)end;---@return integer
	--[=[flags: Usually 0.]=]
	StartCutscene=function(flags--[[@param flags integer]])return InvokeVoid(0x186D5CB5E7B0FF7B,flags)end;
	--[=[flags: Usually 0.]=]
	StartCutsceneAtCoords=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],flags--[[@param flags integer]])return InvokeVoid(0x1C9ADDA3244A1FBF,x+.0,y+.0,z+.0,flags)end;
	StopCutscene=function(p0--[[@param p0 boolean]])return InvokeVoid(0xC7272775B4DC786E,p0)end;
	StopCutsceneImmediately=function()return InvokeVoid(0xD220BDD222AC4A1E)end;
	--[=[p3 could be heading. Needs more research.]=]
	SetCutsceneOrigin=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],p3--[[@param p3 number]],p4--[[@param p4 integer]])return InvokeVoid(0xB812B3FD1C01CF27,x+.0,y+.0,z+.0,p3+.0,p4)end;
	SetCutsceneOriginAndOrientation=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],p6--[[@param p6 integer]])return InvokeVoid(0x011883F41211432A,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,p6)end;
	GetCutsceneTime=function()return InvokeInt(0xE625BEABBAFFDAB9)end;---@return integer
	GetCutsceneTotalDuration=function()return InvokeInt(0xEE53B14A19E480D4)end;---@return integer
	GetCutsceneEndTime=function()return InvokeInt(0x971D7B15BCDBEF99)end;---@return integer
	GetCutscenePlayDuration=function()return InvokeInt(0x5D583F71C901F2A3)end;---@return integer
	WasCutsceneSkipped=function()return InvokeBool(0x40C8656EDAEDD569)end;---@return boolean
	HasCutsceneFinished=function()return InvokeBool(0x7C0A893088881D57)end;---@return boolean
	IsCutsceneActive=function()return InvokeBool(0x991251AFC3981F84)end;---@return boolean
	IsCutscenePlaying=function()return InvokeBool(0xD3C2E180A40F031E)end;---@return boolean
	GetCutsceneSectionPlaying=function()return InvokeInt(0x49010A6A396553D8)end;---@return integer
	GetEntityIndexOfCutsceneEntity=function(cutsceneEntName--[[@param cutsceneEntName string]],modelHash--[[@param modelHash integer]])return InvokeInt(0x0A2E9FDB9A8C62F6,cutsceneEntName,modelHash)end;---@return integer
	GetCutsceneConcatSectionPlaying=function()return InvokeInt(0x583DF8E3D4AFBD98)end;---@return integer
	--[=[This function is hard-coded to always return 1.]=]
	IsCutsceneAuthorized=function(cutsceneName--[[@param cutsceneName string]])return InvokeBool(0x4CEBC1ED31E8925E,cutsceneName)end;---@return boolean
	DoesCutsceneHandleExist=function(cutsceneHandle--[[@param cutsceneHandle integer]])return InvokeInt(0x4FCD976DA686580C,cutsceneHandle)end;---@return integer
	RegisterEntityForCutscene=function(cutscenePed--[[@param cutscenePed integer]],cutsceneEntName--[[@param cutsceneEntName string]],p2--[[@param p2 integer]],modelHash--[[@param modelHash integer]],p4--[[@param p4 integer]])return InvokeVoid(0xE40C1C56DF95C2E8,cutscenePed,cutsceneEntName,p2,modelHash,p4)end;
	GetEntityIndexOfRegisteredEntity=function(cutsceneEntName--[[@param cutsceneEntName string]],modelHash--[[@param modelHash integer]])return InvokeInt(0xC0741A26499654CD,cutsceneEntName,modelHash)end;---@return integer
	--[=[Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json]=]
	SetVehicleModelPlayerWillExitScene=function(modelHash--[[@param modelHash integer]])return InvokeVoid(0x7F96F23FA9B73327,modelHash)end;
	--[=[Only used twice in R* scripts]=]
	SetCutsceneTriggerArea=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]])return InvokeVoid(0x9896CE4721BE84BA,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0)end;
	--[=[modelHash (p1) was always 0 in R* scripts]=]
	CanSetEnterStateForRegisteredEntity=function(cutsceneEntName--[[@param cutsceneEntName string]],modelHash--[[@param modelHash integer]])return InvokeBool(0x645D0B458D8E17B5,cutsceneEntName,modelHash)end;---@return boolean
	CanSetExitStateForRegisteredEntity=function(cutsceneEntName--[[@param cutsceneEntName string]],modelHash--[[@param modelHash integer]])return InvokeBool(0x4C6A6451C79E4662,cutsceneEntName,modelHash)end;---@return boolean
	CanSetExitStateForCamera=function(p0--[[@param p0 boolean]])return InvokeBool(0xB2CBCD0930DFB420,p0)end;---@return boolean
	--[=[Toggles a value (bool) for cutscenes.]=]
	SetPadCanShakeDuringCutscene=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xC61B86C9F61EB404,toggle)end;
	SetCutsceneFadeValues=function(p0--[[@param p0 boolean]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],p3--[[@param p3 boolean]])return InvokeVoid(0x8093F23ABACCC7D4,p0,p1,p2,p3)end;
	SetCutsceneMultiheadFade=function(p0--[[@param p0 boolean]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],p3--[[@param p3 boolean]])return InvokeVoid(0x20746F7B1032A3C7,p0,p1,p2,p3)end;
	SetCutsceneMultiheadFadeManual=function(p0--[[@param p0 boolean]])return InvokeVoid(0x06EE9048FD080382,p0)end;
	IsMultiheadFadeUp=function()return InvokeBool(0xA0FE76168A189DDB)end;---@return boolean
	--[=[Stops current cutscene with a fade transition
p0: always true in R* Scripts
You will need to manually fade the screen back in
SET_CUTSCENE_INPUTS_PARTIALLY_FADE?]=]
	NetworkSetMocapCutsceneCanBeSkipped=function(p0--[[@param p0 boolean]])return InvokeVoid(0x2F137B508DE238F2,p0)end;
	SetCarGeneratorsCanUpdateDuringCutscene=function(p0--[[@param p0 boolean]])return InvokeVoid(0xE36A98D8AB3D3C66,p0)end;
	CanUseMobilePhoneDuringCutscene=function()return InvokeBool(0x5EDEF0CF8C1DAB3C)end;---@return boolean
	SetCutsceneCanBeSkipped=function(p0--[[@param p0 boolean]])return InvokeVoid(0x41FAA8FB2ECE8720,p0)end;
	SetCanDisplayMinimapDuringCutsceneThisUpdate=function()return InvokeVoid(0x2131046957F31B04)end;
	--[=[Full list of ped components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedComponentVariations.json]=]
	SetCutscenePedComponentVariation=function(cutsceneEntName--[[@param cutsceneEntName string]],componentId--[[@param componentId integer]],drawableId--[[@param drawableId integer]],textureId--[[@param textureId integer]],modelHash--[[@param modelHash integer]])return InvokeVoid(0xBA01E7B6DEEFBBC9,cutsceneEntName,componentId,drawableId,textureId,modelHash)end;
	SetCutscenePedComponentVariationFromPed=function(cutsceneEntName--[[@param cutsceneEntName string]],ped--[[@param ped integer]],modelHash--[[@param modelHash integer]])return InvokeVoid(0x2A56C06EBEF2B0D9,cutsceneEntName,ped,modelHash)end;
	DoesCutsceneEntityExist=function(cutsceneEntName--[[@param cutsceneEntName string]],modelHash--[[@param modelHash integer]])return InvokeBool(0x499EF20C5DB25C59,cutsceneEntName,modelHash)end;---@return boolean
	--[=[Thanks R*! ;)

if ((l_161 == 0) || (l_161 == 2)) {
    sub_2ea27("Trying to set Jimmy prop variation");
    CUTSCENE::SET_CUTSCENE_PED_PROP_VARIATION("Jimmy_Boston", 1, 0, 0, 0);
}

Full list of ped components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedComponentVariations.json]=]
	SetCutscenePedPropVariation=function(cutsceneEntName--[[@param cutsceneEntName string]],componentId--[[@param componentId integer]],drawableId--[[@param drawableId integer]],textureId--[[@param textureId integer]],modelHash--[[@param modelHash integer]])return InvokeVoid(0x0546524ADE2E9723,cutsceneEntName,componentId,drawableId,textureId,modelHash)end;
	--[=[Possibly HAS_CUTSCENE_CUT_THIS_FRAME, needs more research.]=]
	HasCutsceneCutThisFrame=function()return InvokeBool(0x708BDD8CD795B043)end;---@return boolean
}
_G.Datafile={
	--[=[Adds the given requestID to the watch list.]=]
	DatafileWatchRequestId=function(requestId--[[@param requestId integer]])return InvokeVoid(0xAD6875BBC0FC899C,requestId)end;
	DatafileClearWatchList=function()return InvokeVoid(0x6CC86E78358D5119)end;
	DatafileIsValidRequestId=function(index--[[@param index integer]])return InvokeBool(0xFCCAE5B92A830878,index)end;---@return boolean
	DatafileHasLoadedFileData=function(requestId--[[@param requestId integer]])return InvokeBool(0x15FF52B809DB2353,requestId)end;---@return boolean
	DatafileHasValidFileData=function(requestId--[[@param requestId integer]])return InvokeBool(0xF8CC1EBE0B62E29F,requestId)end;---@return boolean
	DatafileSelectActiveFile=function(requestId--[[@param requestId integer]],p1--[[@param p1 any]])return InvokeBool(0x22DA66936E0FFF37,requestId,p1)end;---@return boolean
	DatafileDeleteRequestedFile=function(requestId--[[@param requestId integer]])return InvokeBool(0x8F5EA1C01D65A100,requestId)end;---@return boolean
	UgcCreateContent=function(data--[[@param data any*]],dataCount--[[@param dataCount integer]],contentName--[[@param contentName string]],description--[[@param description string]],tagsCsv--[[@param tagsCsv string]],contentTypeName--[[@param contentTypeName string]],publish--[[@param publish boolean]],p7--[[@param p7 any]])return InvokeBool(0xC84527E235FCA219,data,dataCount,contentName,description,tagsCsv,contentTypeName,publish,p7)end;---@return boolean
	UgcCreateMission=function(contentName--[[@param contentName string]],description--[[@param description string]],tagsCsv--[[@param tagsCsv string]],contentTypeName--[[@param contentTypeName string]],publish--[[@param publish boolean]],p5--[[@param p5 any]])return InvokeBool(0xA5EFC3E847D60507,contentName,description,tagsCsv,contentTypeName,publish,p5)end;---@return boolean
	UgcUpdateContent=function(contentId--[[@param contentId string]],data--[[@param data any*]],dataCount--[[@param dataCount integer]],contentName--[[@param contentName string]],description--[[@param description string]],tagsCsv--[[@param tagsCsv string]],contentTypeName--[[@param contentTypeName string]],p7--[[@param p7 any]])return InvokeBool(0x648E7A5434AF7969,contentId,data,dataCount,contentName,description,tagsCsv,contentTypeName,p7)end;---@return boolean
	UgcUpdateMission=function(contentId--[[@param contentId string]],contentName--[[@param contentName string]],description--[[@param description string]],tagsCsv--[[@param tagsCsv string]],contentTypeName--[[@param contentTypeName string]],p5--[[@param p5 any]])return InvokeBool(0x4645DE9980999E93,contentId,contentName,description,tagsCsv,contentTypeName,p5)end;---@return boolean
	UgcSetPlayerData=function(contentId--[[@param contentId string]],rating--[[@param rating number]],contentTypeName--[[@param contentTypeName string]],p3--[[@param p3 any]])return InvokeBool(0x692D808C34A82143,contentId,rating+.0,contentTypeName,p3)end;---@return boolean
	DatafileSelectUgcData=function(p0--[[@param p0 integer]],p1--[[@param p1 any]])return InvokeBool(0xA69AC4ADE82B57A4,p0,p1)end;---@return boolean
	DatafileSelectUgcStats=function(p0--[[@param p0 integer]],p1--[[@param p1 boolean]],p2--[[@param p2 any]])return InvokeBool(0x9CB0BFA7A9342C3D,p0,p1,p2)end;---@return boolean
	DatafileSelectUgcPlayerData=function(p0--[[@param p0 integer]],p1--[[@param p1 any]])return InvokeBool(0x52818819057F2B40,p0,p1)end;---@return boolean
	DatafileSelectCreatorStats=function(p0--[[@param p0 integer]],p1--[[@param p1 any]])return InvokeBool(0x01095C95CD46B624,p0,p1)end;---@return boolean
	--[=[Loads a User-Generated Content (UGC) file. These files can be found in "[GTA5]\data\ugc" and "[GTA5]\common\patch\ugc". They seem to follow a naming convention, most likely of "[name]_[part].ugc". See example below for usage.

Returns whether or not the file was successfully loaded.

Example:
DATAFILE::DATAFILE_LOAD_OFFLINE_UGC("RockstarPlaylists") // loads "rockstarplaylists_00.ugc"]=]
	DatafileLoadOfflineUgc=function(filename--[[@param filename string]],p1--[[@param p1 any]])return InvokeBool(0xC5238C011AF405E4,filename,p1)end;---@return boolean
	DatafileCreate=function(p0--[[@param p0 integer]])return InvokeVoid(0xD27058A1CA2B13EE,p0)end;
	DatafileDelete=function(p0--[[@param p0 integer]])return InvokeVoid(0x9AB9C1CFC8862DFB,p0)end;
	DatafileStoreMissionHeader=function(p0--[[@param p0 integer]])return InvokeVoid(0x2ED61456317B8178,p0)end;
	DatafileFlushMissionHeader=function()return InvokeVoid(0xC55854C7D7274882)end;
	DatafileGetFileDict=function(p0--[[@param p0 integer]])return InvokeInt(0x906B778CA1DC72B6,p0)end;---@return integer
	DatafileStartSaveToCloud=function(filename--[[@param filename string]],p1--[[@param p1 any]])return InvokeBool(0x83BCCE3224735F05,filename,p1)end;---@return boolean
	DatafileUpdateSaveToCloud=function(p0--[[@param p0 boolean*]])return InvokeBool(0x4DFDD9EB705F8140,p0)end;---@return boolean
	DatafileIsSavePending=function()return InvokeBool(0xBEDB96A7584AA8CF)end;---@return boolean
	DatafileLoadOfflineUgcForAdditionalDataFile=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeBool(0xA6EEF01087181EDD,p0,p1)end;---@return boolean
	DatafileDeleteForAdditionalDataFile=function(p0--[[@param p0 any]])return InvokeVoid(0x6AD0BD5E087866CB,p0)end;
	DatafileGetFileDictForAdditionalDataFile=function(p0--[[@param p0 any]])return InvokeInt(0xDBF860CF1DB8E599,p0)end;---@return integer
	DatadictSetBool=function(objectData--[[@param objectData any*]],key--[[@param key string]],value--[[@param value boolean]])return InvokeVoid(0x35124302A556A325,objectData,key,value)end;
	DatadictSetInt=function(objectData--[[@param objectData any*]],key--[[@param key string]],value--[[@param value integer]])return InvokeVoid(0xE7E035450A7948D5,objectData,key,value)end;
	DatadictSetFloat=function(objectData--[[@param objectData any*]],key--[[@param key string]],value--[[@param value number]])return InvokeVoid(0xC27E1CC2D795105E,objectData,key,value+.0)end;
	DatadictSetString=function(objectData--[[@param objectData any*]],key--[[@param key string]],value--[[@param value string]])return InvokeVoid(0x8FF3847DADD8E30C,objectData,key,value)end;
	DatadictSetVector=function(objectData--[[@param objectData any*]],key--[[@param key string]],valueX--[[@param valueX number]],valueY--[[@param valueY number]],valueZ--[[@param valueZ number]])return InvokeVoid(0x4CD49B76338C7DEE,objectData,key,valueX+.0,valueY+.0,valueZ+.0)end;
	DatadictCreateDict=function(objectData--[[@param objectData any*]],key--[[@param key string]])return InvokeInt(0xA358F56F10732EE1,objectData,key)end;---@return integer
	DatadictCreateArray=function(objectData--[[@param objectData any*]],key--[[@param key string]])return InvokeInt(0x5B11728527CA6E5F,objectData,key)end;---@return integer
	DatadictGetBool=function(objectData--[[@param objectData any*]],key--[[@param key string]])return InvokeBool(0x1186940ED72FFEEC,objectData,key)end;---@return boolean
	DatadictGetInt=function(objectData--[[@param objectData any*]],key--[[@param key string]])return InvokeInt(0x78F06F6B1FB5A80C,objectData,key)end;---@return integer
	DatadictGetFloat=function(objectData--[[@param objectData any*]],key--[[@param key string]])return InvokeFloat(0x06610343E73B9727,objectData,key)end;---@return number
	DatadictGetString=function(objectData--[[@param objectData any*]],key--[[@param key string]])return InvokeString(0x3D2FD9E763B24472,objectData,key)end;---@return string
	DatadictGetVector=function(objectData--[[@param objectData any*]],key--[[@param key string]])return InvokeV3(0x46CD3CB66E0825CC,objectData,key)end;---@return V3
	DatadictGetDict=function(objectData--[[@param objectData any*]],key--[[@param key string]])return InvokeInt(0xB6B9DDC412FCEEE2,objectData,key)end;---@return integer
	DatadictGetArray=function(objectData--[[@param objectData any*]],key--[[@param key string]])return InvokeInt(0x7A983AA9DA2659ED,objectData,key)end;---@return integer
	--[=[Types:
1 = Boolean
2 = Integer
3 = Float
4 = String
5 = Vector3
6 = Object
7 = Array]=]
	DatadictGetType=function(objectData--[[@param objectData any*]],key--[[@param key string]])return InvokeInt(0x031C55ED33227371,objectData,key)end;---@return integer
	DataarrayAddBool=function(arrayData--[[@param arrayData any*]],value--[[@param value boolean]])return InvokeVoid(0xF8B0F5A43E928C76,arrayData,value)end;
	DataarrayAddInt=function(arrayData--[[@param arrayData any*]],value--[[@param value integer]])return InvokeVoid(0xCABDB751D86FE93B,arrayData,value)end;
	DataarrayAddFloat=function(arrayData--[[@param arrayData any*]],value--[[@param value number]])return InvokeVoid(0x57A995FD75D37F56,arrayData,value+.0)end;
	DataarrayAddString=function(arrayData--[[@param arrayData any*]],value--[[@param value string]])return InvokeVoid(0x2F0661C155AEEEAA,arrayData,value)end;
	DataarrayAddVector=function(arrayData--[[@param arrayData any*]],valueX--[[@param valueX number]],valueY--[[@param valueY number]],valueZ--[[@param valueZ number]])return InvokeVoid(0x407F8D034F70F0C2,arrayData,valueX+.0,valueY+.0,valueZ+.0)end;
	DataarrayAddDict=function(arrayData--[[@param arrayData any*]])return InvokeInt(0x6889498B3E19C797,arrayData)end;---@return integer
	DataarrayGetBool=function(arrayData--[[@param arrayData any*]],arrayIndex--[[@param arrayIndex integer]])return InvokeBool(0x50C1B2874E50C114,arrayData,arrayIndex)end;---@return boolean
	DataarrayGetInt=function(arrayData--[[@param arrayData any*]],arrayIndex--[[@param arrayIndex integer]])return InvokeInt(0x3E5AE19425CD74BE,arrayData,arrayIndex)end;---@return integer
	DataarrayGetFloat=function(arrayData--[[@param arrayData any*]],arrayIndex--[[@param arrayIndex integer]])return InvokeFloat(0xC0C527B525D7CFB5,arrayData,arrayIndex)end;---@return number
	DataarrayGetString=function(arrayData--[[@param arrayData any*]],arrayIndex--[[@param arrayIndex integer]])return InvokeString(0xD3F2FFEB8D836F52,arrayData,arrayIndex)end;---@return string
	DataarrayGetVector=function(arrayData--[[@param arrayData any*]],arrayIndex--[[@param arrayIndex integer]])return InvokeV3(0x8D2064E5B64A628A,arrayData,arrayIndex)end;---@return V3
	DataarrayGetDict=function(arrayData--[[@param arrayData any*]],arrayIndex--[[@param arrayIndex integer]])return InvokeInt(0x8B5FADCC4E3A145F,arrayData,arrayIndex)end;---@return integer
	DataarrayGetCount=function(arrayData--[[@param arrayData any*]])return InvokeInt(0x065DB281590CEA2D,arrayData)end;---@return integer
	--[=[Types:
1 = Boolean
2 = Integer
3 = Float
4 = String
5 = Vector3
6 = Object
7 = Array]=]
	DataarrayGetType=function(arrayData--[[@param arrayData any*]],arrayIndex--[[@param arrayIndex integer]])return InvokeInt(0x3A0014ADB172A3C5,arrayData,arrayIndex)end;---@return integer
}
_G.Decorator={
	DecorSetTime=function(entity--[[@param entity integer]],propertyName--[[@param propertyName string]],timestamp--[[@param timestamp integer]])return InvokeBool(0x95AED7B8E39ECAA4,entity,propertyName,timestamp)end;---@return boolean
	--[=[This function sets metadata of type bool to specified entity.
]=]
	DecorSetBool=function(entity--[[@param entity integer]],propertyName--[[@param propertyName string]],value--[[@param value boolean]])return InvokeBool(0x6B1E8E2ED1335B71,entity,propertyName,value)end;---@return boolean
	DecorSetFloat=function(entity--[[@param entity integer]],propertyName--[[@param propertyName string]],value--[[@param value number]])return InvokeBool(0x211AB1DD8D0F363A,entity,propertyName,value+.0)end;---@return boolean
	--[=[Sets property to int.]=]
	DecorSetInt=function(entity--[[@param entity integer]],propertyName--[[@param propertyName string]],value--[[@param value integer]])return InvokeBool(0x0CE3AA5E1CA19E10,entity,propertyName,value)end;---@return boolean
	DecorGetBool=function(entity--[[@param entity integer]],propertyName--[[@param propertyName string]])return InvokeBool(0xDACE671663F2F5DB,entity,propertyName)end;---@return boolean
	DecorGetFloat=function(entity--[[@param entity integer]],propertyName--[[@param propertyName string]])return InvokeFloat(0x6524A2F114706F43,entity,propertyName)end;---@return number
	DecorGetInt=function(entity--[[@param entity integer]],propertyName--[[@param propertyName string]])return InvokeInt(0xA06C969B02A97298,entity,propertyName)end;---@return integer
	--[=[Returns whether or not the specified property is set for the entity.]=]
	DecorExistOn=function(entity--[[@param entity integer]],propertyName--[[@param propertyName string]])return InvokeBool(0x05661B80A8C9165F,entity,propertyName)end;---@return boolean
	DecorRemove=function(entity--[[@param entity integer]],propertyName--[[@param propertyName string]])return InvokeBool(0x00EE9F297C738720,entity,propertyName)end;---@return boolean
	--[=[https://alloc8or.re/gta5/doc/enums/eDecorType.txt]=]
	DecorRegister=function(propertyName--[[@param propertyName string]],type--[[@param type integer]])return InvokeVoid(0x9FD90732F56403CE,propertyName,type)end;
	--[=[type: see DECOR_REGISTER]=]
	DecorIsRegisteredAsType=function(propertyName--[[@param propertyName string]],type--[[@param type integer]])return InvokeBool(0x4F14F9F870D6FBC8,propertyName,type)end;---@return boolean
	--[=[Called after all decorator type initializations.]=]
	DecorRegisterLock=function()return InvokeVoid(0xA9D14EEA259F9248)end;
}
_G.Dlc={
	AreAnyCcsPending=function()return InvokeBool(0x241FCA5B1AA14F75)end;---@return boolean
	--[=[Returns true if the given DLC pack is present.]=]
	IsDlcPresent=function(dlcHash--[[@param dlcHash integer]])return InvokeBool(0x812595A0644CE1DE,dlcHash)end;---@return boolean
	--[=[This function is hard-coded to always return 1.]=]
	DlcCheckCloudDataCorrect=function()return InvokeBool(0xF2E07819EF1A5289)end;---@return boolean
	--[=[This function is hard-coded to always return 0.]=]
	GetExtracontentCloudResult=function()return InvokeInt(0x9489659372A81585)end;---@return integer
	--[=[This function is hard-coded to always return 1.]=]
	DlcCheckCompatPackConfiguration=function()return InvokeBool(0xA213B11DFF526300)end;---@return boolean
	GetEverHadBadPackOrder=function()return InvokeBool(0x8D30F648014A92B5)end;---@return boolean
	GetIsLoadingScreenActive=function()return InvokeBool(0x10D0A8F259E93EC9)end;---@return boolean
	GetIsInitialLoadingScreenActive=function()return InvokeBool(0xC4637A6D03C24CC3)end;---@return boolean
	--[=[Sets the value of the specified variable to 0.
Always returns true.]=]
	HasCloudRequestsFinished=function(p0--[[@param p0 boolean*]],unused--[[@param unused integer]])return InvokeBool(0x46E2B844905BC5F0,p0,unused)end;---@return boolean
	--[=[Unloads GROUP_MAP (GTAO/MP) DLC data and loads GROUP_MAP_SP DLC. Neither are loaded by default, ON_ENTER_MP is a cognate to this function and loads MP DLC (and unloads SP DLC by extension).
Works in singleplayer.]=]
	OnEnterSp=function()return InvokeVoid(0xD7C10C4A637992C9)end;
	--[=[This loads the GTA:O dlc map parts (high end garages, apartments).
Works in singleplayer.
In order to use GTA:O heist IPL's you have to call this native with the following params: SET_INSTANCE_PRIORITY_MODE(1);]=]
	OnEnterMp=function()return InvokeVoid(0x0888C3502DBBEEF5)end;
}
_G.Entity={
	--[=[Checks whether an entity exists in the game world.]=]
	DoesEntityExist=function(entity--[[@param entity integer]])return InvokeBool(0x7239B21A38F536BA,entity)end;---@return boolean
	DoesEntityBelongToThisScript=function(entity--[[@param entity integer]],p1--[[@param p1 boolean]])return InvokeBool(0xDDE6DF5AE89981D2,entity,p1)end;---@return boolean
	DoesEntityHaveDrawable=function(entity--[[@param entity integer]])return InvokeBool(0x060D6E96F8B8E48D,entity)end;---@return boolean
	DoesEntityHavePhysics=function(entity--[[@param entity integer]])return InvokeBool(0xDA95EA3317CC5064,entity)end;---@return boolean
	DoesEntityHaveSkeleton=function(entity--[[@param entity integer]])return InvokeBool(0x764EB96874EFFDC1,entity)end;---@return boolean
	DoesEntityHaveAnimDirector=function(entity--[[@param entity integer]])return InvokeBool(0x2158E81A6AF65EA9,entity)end;---@return boolean
	--[=[P3 is always 3 as far as i cant tell

Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json]=]
	HasEntityAnimFinished=function(entity--[[@param entity integer]],animDict--[[@param animDict string]],animName--[[@param animName string]],p3--[[@param p3 integer]])return InvokeBool(0x20B711662962B472,entity,animDict,animName,p3)end;---@return boolean
	HasEntityBeenDamagedByAnyObject=function(entity--[[@param entity integer]])return InvokeBool(0x95EB9964FF5C5C65,entity)end;---@return boolean
	HasEntityBeenDamagedByAnyPed=function(entity--[[@param entity integer]])return InvokeBool(0x605F5A140F202491,entity)end;---@return boolean
	HasEntityBeenDamagedByAnyVehicle=function(entity--[[@param entity integer]])return InvokeBool(0xDFD5033FDBA0A9C8,entity)end;---@return boolean
	--[=[Entity 1 = Victim
Entity 2 = Attacker

p2 seems to always be 1]=]
	HasEntityBeenDamagedByEntity=function(entity1--[[@param entity1 integer]],entity2--[[@param entity2 integer]],p2--[[@param p2 boolean]])return InvokeBool(0xC86D67D52A707CF8,entity1,entity2,p2)end;---@return boolean
	--[=[traceType is always 17 in the scripts.

There is other codes used for traceType:
19 - in jewelry_prep1a
126 - in am_hunt_the_beast
256 & 287 - in fm_mission_controller]=]
	HasEntityClearLosToEntity=function(entity1--[[@param entity1 integer]],entity2--[[@param entity2 integer]],traceType--[[@param traceType integer]])return InvokeBool(0xFCDFF7B72D23A1AC,entity1,entity2,traceType)end;---@return boolean
	HasEntityClearLosToEntityAdjustForCover=function(entity1--[[@param entity1 integer]],entity2--[[@param entity2 integer]],traceType--[[@param traceType integer]])return InvokeBool(0x394BDE2A7BBA031E,entity1,entity2,traceType)end;---@return boolean
	--[=[Has the entity1 got a clear line of sight to the other entity2 from the direction entity1 is facing.
This is one of the most CPU demanding BOOL natives in the game; avoid calling this in things like nested for-loops]=]
	HasEntityClearLosToEntityInFront=function(entity1--[[@param entity1 integer]],entity2--[[@param entity2 integer]])return InvokeBool(0x0267D00AF114F17A,entity1,entity2)end;---@return boolean
	--[=[Called on tick.
Tested with vehicles, returns true whenever the vehicle is touching any entity.

Note: for vehicles, the wheels can touch the ground and it will still return false, but if the body of the vehicle touches the ground, it will return true.]=]
	HasEntityCollidedWithAnything=function(entity--[[@param entity integer]])return InvokeBool(0x8BAD02F0368D9E14,entity)end;---@return boolean
	GetLastEntityHitByEntity=function(entity--[[@param entity integer]])return InvokeInt(0xA75EE4F689B85391,entity)end;---@return integer
	GetLastMaterialHitByEntity=function(entity--[[@param entity integer]])return InvokeInt(0x5C3D0A935F535C4C,entity)end;---@return integer
	GetCollisionNormalOfLastHitForEntity=function(entity--[[@param entity integer]])return InvokeV3(0xE465D4AB7CA6AE72,entity)end;---@return V3
	--[=[Based on carmod_shop script decompile this takes a vehicle parameter. It is called when repair is done on initial enter.]=]
	ForceEntityAiAndAnimationUpdate=function(entity--[[@param entity integer]])return InvokeVoid(0x40FDEDB72F8293B2,entity)end;
	--[=[Returns a float value representing animation's current playtime with respect to its total playtime. This value increasing in a range from [0 to 1] and wrap back to 0 when it reach 1.

Example:
0.000000 - mark the starting of animation.
0.500000 - mark the midpoint of the animation.
1.000000 - mark the end of animation.

Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json]=]
	GetEntityAnimCurrentTime=function(entity--[[@param entity integer]],animDict--[[@param animDict string]],animName--[[@param animName string]])return InvokeFloat(0x346D81500D088F42,entity,animDict,animName)end;---@return number
	--[=[Returns a float value representing animation's total playtime in milliseconds.

Example:
GET_ENTITY_ANIM_TOTAL_TIME(PLAYER_ID(),"amb@world_human_yoga@female@base","base_b") 
return 20800.000000

Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json]=]
	GetEntityAnimTotalTime=function(entity--[[@param entity integer]],animDict--[[@param animDict string]],animName--[[@param animName string]])return InvokeFloat(0x50BD2730B191E360,entity,animDict,animName)end;---@return number
	--[=[Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json]=]
	GetAnimDuration=function(animDict--[[@param animDict string]],animName--[[@param animName string]])return InvokeFloat(0xFEDDF04D62B8D790,animDict,animName)end;---@return number
	GetEntityAttachedTo=function(entity--[[@param entity integer]])return InvokeInt(0x48C2BED9180FE123,entity)end;---@return integer
	--[=[Gets the current coordinates for a specified entity.
`entity` = The entity to get the coordinates from.
`alive` = Unused by the game, potentially used by debug builds of GTA in order to assert whether or not an entity was alive.]=]
	GetEntityCoords=function(entity--[[@param entity integer]],alive--[[@param alive boolean]])return InvokeV3(0x3FEF770D40960D5A,entity,alive)end;---@return V3
	--[=[Gets the entity's forward vector.]=]
	GetEntityForwardVector=function(entity--[[@param entity integer]])return InvokeV3(0x0A794A5A57F8DF91,entity)end;---@return V3
	--[=[Gets the X-component of the entity's forward vector.]=]
	GetEntityForwardX=function(entity--[[@param entity integer]])return InvokeFloat(0x8BB4EF4214E0E6D5,entity)end;---@return number
	--[=[Gets the Y-component of the entity's forward vector.]=]
	GetEntityForwardY=function(entity--[[@param entity integer]])return InvokeFloat(0x866A4A5FAE349510,entity)end;---@return number
	--[=[Returns the heading of the entity in degrees. Also know as the "Yaw" of an entity.]=]
	GetEntityHeading=function(entity--[[@param entity integer]])return InvokeFloat(0xE83D4F9BA2A38914,entity)end;---@return number
	--[=[Gets the heading of the entity physics in degrees, which tends to be more accurate than just "GET_ENTITY_HEADING". This can be clearly seen while, for example, ragdolling a ped/player.

NOTE: The name and description of this native are based on independent research. If you find this native to be more suitable under a different name and/or described differently, please feel free to do so.]=]
	GetEntityHeadingFromEulers=function(entity--[[@param entity integer]])return InvokeFloat(0x846BF6291198A71E,entity)end;---@return number
	--[=[Returns an integer value of entity's current health.

Example of range for ped:
- Player [0 to 200]
- Ped [100 to 200]
- Vehicle [0 to 1000]
- Object [0 to 1000]

Health is actually a float value but this native casts it to int.
In order to get the actual value, do:
float health = *(float *)(entityAddress + 0x280);]=]
	GetEntityHealth=function(entity--[[@param entity integer]])return InvokeInt(0xEEF059FAD016D209,entity)end;---@return integer
	--[=[Return an integer value of entity's maximum health.

Example:
- Player = 200
- Ped = 150]=]
	GetEntityMaxHealth=function(entity--[[@param entity integer]])return InvokeInt(0x15D757606D170C3C,entity)end;---@return integer
	--[=[For instance: ENTITY::SET_ENTITY_MAX_HEALTH(PLAYER::PLAYER_PED_ID(), 200); // director_mode.c4: 67849]=]
	SetEntityMaxHealth=function(entity--[[@param entity integer]],value--[[@param value integer]])return InvokeVoid(0x166E7CF68597D8B5,entity,value)end;
	GetEntityHeight=function(entity--[[@param entity integer]],X--[[@param X number]],Y--[[@param Y number]],Z--[[@param Z number]],atTop--[[@param atTop boolean]],inWorldCoords--[[@param inWorldCoords boolean]])return InvokeFloat(0x5A504562485944DD,entity,X+.0,Y+.0,Z+.0,atTop,inWorldCoords)end;---@return number
	--[=[Return height (z-dimension) above ground. 
Example: The pilot in a titan plane is 1.844176 above ground.

How can i convert it to meters?
Everything seems to be in meters, probably this too.]=]
	GetEntityHeightAboveGround=function(entity--[[@param entity integer]])return InvokeFloat(0x1DD55701034110E5,entity)end;---@return number
	GetEntityMatrix=function(entity--[[@param entity integer]],forwardVector--[[@param forwardVector V3*]],rightVector--[[@param rightVector V3*]],upVector--[[@param upVector V3*]],position--[[@param position V3*]])return InvokeVoid(0xECB2FC7235A7D137,entity,forwardVector,rightVector,upVector,position)end;
	--[=[Returns the model hash from the entity]=]
	GetEntityModel=function(entity--[[@param entity integer]])return InvokeInt(0x9F47B058362C84B5,entity)end;---@return integer
	--[=[Converts world coords (posX - Z) to coords relative to the entity

Example:
posX is given as 50
entity's x coord is 40
the returned x coord will then be 10 or -10, not sure haven't used this in a while (think it is 10 though).]=]
	GetOffsetFromEntityGivenWorldCoords=function(entity--[[@param entity integer]],posX--[[@param posX number]],posY--[[@param posY number]],posZ--[[@param posZ number]])return InvokeV3(0x2274BC1C4885E333,entity,posX+.0,posY+.0,posZ+.0)end;---@return V3
	--[=[Offset values are relative to the entity.

x = left/right
y = forward/backward
z = up/down]=]
	GetOffsetFromEntityInWorldCoords=function(entity--[[@param entity integer]],offsetX--[[@param offsetX number]],offsetY--[[@param offsetY number]],offsetZ--[[@param offsetZ number]])return InvokeV3(0x1899F328B0E12848,entity,offsetX+.0,offsetY+.0,offsetZ+.0)end;---@return V3
	GetEntityPitch=function(entity--[[@param entity integer]])return InvokeFloat(0xD45DC2893621E1FE,entity)end;---@return number
	--[=[w is the correct parameter name!]=]
	GetEntityQuaternion=function(entity--[[@param entity integer]],x--[[@param x number*]],y--[[@param y number*]],z--[[@param z number*]],w--[[@param w number*]])return InvokeVoid(0x7B3703D2D32DFA18,entity,x,y,z,w)end;
	--[=[Displays the current ROLL axis of the entity [-180.0000/180.0000+]
(Sideways Roll) such as a vehicle tipped on its side]=]
	GetEntityRoll=function(entity--[[@param entity integer]])return InvokeFloat(0x831E0242595560DF,entity)end;---@return number
	--[=[rotationOrder is the order yaw, pitch and roll is applied. Usually 2. Returns a vector where the Z coordinate is the yaw.

rotationOrder refers to the order yaw pitch roll is applied; value ranges from 0 to 5 and is usually *2* in scripts.
What you use for rotationOrder when getting must be the same as rotationOrder when setting the rotation.

What it returns is the yaw on the z part of the vector, which makes sense considering R* considers z as vertical. Here's a picture for those of you who don't understand pitch, yaw, and roll: www.allstar.fiu.edu/aero/images/pic5-1.gif

Rotation Orders:
0: ZYX - Rotate around the z-axis, then the y-axis and finally the x-axis.
1: YZX - Rotate around the y-axis, then the z-axis and finally the x-axis.
2: ZXY - Rotate around the z-axis, then the x-axis and finally the y-axis.
3: XZY - Rotate around the x-axis, then the z-axis and finally the y-axis.
4: YXZ - Rotate around the y-axis, then the x-axis and finally the z-axis.
5: XYZ - Rotate around the x-axis, then the y-axis and finally the z-axis.]=]
	GetEntityRotation=function(entity--[[@param entity integer]],rotationOrder--[[@param rotationOrder integer]])return InvokeV3(0xAFBD61CC738D9EB9,entity,rotationOrder)end;---@return V3
	GetEntityRotationVelocity=function(entity--[[@param entity integer]])return InvokeV3(0x213B91045D09B983,entity)end;---@return V3
	--[=[Returns the name of the script that owns/created the entity or nullptr. Second parameter is unused, can just be a nullptr.]=]
	GetEntityScript=function(entity--[[@param entity integer]],script--[[@param script integer*]])return InvokeString(0xA6E9C38DB51D7748,entity,script)end;---@return string
	--[=[result is in meters per second

------------------------------------------------------------
So would the conversion to mph and km/h, be along the lines of this.

float speed = GET_ENTITY_SPEED(veh);
float kmh = (speed * 3.6);
float mph = (speed * 2.236936);
------------------------------------------------------------]=]
	GetEntitySpeed=function(entity--[[@param entity integer]])return InvokeFloat(0xD5037BA82E12416F,entity)end;---@return number
	--[=[Relative can be used for getting speed relative to the frame of the vehicle, to determine for example, if you are going in reverse (-y speed) or not (+y speed). ]=]
	GetEntitySpeedVector=function(entity--[[@param entity integer]],relative--[[@param relative boolean]])return InvokeV3(0x9A8D700A51CB7B0D,entity,relative)end;---@return V3
	GetEntityUprightValue=function(entity--[[@param entity integer]])return InvokeFloat(0x95EED5A694951F9F,entity)end;---@return number
	GetEntityVelocity=function(entity--[[@param entity integer]])return InvokeV3(0x4805D2B1D8CF94A9,entity)end;---@return V3
	--[=[Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).]=]
	GetObjectIndexFromEntityIndex=function(entity--[[@param entity integer]])return InvokeInt(0xD7E3B9735C0F89D6,entity)end;---@return integer
	--[=[Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).]=]
	GetPedIndexFromEntityIndex=function(entity--[[@param entity integer]])return InvokeInt(0x04A2A40C73395041,entity)end;---@return integer
	--[=[Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).]=]
	GetVehicleIndexFromEntityIndex=function(entity--[[@param entity integer]])return InvokeInt(0x4B53F92932ADFAC0,entity)end;---@return integer
	--[=[Returns the coordinates of an entity-bone.]=]
	GetWorldPositionOfEntityBone=function(entity--[[@param entity integer]],boneIndex--[[@param boneIndex integer]])return InvokeV3(0x44A8FCB8ED227738,entity,boneIndex)end;---@return V3
	GetNearestPlayerToEntity=function(entity--[[@param entity integer]])return InvokeInt(0x7196842CB375CDB3,entity)end;---@return integer
	GetNearestPlayerToEntityOnTeam=function(entity--[[@param entity integer]],team--[[@param team integer]])return InvokeInt(0x4DC9A62F844D9337,entity,team)end;---@return integer
	GetNearestParticipantToEntity=function(entity--[[@param entity integer]])return InvokeInt(0xFFBD7052D65BE0FF,entity)end;---@return integer
	--[=[Returns:
0 = no entity
1 = ped
2 = vehicle
3 = object]=]
	GetEntityType=function(entity--[[@param entity integer]])return InvokeInt(0x8ACD366038D14505,entity)end;---@return integer
	--[=[A population type, from the following enum: https://alloc8or.re/gta5/doc/enums/ePopulationType.txt]=]
	GetEntityPopulationType=function(entity--[[@param entity integer]])return InvokeInt(0xF6F5161F4534EDFF,entity)end;---@return integer
	IsAnEntity=function(handle--[[@param handle integer]])return InvokeBool(0x731EC8A916BD11A1,handle)end;---@return boolean
	IsEntityAPed=function(entity--[[@param entity integer]])return InvokeBool(0x524AC5ECEA15343E,entity)end;---@return boolean
	IsEntityAMissionEntity=function(entity--[[@param entity integer]])return InvokeBool(0x0A7B270912999B3C,entity)end;---@return boolean
	IsEntityAVehicle=function(entity--[[@param entity integer]])return InvokeBool(0x6AC7003FA6E5575E,entity)end;---@return boolean
	IsEntityAnObject=function(entity--[[@param entity integer]])return InvokeBool(0x8D68C8FD0FACA94E,entity)end;---@return boolean
	--[=[Checks if entity is within x/y/zSize distance of x/y/z. 

Last three are unknown ints, almost always p7 = 0, p8 = 1, p9 = 0]=]
	IsEntityAtCoord=function(entity--[[@param entity integer]],xPos--[[@param xPos number]],yPos--[[@param yPos number]],zPos--[[@param zPos number]],xSize--[[@param xSize number]],ySize--[[@param ySize number]],zSize--[[@param zSize number]],p7--[[@param p7 boolean]],p8--[[@param p8 boolean]],p9--[[@param p9 integer]])return InvokeBool(0x20B60995556D004F,entity,xPos+.0,yPos+.0,zPos+.0,xSize+.0,ySize+.0,zSize+.0,p7,p8,p9)end;---@return boolean
	--[=[Checks if entity1 is within the box defined by x/y/zSize of entity2.

Last three parameters are almost alwasy p5 = 0, p6 = 1, p7 = 0]=]
	IsEntityAtEntity=function(entity1--[[@param entity1 integer]],entity2--[[@param entity2 integer]],xSize--[[@param xSize number]],ySize--[[@param ySize number]],zSize--[[@param zSize number]],p5--[[@param p5 boolean]],p6--[[@param p6 boolean]],p7--[[@param p7 integer]])return InvokeBool(0x751B70C3D034E187,entity1,entity2,xSize+.0,ySize+.0,zSize+.0,p5,p6,p7)end;---@return boolean
	--[=[Whether the entity is attached to any other entity.]=]
	IsEntityAttached=function(entity--[[@param entity integer]])return InvokeBool(0xB346476EF1A64897,entity)end;---@return boolean
	IsEntityAttachedToAnyObject=function(entity--[[@param entity integer]])return InvokeBool(0xCF511840CEEDE0CC,entity)end;---@return boolean
	IsEntityAttachedToAnyPed=function(entity--[[@param entity integer]])return InvokeBool(0xB1632E9A5F988D11,entity)end;---@return boolean
	IsEntityAttachedToAnyVehicle=function(entity--[[@param entity integer]])return InvokeBool(0x26AA915AD89BFB4B,entity)end;---@return boolean
	IsEntityAttachedToEntity=function(from--[[@param from integer]],to--[[@param to integer]])return InvokeBool(0xEFBE71898A993728,from,to)end;---@return boolean
	IsEntityDead=function(entity--[[@param entity integer]],p1--[[@param p1 boolean]])return InvokeBool(0x5F9532F3B5CC2551,entity,p1)end;---@return boolean
	IsEntityInAir=function(entity--[[@param entity integer]])return InvokeBool(0x886E37EC497200B6,entity)end;---@return boolean
	--[=[`p8` is a debug flag invoking functions in the same path as ``DRAW_MARKER``
`p10` is some entity flag check, also used in `IS_ENTITY_AT_ENTITY`, `IS_ENTITY_IN_AREA`, and `IS_ENTITY_AT_COORD`.
See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.]=]
	IsEntityInAngledArea=function(entity--[[@param entity integer]],x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],width--[[@param width number]],debug--[[@param debug boolean]],includeZ--[[@param includeZ boolean]],p10--[[@param p10 any]])return InvokeBool(0x51210CED3DA1C78A,entity,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,width+.0,debug,includeZ,p10)end;---@return boolean
	IsEntityInArea=function(entity--[[@param entity integer]],x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],p7--[[@param p7 boolean]],p8--[[@param p8 boolean]],p9--[[@param p9 any]])return InvokeBool(0x54736AA40E271165,entity,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,p7,p8,p9)end;---@return boolean
	--[=[Full list of zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/zones.json]=]
	IsEntityInZone=function(entity--[[@param entity integer]],zone--[[@param zone string]])return InvokeBool(0xB6463CF6AF527071,entity,zone)end;---@return boolean
	IsEntityInWater=function(entity--[[@param entity integer]])return InvokeBool(0xCFB0A0D8EDD145A3,entity)end;---@return boolean
	--[=[Get how much of the entity is submerged.  1.0f is whole entity.]=]
	GetEntitySubmergedLevel=function(entity--[[@param entity integer]])return InvokeFloat(0xE81AFC1BC4CC41CE,entity)end;---@return number
	SetEntityRequiresMoreExpensiveRiverCheck=function(entity--[[@param entity integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x694E00132F2823ED,entity,toggle)end;
	--[=[Returns true if the entity is in between the minimum and maximum values for the 2d screen coords. 
This means that it will return true even if the entity is behind a wall for example, as long as you're looking at their location. 
Chipping]=]
	IsEntityOnScreen=function(entity--[[@param entity integer]])return InvokeBool(0xE659E47AF827484B,entity)end;---@return boolean
	--[=[See also PED::IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM 0x6EC47A344923E1ED 0x3C30B447

Taken from ENTITY::IS_ENTITY_PLAYING_ANIM(PLAYER::PLAYER_PED_ID(), "creatures@shark@move", "attack_player", 3)

p4 is always 3 in the scripts.

Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json]=]
	IsEntityPlayingAnim=function(entity--[[@param entity integer]],animDict--[[@param animDict string]],animName--[[@param animName string]],taskFlag--[[@param taskFlag integer]])return InvokeBool(0x1F0B79228E461EC9,entity,animDict,animName,taskFlag)end;---@return boolean
	--[=[a static ped will not react to natives like "APPLY_FORCE_TO_ENTITY" or "SET_ENTITY_VELOCITY" and oftentimes will not react to task-natives like "TASK::TASK_COMBAT_PED". The only way I know of to make one of these peds react is to ragdoll them (or sometimes to use CLEAR_PED_TASKS_IMMEDIATELY(). Static peds include almost all far-away peds, beach-combers, peds in certain scenarios, peds crossing a crosswalk, peds walking to get back into their cars, and others. If anyone knows how to make a ped non-static without ragdolling them, please edit this with the solution.

how can I make an entity static???]=]
	IsEntityStatic=function(entity--[[@param entity integer]])return InvokeBool(0x1218E6886D3D8327,entity)end;---@return boolean
	IsEntityTouchingEntity=function(entity--[[@param entity integer]],targetEntity--[[@param targetEntity integer]])return InvokeBool(0x17FFC1B2BA35A494,entity,targetEntity)end;---@return boolean
	IsEntityTouchingModel=function(entity--[[@param entity integer]],modelHash--[[@param modelHash integer]])return InvokeBool(0x0F42323798A58C8C,entity,modelHash)end;---@return boolean
	IsEntityUpright=function(entity--[[@param entity integer]],angle--[[@param angle number]])return InvokeBool(0x5333F526F6AB19AA,entity,angle+.0)end;---@return boolean
	IsEntityUpsidedown=function(entity--[[@param entity integer]])return InvokeBool(0x1DBD58820FA61D71,entity)end;---@return boolean
	IsEntityVisible=function(entity--[[@param entity integer]])return InvokeBool(0x47D6F43D77935C75,entity)end;---@return boolean
	IsEntityVisibleToScript=function(entity--[[@param entity integer]])return InvokeBool(0xD796CB5BA8F20E32,entity)end;---@return boolean
	IsEntityOccluded=function(entity--[[@param entity integer]])return InvokeBool(0xE31C2C72B8692B64,entity)end;---@return boolean
	WouldEntityBeOccluded=function(entityModelHash--[[@param entityModelHash integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],p4--[[@param p4 boolean]])return InvokeBool(0xEE5D2A122E09EC42,entityModelHash,x+.0,y+.0,z+.0,p4)end;---@return boolean
	IsEntityWaitingForWorldCollision=function(entity--[[@param entity integer]])return InvokeBool(0xD05BFF0C0A12C68F,entity)end;---@return boolean
	--[=[Applies a force to the specified entity.

**List of force types (p1)**:
public enum ForceType
{
    MinForce = 0,
    MaxForceRot = 1,
    MinForce2 = 2,
    MaxForceRot2 = 3,
    ForceNoRot = 4,
    ForceRotPlusForce = 5
}
Research/documentation on the gtaforums can be found here https://gtaforums.com/topic/885669-precisely-define-object-physics/) and here https://gtaforums.com/topic/887362-apply-forces-and-momentums-to-entityobject/.

p6/relative - makes the xyz force not relative to world coords, but to something else
p7/highForce - setting false will make the force really low]=]
	ApplyForceToEntityCenterOfMass=function(entity--[[@param entity integer]],forceType--[[@param forceType integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],p5--[[@param p5 boolean]],isDirectionRel--[[@param isDirectionRel boolean]],isForceRel--[[@param isForceRel boolean]],p8--[[@param p8 boolean]])return InvokeVoid(0x18FF00FC7EFF559E,entity,forceType,x+.0,y+.0,z+.0,p5,isDirectionRel,isForceRel,p8)end;
	--[=[Documented here:
gtaforums.com/topic/885669-precisely-define-object-physics/
gtaforums.com/topic/887362-apply-forces-and-momentums-to-entityobject/

forceFlags:
First bit (lowest): Strong force flag, factor 100
Second bit: Unkown flag
Third bit: Momentum flag=1 (vector (x,y,z) is a momentum, more research needed)
If higher bits are unequal 0 the function doesn't applay any forces at all.
(As integer possible values are 0-7)

0: weak force
1: strong force
2: same as 0 (2nd bit?)
3: same as 1
4: weak momentum
5: strong momentum
6: same as 4
7: same as 5

isLocal: vector defined in local (body-fixed) coordinate frame
isMassRel: if true the force gets multiplied with the objects mass (this is why it was known as highForce) and different objects will have the same acceleration.

p8 !!! Whenever I set this !=0, my script stopped.]=]
	ApplyForceToEntity=function(entity--[[@param entity integer]],forceFlags--[[@param forceFlags integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],offX--[[@param offX number]],offY--[[@param offY number]],offZ--[[@param offZ number]],boneIndex--[[@param boneIndex integer]],isDirectionRel--[[@param isDirectionRel boolean]],ignoreUpVec--[[@param ignoreUpVec boolean]],isForceRel--[[@param isForceRel boolean]],p12--[[@param p12 boolean]],p13--[[@param p13 boolean]])return InvokeVoid(0xC5F68BE9613E2D18,entity,forceFlags,x+.0,y+.0,z+.0,offX+.0,offY+.0,offZ+.0,boneIndex,isDirectionRel,ignoreUpVec,isForceRel,p12,p13)end;
	--[=[Attaches entity1 to bone (boneIndex) of entity2.

boneIndex - this is different to boneID, use GET_PED_BONE_INDEX to get the index from the ID. use the index for attaching to specific bones. entity1 will be attached to entity2's centre if bone index given doesn't correspond to bone indexes for that entity type.

useSoftPinning - if set to false attached entity will not detach when fixed
collision - controls collision between the two entities (FALSE disables collision).
isPed - pitch doesnt work when false and roll will only work on negative numbers (only peds)
vertexIndex - position of vertex
fixedRot - if false it ignores entity vector 
]=]
	AttachEntityToEntity=function(entity1--[[@param entity1 integer]],entity2--[[@param entity2 integer]],boneIndex--[[@param boneIndex integer]],xPos--[[@param xPos number]],yPos--[[@param yPos number]],zPos--[[@param zPos number]],xRot--[[@param xRot number]],yRot--[[@param yRot number]],zRot--[[@param zRot number]],p9--[[@param p9 boolean]],useSoftPinning--[[@param useSoftPinning boolean]],collision--[[@param collision boolean]],isPed--[[@param isPed boolean]],vertexIndex--[[@param vertexIndex integer]],fixedRot--[[@param fixedRot boolean]],p15--[[@param p15 any]])return InvokeVoid(0x6B9BBD38AB0796DF,entity1,entity2,boneIndex,xPos+.0,yPos+.0,zPos+.0,xRot+.0,yRot+.0,zRot+.0,p9,useSoftPinning,collision,isPed,vertexIndex,fixedRot,p15)end;
	AttachEntityBoneToEntityBone=function(entity1--[[@param entity1 integer]],entity2--[[@param entity2 integer]],boneIndex1--[[@param boneIndex1 integer]],boneIndex2--[[@param boneIndex2 integer]],p4--[[@param p4 boolean]],p5--[[@param p5 boolean]])return InvokeVoid(0x5C48B75732C8456C,entity1,entity2,boneIndex1,boneIndex2,p4,p5)end;
	AttachEntityBoneToEntityBoneYForward=function(entity1--[[@param entity1 integer]],entity2--[[@param entity2 integer]],boneIndex1--[[@param boneIndex1 integer]],boneIndex2--[[@param boneIndex2 integer]],p4--[[@param p4 boolean]],p5--[[@param p5 boolean]])return InvokeVoid(0xFD1695C5D3B05439,entity1,entity2,boneIndex1,boneIndex2,p4,p5)end;
	--[=[breakForce is the amount of force required to break the bond.
p14 - is always 1 in scripts
p15 - is 1 or 0 in scripts - unknoun what it does
p16 - controls collision between the two entities (FALSE disables collision).
p17 - do not teleport entity to be attached to the position of the bone Index of the target entity (if 1, entity will not be teleported to target bone)
p18 - is always 2 in scripts.

]=]
	AttachEntityToEntityPhysically=function(entity1--[[@param entity1 integer]],entity2--[[@param entity2 integer]],boneIndex1--[[@param boneIndex1 integer]],boneIndex2--[[@param boneIndex2 integer]],xPos1--[[@param xPos1 number]],yPos1--[[@param yPos1 number]],zPos1--[[@param zPos1 number]],xPos2--[[@param xPos2 number]],yPos2--[[@param yPos2 number]],zPos2--[[@param zPos2 number]],xRot--[[@param xRot number]],yRot--[[@param yRot number]],zRot--[[@param zRot number]],breakForce--[[@param breakForce number]],fixedRot--[[@param fixedRot boolean]],p15--[[@param p15 boolean]],collision--[[@param collision boolean]],p17--[[@param p17 boolean]],p18--[[@param p18 integer]])return InvokeVoid(0xC3675780C92F90F9,entity1,entity2,boneIndex1,boneIndex2,xPos1+.0,yPos1+.0,zPos1+.0,xPos2+.0,yPos2+.0,zPos2+.0,xRot+.0,yRot+.0,zRot+.0,breakForce+.0,fixedRot,p15,collision,p17,p18)end;
	AttachEntityToEntityPhysicallyOverrideInverseMass=function(firstEntityIndex--[[@param firstEntityIndex integer]],secondEntityIndex--[[@param secondEntityIndex integer]],firstEntityBoneIndex--[[@param firstEntityBoneIndex integer]],secondEntityBoneIndex--[[@param secondEntityBoneIndex integer]],secondEntityOffsetX--[[@param secondEntityOffsetX number]],secondEntityOffsetY--[[@param secondEntityOffsetY number]],secondEntityOffsetZ--[[@param secondEntityOffsetZ number]],firstEntityOffsetX--[[@param firstEntityOffsetX number]],firstEntityOffsetY--[[@param firstEntityOffsetY number]],firstEntityOffsetZ--[[@param firstEntityOffsetZ number]],vecRotationX--[[@param vecRotationX number]],vecRotationY--[[@param vecRotationY number]],vecRotationZ--[[@param vecRotationZ number]],physicalStrength--[[@param physicalStrength number]],constrainRotation--[[@param constrainRotation boolean]],doInitialWarp--[[@param doInitialWarp boolean]],collideWithEntity--[[@param collideWithEntity boolean]],addInitialSeperation--[[@param addInitialSeperation boolean]],rotOrder--[[@param rotOrder integer]],invMassScaleA--[[@param invMassScaleA number]],invMassScaleB--[[@param invMassScaleB number]])return InvokeVoid(0x168A09D1B25B0BA4,firstEntityIndex,secondEntityIndex,firstEntityBoneIndex,secondEntityBoneIndex,secondEntityOffsetX+.0,secondEntityOffsetY+.0,secondEntityOffsetZ+.0,firstEntityOffsetX+.0,firstEntityOffsetY+.0,firstEntityOffsetZ+.0,vecRotationX+.0,vecRotationY+.0,vecRotationZ+.0,physicalStrength+.0,constrainRotation,doInitialWarp,collideWithEntity,addInitialSeperation,rotOrder,invMassScaleA+.0,invMassScaleB+.0)end;
	--[=[Called to update entity attachments.]=]
	ProcessEntityAttachments=function(entity--[[@param entity integer]])return InvokeVoid(0xF4080490ADC51C6F,entity)end;
	--[=[Returns the index of the bone. If the bone was not found, -1 will be returned. 

list:
https://pastebin.com/D7JMnX1g

BoneNames:
  chassis,
  windscreen,
   seat_pside_r,
 seat_dside_r,
 bodyshell,
    suspension_lm,
    suspension_lr,
    platelight,
   attach_female,
    attach_male,
  bonnet,
   boot,
 chassis_dummy,  //Center of the dummy
 chassis_Control,    //Not found yet
   door_dside_f,   //Door left, front
    door_dside_r,   //Door left, back
 door_pside_f,   //Door right, front
   door_pside_r,   //Door right, back
    Gun_GripR,
    windscreen_f,
 platelight, //Position where the light above the numberplate is located
   VFX_Emitter,
  window_lf,  //Window left, front
  window_lr,  //Window left, back
   window_rf,  //Window right, front
 window_rr,  //Window right, back
  engine, //Position of the engine
  gun_ammo,
 ROPE_ATTATCH,   //Not misspelled. In script "finale_heist2b.c4".
    wheel_lf,   //Wheel left, front
   wheel_lr,   //Wheel left, back
    wheel_rf,   //Wheel right, front
  wheel_rr,   //Wheel right, back
   exhaust,    //Exhaust. shows only the position of the stock-exhaust
   overheat,   //A position on the engine(not exactly sure, how to name it)
  misc_e, //Not a car-bone.
 seat_dside_f,   //Driver-seat
 seat_pside_f,   //Seat next to driver
 Gun_Nuzzle,
   seat_r

I doubt that the function is case-sensitive, since I found a "Chassis" and a "chassis". - Just tested: Definitely not case-sensitive.

]=]
	GetEntityBoneIndexByName=function(entity--[[@param entity integer]],boneName--[[@param boneName string]])return InvokeInt(0xFB71170B7E76ACBA,entity,boneName)end;---@return integer
	ClearEntityLastDamageEntity=function(entity--[[@param entity integer]])return InvokeVoid(0xA72CD9CA74A5ECBA,entity)end;
	--[=[Deletes the specified entity, then sets the handle pointed to by the pointer to NULL.]=]
	DeleteEntity=function(entity--[[@param entity integer*]])return InvokeVoid(0xAE3CBE5BF394C9C9,entity)end;
	--[=[If `collision` is set to true, both entities won't collide with the other until the distance between them is above 4 meters.
Set `dynamic` to true to keep velocity after dettaching]=]
	DetachEntity=function(entity--[[@param entity integer]],dynamic--[[@param dynamic boolean]],collision--[[@param collision boolean]])return InvokeVoid(0x961AC54BF0613F5D,entity,dynamic,collision)end;
	--[=[Freezes or unfreezes an entity preventing its coordinates to change by the player if set to `true`. You can still change the entity position using SET_ENTITY_COORDS.]=]
	FreezeEntityPosition=function(entity--[[@param entity integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x428CA6DBD1094446,entity,toggle)end;
	--[=[True means it can be deleted by the engine when switching lobbies/missions/etc, false means the script is expected to clean it up.

"Allow Freeze If No Collision"]=]
	SetEntityShouldFreezeWaitingOnCollision=function(entity--[[@param entity integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x3910051CCECDB00C,entity,toggle)end;
	--[=[delta and bitset are guessed fields. They are based on the fact that most of the calls have 0 or nil field types passed in.

The only time bitset has a value is 0x4000 and the only time delta has a value is during stealth with usually <1.0f values.

Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json]=]
	PlayEntityAnim=function(entity--[[@param entity integer]],animName--[[@param animName string]],animDict--[[@param animDict string]],p3--[[@param p3 number]],loop--[[@param loop boolean]],stayInAnim--[[@param stayInAnim boolean]],p6--[[@param p6 boolean]],delta--[[@param delta number]],bitset--[[@param bitset any]])return InvokeBool(0x7FB218262B810701,entity,animName,animDict,p3+.0,loop,stayInAnim,p6,delta+.0,bitset)end;---@return boolean
	--[=[p4 and p7 are usually 1000.0f.

Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json]=]
	PlaySynchronizedEntityAnim=function(entity--[[@param entity integer]],syncedScene--[[@param syncedScene integer]],animation--[[@param animation string]],propName--[[@param propName string]],p4--[[@param p4 number]],p5--[[@param p5 number]],p6--[[@param p6 any]],p7--[[@param p7 number]])return InvokeBool(0xC77720A12FE14A86,entity,syncedScene,animation,propName,p4+.0,p5+.0,p6,p7+.0)end;---@return boolean
	--[=[p6,p7 probably animname and animdict

Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json]=]
	PlaySynchronizedMapEntityAnim=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 any]],z2--[[@param z2 number]],p6--[[@param p6 string]],p7--[[@param p7 string]],p8--[[@param p8 number]],p9--[[@param p9 number]],p10--[[@param p10 any]],p11--[[@param p11 number]])return InvokeBool(0xB9C54555ED30FBC4,x1+.0,y1+.0,z1+.0,x2+.0,y2,z2+.0,p6,p7,p8+.0,p9+.0,p10,p11+.0)end;---@return boolean
	StopSynchronizedMapEntityAnim=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 any]],z2--[[@param z2 number]])return InvokeBool(0x11E79CAB7183B6F5,x1+.0,y1+.0,z1+.0,x2+.0,y2,z2+.0)end;---@return boolean
	--[=[Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json

RAGEPluginHook list: docs.ragepluginhook.net/html/62951c37-a440-478c-b389-c471230ddfc5.htm]=]
	StopEntityAnim=function(entity--[[@param entity integer]],animation--[[@param animation string]],animGroup--[[@param animGroup string]],p3--[[@param p3 number]])return InvokeBool(0x28004F88151E03E0,entity,animation,animGroup,p3+.0)end;---@return boolean
	--[=[p1 sync task id?]=]
	StopSynchronizedEntityAnim=function(entity--[[@param entity integer]],p1--[[@param p1 number]],p2--[[@param p2 boolean]])return InvokeBool(0x43D3807C077261E3,entity,p1+.0,p2)end;---@return boolean
	--[=[if (ENTITY::HAS_ANIM_EVENT_FIRED(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("CreateObject")))]=]
	HasAnimEventFired=function(entity--[[@param entity integer]],actionHash--[[@param actionHash integer]])return InvokeBool(0xEAF4CD9EA3E7E922,entity,actionHash)end;---@return boolean
	--[=[In the script "player_scene_t_bbfight.c4":
"if (ENTITY::FIND_ANIM_EVENT_PHASE(&l_16E, &l_19F[v_4/*16*/], v_9, &v_A, &v_B))"
-- &l_16E (p0) is requested as an anim dictionary earlier in the script.
-- &l_19F[v_4/*16*/] (p1) is used in other natives in the script as the "animation" param.
-- v_9 (p2) is instantiated as "victim_fall"; I'm guessing that's another anim
--v_A and v_B (p3 & p4) are both set as -1.0, but v_A is used immediately after this native for: 
"if (v_A < ENTITY::GET_ENTITY_ANIM_CURRENT_TIME(...))"
Both v_A and v_B are seemingly used to contain both Vector3's and floats, so I can't say what either really is other than that they are both output parameters. p4 looks more like a *Vector3 though

Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json]=]
	FindAnimEventPhase=function(animDictionary--[[@param animDictionary string]],animName--[[@param animName string]],p2--[[@param p2 string]],p3--[[@param p3 any*]],p4--[[@param p4 any*]])return InvokeBool(0x07F1BE2BCCAA27A7,animDictionary,animName,p2,p3,p4)end;---@return boolean
	--[=[Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json]=]
	SetEntityAnimCurrentTime=function(entity--[[@param entity integer]],animDictionary--[[@param animDictionary string]],animName--[[@param animName string]],time--[[@param time number]])return InvokeVoid(0x4487C259F0F70977,entity,animDictionary,animName,time+.0)end;
	--[=[Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json]=]
	SetEntityAnimSpeed=function(entity--[[@param entity integer]],animDictionary--[[@param animDictionary string]],animName--[[@param animName string]],speedMultiplier--[[@param speedMultiplier number]])return InvokeVoid(0x28D1A16553C51776,entity,animDictionary,animName,speedMultiplier+.0)end;
	--[=[Makes the specified entity (ped, vehicle or object) persistent. Persistent entities will not automatically be removed by the engine.

p1 has no effect when either its on or off 
maybe a quick disassembly will tell us what it does

p2 has no effect when either its on or off 
maybe a quick disassembly will tell us what it does]=]
	SetEntityAsMissionEntity=function(entity--[[@param entity integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0xAD738C3085FE7E11,entity,p1,p2)end;
	--[=[Marks the specified entity (ped, vehicle or object) as no longer needed if its population type is set to the mission type.
If the entity is ped, it will also clear their tasks immediately just like when CLEAR_PED_TASKS_IMMEDIATELY is called.
Entities marked as no longer needed, will be deleted as the engine sees fit.
Use this if you just want to just let the game delete the ped:
void MarkPedAsAmbientPed(Ped ped) {
  auto addr = getScriptHandleBaseAddress(ped);

  if (!addr) {
    return;
  }

  //the game uses only lower 4 bits as entity population type 
  BYTE origValue = *(BYTE *)(addr + 0xDA);
  *(BYTE *)(addr + 0xDA) = ((origValue & 0xF0) | ePopulationType::POPTYPE_RANDOM_AMBIENT);
}]=]
	SetEntityAsNoLongerNeeded=function(entity--[[@param entity integer*]])return InvokeVoid(0xB736A491E64A32CF,entity)end;
	--[=[This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.]=]
	SetPedAsNoLongerNeeded=function(ped--[[@param ped integer*]])return InvokeVoid(0x2595DD4236549CE3,ped)end;
	--[=[This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.]=]
	SetVehicleAsNoLongerNeeded=function(vehicle--[[@param vehicle integer*]])return InvokeVoid(0x629BFA74418D6239,vehicle)end;
	--[=[This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.]=]
	SetObjectAsNoLongerNeeded=function(object--[[@param object integer*]])return InvokeVoid(0x3AE22DEB5BA5A3E6,object)end;
	SetEntityCanBeDamaged=function(entity--[[@param entity integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x1760FFA8AB074D66,entity,toggle)end;
	GetEntityCanBeDamaged=function(entity--[[@param entity integer]])return InvokeBool(0xD95CC5D2AB15A09F,entity)end;---@return boolean
	SetEntityCanBeDamagedByRelationshipGroup=function(entity--[[@param entity integer]],bCanBeDamaged--[[@param bCanBeDamaged boolean]],relGroup--[[@param relGroup integer]])return InvokeVoid(0xE22D8FDE858B8119,entity,bCanBeDamaged,relGroup)end;
	SetEntityCanOnlyBeDamagedByScriptParticipants=function(entity--[[@param entity integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x352E2B5CF420BF3B,entity,toggle)end;
	--[=[Sets whether the entity can be targeted without being in line-of-sight.]=]
	SetEntityCanBeTargetedWithoutLos=function(entity--[[@param entity integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xD3997889736FD899,entity,toggle)end;
	SetEntityCollision=function(entity--[[@param entity integer]],toggle--[[@param toggle boolean]],keepPhysics--[[@param keepPhysics boolean]])return InvokeVoid(0x1A9205C1B9EE827F,entity,toggle,keepPhysics)end;
	GetEntityCollisionDisabled=function(entity--[[@param entity integer]])return InvokeBool(0xCCF1E97BEFDAE480,entity)end;---@return boolean
	SetEntityCompletelyDisableCollision=function(entity--[[@param entity integer]],toggle--[[@param toggle boolean]],keepPhysics--[[@param keepPhysics boolean]])return InvokeVoid(0x9EBC85ED0FFFE51C,entity,toggle,keepPhysics)end;
	--[=[p7 is always 1 in the scripts. Set to 1, an area around the destination coords for the moved entity is cleared from other entities. 
 
Often ends with 1, 0, 0, 1); in the scripts. It works. 

Axis - Invert Axis Flags]=]
	SetEntityCoords=function(entity--[[@param entity integer]],xPos--[[@param xPos number]],yPos--[[@param yPos number]],zPos--[[@param zPos number]],xAxis--[[@param xAxis boolean]],yAxis--[[@param yAxis boolean]],zAxis--[[@param zAxis boolean]],clearArea--[[@param clearArea boolean]])return InvokeVoid(0x06843DA7060A026B,entity,xPos+.0,yPos+.0,zPos+.0,xAxis,yAxis,zAxis,clearArea)end;
	SetEntityCoordsWithoutPlantsReset=function(entity--[[@param entity integer]],xPos--[[@param xPos number]],yPos--[[@param yPos number]],zPos--[[@param zPos number]],alive--[[@param alive boolean]],deadFlag--[[@param deadFlag boolean]],ragdollFlag--[[@param ragdollFlag boolean]],clearArea--[[@param clearArea boolean]])return InvokeVoid(0x621873ECE1178967,entity,xPos+.0,yPos+.0,zPos+.0,alive,deadFlag,ragdollFlag,clearArea)end;
	--[=[Axis - Invert Axis Flags]=]
	SetEntityCoordsNoOffset=function(entity--[[@param entity integer]],xPos--[[@param xPos number]],yPos--[[@param yPos number]],zPos--[[@param zPos number]],xAxis--[[@param xAxis boolean]],yAxis--[[@param yAxis boolean]],zAxis--[[@param zAxis boolean]])return InvokeVoid(0x239A3351AC1DA385,entity,xPos+.0,yPos+.0,zPos+.0,xAxis,yAxis,zAxis)end;
	SetEntityDynamic=function(entity--[[@param entity integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x1718DE8E3F2823CA,entity,toggle)end;
	--[=[Set the heading of an entity in degrees also known as "Yaw".]=]
	SetEntityHeading=function(entity--[[@param entity integer]],heading--[[@param heading number]])return InvokeVoid(0x8E2530AA8ADA980E,entity,heading+.0)end;
	--[=[health >= 0
male ped ~= 100 - 200
female ped ~= 0 - 100]=]
	SetEntityHealth=function(entity--[[@param entity integer]],health--[[@param health integer]],p2--[[@param p2 integer]])return InvokeVoid(0x6B76DC1F3AE6E6A3,entity,health,p2)end;
	--[=[Sets a ped or an object totally invincible. It doesn't take any kind of damage. Peds will not ragdoll on explosions and the tazer animation won't apply either.

If you use this for a ped and you want Ragdoll to stay enabled, then do:
*(DWORD *)(pedAddress + 0x188) |= (1 << 9);

Use this if you want to get the invincibility status:
  bool IsPedInvincible(Ped ped)
 {
     auto addr = getScriptHandleBaseAddress(ped);    

        if (addr)
     {
         DWORD flag = *(DWORD *)(addr + 0x188);
            return ((flag & (1 << 8)) != 0) || ((flag & (1 << 9)) != 0);
      }

       return false;
 }]=]
	SetEntityInvincible=function(entity--[[@param entity integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x3882114BDE571AD4,entity,toggle)end;
	SetEntityIsTargetPriority=function(entity--[[@param entity integer]],p1--[[@param p1 boolean]],p2--[[@param p2 number]])return InvokeVoid(0xEA02E132F5C68722,entity,p1,p2+.0)end;
	SetEntityLights=function(entity--[[@param entity integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x7CFBA6A80BDF3874,entity,toggle)end;
	--[=[Loads collision grid for an entity spawned outside of a player's loaded area. This allows peds to execute tasks rather than sit dormant because of a lack of a physics grid.
Certainly not the main usage of this native but when set to true for a Vehicle, it will prevent the vehicle to explode if it is spawned far away from the player.]=]
	SetEntityLoadCollisionFlag=function(entity--[[@param entity integer]],toggle--[[@param toggle boolean]],p2--[[@param p2 any]])return InvokeVoid(0x0DC7CABAB1E9B67E,entity,toggle,p2)end;
	HasCollisionLoadedAroundEntity=function(entity--[[@param entity integer]])return InvokeBool(0xE9676F61BC0B3321,entity)end;---@return boolean
	SetEntityMaxSpeed=function(entity--[[@param entity integer]],speed--[[@param speed number]])return InvokeVoid(0x0E46A3FCBDE2A1B1,entity,speed+.0)end;
	SetEntityOnlyDamagedByPlayer=function(entity--[[@param entity integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x79F020FF9EDC0748,entity,toggle)end;
	SetEntityOnlyDamagedByRelationshipGroup=function(entity--[[@param entity integer]],p1--[[@param p1 boolean]],p2--[[@param p2 any]])return InvokeVoid(0x7022BD828FA0B082,entity,p1,p2)end;
	--[=[Enable / disable each type of damage.

waterProof is damage related to water not drowning
--------------
p7 is to to '1' in am_mp_property_ext/int: ENTITY::SET_ENTITY_PROOFS(uParam0->f_19, true, true, true, true, true, true, 1, true);
]=]
	SetEntityProofs=function(entity--[[@param entity integer]],bulletProof--[[@param bulletProof boolean]],fireProof--[[@param fireProof boolean]],explosionProof--[[@param explosionProof boolean]],collisionProof--[[@param collisionProof boolean]],meleeProof--[[@param meleeProof boolean]],steamProof--[[@param steamProof boolean]],p7--[[@param p7 boolean]],waterProof--[[@param waterProof boolean]])return InvokeVoid(0xFAEE099C6F890BB8,entity,bulletProof,fireProof,explosionProof,collisionProof,meleeProof,steamProof,p7,waterProof)end;
	GetEntityProofs=function(entity--[[@param entity integer]],bulletProof--[[@param bulletProof boolean*]],fireProof--[[@param fireProof boolean*]],explosionProof--[[@param explosionProof boolean*]],collisionProof--[[@param collisionProof boolean*]],meleeProof--[[@param meleeProof boolean*]],steamProof--[[@param steamProof boolean*]],p7--[[@param p7 boolean*]],drownProof--[[@param drownProof boolean*]])return InvokeBool(0xBE8CD9BE829BBEBF,entity,bulletProof,fireProof,explosionProof,collisionProof,meleeProof,steamProof,p7,drownProof)end;---@return boolean
	--[=[w is the correct parameter name!]=]
	SetEntityQuaternion=function(entity--[[@param entity integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],w--[[@param w number]])return InvokeVoid(0x77B21BE7AC540F07,entity,x+.0,y+.0,z+.0,w+.0)end;
	SetEntityRecordsCollisions=function(entity--[[@param entity integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x0A50A1EEDAD01E65,entity,toggle)end;
	--[=[rotationOrder refers to the order yaw pitch roll is applied
value ranges from 0 to 5. What you use for rotationOrder when setting must be the same as rotationOrder when getting the rotation. 
Unsure what value corresponds to what rotation order, more testing will be needed for that.
For the most part R* uses 1 or 2 as the order.
p5 is usually set as true
]=]
	SetEntityRotation=function(entity--[[@param entity integer]],pitch--[[@param pitch number]],roll--[[@param roll number]],yaw--[[@param yaw number]],rotationOrder--[[@param rotationOrder integer]],p5--[[@param p5 boolean]])return InvokeVoid(0x8524A8B0171D5E07,entity,pitch+.0,roll+.0,yaw+.0,rotationOrder,p5)end;
	--[=[p2 is always 0.]=]
	SetEntityVisible=function(entity--[[@param entity integer]],toggle--[[@param toggle boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0xEA1C610A04DB6BBB,entity,toggle,p2)end;
	SetEntityWaterReflectionFlag=function(entity--[[@param entity integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xC34BC448DA29F5E9,entity,toggle)end;
	SetEntityMirrorReflectionFlag=function(entity--[[@param entity integer]],p1--[[@param p1 boolean]])return InvokeVoid(0xE66377CDDADA4810,entity,p1)end;
	--[=[Note that the third parameter(denoted as z) is "up and down" with positive numbers encouraging upwards movement.]=]
	SetEntityVelocity=function(entity--[[@param entity integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0x1C99BB7B6E96D16F,entity,x+.0,y+.0,z+.0)end;
	SetEntityAngularVelocity=function(entity--[[@param entity integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0x8339643499D1222E,entity,x+.0,y+.0,z+.0)end;
	SetEntityHasGravity=function(entity--[[@param entity integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x4A4722448F18EEF5,entity,toggle)end;
	--[=[LOD distance can be 0 to 0xFFFF (higher values will result in 0xFFFF) as it is actually stored as a 16-bit value (aka uint16_t).]=]
	SetEntityLodDist=function(entity--[[@param entity integer]],value--[[@param value integer]])return InvokeVoid(0x5927F96A78577363,entity,value)end;
	--[=[Returns the LOD distance of an entity.]=]
	GetEntityLodDist=function(entity--[[@param entity integer]])return InvokeInt(0x4159C2762B5791D6,entity)end;---@return integer
	--[=[skin - everything alpha except skin
Set entity alpha level. Ranging from 0 to 255 but chnages occur after every 20 percent (after every 51).]=]
	SetEntityAlpha=function(entity--[[@param entity integer]],alphaLevel--[[@param alphaLevel integer]],skin--[[@param skin boolean]])return InvokeVoid(0x44A0870B7E92D7C0,entity,alphaLevel,skin)end;
	GetEntityAlpha=function(entity--[[@param entity integer]])return InvokeInt(0x5A47B3B5E63E94C6,entity)end;---@return integer
	ResetEntityAlpha=function(entity--[[@param entity integer]])return InvokeVoid(0x9B1E824FFBB7027A,entity)end;
	--[=[Similar to RESET_ENTITY_ALPHA]=]
	ResetPickupEntityGlow=function(entity--[[@param entity integer]])return InvokeVoid(0x490861B88F4FD846,entity)end;
	SetPickupCollidesWithProjectiles=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0xCEA7C8E1B48FF68C,p0,p1)end;
	--[=[Only called once in the scripts.

Related to weapon objects.
]=]
	SetEntitySortBias=function(entity--[[@param entity integer]],p1--[[@param p1 number]])return InvokeVoid(0x5C3B791D580E0BC2,entity,p1+.0)end;
	SetEntityAlwaysPrerender=function(entity--[[@param entity integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xACAD101E1FB66689,entity,toggle)end;
	SetEntityRenderScorched=function(entity--[[@param entity integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x730F5F8D3F0F2050,entity,toggle)end;
	--[=[Example here: www.gtaforums.com/topic/830463-help-with-turning-lights-green-and-causing-peds-to-crash-into-each-other/#entry1068211340

0 = green
1 = red
2 = yellow
3 = reset changes
changing lights may not change the behavior of vehicles]=]
	SetEntityTrafficlightOverride=function(entity--[[@param entity integer]],state--[[@param state integer]])return InvokeVoid(0x57C5DB656185EAC4,entity,state)end;
	SetEntityIsInVehicle=function(entity--[[@param entity integer]])return InvokeVoid(0x78E8E3A640178255,entity)end;
	--[=[Only works with objects!]=]
	CreateModelSwap=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]],originalModel--[[@param originalModel integer]],newModel--[[@param newModel integer]],p6--[[@param p6 boolean]])return InvokeVoid(0x92C47782FDA8B2A3,x+.0,y+.0,z+.0,radius+.0,originalModel,newModel,p6)end;
	RemoveModelSwap=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]],originalModel--[[@param originalModel integer]],newModel--[[@param newModel integer]],p6--[[@param p6 boolean]])return InvokeVoid(0x033C0F9A64E229AE,x+.0,y+.0,z+.0,radius+.0,originalModel,newModel,p6)end;
	--[=[p5 = sets as true in scripts
Same as the comment for CREATE_MODEL_SWAP unless for some reason p5 affects it this only works with objects as well.

Network players do not see changes done with this.]=]
	CreateModelHide=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]],modelHash--[[@param modelHash integer]],p5--[[@param p5 boolean]])return InvokeVoid(0x8A97BCA30A0CE478,x+.0,y+.0,z+.0,radius+.0,modelHash,p5)end;
	CreateModelHideExcludingScriptObjects=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]],modelHash--[[@param modelHash integer]],p5--[[@param p5 boolean]])return InvokeVoid(0x3A52AE588830BF7F,x+.0,y+.0,z+.0,radius+.0,modelHash,p5)end;
	--[=[This native makes entities visible that are hidden by the native CREATE_MODEL_HIDE.
p5 should be false, true does nothing]=]
	RemoveModelHide=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]],modelHash--[[@param modelHash integer]],p5--[[@param p5 boolean]])return InvokeVoid(0xD9E3006FB3CBD765,x+.0,y+.0,z+.0,radius+.0,modelHash,p5)end;
	CreateForcedObject=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],p3--[[@param p3 any]],modelHash--[[@param modelHash integer]],p5--[[@param p5 boolean]])return InvokeVoid(0x150E808B375A385A,x+.0,y+.0,z+.0,p3,modelHash,p5)end;
	RemoveForcedObject=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],p3--[[@param p3 number]],modelHash--[[@param modelHash integer]])return InvokeVoid(0x61B6775E83C0DB6F,x+.0,y+.0,z+.0,p3+.0,modelHash)end;
	--[=[Calling this function disables collision between two entities.
The importance of the order for entity1 and entity2 is unclear.
The third parameter, `thisFrame`, decides whether the collision is to be disabled until it is turned back on, or if it's just this frame.]=]
	SetEntityNoCollisionEntity=function(entity1--[[@param entity1 integer]],entity2--[[@param entity2 integer]],thisFrameOnly--[[@param thisFrameOnly boolean]])return InvokeVoid(0xA53ED5520C07654A,entity1,entity2,thisFrameOnly)end;
	SetEntityMotionBlur=function(entity--[[@param entity integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x295D82A8559F9150,entity,toggle)end;
	--[=[p1 always false.]=]
	SetCanAutoVaultOnEntity=function(entity--[[@param entity integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xE12ABE5E3A389A6C,entity,toggle)end;
	--[=[p1 always false.]=]
	SetCanClimbOnEntity=function(entity--[[@param entity integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xA80AE305E0A3044F,entity,toggle)end;
	--[=[Only called within 1 script for x360. 'fm_mission_controller' and it used on an object. 

Ran after these 2 natives,
set_object_targettable(uParam0, 0);
set_entity_invincible(uParam0, 1);]=]
	SetWaitForCollisionsBeforeProbe=function(entity--[[@param entity integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xDC6F8601FAF2E893,entity,toggle)end;
	SetEntityNoweapondecals=function(entity--[[@param entity integer]],p1--[[@param p1 boolean]])return InvokeVoid(0x2C2E3DC128F44309,entity,p1)end;
	SetEntityUseMaxDistanceForWaterReflection=function(entity--[[@param entity integer]],p1--[[@param p1 boolean]])return InvokeVoid(0x1A092BB0C3808B96,entity,p1)end;
	--[=[Gets the world rotation of the specified bone of the specified entity.]=]
	GetEntityBoneRotation=function(entity--[[@param entity integer]],boneIndex--[[@param boneIndex integer]])return InvokeV3(0xCE6294A232D03786,entity,boneIndex)end;---@return V3
	--[=[Gets the world position of the specified bone of the specified entity.]=]
	GetEntityBonePostion=function(entity--[[@param entity integer]],boneIndex--[[@param boneIndex integer]])return InvokeV3(0x46F8696933A63C9B,entity,boneIndex)end;---@return V3
	--[=[Gets the local rotation of the specified bone of the specified entity.]=]
	GetEntityBoneObjectRotation=function(entity--[[@param entity integer]],boneIndex--[[@param boneIndex integer]])return InvokeV3(0xBD8D32550E5CEBFE,entity,boneIndex)end;---@return V3
	GetEntityBoneObjectPostion=function(entity--[[@param entity integer]],boneIndex--[[@param boneIndex integer]])return InvokeV3(0xCF1247CC86961FD6,entity,boneIndex)end;---@return V3
	GetEntityBoneCount=function(entity--[[@param entity integer]])return InvokeInt(0xB328DCC3A3AA401B,entity)end;---@return integer
	EnableEntityBulletCollision=function(entity--[[@param entity integer]])return InvokeVoid(0x6CE177D014502E8A,entity)end;
	SetEntityCanOnlyBeDamagedByEntity=function(entity1--[[@param entity1 integer]],entity2--[[@param entity2 integer]])return InvokeVoid(0xB17BC6453F6CF5AC,entity1,entity2)end;
	SetEntityCantCauseCollisionDamagedEntity=function(entity1--[[@param entity1 integer]],entity2--[[@param entity2 integer]])return InvokeVoid(0x68B562E124CC0AEF,entity1,entity2)end;
	--[=[p1 is always set to 1]=]
	SetAllowMigrateToSpectator=function(entity--[[@param entity integer]],p1--[[@param p1 any]])return InvokeVoid(0x36F32DE87082343E,entity,p1)end;
	--[=[Gets the handle of an entity with a specific model hash attached to another entity, such as an object attached to a ped.
 This native does not appear to have anything to do with pickups as in scripts it is used with objects.

Example from fm_mission_controller_2020.c:

iVar8 = ENTITY::GET_ENTITY_OF_TYPE_ATTACHED_TO_ENTITY(bParam0->f_9, joaat("p_cs_clipboard"));]=]
	GetEntityOfTypeAttachedToEntity=function(entity--[[@param entity integer]],modelHash--[[@param modelHash integer]])return InvokeInt(0x1F922734E259BD26,entity,modelHash)end;---@return integer
	SetPickUpByCargobobDisabled=function(entity--[[@param entity integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xD7B80E7C3BEFC396,entity,toggle)end;
}
_G.Event={
	SetDecisionMaker=function(ped--[[@param ped integer]],name--[[@param name integer]])return InvokeVoid(0xB604A2942ADED0EE,ped,name)end;
	--[=[eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt]=]
	ClearDecisionMakerEventResponse=function(name--[[@param name integer]],eventType--[[@param eventType integer]])return InvokeVoid(0x4FC9381A7AEE8968,name,eventType)end;
	--[=[eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt

This is limited to 4 blocked events at a time.]=]
	BlockDecisionMakerEvent=function(name--[[@param name integer]],eventType--[[@param eventType integer]])return InvokeVoid(0xE42FCDFD0E4196F7,name,eventType)end;
	--[=[eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt]=]
	UnblockDecisionMakerEvent=function(name--[[@param name integer]],eventType--[[@param eventType integer]])return InvokeVoid(0xD7CD9CF34F2C99E8,name,eventType)end;
	--[=[eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt]=]
	AddShockingEventAtPosition=function(eventType--[[@param eventType integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],duration--[[@param duration number]])return InvokeInt(0xD9F8455409B525E9,eventType,x+.0,y+.0,z+.0,duration+.0)end;---@return integer
	--[=[eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt]=]
	AddShockingEventForEntity=function(eventType--[[@param eventType integer]],entity--[[@param entity integer]],duration--[[@param duration number]])return InvokeInt(0x7FD8F3BE76F89422,eventType,entity,duration+.0)end;---@return integer
	--[=[eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt]=]
	IsShockingEventInSphere=function(eventType--[[@param eventType integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]])return InvokeBool(0x1374ABB7C15BAB92,eventType,x+.0,y+.0,z+.0,radius+.0)end;---@return boolean
	RemoveShockingEvent=function(event--[[@param event integer]])return InvokeBool(0x2CDA538C44C6CCE5,event)end;---@return boolean
	RemoveAllShockingEvents=function(p0--[[@param p0 boolean]])return InvokeVoid(0xEAABE8FDFA21274C,p0)end;
	RemoveShockingEventSpawnBlockingAreas=function()return InvokeVoid(0x340F1415B68AEADE)end;
	SuppressShockingEventsNextFrame=function()return InvokeVoid(0x2F9A292AD0A3BD89)end;
	--[=[eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt]=]
	SuppressShockingEventTypeNextFrame=function(eventType--[[@param eventType integer]])return InvokeVoid(0x3FD2EC8BF1F1CF30,eventType)end;
	SuppressAgitationEventsNextFrame=function()return InvokeVoid(0x5F3B7749C112D552)end;
}
_G.Files={
	--[=[Character types:
0 = Michael, 
1 = Franklin, 
2 = Trevor, 
3 = MPMale, 
4 = MPFemale]=]
	GetNumTattooShopDlcItems=function(character--[[@param character integer]])return InvokeInt(0x278F76C3B0A8F109,character)end;---@return integer
	--[=[Character types:
0 = Michael, 
1 = Franklin, 
2 = Trevor, 
3 = MPMale, 
4 = MPFemale


enum TattooZoneData
{  
    ZONE_TORSO = 0,  
    ZONE_HEAD = 1,  
    ZONE_LEFT_ARM = 2,  
    ZONE_RIGHT_ARM = 3,  
    ZONE_LEFT_LEG = 4,  
    ZONE_RIGHT_LEG = 5,  
    ZONE_UNKNOWN = 6,
    ZONE_NONE = 7,  
};
struct outComponent
{
    // these vars are suffixed with 4 bytes of padding each.
    uint unk;
    int unk2;
    uint tattooCollectionHash;
    uint tattooNameHash;
    int unk3;
    TattooZoneData zoneId;
    uint unk4;
    uint unk5;
    // maybe more, not sure exactly, decompiled scripts are very vague around this part.
}]=]
	GetTattooShopDlcItemData=function(characterType--[[@param characterType integer]],decorationIndex--[[@param decorationIndex integer]],outComponent--[[@param outComponent any*]])return InvokeBool(0xFF56381874F82086,characterType,decorationIndex,outComponent)end;---@return boolean
	--[=[Returns some sort of index/offset for overlays/decorations.

Character types:
0 = Michael, 
1 = Franklin, 
2 = Trevor, 
3 = MPMale, 
4 = MPFemale]=]
	GetTattooShopDlcItemIndex=function(overlayHash--[[@param overlayHash integer]],p1--[[@param p1 any]],character--[[@param character integer]])return InvokeInt(0x10144267DD22866C,overlayHash,p1,character)end;---@return integer
	InitShopPedComponent=function(outComponent--[[@param outComponent any*]])return InvokeVoid(0x1E8C308FD312C036,outComponent)end;
	InitShopPedProp=function(outProp--[[@param outProp any*]])return InvokeVoid(0xEB0A2B758F7B850F,outProp)end;
	SetupShopPedApparelQuery=function(p0--[[@param p0 integer]],p1--[[@param p1 integer]],p2--[[@param p2 integer]],p3--[[@param p3 integer]])return InvokeInt(0x50F457823CE6EB5F,p0,p1,p2,p3)end;---@return integer
	--[=[character is 0 for Michael, 1 for Franklin, 2 for Trevor, 3 for freemode male, and 4 for freemode female.

componentId is between 0 and 11 and corresponds to the usual component slots.

p1 could be the outfit number; unsure.

p2 is usually -1; unknown function.

p3 appears to be for selecting between clothes and props; false is used with components/clothes, true is used with props.

p4 is usually -1; unknown function.

componentId is -1 when p3 is true in decompiled scripts.]=]
	SetupShopPedApparelQueryTu=function(character--[[@param character integer]],p1--[[@param p1 integer]],p2--[[@param p2 integer]],p3--[[@param p3 boolean]],p4--[[@param p4 integer]],componentId--[[@param componentId integer]])return InvokeInt(0x9BDF59818B1E38C1,character,p1,p2,p3,p4,componentId)end;---@return integer
	--[=[See https://git.io/JtcRf for example and structs.]=]
	GetShopPedQueryComponent=function(componentId--[[@param componentId integer]],outComponent--[[@param outComponent any*]])return InvokeVoid(0x249E310B2D920699,componentId,outComponent)end;
	--[=[Returns some sort of index/offset for components.
Needs _GET_NUM_PROPS_FROM_OUTFIT to be called with p3 = false and componentId with the drawable's component slot first, returns -1 otherwise.]=]
	GetShopPedQueryComponentIndex=function(componentHash--[[@param componentHash integer]])return InvokeInt(0x96E2929292A4DB77,componentHash)end;---@return integer
	--[=[More info here: https://gist.github.com/root-cause/3b80234367b0c856d60bf5cb4b826f86]=]
	GetShopPedComponent=function(componentHash--[[@param componentHash integer]],outComponent--[[@param outComponent any*]])return InvokeVoid(0x74C0E2A57EC66760,componentHash,outComponent)end;
	--[=[See https://git.io/JtcRf for example and structs.]=]
	GetShopPedQueryProp=function(componentId--[[@param componentId integer]],outProp--[[@param outProp any*]])return InvokeVoid(0xDE44A00999B2837D,componentId,outProp)end;
	--[=[Returns some sort of index/offset for props.
Needs _GET_NUM_PROPS_FROM_OUTFIT to be called with p3 = true and componentId = -1 first, returns -1 otherwise.]=]
	GetShopPedQueryPropIndex=function(componentHash--[[@param componentHash integer]])return InvokeInt(0x6CEBE002E58DEE97,componentHash)end;---@return integer
	--[=[More info here: https://gist.github.com/root-cause/3b80234367b0c856d60bf5cb4b826f86]=]
	GetShopPedProp=function(componentHash--[[@param componentHash integer]],outProp--[[@param outProp any*]])return InvokeVoid(0x5D5CAFF661DDF6FC,componentHash,outProp)end;
	GetHashNameForComponent=function(entity--[[@param entity integer]],componentId--[[@param componentId integer]],drawableVariant--[[@param drawableVariant integer]],textureVariant--[[@param textureVariant integer]])return InvokeInt(0x0368B3A838070348,entity,componentId,drawableVariant,textureVariant)end;---@return integer
	GetHashNameForProp=function(entity--[[@param entity integer]],componentId--[[@param componentId integer]],propIndex--[[@param propIndex integer]],propTextureIndex--[[@param propTextureIndex integer]])return InvokeInt(0x5D6160275CAEC8DD,entity,componentId,propIndex,propTextureIndex)end;---@return integer
	GetShopPedApparelVariantComponentCount=function(componentHash--[[@param componentHash integer]])return InvokeInt(0xC17AD0E5752BECDA,componentHash)end;---@return integer
	--[=[`propHash`: Ped helmet prop hash?
This native returns 1 when the player helmet has a visor (there is another prop index for the same helmet with closed/opened visor variant) that can be toggled. 0 if there's no alternative version with a visor for this helmet prop.]=]
	GetShopPedApparelVariantPropCount=function(propHash--[[@param propHash integer]])return InvokeInt(0xD40AAC51E8E4C663,propHash)end;---@return integer
	GetVariantComponent=function(componentHash--[[@param componentHash integer]],variantComponentIndex--[[@param variantComponentIndex integer]],nameHash--[[@param nameHash integer*]],enumValue--[[@param enumValue integer*]],componentType--[[@param componentType integer*]])return InvokeVoid(0x6E11F282F11863B6,componentHash,variantComponentIndex,nameHash,enumValue,componentType)end;
	GetVariantProp=function(componentHash--[[@param componentHash integer]],variantPropIndex--[[@param variantPropIndex integer]],nameHash--[[@param nameHash integer*]],enumValue--[[@param enumValue integer*]],anchorPoint--[[@param anchorPoint integer*]])return InvokeVoid(0xD81B7F27BC773E66,componentHash,variantPropIndex,nameHash,enumValue,anchorPoint)end;
	--[=[Returns number of possible values of the forcedComponentIndex argument of GET_FORCED_COMPONENT.]=]
	GetShopPedApparelForcedComponentCount=function(componentHash--[[@param componentHash integer]])return InvokeInt(0xC6B9DB42C04DD8C3,componentHash)end;---@return integer
	--[=[Returns number of possible values of the forcedPropIndex argument of GET_FORCED_PROP.]=]
	GetShopPedApparelForcedPropCount=function(componentHash--[[@param componentHash integer]])return InvokeInt(0x017568A8182D98A6,componentHash)end;---@return integer
	GetForcedComponent=function(componentHash--[[@param componentHash integer]],forcedComponentIndex--[[@param forcedComponentIndex integer]],nameHash--[[@param nameHash integer*]],enumValue--[[@param enumValue integer*]],componentType--[[@param componentType integer*]])return InvokeVoid(0x6C93ED8C2F74859B,componentHash,forcedComponentIndex,nameHash,enumValue,componentType)end;
	GetForcedProp=function(componentHash--[[@param componentHash integer]],forcedPropIndex--[[@param forcedPropIndex integer]],nameHash--[[@param nameHash integer*]],enumValue--[[@param enumValue integer*]],anchorPoint--[[@param anchorPoint integer*]])return InvokeVoid(0xE1CA84EBF72E691D,componentHash,forcedPropIndex,nameHash,enumValue,anchorPoint)end;
	--[=[Full list of restriction tags by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedApparelRestrictionTags.json

componentId/last parameter seems to be unused.]=]
	DoesShopPedApparelHaveRestrictionTag=function(componentHash--[[@param componentHash integer]],restrictionTagHash--[[@param restrictionTagHash integer]],componentId--[[@param componentId integer]])return InvokeBool(0x341DE7ED1D2A1BFD,componentHash,restrictionTagHash,componentId)end;---@return boolean
	DoesCurrentPedComponentHaveRestrictionTag=function(ped--[[@param ped integer]],componentId--[[@param componentId integer]],restrictionTagHash--[[@param restrictionTagHash integer]])return InvokeBool(0x7796B21B76221BC5,ped,componentId,restrictionTagHash)end;---@return boolean
	DoesCurrentPedPropHaveRestrictionTag=function(ped--[[@param ped integer]],componentId--[[@param componentId integer]],restrictionTagHash--[[@param restrictionTagHash integer]])return InvokeBool(0xD726BAB4554DA580,ped,componentId,restrictionTagHash)end;---@return boolean
	--[=[characters

0: Michael
1: Franklin
2: Trevor
3: MPMale
4: MPFemale]=]
	SetupShopPedOutfitQuery=function(character--[[@param character integer]],p1--[[@param p1 boolean]])return InvokeInt(0xF3FBE2D50A6A8C28,character,p1)end;---@return integer
	--[=[outfitIndex: from 0 to SETUP_SHOP_PED_OUTFIT_QUERY(characterIndex, false) - 1.
See https://git.io/JtcB8 for example and outfit struct.]=]
	GetShopPedQueryOutfit=function(outfitIndex--[[@param outfitIndex integer]],outfit--[[@param outfit any*]])return InvokeVoid(0x6D793F03A631FE56,outfitIndex,outfit)end;
	GetShopPedOutfit=function(p0--[[@param p0 any]],p1--[[@param p1 any*]])return InvokeVoid(0xB7952076E444979D,p0,p1)end;
	GetShopPedOutfitLocate=function(p0--[[@param p0 any]])return InvokeInt(0x073CA26B079F956E,p0)end;---@return integer
	--[=[See https://git.io/JtcBH for example and structs.]=]
	GetShopPedOutfitPropVariant=function(outfitHash--[[@param outfitHash integer]],variantIndex--[[@param variantIndex integer]],outPropVariant--[[@param outPropVariant any*]])return InvokeBool(0xA9F9C2E0FDE11CBB,outfitHash,variantIndex,outPropVariant)end;---@return boolean
	--[=[See https://git.io/JtcBH for example and structs.]=]
	GetShopPedOutfitComponentVariant=function(outfitHash--[[@param outfitHash integer]],variantIndex--[[@param variantIndex integer]],outComponentVariant--[[@param outComponentVariant any*]])return InvokeBool(0x19F2A026EDF0013F,outfitHash,variantIndex,outComponentVariant)end;---@return boolean
	GetNumDlcVehicles=function()return InvokeInt(0xA7A866D21CD2329B)end;---@return integer
	--[=[dlcVehicleIndex is 0 to GET_NUM_DLC_VEHICLS() - 1]=]
	GetDlcVehicleModel=function(dlcVehicleIndex--[[@param dlcVehicleIndex integer]])return InvokeInt(0xECC01B7C5763333C,dlcVehicleIndex)end;---@return integer
	--[=[dlcVehicleIndex takes a number from 0 - GET_NUM_DLC_VEHICLES() - 1.
outData is a struct of 3 8-byte items.
The Second item in the struct *(Hash *)(outData + 1) is the vehicle hash.]=]
	GetDlcVehicleData=function(dlcVehicleIndex--[[@param dlcVehicleIndex integer]],outData--[[@param outData any*]])return InvokeBool(0x33468EDC08E371F6,dlcVehicleIndex,outData)end;---@return boolean
	GetDlcVehicleFlags=function(dlcVehicleIndex--[[@param dlcVehicleIndex integer]])return InvokeInt(0x5549EE11FA22FCF2,dlcVehicleIndex)end;---@return integer
	--[=[Returns the total number of DLC weapons.]=]
	GetNumDlcWeapons=function()return InvokeInt(0xEE47635F352DA367)end;---@return integer
	--[=[Returns the total number of DLC weapons that are available in SP (availableInSP field in shop_weapon.meta).]=]
	GetNumDlcWeaponsSp=function()return InvokeInt(0x4160B65AE085B5A9)end;---@return integer
	--[=[
dlcWeaponIndex takes a number from 0 - GET_NUM_DLC_WEAPONS() - 1.
struct DlcWeaponData
{
int emptyCheck; //use DLC1::IS_CONTENT_ITEM_LOCKED on this
int padding1;
int weaponHash;
int padding2;
int unk;
int padding3;
int weaponCost;
int padding4;
int ammoCost;
int padding5;
int ammoType;
int padding6;
int defaultClipSize;
int padding7;
char nameLabel[64];
char descLabel[64];
char desc2Label[64]; // usually "the" + name
char upperCaseNameLabel[64];
};]=]
	GetDlcWeaponData=function(dlcWeaponIndex--[[@param dlcWeaponIndex integer]],outData--[[@param outData any*]])return InvokeBool(0x79923CD21BECE14E,dlcWeaponIndex,outData)end;---@return boolean
	--[=[Same as GET_DLC_WEAPON_DATA but only works for DLC weapons that are available in SP.]=]
	GetDlcWeaponDataSp=function(dlcWeaponIndex--[[@param dlcWeaponIndex integer]],outData--[[@param outData any*]])return InvokeBool(0x310836EE7129BA33,dlcWeaponIndex,outData)end;---@return boolean
	--[=[Returns the total number of DLC weapon components.]=]
	GetNumDlcWeaponComponents=function(dlcWeaponIndex--[[@param dlcWeaponIndex integer]])return InvokeInt(0x405425358A7D61FE,dlcWeaponIndex)end;---@return integer
	--[=[Returns the total number of DLC weapon components that are available in SP.]=]
	GetNumDlcWeaponComponentsSp=function(dlcWeaponIndex--[[@param dlcWeaponIndex integer]])return InvokeInt(0xAD2A7A6DFF55841B,dlcWeaponIndex)end;---@return integer
	--[=[p0 seems to be the weapon index
p1 seems to be the weapon component index
struct DlcComponentData{
int attachBone;
int padding1;
int bActiveByDefault;
int padding2;
int unk;
int padding3;
int componentHash;
int padding4;
int unk2;
int padding5;
int componentCost;
int padding6;
char nameLabel[64];
char descLabel[64];
};
]=]
	GetDlcWeaponComponentData=function(dlcWeaponIndex--[[@param dlcWeaponIndex integer]],dlcWeapCompIndex--[[@param dlcWeapCompIndex integer]],ComponentDataPtr--[[@param ComponentDataPtr any*]])return InvokeBool(0x6CF598A2957C2BF8,dlcWeaponIndex,dlcWeapCompIndex,ComponentDataPtr)end;---@return boolean
	--[=[Same as GET_DLC_WEAPON_COMPONENT_DATA but only works for DLC components that are available in SP.]=]
	GetDlcWeaponComponentDataSp=function(dlcWeaponIndex--[[@param dlcWeaponIndex integer]],dlcWeapCompIndex--[[@param dlcWeapCompIndex integer]],ComponentDataPtr--[[@param ComponentDataPtr any*]])return InvokeBool(0x31D5E073B6F93CDC,dlcWeaponIndex,dlcWeapCompIndex,ComponentDataPtr)end;---@return boolean
	IsContentItemLocked=function(itemHash--[[@param itemHash integer]])return InvokeBool(0xD4D7B033C3AA243C,itemHash)end;---@return boolean
	IsDlcVehicleMod=function(hash--[[@param hash integer]])return InvokeBool(0x0564B9FF9631B82C,hash)end;---@return boolean
	GetDlcVehicleModLockHash=function(hash--[[@param hash integer]])return InvokeInt(0xC098810437312FFF,hash)end;---@return integer
	--[=[From fm_deathmatch_creator and fm_race_creator:

FILES::REVERT_CONTENT_CHANGESET_GROUP_FOR_ALL(joaat("GROUP_MAP_SP"));
FILES::EXECUTE_CONTENT_CHANGESET_GROUP_FOR_ALL(joaat("GROUP_MAP"));]=]
	ExecuteContentChangesetGroupForAll=function(hash--[[@param hash integer]])return InvokeVoid(0x6BEDF5769AC2DC07,hash)end;
	--[=[From fm_deathmatch_creator and fm_race_creator:

FILES::REVERT_CONTENT_CHANGESET_GROUP_FOR_ALL(joaat("GROUP_MAP_SP"));
FILES::EXECUTE_CONTENT_CHANGESET_GROUP_FOR_ALL(joaat("GROUP_MAP"));]=]
	RevertContentChangesetGroupForAll=function(hash--[[@param hash integer]])return InvokeVoid(0x3C1978285B036B25,hash)end;
}
_G.Fire={
	--[=[Starts a fire:

xyz: Location of fire
maxChildren: The max amount of times a fire can spread to other objects. Must be 25 or less, or the function will do nothing.
isGasFire: Whether or not the fire is powered by gasoline.]=]
	StartScriptFire=function(X--[[@param X number]],Y--[[@param Y number]],Z--[[@param Z number]],maxChildren--[[@param maxChildren integer]],isGasFire--[[@param isGasFire boolean]])return InvokeInt(0x6B83617E04503888,X+.0,Y+.0,Z+.0,maxChildren,isGasFire)end;---@return integer
	RemoveScriptFire=function(fireHandle--[[@param fireHandle integer]])return InvokeVoid(0x7FF548385680673F,fireHandle)end;
	StartEntityFire=function(entity--[[@param entity integer]])return InvokeInt(0xF6A9D9708F6F23DF,entity)end;---@return integer
	StopEntityFire=function(entity--[[@param entity integer]])return InvokeVoid(0x7F0DD2EBBB651AFF,entity)end;
	IsEntityOnFire=function(entity--[[@param entity integer]])return InvokeBool(0x28D3FED7190D3A0B,entity)end;---@return boolean
	GetNumberOfFiresInRange=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]])return InvokeInt(0x50CAD495A460B305,x+.0,y+.0,z+.0,radius+.0)end;---@return integer
	SetFlammabilityMultiplier=function(p0--[[@param p0 number]])return InvokeVoid(0x8F390AC4155099BA,p0+.0)end;
	StopFireInRange=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]])return InvokeVoid(0x056A8A219B8E829F,x+.0,y+.0,z+.0,radius+.0)end;
	--[=[Returns TRUE if it found something. FALSE if not.]=]
	GetClosestFirePos=function(outPosition--[[@param outPosition V3*]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeBool(0x352A9F6BCF90081F,outPosition,x+.0,y+.0,z+.0)end;---@return boolean
	--[=[BOOL isAudible = If explosion makes a sound.
BOOL isInvisible = If the explosion is invisible or not.

explosionType: https://alloc8or.re/gta5/doc/enums/eExplosionTag.txt]=]
	AddExplosion=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],explosionType--[[@param explosionType integer]],damageScale--[[@param damageScale number]],isAudible--[[@param isAudible boolean]],isInvisible--[[@param isInvisible boolean]],cameraShake--[[@param cameraShake number]],noDamage--[[@param noDamage boolean]])return InvokeVoid(0xE3AD2BDBAEE269AC,x+.0,y+.0,z+.0,explosionType,damageScale+.0,isAudible,isInvisible,cameraShake+.0,noDamage)end;
	--[=[isAudible: If explosion makes a sound.
isInvisible: If the explosion is invisible or not.
explosionType: See ADD_EXPLOSION.]=]
	AddOwnedExplosion=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],explosionType--[[@param explosionType integer]],damageScale--[[@param damageScale number]],isAudible--[[@param isAudible boolean]],isInvisible--[[@param isInvisible boolean]],cameraShake--[[@param cameraShake number]])return InvokeVoid(0x172AA1B624FA1013,ped,x+.0,y+.0,z+.0,explosionType,damageScale+.0,isAudible,isInvisible,cameraShake+.0)end;
	--[=[isAudible: If explosion makes a sound.
isInvisible: If the explosion is invisible or not.
explosionType: See ADD_EXPLOSION.]=]
	AddExplosionWithUserVfx=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],explosionType--[[@param explosionType integer]],explosionFx--[[@param explosionFx integer]],damageScale--[[@param damageScale number]],isAudible--[[@param isAudible boolean]],isInvisible--[[@param isInvisible boolean]],cameraShake--[[@param cameraShake number]])return InvokeVoid(0x36DD3FE58B5E5212,x+.0,y+.0,z+.0,explosionType,explosionFx,damageScale+.0,isAudible,isInvisible,cameraShake+.0)end;
	--[=[explosionType: See ADD_EXPLOSION.]=]
	IsExplosionInArea=function(explosionType--[[@param explosionType integer]],x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]])return InvokeBool(0x2E2EBA0EE7CED0E0,explosionType,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0)end;---@return boolean
	--[=[explosionType: See ADD_EXPLOSION.]=]
	IsExplosionActiveInArea=function(explosionType--[[@param explosionType integer]],x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]])return InvokeBool(0x6070104B699B2EF4,explosionType,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0)end;---@return boolean
	--[=[explosionType: See ADD_EXPLOSION.]=]
	IsExplosionInSphere=function(explosionType--[[@param explosionType integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]])return InvokeBool(0xAB0F816885B0E483,explosionType,x+.0,y+.0,z+.0,radius+.0)end;---@return boolean
	--[=[explosionType: See ADD_EXPLOSION.]=]
	GetOwnerOfExplosionInSphere=function(explosionType--[[@param explosionType integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]])return InvokeInt(0xB3CD51E3DB86F176,explosionType,x+.0,y+.0,z+.0,radius+.0)end;---@return integer
	--[=[explosionType: See ADD_EXPLOSION, -1 for any explosion type
]=]
	IsExplosionInAngledArea=function(explosionType--[[@param explosionType integer]],x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],width--[[@param width number]])return InvokeBool(0xA079A6C51525DC4B,explosionType,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,width+.0)end;---@return boolean
	--[=[Returns a handle to the first entity within the a circle spawned inside the 2 points from a radius.

explosionType: See ADD_EXPLOSION.]=]
	GetOwnerOfExplosionInAngledArea=function(explosionType--[[@param explosionType integer]],x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],radius--[[@param radius number]])return InvokeInt(0x14BA4BA137AF6CEC,explosionType,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,radius+.0)end;---@return integer
}
_G.Graphics={
	--[=[NOTE: Debugging functions are not present in the retail version of the game.]=]
	SetDebugLinesAndSpheresDrawingActive=function(enabled--[[@param enabled boolean]])return InvokeVoid(0x175B6BFC15CDD0C5,enabled)end;
	DrawDebugLine=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],r--[[@param r integer]],g--[[@param g integer]],b--[[@param b integer]],alpha--[[@param alpha integer]])return InvokeVoid(0x7FDFADE676AA3CB0,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,r,g,b,alpha)end;
	--[=[NOTE: Debugging functions are not present in the retail version of the game.]=]
	DrawDebugLineWithTwoColours=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],r1--[[@param r1 integer]],g1--[[@param g1 integer]],b1--[[@param b1 integer]],r2--[[@param r2 integer]],g2--[[@param g2 integer]],b2--[[@param b2 integer]],alpha1--[[@param alpha1 integer]],alpha2--[[@param alpha2 integer]])return InvokeVoid(0xD8B9A8AC5608FF94,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,r1,g1,b1,r2,g2,b2,alpha1,alpha2)end;
	--[=[NOTE: Debugging functions are not present in the retail version of the game.]=]
	DrawDebugSphere=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]],red--[[@param red integer]],green--[[@param green integer]],blue--[[@param blue integer]],alpha--[[@param alpha integer]])return InvokeVoid(0xAAD68E1AB39DA632,x+.0,y+.0,z+.0,radius+.0,red,green,blue,alpha)end;
	DrawDebugBox=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],r--[[@param r integer]],g--[[@param g integer]],b--[[@param b integer]],alpha--[[@param alpha integer]])return InvokeVoid(0x083A2CA4F2E573BD,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,r,g,b,alpha)end;
	--[=[NOTE: Debugging functions are not present in the retail version of the game.]=]
	DrawDebugCross=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],size--[[@param size number]],red--[[@param red integer]],green--[[@param green integer]],blue--[[@param blue integer]],alpha--[[@param alpha integer]])return InvokeVoid(0x73B1189623049839,x+.0,y+.0,z+.0,size+.0,red,green,blue,alpha)end;
	--[=[NOTE: Debugging functions are not present in the retail version of the game.]=]
	DrawDebugText=function(text--[[@param text string]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],red--[[@param red integer]],green--[[@param green integer]],blue--[[@param blue integer]],alpha--[[@param alpha integer]])return InvokeVoid(0x3903E216620488E8,text,x+.0,y+.0,z+.0,red,green,blue,alpha)end;
	--[=[NOTE: Debugging functions are not present in the retail version of the game.]=]
	DrawDebugText2d=function(text--[[@param text string]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],red--[[@param red integer]],green--[[@param green integer]],blue--[[@param blue integer]],alpha--[[@param alpha integer]])return InvokeVoid(0xA3BB2E9555C05A8F,text,x+.0,y+.0,z+.0,red,green,blue,alpha)end;
	--[=[Draws a depth-tested line from one point to another.
----------------
x1, y1, z1 : Coordinates for the first point
x2, y2, z2 : Coordinates for the second point
r, g, b, alpha : Color with RGBA-Values
I recommend using a predefined function to call this.
[VB.NET]
Public Sub DrawLine(from As Vector3, [to] As Vector3, col As Color)
    [Function].Call(Hash.DRAW_LINE, from.X, from.Y, from.Z, [to].X, [to].Y, [to].Z, col.R, col.G, col.B, col.A)
End Sub

[C#]
public void DrawLine(Vector3 from, Vector3 to, Color col)
{
    Function.Call(Hash.DRAW_LINE, from.X, from.Y, from.Z, to.X, to.Y, to.Z, col.R, col.G, col.B, col.A);
}]=]
	DrawLine=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],red--[[@param red integer]],green--[[@param green integer]],blue--[[@param blue integer]],alpha--[[@param alpha integer]])return InvokeVoid(0x6B7256074AE34680,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,red,green,blue,alpha)end;
	--[=[x/y/z - Location of a vertex (in world coords), presumably.
----------------
x1, y1, z1     : Coordinates for the first point
x2, y2, z2     : Coordinates for the second point
x3, y3, z3     : Coordinates for the third point
r, g, b, alpha : Color with RGBA-Values

Keep in mind that only one side of the drawn triangle is visible: It's the side, in which the vector-product of the vectors heads to: (b-a)x(c-a) Or (b-a)x(c-b).
But be aware: The function seems to work somehow differently. I have trouble having them drawn in rotated orientation. Try it yourself and if you somehow succeed, please edit this and post your solution.
I recommend using a predefined function to call this.
[VB.NET]
Public Sub DrawPoly(a As Vector3, b As Vector3, c As Vector3, col As Color)
    [Function].Call(Hash.DRAW_POLY, a.X, a.Y, a.Z, b.X, b.Y, b.Z, c.X, c.Y, c.Z, col.R, col.G, col.B, col.A)
End Sub

[C#]
public void DrawPoly(Vector3 a, Vector3 b, Vector3 c, Color col)
{
    Function.Call(Hash.DRAW_POLY, a.X, a.Y, a.Z, b.X, b.Y, b.Z, c.X, c.Y, c.Z, col.R, col.G, col.B, col.A);
}
BTW: Intersecting triangles are not supported: They overlap in the order they were called.]=]
	DrawPoly=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],x3--[[@param x3 number]],y3--[[@param y3 number]],z3--[[@param z3 number]],red--[[@param red integer]],green--[[@param green integer]],blue--[[@param blue integer]],alpha--[[@param alpha integer]])return InvokeVoid(0xAC26716048436851,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,x3+.0,y3+.0,z3+.0,red,green,blue,alpha)end;
	--[=[Used for drawling Deadline trailing lights, see deadline.ytd

p15 through p23 are values that appear to be related to illiumation, scaling, and rotation; more testing required.
For UVW mapping (u,v,w parameters), reference your favourite internet resource for more details.]=]
	DrawTexturedPoly=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],x3--[[@param x3 number]],y3--[[@param y3 number]],z3--[[@param z3 number]],red--[[@param red integer]],green--[[@param green integer]],blue--[[@param blue integer]],alpha--[[@param alpha integer]],textureDict--[[@param textureDict string]],textureName--[[@param textureName string]],u1--[[@param u1 number]],v1--[[@param v1 number]],w1--[[@param w1 number]],u2--[[@param u2 number]],v2--[[@param v2 number]],w2--[[@param w2 number]],u3--[[@param u3 number]],v3--[[@param v3 number]],w3--[[@param w3 number]])return InvokeVoid(0x29280002282F1928,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,x3+.0,y3+.0,z3+.0,red,green,blue,alpha,textureDict,textureName,u1+.0,v1+.0,w1+.0,u2+.0,v2+.0,w2+.0,u3+.0,v3+.0,w3+.0)end;
	--[=[Used for drawling Deadline trailing lights, see deadline.ytd

Each vertex has its own colour that is blended/illuminated on the texture. Additionally, the R, G, and B components are floats that are int-casted internally.
For UVW mapping (u,v,w parameters), reference your favourite internet resource for more details.]=]
	DrawTexturedPolyWithThreeColours=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],x3--[[@param x3 number]],y3--[[@param y3 number]],z3--[[@param z3 number]],red1--[[@param red1 number]],green1--[[@param green1 number]],blue1--[[@param blue1 number]],alpha1--[[@param alpha1 integer]],red2--[[@param red2 number]],green2--[[@param green2 number]],blue2--[[@param blue2 number]],alpha2--[[@param alpha2 integer]],red3--[[@param red3 number]],green3--[[@param green3 number]],blue3--[[@param blue3 number]],alpha3--[[@param alpha3 integer]],textureDict--[[@param textureDict string]],textureName--[[@param textureName string]],u1--[[@param u1 number]],v1--[[@param v1 number]],w1--[[@param w1 number]],u2--[[@param u2 number]],v2--[[@param v2 number]],w2--[[@param w2 number]],u3--[[@param u3 number]],v3--[[@param v3 number]],w3--[[@param w3 number]])return InvokeVoid(0x736D7AA1B750856B,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,x3+.0,y3+.0,z3+.0,red1+.0,green1+.0,blue1+.0,alpha1,red2+.0,green2+.0,blue2+.0,alpha2,red3+.0,green3+.0,blue3+.0,alpha3,textureDict,textureName,u1+.0,v1+.0,w1+.0,u2+.0,v2+.0,w2+.0,u3+.0,v3+.0,w3+.0)end;
	--[=[x,y,z = start pos
x2,y2,z2 = end pos

Draw's a 3D Box between the two x,y,z coords.
--------------
Keep in mind that the edges of the box do only align to the worlds base-vectors. Therefore something like rotation cannot be applied. That means this function is pretty much useless, unless you want a static unicolor box somewhere.
I recommend using a predefined function to call this.
[VB.NET]
Public Sub DrawBox(a As Vector3, b As Vector3, col As Color)
    [Function].Call(Hash.DRAW_BOX,a.X, a.Y, a.Z,b.X, b.Y, b.Z,col.R, col.G, col.B, col.A)
End Sub

[C#]
public void DrawBox(Vector3 a, Vector3 b, Color col)
{
    Function.Call(Hash.DRAW_BOX,a.X, a.Y, a.Z,b.X, b.Y, b.Z,col.R, col.G, col.B, col.A);
}]=]
	DrawBox=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],red--[[@param red integer]],green--[[@param green integer]],blue--[[@param blue integer]],alpha--[[@param alpha integer]])return InvokeVoid(0xD3A9971CADAC7252,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,red,green,blue,alpha)end;
	SetBackfaceculling=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x23BA6B0C2AD7B0D3,toggle)end;
	SetDepthwriting=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xC5C8F970D4EDFF71,toggle)end;
	BeginTakeMissionCreatorPhoto=function()return InvokeBool(0x1DD2139A9A20DCE8)end;---@return boolean
	GetStatusOfTakeMissionCreatorPhoto=function()return InvokeInt(0x90A78ECAA4E78453)end;---@return integer
	FreeMemoryForMissionCreatorPhoto=function()return InvokeVoid(0x0A46AF8A78DC5E0A)end;
	LoadMissionCreatorPhoto=function(p0--[[@param p0 any*]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeBool(0x4862437A486F91B0,p0,p1,p2,p3)end;---@return boolean
	GetStatusOfLoadMissionCreatorPhoto=function(p0--[[@param p0 any*]])return InvokeInt(0x1670F8D05056F257,p0)end;---@return integer
	BeginCreateMissionCreatorPhotoPreview=function()return InvokeBool(0x7FA5D82B8F58EC06)end;---@return boolean
	GetStatusOfCreateMissionCreatorPhotoPreview=function()return InvokeInt(0x5B0316762AFD4A64)end;---@return integer
	FreeMemoryForMissionCreatorPhotoPreview=function()return InvokeVoid(0x346EF3ECAAAB149E)end;
	BeginTakeHighQualityPhoto=function()return InvokeBool(0xA67C35C56EB1BD9D)end;---@return boolean
	GetStatusOfTakeHighQualityPhoto=function()return InvokeInt(0x0D6CA79EEEBD8CA3)end;---@return integer
	FreeMemoryForHighQualityPhoto=function()return InvokeVoid(0xD801CC02177FA3F1)end;
	SetTakenPhotoIsMugshot=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x1BBC135A4D25EDDE,toggle)end;
	SetArenaThemeAndVariationForTakenPhoto=function(p0--[[@param p0 any]],p1--[[@param p1 integer]])return InvokeVoid(0xF3F776ADA161E47D,p0,p1)end;
	SetOnIslandXForTakenPhoto=function(p0--[[@param p0 any]])return InvokeVoid(0xADD6627C4D325458,p0)end;
	--[=[1 match in 1 script. cellphone_controller.
p0 is -1 in scripts.]=]
	SaveHighQualityPhoto=function(unused--[[@param unused integer]])return InvokeBool(0x3DEC726C25A11BAC,unused)end;---@return boolean
	GetStatusOfSaveHighQualityPhoto=function()return InvokeInt(0x0C0C4E81E1AC60A0)end;---@return integer
	BeginCreateLowQualityCopyOfPhoto=function(p0--[[@param p0 any]])return InvokeBool(0x759650634F07B6B4,p0)end;---@return boolean
	GetStatusOfCreateLowQualityCopyOfPhoto=function(p0--[[@param p0 integer]])return InvokeInt(0xCB82A0BF0E3E3265,p0)end;---@return integer
	FreeMemoryForLowQualityPhoto=function()return InvokeVoid(0x6A12D88881435DCA)end;
	DrawLowQualityPhotoToPhone=function(p0--[[@param p0 boolean]],p1--[[@param p1 boolean]])return InvokeVoid(0x1072F115DAB0717E,p0,p1)end;
	--[=[This function is hard-coded to always return 0.]=]
	GetMaximumNumberOfPhotos=function()return InvokeInt(0x34D23450F028B0BF)end;---@return integer
	--[=[This function is hard-coded to always return 96.]=]
	GetMaximumNumberOfCloudPhotos=function()return InvokeInt(0xDC54A7AF8B3A14EF)end;---@return integer
	GetCurrentNumberOfCloudPhotos=function()return InvokeInt(0x473151EBC762C6DA)end;---@return integer
	--[=[2 matches across 2 scripts. Only showed in appcamera & appmedia. Both were 0.]=]
	QueueOperationToCreateSortedListOfPhotos=function(p0--[[@param p0 any]])return InvokeBool(0x2A893980E96B659A,p0)end;---@return boolean
	--[=[3 matches across 3 scripts. First 2 were 0, 3rd was 1. Possibly a bool.
appcamera, appmedia, and cellphone_controller.]=]
	GetStatusOfSortedListOperation=function(p0--[[@param p0 any]])return InvokeInt(0xF5BED327CEA362B1,p0)end;---@return integer
	ClearStatusOfSortedListOperation=function()return InvokeVoid(0x4AF92ACD3141D96C)end;
	--[=[This function is hard-coded to always return 0.]=]
	DoesThisPhotoSlotContainAValidPhoto=function(p0--[[@param p0 any]])return InvokeBool(0xE791DF1F73ED2C8B,p0)end;---@return boolean
	--[=[This function is hard-coded to always return 0.]=]
	LoadHighQualityPhoto=function(p0--[[@param p0 any]])return InvokeBool(0xEC72C258667BE5EA,p0)end;---@return boolean
	--[=[Hardcoded to always return 2.]=]
	GetLoadHighQualityPhotoStatus=function(p0--[[@param p0 integer]])return InvokeInt(0x40AFB081F8ADD4EE,p0)end;---@return integer
	DrawLightWithRangeex=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],r--[[@param r integer]],g--[[@param g integer]],b--[[@param b integer]],range--[[@param range number]],intensity--[[@param intensity number]],shadow--[[@param shadow number]])return InvokeVoid(0xF49E9A9716A04595,x+.0,y+.0,z+.0,r,g,b,range+.0,intensity+.0,shadow+.0)end;
	DrawLightWithRange=function(posX--[[@param posX number]],posY--[[@param posY number]],posZ--[[@param posZ number]],colorR--[[@param colorR integer]],colorG--[[@param colorG integer]],colorB--[[@param colorB integer]],range--[[@param range number]],intensity--[[@param intensity number]])return InvokeVoid(0xF2A1B2771A01DBD4,posX+.0,posY+.0,posZ+.0,colorR,colorG,colorB,range+.0,intensity+.0)end;
	--[=[Parameters:
* pos - coordinate where the spotlight is located
* dir - the direction vector the spotlight should aim at from its current position
* r,g,b - color of the spotlight
* distance - the maximum distance the light can reach
* brightness - the brightness of the light
* roundness - "smoothness" of the circle edge
* radius - the radius size of the spotlight
* falloff - the falloff size of the light's edge (example: www.i.imgur.com/DemAWeO.jpg)

Example in C# (spotlight aims at the closest vehicle):
Vector3 myPos = Game.Player.Character.Position;
Vehicle nearest = World.GetClosestVehicle(myPos , 1000f);
Vector3 destinationCoords = nearest.Position;
Vector3 dirVector = destinationCoords - myPos;
dirVector.Normalize();
Function.Call(Hash.DRAW_SPOT_LIGHT, pos.X, pos.Y, pos.Z, dirVector.X, dirVector.Y, dirVector.Z, 255, 255, 255, 100.0f, 1f, 0.0f, 13.0f, 1f);]=]
	DrawSpotLight=function(posX--[[@param posX number]],posY--[[@param posY number]],posZ--[[@param posZ number]],dirX--[[@param dirX number]],dirY--[[@param dirY number]],dirZ--[[@param dirZ number]],colorR--[[@param colorR integer]],colorG--[[@param colorG integer]],colorB--[[@param colorB integer]],distance--[[@param distance number]],brightness--[[@param brightness number]],hardness--[[@param hardness number]],radius--[[@param radius number]],falloff--[[@param falloff number]])return InvokeVoid(0xD0F64B265C8C8B33,posX+.0,posY+.0,posZ+.0,dirX+.0,dirY+.0,dirZ+.0,colorR,colorG,colorB,distance+.0,brightness+.0,hardness+.0,radius+.0,falloff+.0)end;
	DrawShadowedSpotLight=function(posX--[[@param posX number]],posY--[[@param posY number]],posZ--[[@param posZ number]],dirX--[[@param dirX number]],dirY--[[@param dirY number]],dirZ--[[@param dirZ number]],colorR--[[@param colorR integer]],colorG--[[@param colorG integer]],colorB--[[@param colorB integer]],distance--[[@param distance number]],brightness--[[@param brightness number]],roundness--[[@param roundness number]],radius--[[@param radius number]],falloff--[[@param falloff number]],shadowId--[[@param shadowId integer]])return InvokeVoid(0x5BCA583A583194DB,posX+.0,posY+.0,posZ+.0,dirX+.0,dirY+.0,dirZ+.0,colorR,colorG,colorB,distance+.0,brightness+.0,roundness+.0,radius+.0,falloff+.0,shadowId)end;
	FadeUpPedLight=function(p0--[[@param p0 number]])return InvokeVoid(0xC9B18B4619F48F7B,p0+.0)end;
	UpdateLightsOnEntity=function(entity--[[@param entity integer]])return InvokeVoid(0xDEADC0DEDEADC0DE,entity)end;
	SetLightOverrideMaxIntensityScale=function(p0--[[@param p0 any]])return InvokeVoid(0x9641588DAB93B4B5,p0)end;
	GetLightOverrideMaxIntensityScale=function()return InvokeFloat(0x393BD2275CEB7793)end;---@return number
	--[=[enum MarkerTypes
{
    MarkerTypeUpsideDownCone = 0,
 MarkerTypeVerticalCylinder = 1,
   MarkerTypeThickChevronUp = 2,
 MarkerTypeThinChevronUp = 3,
  MarkerTypeCheckeredFlagRect = 4,
  MarkerTypeCheckeredFlagCircle = 5,
    MarkerTypeVerticleCircle = 6,
 MarkerTypePlaneModel = 7,
 MarkerTypeLostMCDark = 8,
 MarkerTypeLostMCLight = 9,
    MarkerTypeNumber0 = 10,
   MarkerTypeNumber1 = 11,
   MarkerTypeNumber2 = 12,
   MarkerTypeNumber3 = 13,
   MarkerTypeNumber4 = 14,
   MarkerTypeNumber5 = 15,
   MarkerTypeNumber6 = 16,
   MarkerTypeNumber7 = 17,
   MarkerTypeNumber8 = 18,
   MarkerTypeNumber9 = 19,
   MarkerTypeChevronUpx1 = 20,
   MarkerTypeChevronUpx2 = 21,
   MarkerTypeChevronUpx3 = 22,
   MarkerTypeHorizontalCircleFat = 23,
   MarkerTypeReplayIcon = 24,
    MarkerTypeHorizontalCircleSkinny = 25,
    MarkerTypeHorizontalCircleSkinny_Arrow = 26,
  MarkerTypeHorizontalSplitArrowCircle = 27,
    MarkerTypeDebugSphere = 28,
   MarkerTypeDallorSign = 29,
    MarkerTypeHorizontalBars = 30,
    MarkerTypeWolfHead = 31
};

dirX/Y/Z represent a heading on each axis in which the marker should face, alternatively you can rotate each axis independently with rotX/Y/Z (and set dirX/Y/Z all to 0).

faceCamera - Rotates only the y-axis (the heading) towards the camera

p19 - no effect, default value in script is 2

rotate - Rotates only on the y-axis (the heading)

textureDict - Name of texture dictionary to load texture from (e.g. "GolfPutting")

textureName - Name of texture inside dictionary to load (e.g. "PuttingMarker")

drawOnEnts - Draws the marker onto any entities that intersect it

basically what he said, except textureDict and textureName are totally not const char*, or if so, then they are always set to 0/NULL/nullptr in every script I checked, eg:

bj.c: graphics::draw_marker(6, vParam0, 0f, 0f, 1f, 0f, 0f, 0f, 4f, 4f, 4f, 240, 200, 80, iVar1, 0, 0, 2, 0, 0, 0, false);

his is what I used to draw an amber downward pointing chevron "V", has to be redrawn every frame.  The 180 is for 180 degrees rotation around the Y axis, the 50 is alpha, assuming max is 100, but it will accept 255.

GRAPHICS::DRAW_MARKER(2, v.x, v.y, v.z + 2, 0, 0, 0, 0, 180, 0, 2, 2, 2, 255, 128, 0, 50, 0, 1, 1, 0, 0, 0, 0);

]=]
	DrawMarker=function(type--[[@param type integer]],posX--[[@param posX number]],posY--[[@param posY number]],posZ--[[@param posZ number]],dirX--[[@param dirX number]],dirY--[[@param dirY number]],dirZ--[[@param dirZ number]],rotX--[[@param rotX number]],rotY--[[@param rotY number]],rotZ--[[@param rotZ number]],scaleX--[[@param scaleX number]],scaleY--[[@param scaleY number]],scaleZ--[[@param scaleZ number]],red--[[@param red integer]],green--[[@param green integer]],blue--[[@param blue integer]],alpha--[[@param alpha integer]],bobUpAndDown--[[@param bobUpAndDown boolean]],faceCamera--[[@param faceCamera boolean]],p19--[[@param p19 integer]],rotate--[[@param rotate boolean]],textureDict--[[@param textureDict string]],textureName--[[@param textureName string]],drawOnEnts--[[@param drawOnEnts boolean]])return InvokeVoid(0x28477EC23D892089,type,posX+.0,posY+.0,posZ+.0,dirX+.0,dirY+.0,dirZ+.0,rotX+.0,rotY+.0,rotZ+.0,scaleX+.0,scaleY+.0,scaleZ+.0,red,green,blue,alpha,bobUpAndDown,faceCamera,p19,rotate,textureDict,textureName,drawOnEnts)end;
	DrawMarkerEx=function(type--[[@param type integer]],posX--[[@param posX number]],posY--[[@param posY number]],posZ--[[@param posZ number]],dirX--[[@param dirX number]],dirY--[[@param dirY number]],dirZ--[[@param dirZ number]],rotX--[[@param rotX number]],rotY--[[@param rotY number]],rotZ--[[@param rotZ number]],scaleX--[[@param scaleX number]],scaleY--[[@param scaleY number]],scaleZ--[[@param scaleZ number]],red--[[@param red integer]],green--[[@param green integer]],blue--[[@param blue integer]],alpha--[[@param alpha integer]],bobUpAndDown--[[@param bobUpAndDown boolean]],faceCamera--[[@param faceCamera boolean]],p19--[[@param p19 any]],rotate--[[@param rotate boolean]],textureDict--[[@param textureDict string]],textureName--[[@param textureName string]],drawOnEnts--[[@param drawOnEnts boolean]],p24--[[@param p24 boolean]],p25--[[@param p25 boolean]])return InvokeVoid(0xE82728F0DE75D13A,type,posX+.0,posY+.0,posZ+.0,dirX+.0,dirY+.0,dirZ+.0,rotX+.0,rotY+.0,rotZ+.0,scaleX+.0,scaleY+.0,scaleZ+.0,red,green,blue,alpha,bobUpAndDown,faceCamera,p19,rotate,textureDict,textureName,drawOnEnts,p24,p25)end;
	--[=[Draws a 3D sphere, typically seen in the GTA:O freemode event "Penned In".
Example https://imgur.com/nCbtS4H

alpha - The alpha for the sphere. Goes from 0.0 to 1.0.]=]
	DrawMarkerSphere=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]],red--[[@param red integer]],green--[[@param green integer]],blue--[[@param blue integer]],alpha--[[@param alpha number]])return InvokeVoid(0x799017F9E3B10112,x+.0,y+.0,z+.0,radius+.0,red,green,blue,alpha+.0)end;
	--[=[Creates a checkpoint. Returns the handle of the checkpoint.

20/03/17 : Attention, checkpoints are already handled by the game itself, so you must not loop it like markers.

Parameters:
* type - The type of checkpoint to create. See below for a list of checkpoint types.
* pos1 - The position of the checkpoint.
* pos2 - The position of the next checkpoint to point to.
* radius - The radius of the checkpoint.
* color - The color of the checkpoint.
* reserved - Special parameter, see below for details. Usually set to 0 in the scripts.

Checkpoint types:
0-4---------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
5-9---------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
10-14-------Ring: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
15-19-------1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker      
20-24-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker 
25-29-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker    
30-34-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker 
35-38-------Ring: Airplane Up, Left, Right, UpsideDown
39----------?
40----------Ring: just a ring
41----------?
42-44-------Cylinder w/ number (uses 'reserved' parameter)
45-47-------Cylinder no arrow or number

If using type 42-44, reserved sets number / number and shape to display

0-99------------Just numbers (0-99)
100-109-----------------Arrow (0-9)
110-119------------Two arrows (0-9)
120-129----------Three arrows (0-9)
130-139----------------Circle (0-9)
140-149------------CycleArrow (0-9)
150-159----------------Circle (0-9)
160-169----Circle  w/ pointer (0-9)
170-179-------Perforated ring (0-9)
180-189----------------Sphere (0-9)]=]
	CreateCheckpoint=function(type--[[@param type integer]],posX1--[[@param posX1 number]],posY1--[[@param posY1 number]],posZ1--[[@param posZ1 number]],posX2--[[@param posX2 number]],posY2--[[@param posY2 number]],posZ2--[[@param posZ2 number]],diameter--[[@param diameter number]],red--[[@param red integer]],green--[[@param green integer]],blue--[[@param blue integer]],alpha--[[@param alpha integer]],reserved--[[@param reserved integer]])return InvokeInt(0x0134F0835AB6BFCB,type,posX1+.0,posY1+.0,posZ1+.0,posX2+.0,posY2+.0,posZ2+.0,diameter+.0,red,green,blue,alpha,reserved)end;---@return integer
	SetCheckpointInsideCylinderHeightScale=function(checkpoint--[[@param checkpoint integer]],scale--[[@param scale number]])return InvokeVoid(0x4B5B4DA5D79F1943,checkpoint,scale+.0)end;
	SetCheckpointInsideCylinderScale=function(checkpoint--[[@param checkpoint integer]],scale--[[@param scale number]])return InvokeVoid(0x44621483FF966526,checkpoint,scale+.0)end;
	--[=[Sets the cylinder height of the checkpoint.

Parameters:
* nearHeight - The height of the checkpoint when inside of the radius.
* farHeight - The height of the checkpoint when outside of the radius.
* radius - The radius of the checkpoint.]=]
	SetCheckpointCylinderHeight=function(checkpoint--[[@param checkpoint integer]],nearHeight--[[@param nearHeight number]],farHeight--[[@param farHeight number]],radius--[[@param radius number]])return InvokeVoid(0x2707AAE9D9297D89,checkpoint,nearHeight+.0,farHeight+.0,radius+.0)end;
	--[=[Sets the checkpoint color.]=]
	SetCheckpointRgba=function(checkpoint--[[@param checkpoint integer]],red--[[@param red integer]],green--[[@param green integer]],blue--[[@param blue integer]],alpha--[[@param alpha integer]])return InvokeVoid(0x7167371E8AD747F7,checkpoint,red,green,blue,alpha)end;
	--[=[Sets the checkpoint icon color.]=]
	SetCheckpointRgba2=function(checkpoint--[[@param checkpoint integer]],red--[[@param red integer]],green--[[@param green integer]],blue--[[@param blue integer]],alpha--[[@param alpha integer]])return InvokeVoid(0xB9EA40907C680580,checkpoint,red,green,blue,alpha)end;
	--[=[This does not move an existing checkpoint... so wtf.]=]
	SetCheckpointClipplaneWithPosNorm=function(checkpoint--[[@param checkpoint integer]],posX--[[@param posX number]],posY--[[@param posY number]],posZ--[[@param posZ number]],unkX--[[@param unkX number]],unkY--[[@param unkY number]],unkZ--[[@param unkZ number]])return InvokeVoid(0xF51D36185993515D,checkpoint,posX+.0,posY+.0,posZ+.0,unkX+.0,unkY+.0,unkZ+.0)end;
	SetCheckpointForceOldArrowPointing=function(checkpoint--[[@param checkpoint integer]])return InvokeVoid(0xFCF6788FC4860CD4,checkpoint)end;
	--[=[Unknown. Called after creating a checkpoint (type: 51) in the creators.]=]
	SetCheckpointDecalRotAlignedToCameraRot=function(checkpoint--[[@param checkpoint integer]])return InvokeVoid(0x615D3925E87A3B26,checkpoint)end;
	SetCheckpointForceDirection=function(checkpoint--[[@param checkpoint integer]])return InvokeVoid(0xDB1EA9411C8911EC,checkpoint)end;
	SetCheckpointDirection=function(checkpoint--[[@param checkpoint integer]],posX--[[@param posX number]],posY--[[@param posY number]],posZ--[[@param posZ number]])return InvokeVoid(0x3C788E7F6438754D,checkpoint,posX+.0,posY+.0,posZ+.0)end;
	DeleteCheckpoint=function(checkpoint--[[@param checkpoint integer]])return InvokeVoid(0xF5ED37F54CD4D52E,checkpoint)end;
	DontRenderInGameUi=function(p0--[[@param p0 boolean]])return InvokeVoid(0x22A249A53034450A,p0)end;
	ForceRenderInGameUi=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xDC459CFA0CCE245B,toggle)end;
	--[=[This function can requests texture dictonaries from following RPFs:
scaleform_generic.rpf
scaleform_minigames.rpf
scaleform_minimap.rpf
scaleform_web.rpf

last param isnt a toggle]=]
	RequestStreamedTextureDict=function(textureDict--[[@param textureDict string]],p1--[[@param p1 boolean]])return InvokeVoid(0xDFA2EF8E04127DD5,textureDict,p1)end;
	HasStreamedTextureDictLoaded=function(textureDict--[[@param textureDict string]])return InvokeBool(0x0145F696AAAAD2E4,textureDict)end;---@return boolean
	SetStreamedTextureDictAsNoLongerNeeded=function(textureDict--[[@param textureDict string]])return InvokeVoid(0xBE2CACCF5A8AA805,textureDict)end;
	--[=[Draws a rectangle on the screen.

-x: The relative X point of the center of the rectangle. (0.0-1.0, 0.0 is the left edge of the screen, 1.0 is the right edge of the screen)

-y: The relative Y point of the center of the rectangle. (0.0-1.0, 0.0 is the top edge of the screen, 1.0 is the bottom edge of the screen)

-width: The relative width of the rectangle. (0.0-1.0, 1.0 means the whole screen width)

-height: The relative height of the rectangle. (0.0-1.0, 1.0 means the whole screen height)

-R: Red part of the color. (0-255)

-G: Green part of the color. (0-255)

-B: Blue part of the color. (0-255)

-A: Alpha part of the color. (0-255, 0 means totally transparent, 255 means totally opaque)

The total number of rectangles to be drawn in one frame is apparently limited to 399.
]=]
	DrawRect=function(x--[[@param x number]],y--[[@param y number]],width--[[@param width number]],height--[[@param height number]],r--[[@param r integer]],g--[[@param g integer]],b--[[@param b integer]],a--[[@param a integer]],p8--[[@param p8 boolean]])return InvokeVoid(0x3A618A217E5154F0,x+.0,y+.0,width+.0,height+.0,r,g,b,a,p8)end;
	--[=[Sets a flag defining whether or not script draw commands should continue being drawn behind the pause menu. This is usually used for TV channels and other draw commands that are used with a world render target.]=]
	SetScriptGfxDrawBehindPausemenu=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xC6372ECD45D73BCD,toggle)end;
	--[=[Sets the draw order for script draw commands.

Examples from decompiled scripts:
GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(7);
GRAPHICS::DRAW_RECT(0.5, 0.5, 3.0, 3.0, v_4, v_5, v_6, a_0._f172, 0);

GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(1);
GRAPHICS::DRAW_RECT(0.5, 0.5, 1.5, 1.5, 0, 0, 0, 255, 0);]=]
	SetScriptGfxDrawOrder=function(drawOrder--[[@param drawOrder integer]])return InvokeVoid(0x61BB1D9B3A95D802,drawOrder)end;
	--[=[horizontalAlign: The horizontal alignment. This can be 67 ('C'), 76 ('L'), or 82 ('R').
verticalAlign: The vertical alignment. This can be 67 ('C'), 66 ('B'), or 84 ('T').

This function anchors script draws to a side of the safe zone. This needs to be called to make the interface independent of the player's safe zone configuration.

These values are equivalent to alignX and alignY in common:/data/ui/frontend.xml, which can be used as a baseline for default alignment.

Using any other value (including 0) will result in the safe zone not being taken into account for this draw. The canonical value for this is 'I' (73).

For example, you can use SET_SCRIPT_GFX_ALIGN(0, 84) to only scale on the Y axis (to the top), but not change the X axis.

To reset the value, use RESET_SCRIPT_GFX_ALIGN.]=]
	SetScriptGfxAlign=function(horizontalAlign--[[@param horizontalAlign integer]],verticalAlign--[[@param verticalAlign integer]])return InvokeVoid(0xB8A850F20A067EB6,horizontalAlign,verticalAlign)end;
	--[=[This function resets the alignment set using SET_SCRIPT_GFX_ALIGN and SET_SCRIPT_GFX_ALIGN_PARAMS to the default values ('I', 'I'; 0, 0, 0, 0).
This should be used after having used the aforementioned functions in order to not affect any other scripts attempting to draw.]=]
	ResetScriptGfxAlign=function()return InvokeVoid(0xE3A3DB414A373DAB)end;
	--[=[Sets the draw offset/calculated size for SET_SCRIPT_GFX_ALIGN. If using any alignment other than left/top, the game expects the width/height to be configured using this native in order to get a proper starting position for the draw command.]=]
	SetScriptGfxAlignParams=function(x--[[@param x number]],y--[[@param y number]],w--[[@param w number]],h--[[@param h number]])return InvokeVoid(0xF5A2C681787E579D,x+.0,y+.0,w+.0,h+.0)end;
	--[=[Calculates the effective X/Y fractions when applying the values set by SET_SCRIPT_GFX_ALIGN and SET_SCRIPT_GFX_ALIGN_PARAMS]=]
	GetScriptGfxAlignPosition=function(x--[[@param x number]],y--[[@param y number]],calculatedX--[[@param calculatedX number*]],calculatedY--[[@param calculatedY number*]])return InvokeVoid(0x6DD8F5AA635EB4B2,x+.0,y+.0,calculatedX,calculatedY)end;
	--[=[Gets the scale of safe zone. if the safe zone size scale is max, it will return 1.0.]=]
	GetSafeZoneSize=function()return InvokeFloat(0xBAF107B6BB2C97F0)end;---@return number
	--[=[Draws a 2D sprite on the screen.

Parameters:
textureDict - Name of texture dictionary to load texture from (e.g. "CommonMenu", "MPWeaponsCommon", etc.)

textureName - Name of texture to load from texture dictionary (e.g. "last_team_standing_icon", "tennis_icon", etc.)

screenX/Y - Screen offset (0.5 = center)
scaleX/Y - Texture scaling. Negative values can be used to flip the texture on that axis. (0.5 = half)

heading - Texture rotation in degrees (default = 0.0) positive is clockwise, measured in degrees

red,green,blue - Sprite color (default = 255/255/255)

alpha - opacity level]=]
	DrawSprite=function(textureDict--[[@param textureDict string]],textureName--[[@param textureName string]],screenX--[[@param screenX number]],screenY--[[@param screenY number]],width--[[@param width number]],height--[[@param height number]],heading--[[@param heading number]],red--[[@param red integer]],green--[[@param green integer]],blue--[[@param blue integer]],alpha--[[@param alpha integer]],p11--[[@param p11 boolean]],p12--[[@param p12 any]])return InvokeVoid(0xE7FFAE5EBF23D890,textureDict,textureName,screenX+.0,screenY+.0,width+.0,height+.0,heading+.0,red,green,blue,alpha,p11,p12)end;
	--[=[Used in arcade games and Beam hack minigame in Doomsday Heist. I will most certainly dive into this to try replicate arcade games.
x position must be between 0.0 and 1.0 (1.0 being the most right side of the screen)
y position must be between 0.0 and 1.0 (1.0 being the most bottom side of the screen)
width 0.0 - 1.0 is the reasonable amount generally
height 0.0 - 1.0 is the reasonable amount generally
p6 almost always 0.0
p11 seems to be unknown but almost always 0 int]=]
	DrawSpriteArx=function(textureDict--[[@param textureDict string]],textureName--[[@param textureName string]],x--[[@param x number]],y--[[@param y number]],width--[[@param width number]],height--[[@param height number]],p6--[[@param p6 number]],red--[[@param red integer]],green--[[@param green integer]],blue--[[@param blue integer]],alpha--[[@param alpha integer]],p11--[[@param p11 any]],p12--[[@param p12 any]])return InvokeVoid(0x2D3B147AFAD49DE0,textureDict,textureName,x+.0,y+.0,width+.0,height+.0,p6+.0,red,green,blue,alpha,p11,p12)end;
	--[=[Similar to _DRAW_SPRITE, but seems to be some kind of "interactive" sprite, at least used by render targets.
These seem to be the only dicts ever requested by this native:

prop_screen_biker_laptop
Prop_Screen_GR_Disruption
Prop_Screen_TaleOfUs
prop_screen_nightclub
Prop_Screen_IE_Adhawk
prop_screen_sm_free_trade_shipping
prop_screen_hacker_truck
MPDesktop
Prop_Screen_Nightclub
And a few others
]=]
	DrawSpriteNamedRendertarget=function(textureDict--[[@param textureDict string]],textureName--[[@param textureName string]],screenX--[[@param screenX number]],screenY--[[@param screenY number]],width--[[@param width number]],height--[[@param height number]],heading--[[@param heading number]],red--[[@param red integer]],green--[[@param green integer]],blue--[[@param blue integer]],alpha--[[@param alpha integer]],p11--[[@param p11 any]])return InvokeVoid(0x2BC54A8188768488,textureDict,textureName,screenX+.0,screenY+.0,width+.0,height+.0,heading+.0,red,green,blue,alpha,p11)end;
	--[=[Similar to DRAW_SPRITE, but allows to specify the texture coordinates used to draw the sprite.

u1, v1 - texture coordinates for the top-left corner
u2, v2 - texture coordinates for the bottom-right corner]=]
	DrawSpriteArxWithUv=function(textureDict--[[@param textureDict string]],textureName--[[@param textureName string]],x--[[@param x number]],y--[[@param y number]],width--[[@param width number]],height--[[@param height number]],u1--[[@param u1 number]],v1--[[@param v1 number]],u2--[[@param u2 number]],v2--[[@param v2 number]],heading--[[@param heading number]],red--[[@param red integer]],green--[[@param green integer]],blue--[[@param blue integer]],alpha--[[@param alpha integer]],p15--[[@param p15 any]])return InvokeVoid(0x95812F9B26074726,textureDict,textureName,x+.0,y+.0,width+.0,height+.0,u1+.0,v1+.0,u2+.0,v2+.0,heading+.0,red,green,blue,alpha,p15)end;
	--[=[Example:
GRAPHICS::ADD_ENTITY_ICON(a_0, "MP_Arrow");

I tried this and nothing happened...]=]
	AddEntityIcon=function(entity--[[@param entity integer]],icon--[[@param icon string]])return InvokeInt(0x9CD43EEE12BF4DD0,entity,icon)end;---@return integer
	SetEntityIconVisibility=function(entity--[[@param entity integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xE0E8BEECCA96BA31,entity,toggle)end;
	SetEntityIconColor=function(entity--[[@param entity integer]],red--[[@param red integer]],green--[[@param green integer]],blue--[[@param blue integer]],alpha--[[@param alpha integer]])return InvokeVoid(0x1D5F595CCAE2E238,entity,red,green,blue,alpha)end;
	--[=[Sets the on-screen drawing origin for draw-functions (which is normally x=0,y=0 in the upper left corner of the screen) to a world coordinate.
From now on, the screen coordinate which displays the given world coordinate on the screen is seen as x=0,y=0.

Example in C#:
Vector3 boneCoord = somePed.GetBoneCoord(Bone.SKEL_Head);
Function.Call(Hash.SET_DRAW_ORIGIN, boneCoord.X, boneCoord.Y, boneCoord.Z, 0);
Function.Call(Hash.DRAW_SPRITE, "helicopterhud", "hud_corner", -0.01, -0.015, 0.013, 0.013, 0.0, 255, 0, 0, 200);
Function.Call(Hash.DRAW_SPRITE, "helicopterhud", "hud_corner", 0.01, -0.015, 0.013, 0.013, 90.0, 255, 0, 0, 200);
Function.Call(Hash.DRAW_SPRITE, "helicopterhud", "hud_corner", -0.01, 0.015, 0.013, 0.013, 270.0, 255, 0, 0, 200);
Function.Call(Hash.DRAW_SPRITE, "helicopterhud", "hud_corner", 0.01, 0.015, 0.013, 0.013, 180.0, 255, 0, 0, 200);
Function.Call(Hash.CLEAR_DRAW_ORIGIN);

Result: www11.pic-upload.de/19.06.15/bkqohvil2uao.jpg
If the pedestrian starts walking around now, the sprites are always around her head, no matter where the head is displayed on the screen.

This function also effects the drawing of texts and other UI-elements.
The effect can be reset by calling GRAPHICS::CLEAR_DRAW_ORIGIN().]=]
	SetDrawOrigin=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],p3--[[@param p3 boolean]])return InvokeVoid(0xAA0008F3BBB8F416,x+.0,y+.0,z+.0,p3)end;
	--[=[Resets the screen's draw-origin which was changed by the function GRAPHICS::SET_DRAW_ORIGIN(...) back to x=0,y=0.

See GRAPHICS::SET_DRAW_ORIGIN(...) for further information.]=]
	ClearDrawOrigin=function()return InvokeVoid(0xFF0B610F6BE0D7AF)end;
	SetBinkMovie=function(name--[[@param name string]])return InvokeInt(0x338D9F609FD632DB,name)end;---@return integer
	PlayBinkMovie=function(binkMovie--[[@param binkMovie integer]])return InvokeVoid(0x70D2CC8A542A973C,binkMovie)end;
	StopBinkMovie=function(binkMovie--[[@param binkMovie integer]])return InvokeVoid(0x63606A61DE68898A,binkMovie)end;
	ReleaseBinkMovie=function(binkMovie--[[@param binkMovie integer]])return InvokeVoid(0x04D950EEFA4EED8C,binkMovie)end;
	DrawBinkMovie=function(binkMovie--[[@param binkMovie integer]],p1--[[@param p1 number]],p2--[[@param p2 number]],p3--[[@param p3 number]],p4--[[@param p4 number]],p5--[[@param p5 number]],r--[[@param r integer]],g--[[@param g integer]],b--[[@param b integer]],a--[[@param a integer]])return InvokeVoid(0x7118E83EEB9F7238,binkMovie,p1+.0,p2+.0,p3+.0,p4+.0,p5+.0,r,g,b,a)end;
	--[=[In percentage: 0.0 - 100.0]=]
	SetBinkMovieTime=function(binkMovie--[[@param binkMovie integer]],progress--[[@param progress number]])return InvokeVoid(0x0CB6B3446855B57A,binkMovie,progress+.0)end;
	--[=[In percentage: 0.0 - 100.0]=]
	GetBinkMovieTime=function(binkMovie--[[@param binkMovie integer]])return InvokeFloat(0x8E17DDD6B9D5BF29,binkMovie)end;---@return number
	--[=[binkMovie: Is return value from _SET_BINK_MOVIE. Has something to do with bink volume? (audRequestedSettings::SetVolumeCurveScale)]=]
	SetBinkMovieVolume=function(binkMovie--[[@param binkMovie integer]],value--[[@param value number]])return InvokeVoid(0xAFF33B1178172223,binkMovie,value+.0)end;
	--[=[Might be more appropriate in AUDIO?]=]
	AttachTvAudioToEntity=function(entity--[[@param entity integer]])return InvokeVoid(0x845BAD77CC770633,entity)end;
	SetBinkMovieAudioFrontend=function(binkMovie--[[@param binkMovie integer]],p1--[[@param p1 boolean]])return InvokeVoid(0xF816F2933752322D,binkMovie,p1)end;
	--[=[Probably changes tvs from being a 3d audio to being "global" audio]=]
	SetTvAudioFrontend=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x113D2C5DC57E1774,toggle)end;
	SetBinkShouldSkip=function(binkMovie--[[@param binkMovie integer]],bShouldSkip--[[@param bShouldSkip boolean]])return InvokeVoid(0x6805D58CAA427B72,binkMovie,bShouldSkip)end;
	LoadMovieMeshSet=function(movieMeshSetName--[[@param movieMeshSetName string]])return InvokeInt(0xB66064452270E8F1,movieMeshSetName)end;---@return integer
	ReleaseMovieMeshSet=function(movieMeshSet--[[@param movieMeshSet integer]])return InvokeVoid(0xEB119AA014E89183,movieMeshSet)end;
	QueryMovieMeshSetState=function(p0--[[@param p0 any]])return InvokeInt(0x9B6E70C5CEEF4EEB,p0)end;---@return integer
	--[=[int screenresx,screenresy;
GET_SCREEN_RESOLUTION(&screenresx,&screenresy);]=]
	GetScreenResolution=function(x--[[@param x integer*]],y--[[@param y integer*]])return InvokeVoid(0x888D57E407E63624,x,y)end;
	--[=[Returns current screen resolution.]=]
	GetActualScreenResolution=function(x--[[@param x integer*]],y--[[@param y integer*]])return InvokeVoid(0x873C9F3104101DD3,x,y)end;
	GetAspectRatio=function(b--[[@param b boolean]])return InvokeFloat(0xF1307EF624A80D87,b)end;---@return number
	GetScreenAspectRatio=function()return InvokeFloat(0xB2EBE8CBC58B90E9)end;---@return number
	--[=[Setting Aspect Ratio Manually in game will return:

false - for Narrow format Aspect Ratios (3:2, 4:3, 5:4, etc. )
true - for Wide format Aspect Ratios (5:3, 16:9, 16:10, etc. )

Setting Aspect Ratio to "Auto" in game will return "false" or "true" based on the actual set Resolution Ratio.]=]
	GetIsWidescreen=function()return InvokeBool(0x30CF4BDA4FCB1905)end;---@return boolean
	--[=[false = Any resolution < 1280x720
true = Any resolution >= 1280x720]=]
	GetIsHidef=function()return InvokeBool(0x84ED31191CC5D2C9)end;---@return boolean
	AdjustNextPosSizeAsNormalized169=function()return InvokeVoid(0xEFABC7722293DA7C)end;
	--[=[Enables Night Vision.

Example:
C#: Function.Call(Hash.SET_NIGHTVISION, true);
C++: GRAPHICS::SET_NIGHTVISION(true);

BOOL toggle:
true = turns night vision on for your player.
false = turns night vision off for your player.]=]
	SetNightvision=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x18F621F7A5B1F85D,toggle)end;
	GetRequestingnightvision=function()return InvokeBool(0x35FB78DC42B7BD21)end;---@return boolean
	GetUsingnightvision=function()return InvokeBool(0x2202A3F42C8E5F79)end;---@return boolean
	SetExposuretweak=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xEF398BEEE4EF45F9,toggle)end;
	ForceExposureReadback=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x814AF7DCAACC597B,toggle)end;
	OverrideNightvisionLightRange=function(p0--[[@param p0 number]])return InvokeVoid(0x43FA7CBE20DAB219,p0+.0)end;
	SetNoiseoveride=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xE787BF1C5CF823C9,toggle)end;
	SetNoisinessoveride=function(value--[[@param value number]])return InvokeVoid(0xCB6A7C3BB17A0C67,value+.0)end;
	--[=[Convert a world coordinate into its relative screen coordinate.  (WorldToScreen)

Returns a boolean; whether or not the operation was successful. It will return false if the coordinates given are not visible to the rendering camera.


For .NET users...

VB:
Public Shared Function World3DToScreen2d(pos as vector3) As Vector2

        Dim x2dp, y2dp As New Native.OutputArgument

        Native.Function.Call(Of Boolean)(Native.Hash.GET_SCREEN_COORD_FROM_WORLD_COORD , pos.x, pos.y, pos.z, x2dp, y2dp)
        Return New Vector2(x2dp.GetResult(Of Single), y2dp.GetResult(Of Single))
      
    End Function

C#:
Vector2 World3DToScreen2d(Vector3 pos)
    {
        var x2dp = new OutputArgument();
        var y2dp = new OutputArgument();

        Function.Call<bool>(Hash.GET_SCREEN_COORD_FROM_WORLD_COORD , pos.X, pos.Y, pos.Z, x2dp, y2dp);
        return new Vector2(x2dp.GetResult<float>(), y2dp.GetResult<float>());
    }
//USE VERY SMALL VALUES FOR THE SCALE OF RECTS/TEXT because it is dramatically larger on screen than in 3D, e.g '0.05' small.

Used to be called _WORLD3D_TO_SCREEN2D

I thought we lost you from the scene forever. It does seem however that calling SET_DRAW_ORIGIN then your natives, then ending it. Seems to work better for certain things such as keeping boxes around people for a predator missile e.g.]=]
	GetScreenCoordFromWorldCoord=function(worldX--[[@param worldX number]],worldY--[[@param worldY number]],worldZ--[[@param worldZ number]],screenX--[[@param screenX number*]],screenY--[[@param screenY number*]])return InvokeBool(0x34E82F05DF2974F5,worldX+.0,worldY+.0,worldZ+.0,screenX,screenY)end;---@return boolean
	--[=[Returns the texture resolution of the passed texture dict+name.

Note: Most texture resolutions are doubled compared to the console version of the game.]=]
	GetTextureResolution=function(textureDict--[[@param textureDict string]],textureName--[[@param textureName string]])return InvokeV3(0x35736EE65BD00C11,textureDict,textureName)end;---@return V3
	--[=[Overriding ped badge texture to a passed texture. It's synced between players (even custom textures!), don't forget to request used dict on *all* clients to make it sync properly. Can be removed by passing empty strings.]=]
	OverridePedCrewLogoTexture=function(ped--[[@param ped integer]],txd--[[@param txd string]],txn--[[@param txn string]])return InvokeBool(0x95EB5E34F821BABE,ped,txd,txn)end;---@return boolean
	SetDistanceBlurStrengthOverride=function(p0--[[@param p0 number]])return InvokeVoid(0xE2892E7E55D7073A,p0+.0)end;
	--[=[Purpose of p0 and p1 unknown.]=]
	SetFlash=function(p0--[[@param p0 number]],p1--[[@param p1 number]],fadeIn--[[@param fadeIn number]],duration--[[@param duration number]],fadeOut--[[@param fadeOut number]])return InvokeVoid(0x0AB84296FED9CFC6,p0+.0,p1+.0,fadeIn+.0,duration+.0,fadeOut+.0)end;
	DisableOcclusionThisFrame=function()return InvokeVoid(0x3669F1B198DCAA4F)end;
	--[=[Does not affect weapons, particles, fire/explosions, flashlights or the sun.
When set to true, all emissive textures (including ped components that have light effects), street lights, building lights, vehicle lights, etc will all be turned off.

Used in Humane Labs Heist for EMP.

state: True turns off all artificial light sources in the map: buildings, street lights, car lights, etc. False turns them back on.]=]
	SetArtificialLightsState=function(state--[[@param state boolean]])return InvokeVoid(0x1268615ACE24D504,state)end;
	--[=[If "blackout" is enabled, this native allows you to ignore "blackout" for vehicles.]=]
	SetArtificialVehicleLightsState=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xE2B187C0939B3D32,toggle)end;
	DisableHdtexThisFrame=function()return InvokeVoid(0xC35A6D07C93802B2)end;
	--[=[Creates a tracked point, useful for checking the visibility of a 3D point on screen.]=]
	CreateTrackedPoint=function()return InvokeInt(0xE2C9439ED45DEA60)end;---@return integer
	SetTrackedPointInfo=function(point--[[@param point integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]])return InvokeVoid(0x164ECBB3CF750CB0,point,x+.0,y+.0,z+.0,radius+.0)end;
	IsTrackedPointVisible=function(point--[[@param point integer]])return InvokeBool(0xC45CCDAAC9221CA8,point)end;---@return boolean
	DestroyTrackedPoint=function(point--[[@param point integer]])return InvokeVoid(0xB25DC90BAD56CA42,point)end;
	--[=[This function is hard-coded to always return 0.]=]
	SetGrassCullSphere=function(p0--[[@param p0 number]],p1--[[@param p1 number]],p2--[[@param p2 number]],p3--[[@param p3 number]])return InvokeInt(0xBE197EAA669238F4,p0+.0,p1+.0,p2+.0,p3+.0)end;---@return integer
	--[=[This native does absolutely nothing, just a nullsub]=]
	RemoveGrassCullSphere=function(handle--[[@param handle integer]])return InvokeVoid(0x61F95E5BB3E0A8C6,handle)end;
	ProcgrassEnableCullsphere=function(handle--[[@param handle integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],scale--[[@param scale number]])return InvokeVoid(0xAE51BC858F32BA66,handle,x+.0,y+.0,z+.0,scale+.0)end;
	ProcgrassDisableCullsphere=function(handle--[[@param handle integer]])return InvokeVoid(0x649C97D52332341A,handle)end;
	ProcgrassIsCullsphereEnabled=function(handle--[[@param handle integer]])return InvokeBool(0x2C42340F916C5930,handle)end;---@return boolean
	ProcgrassEnableAmbscalescan=function()return InvokeVoid(0x14FC5833464340A8)end;
	ProcgrassDisableAmbscalescan=function()return InvokeVoid(0x0218BA067D249DEA)end;
	DisableProcobjCreation=function()return InvokeVoid(0x1612C45F9E3E0D44)end;
	EnableProcobjCreation=function()return InvokeVoid(0x5DEBD9C4DC995692)end;
	GrassbatchEnableFlatteningExtInSphere=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],p3--[[@param p3 any]],p4--[[@param p4 number]],p5--[[@param p5 number]],p6--[[@param p6 number]],scale--[[@param scale number]])return InvokeVoid(0xAAE9BE70EC7C69AB,x+.0,y+.0,z+.0,p3,p4+.0,p5+.0,p6+.0,scale+.0)end;
	--[=[Wraps 0xAAE9BE70EC7C69AB with FLT_MAX as p7, Jenkins: 0x73E96210?]=]
	GrassbatchEnableFlatteningInSphere=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]],p4--[[@param p4 number]],p5--[[@param p5 number]],p6--[[@param p6 number]])return InvokeVoid(0x6D955F6A9E0295B1,x+.0,y+.0,z+.0,radius+.0,p4+.0,p5+.0,p6+.0)end;
	GrassbatchDisableFlattening=function()return InvokeVoid(0x302C91AB2D477F7E)end;
	CascadeShadowsInitSession=function()return InvokeVoid(0x03FC694AE06C5A20)end;
	CascadeShadowsSetCascadeBounds=function(p0--[[@param p0 any]],p1--[[@param p1 boolean]],p2--[[@param p2 number]],p3--[[@param p3 number]],p4--[[@param p4 number]],p5--[[@param p5 number]],p6--[[@param p6 boolean]],p7--[[@param p7 number]])return InvokeVoid(0xD2936CAB8B58FCBD,p0,p1,p2+.0,p3+.0,p4+.0,p5+.0,p6,p7+.0)end;
	CascadeShadowsSetCascadeBoundsScale=function(p0--[[@param p0 number]])return InvokeVoid(0x5F0F3F56635809EF,p0+.0)end;
	CascadeShadowsSetEntityTrackerScale=function(p0--[[@param p0 number]])return InvokeVoid(0x5E9DAF5A20F15908,p0+.0)end;
	CascadeShadowsSetSplitZExpWeight=function(p0--[[@param p0 number]])return InvokeVoid(0x36F6626459D91457,p0+.0)end;
	CascadeShadowsSetBoundPosition=function(p0--[[@param p0 any]])return InvokeVoid(0x259BA6D4E6F808F1,p0)end;
	--[=[When this is set to ON, shadows only draw as you get nearer.

When OFF, they draw from a further distance.]=]
	CascadeShadowsEnableEntityTracker=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x80ECBC0C856D3B0B,toggle)end;
	CascadeShadowsSetScreenSizeCheckEnabled=function(p0--[[@param p0 boolean]])return InvokeVoid(0x25FC3E33A31AD0C9,p0)end;
	--[=[Possible values:
"CSM_ST_POINT"
"CSM_ST_LINEAR"
"CSM_ST_TWOTAP"
"CSM_ST_BOX3x3"
"CSM_ST_BOX4x4"
"CSM_ST_DITHER2_LINEAR"
"CSM_ST_CUBIC"
"CSM_ST_DITHER4"
"CSM_ST_DITHER16"
"CSM_ST_SOFT16"
"CSM_ST_DITHER16_RPDB"
"CSM_ST_POISSON16_RPDB_GNORM"
"CSM_ST_HIGHRES_BOX4x4"
"CSM_ST_CLOUDS_SIMPLE"
"CSM_ST_CLOUDS_LINEAR"
"CSM_ST_CLOUDS_TWOTAP"
"CSM_ST_CLOUDS_BOX3x3"
"CSM_ST_CLOUDS_BOX4x4"
"CSM_ST_CLOUDS_DITHER2_LINEAR"
"CSM_ST_CLOUDS_SOFT16"
"CSM_ST_CLOUDS_DITHER16_RPDB"
"CSM_ST_CLOUDS_POISSON16_RPDB_GNORM"]=]
	CascadeShadowsSetShadowSampleType=function(type--[[@param type string]])return InvokeVoid(0xB11D94BC55F41932,type)end;
	CascadeShadowsClearShadowSampleType=function()return InvokeVoid(0x27CB772218215325)end;
	CascadeShadowsSetAircraftMode=function(p0--[[@param p0 boolean]])return InvokeVoid(0x6DDBF9DFFC4AC080,p0)end;
	CascadeShadowsSetDynamicDepthMode=function(p0--[[@param p0 boolean]])return InvokeVoid(0xD39D13C9FEBF0511,p0)end;
	CascadeShadowsSetDynamicDepthValue=function(p0--[[@param p0 number]])return InvokeVoid(0x02AC28F3A01FA04A,p0+.0)end;
	CascadeShadowsEnableFreezer=function(p0--[[@param p0 boolean]])return InvokeVoid(0x0AE73D8DF3A762B2,p0)end;
	WaterReflectionSetScriptObjectVisibility=function(p0--[[@param p0 any]])return InvokeVoid(0xCA465D9CC0D231BA,p0)end;
	GolfTrailSetEnabled=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xA51C4B86B71652AE,toggle)end;
	--[=[p8 seems to always be false.]=]
	GolfTrailSetPath=function(p0--[[@param p0 number]],p1--[[@param p1 number]],p2--[[@param p2 number]],p3--[[@param p3 number]],p4--[[@param p4 number]],p5--[[@param p5 number]],p6--[[@param p6 number]],p7--[[@param p7 number]],p8--[[@param p8 boolean]])return InvokeVoid(0x312342E1A4874F3F,p0+.0,p1+.0,p2+.0,p3+.0,p4+.0,p5+.0,p6+.0,p7+.0,p8)end;
	GolfTrailSetRadius=function(p0--[[@param p0 number]],p1--[[@param p1 number]],p2--[[@param p2 number]])return InvokeVoid(0x2485D34E50A22E84,p0+.0,p1+.0,p2+.0)end;
	GolfTrailSetColour=function(p0--[[@param p0 integer]],p1--[[@param p1 integer]],p2--[[@param p2 integer]],p3--[[@param p3 integer]],p4--[[@param p4 integer]],p5--[[@param p5 integer]],p6--[[@param p6 integer]],p7--[[@param p7 integer]],p8--[[@param p8 integer]],p9--[[@param p9 integer]],p10--[[@param p10 integer]],p11--[[@param p11 integer]])return InvokeVoid(0x12995F2E53FFA601,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11)end;
	GolfTrailSetTessellation=function(p0--[[@param p0 integer]],p1--[[@param p1 integer]])return InvokeVoid(0xDBAA5EC848BA2D46,p0,p1)end;
	GolfTrailSetFixedControlPointEnable=function(p0--[[@param p0 boolean]])return InvokeVoid(0xC0416B061F2B7E5E,p0)end;
	--[=[12 matches across 4 scripts. All 4 scripts were job creators.

type ranged from 0 - 2.
p4 was always 0.2f. Likely scale.
assuming p5 - p8 is RGBA, the graphic is always yellow (255, 255, 0, 255).

Tested but noticed nothing.]=]
	GolfTrailSetFixedControlPoint=function(type--[[@param type integer]],xPos--[[@param xPos number]],yPos--[[@param yPos number]],zPos--[[@param zPos number]],p4--[[@param p4 number]],red--[[@param red integer]],green--[[@param green integer]],blue--[[@param blue integer]],alpha--[[@param alpha integer]])return InvokeVoid(0xB1BB03742917A5D6,type,xPos+.0,yPos+.0,zPos+.0,p4+.0,red,green,blue,alpha)end;
	--[=[Only appeared in Golf & Golf_mp. Parameters were all ptrs]=]
	GolfTrailSetShaderParams=function(p0--[[@param p0 number]],p1--[[@param p1 number]],p2--[[@param p2 number]],p3--[[@param p3 number]],p4--[[@param p4 number]])return InvokeVoid(0x9CFDD90B2B844BF7,p0+.0,p1+.0,p2+.0,p3+.0,p4+.0)end;
	GolfTrailSetFacing=function(p0--[[@param p0 boolean]])return InvokeVoid(0x06F761EA47C1D3ED,p0)end;
	GolfTrailGetMaxHeight=function()return InvokeFloat(0xA4819F5E23E2FFAD)end;---@return number
	GolfTrailGetVisualControlPoint=function(p0--[[@param p0 integer]])return InvokeV3(0xA4664972A9B8F8BA,p0)end;---@return V3
	--[=[Toggles Heatvision on/off.]=]
	SetSeethrough=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x7E08924259E08CE0,toggle)end;
	GetUsingseethrough=function()return InvokeBool(0x44B80ABAB9D80BD3)end;---@return boolean
	SeethroughReset=function()return InvokeVoid(0x70A64C0234EF522C)end;
	SeethroughSetFadeStartdistance=function(distance--[[@param distance number]])return InvokeVoid(0xA78DE25577300BA1,distance+.0)end;
	SeethroughSetFadeEnddistance=function(distance--[[@param distance number]])return InvokeVoid(0x9D75795B9DC6EBBF,distance+.0)end;
	SeethroughGetMaxThickness=function()return InvokeFloat(0x43DBAE39626CE83F)end;---@return number
	--[=[0.0 = you will not be able to see people behind the walls. 50.0 and more = you will see everyone through the walls. More value is "better" view. See https://gfycat.com/FirmFlippantGourami
min: 1.0
max: 10000.0]=]
	SeethroughSetMaxThickness=function(thickness--[[@param thickness number]])return InvokeVoid(0x0C8FAC83902A62DF,thickness+.0)end;
	SeethroughSetNoiseMin=function(amount--[[@param amount number]])return InvokeVoid(0xFF5992E1C9E65D05,amount+.0)end;
	SeethroughSetNoiseMax=function(amount--[[@param amount number]])return InvokeVoid(0xFEBFBFDFB66039DE,amount+.0)end;
	SeethroughSetHilightIntensity=function(intensity--[[@param intensity number]])return InvokeVoid(0x19E50EB6E33E1D28,intensity+.0)end;
	SeethroughSetHighlightNoise=function(noise--[[@param noise number]])return InvokeVoid(0x1636D7FC127B10D2,noise+.0)end;
	--[=[min: 0.0
max: 0.75]=]
	SeethroughSetHeatscale=function(index--[[@param index integer]],heatScale--[[@param heatScale number]])return InvokeVoid(0xD7D0B00177485411,index,heatScale+.0)end;
	SeethroughSetColorNear=function(red--[[@param red integer]],green--[[@param green integer]],blue--[[@param blue integer]])return InvokeVoid(0x1086127B3A63505E,red,green,blue)end;
	--[=[Setter for GET_MOTIONBLUR_MAX_VEL_SCALER]=]
	SetMotionblurMaxVelScaler=function(p0--[[@param p0 number]])return InvokeVoid(0xB3C641F3630BF6DA,p0+.0)end;
	--[=[Getter for SET_MOTIONBLUR_MAX_VEL_SCALER]=]
	GetMotionblurMaxVelScaler=function()return InvokeFloat(0xE59343E9E96529E7)end;---@return number
	SetForceMotionblur=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x6A51F78772175A51,toggle)end;
	TogglePlayerDamageOverlay=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xE63D7C6EECECB66B,toggle)end;
	--[=[Sets an value related to timecycles.]=]
	ResetAdaptation=function(p0--[[@param p0 integer]])return InvokeVoid(0xE3E2C1B4C59DBC77,p0)end;
	--[=[time in ms to transition to fully blurred screen]=]
	TriggerScreenblurFadeIn=function(transitionTime--[[@param transitionTime number]])return InvokeBool(0xA328A24AAA6B7FDC,transitionTime+.0)end;---@return boolean
	--[=[time in ms to transition from fully blurred to normal]=]
	TriggerScreenblurFadeOut=function(transitionTime--[[@param transitionTime number]])return InvokeBool(0xEFACC8AEF94430D5,transitionTime+.0)end;---@return boolean
	DisableScreenblurFade=function()return InvokeVoid(0xDE81239437E8C5A8)end;
	GetScreenblurFadeCurrentTime=function()return InvokeFloat(0x5CCABFFCA31DDE33)end;---@return number
	--[=[Returns whether screen transition to blur/from blur is running.]=]
	IsScreenblurFadeRunning=function()return InvokeBool(0x7B226C785A52A0A9)end;---@return boolean
	TogglePausedRenderphases=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xDFC252D8A3E15AB7,toggle)end;
	GetTogglePausedRenderphasesStatus=function()return InvokeBool(0xEB3DAC2C86001E5E)end;---@return boolean
	ResetPausedRenderphases=function()return InvokeVoid(0xE1C8709406F2C41C)end;
	GrabPausemenuOwnership=function()return InvokeVoid(0x851CD923176EBA7C)end;
	SetHidofOverride=function(p0--[[@param p0 boolean]],p1--[[@param p1 boolean]],nearplaneOut--[[@param nearplaneOut number]],nearplaneIn--[[@param nearplaneIn number]],farplaneOut--[[@param farplaneOut number]],farplaneIn--[[@param farplaneIn number]])return InvokeVoid(0xBA3D65906822BED5,p0,p1,nearplaneOut+.0,nearplaneIn+.0,farplaneOut+.0,farplaneIn+.0)end;
	SetLockAdaptiveDofDistance=function(p0--[[@param p0 boolean]])return InvokeVoid(0xB569F41F3E7E83A4,p0)end;
	PhonephotoeditorToggle=function(p0--[[@param p0 boolean]])return InvokeBool(0x7AC24EAB6D74118D,p0)end;---@return boolean
	PhonephotoeditorIsActive=function()return InvokeBool(0xBCEDB009461DA156)end;---@return boolean
	PhonephotoeditorSetFrameTxd=function(textureDict--[[@param textureDict string]],p1--[[@param p1 boolean]])return InvokeBool(0x27FEB5254759CDE3,textureDict,p1)end;---@return boolean
	--[=[GRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD("scr_paleto_roof_impact", -140.8576f, 6420.789f, 41.1391f, 0f, 0f, 267.3957f, 0x3F800000, 0, 0, 0);

Axis - Invert Axis Flags

Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json


-------------------------------------------------------------------
C#

Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_AT_COORD, = you are calling this function.

char *effectname = This is an in-game effect name, for e.g. "scr_fbi4_trucks_crash" is used to give the effects when truck crashes etc

float x, y, z pos = this one is Simple, you just have to declare, where do you want this effect to take place at, so declare the ordinates

float xrot, yrot, zrot = Again simple? just mention the value in case if you want the effect to rotate.

float scale = is declare the scale of the effect, this may vary as per the effects for e.g 1.0f

bool xaxis, yaxis, zaxis = To bool the axis values.

example:
Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_AT_COORD, "scr_fbi4_trucks_crash", GTA.Game.Player.Character.Position.X, GTA.Game.Player.Character.Position.Y, GTA.Game.Player.Character.Position.Z + 4f, 0, 0, 0, 5.5f, 0, 0, 0);]=]
	StartParticleFxNonLoopedAtCoord=function(effectName--[[@param effectName string]],xPos--[[@param xPos number]],yPos--[[@param yPos number]],zPos--[[@param zPos number]],xRot--[[@param xRot number]],yRot--[[@param yRot number]],zRot--[[@param zRot number]],scale--[[@param scale number]],xAxis--[[@param xAxis boolean]],yAxis--[[@param yAxis boolean]],zAxis--[[@param zAxis boolean]])return InvokeBool(0x25129531F77B9ED3,effectName,xPos+.0,yPos+.0,zPos+.0,xRot+.0,yRot+.0,zRot+.0,scale+.0,xAxis,yAxis,zAxis)end;---@return boolean
	--[=[Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json]=]
	StartNetworkedParticleFxNonLoopedAtCoord=function(effectName--[[@param effectName string]],xPos--[[@param xPos number]],yPos--[[@param yPos number]],zPos--[[@param zPos number]],xRot--[[@param xRot number]],yRot--[[@param yRot number]],zRot--[[@param zRot number]],scale--[[@param scale number]],xAxis--[[@param xAxis boolean]],yAxis--[[@param yAxis boolean]],zAxis--[[@param zAxis boolean]],p11--[[@param p11 boolean]])return InvokeBool(0xF56B8137DF10135D,effectName,xPos+.0,yPos+.0,zPos+.0,xRot+.0,yRot+.0,zRot+.0,scale+.0,xAxis,yAxis,zAxis,p11)end;---@return boolean
	--[=[GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE("scr_sh_bong_smoke", PLAYER::PLAYER_PED_ID(), -0.025f, 0.13f, 0f, 0f, 0f, 0f, 31086, 0x3F800000, 0, 0, 0);

Axis - Invert Axis Flags

Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json]=]
	StartParticleFxNonLoopedOnPedBone=function(effectName--[[@param effectName string]],ped--[[@param ped integer]],offsetX--[[@param offsetX number]],offsetY--[[@param offsetY number]],offsetZ--[[@param offsetZ number]],rotX--[[@param rotX number]],rotY--[[@param rotY number]],rotZ--[[@param rotZ number]],boneIndex--[[@param boneIndex integer]],scale--[[@param scale number]],axisX--[[@param axisX boolean]],axisY--[[@param axisY boolean]],axisZ--[[@param axisZ boolean]])return InvokeBool(0x0E7E72961BA18619,effectName,ped,offsetX+.0,offsetY+.0,offsetZ+.0,rotX+.0,rotY+.0,rotZ+.0,boneIndex,scale+.0,axisX,axisY,axisZ)end;---@return boolean
	--[=[Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json]=]
	StartNetworkedParticleFxNonLoopedOnPedBone=function(effectName--[[@param effectName string]],ped--[[@param ped integer]],offsetX--[[@param offsetX number]],offsetY--[[@param offsetY number]],offsetZ--[[@param offsetZ number]],rotX--[[@param rotX number]],rotY--[[@param rotY number]],rotZ--[[@param rotZ number]],boneIndex--[[@param boneIndex integer]],scale--[[@param scale number]],axisX--[[@param axisX boolean]],axisY--[[@param axisY boolean]],axisZ--[[@param axisZ boolean]])return InvokeBool(0xA41B6A43642AC2CF,effectName,ped,offsetX+.0,offsetY+.0,offsetZ+.0,rotX+.0,rotY+.0,rotZ+.0,boneIndex,scale+.0,axisX,axisY,axisZ)end;---@return boolean
	--[=[Starts a particle effect on an entity for example your player.

Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json

Example:
C#:
Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_rcbarry2");                     Function.Call(Hash.USE_PARTICLE_FX_ASSET, "scr_rcbarry2");                             Function.Call(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_clown_appears", Game.Player.Character, 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);

Internally this calls the same function as GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE
however it uses -1 for the specified bone index, so it should be possible to start a non looped fx on an entity bone using that native

-can confirm START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE does NOT work on vehicle bones.]=]
	StartParticleFxNonLoopedOnEntity=function(effectName--[[@param effectName string]],entity--[[@param entity integer]],offsetX--[[@param offsetX number]],offsetY--[[@param offsetY number]],offsetZ--[[@param offsetZ number]],rotX--[[@param rotX number]],rotY--[[@param rotY number]],rotZ--[[@param rotZ number]],scale--[[@param scale number]],axisX--[[@param axisX boolean]],axisY--[[@param axisY boolean]],axisZ--[[@param axisZ boolean]])return InvokeBool(0x0D53A3B8DA0809D2,effectName,entity,offsetX+.0,offsetY+.0,offsetZ+.0,rotX+.0,rotY+.0,rotZ+.0,scale+.0,axisX,axisY,axisZ)end;---@return boolean
	--[=[Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json]=]
	StartNetworkedParticleFxNonLoopedOnEntity=function(effectName--[[@param effectName string]],entity--[[@param entity integer]],offsetX--[[@param offsetX number]],offsetY--[[@param offsetY number]],offsetZ--[[@param offsetZ number]],rotX--[[@param rotX number]],rotY--[[@param rotY number]],rotZ--[[@param rotZ number]],scale--[[@param scale number]],axisX--[[@param axisX boolean]],axisY--[[@param axisY boolean]],axisZ--[[@param axisZ boolean]])return InvokeBool(0xC95EB1DB6E92113D,effectName,entity,offsetX+.0,offsetY+.0,offsetZ+.0,rotX+.0,rotY+.0,rotZ+.0,scale+.0,axisX,axisY,axisZ)end;---@return boolean
	--[=[Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json]=]
	StartParticleFxNonLoopedOnEntityBone=function(effectName--[[@param effectName string]],entity--[[@param entity integer]],offsetX--[[@param offsetX number]],offsetY--[[@param offsetY number]],offsetZ--[[@param offsetZ number]],rotX--[[@param rotX number]],rotY--[[@param rotY number]],rotZ--[[@param rotZ number]],boneIndex--[[@param boneIndex integer]],scale--[[@param scale number]],axisX--[[@param axisX boolean]],axisY--[[@param axisY boolean]],axisZ--[[@param axisZ boolean]])return InvokeBool(0x02B1F2A72E0F5325,effectName,entity,offsetX+.0,offsetY+.0,offsetZ+.0,rotX+.0,rotY+.0,rotZ+.0,boneIndex,scale+.0,axisX,axisY,axisZ)end;---@return boolean
	--[=[only works on some fx's, not networked]=]
	SetParticleFxNonLoopedColour=function(r--[[@param r number]],g--[[@param g number]],b--[[@param b number]])return InvokeVoid(0x26143A59EF48B262,r+.0,g+.0,b+.0)end;
	--[=[Usage example for C#:

Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_ALPHA, new InputArgument[] { 0.1f });

Note: the argument alpha ranges from 0.0f-1.0f !]=]
	SetParticleFxNonLoopedAlpha=function(alpha--[[@param alpha number]])return InvokeVoid(0x77168D722C58B2FC,alpha+.0)end;
	SetParticleFxNonLoopedScale=function(scale--[[@param scale number]])return InvokeVoid(0xB7EF5850C39FABCA,scale+.0)end;
	SetParticleFxNonLoopedEmitterSize=function(p0--[[@param p0 number]],p1--[[@param p1 number]],scale--[[@param scale number]])return InvokeVoid(0x1E2E01C00837D26E,p0+.0,p1+.0,scale+.0)end;
	--[=[Used only once in the scripts (taxi_clowncar)]=]
	SetParticleFxForceVehicleInterior=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x8CDE909A0370BB3A,toggle)end;
	--[=[GRAPHICS::START_PARTICLE_FX_LOOPED_AT_COORD("scr_fbi_falling_debris", 93.7743f, -749.4572f, 70.86904f, 0f, 0f, 0f, 0x3F800000, 0, 0, 0, 0)


p11 seems to be always 0

Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json]=]
	StartParticleFxLoopedAtCoord=function(effectName--[[@param effectName string]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],xRot--[[@param xRot number]],yRot--[[@param yRot number]],zRot--[[@param zRot number]],scale--[[@param scale number]],xAxis--[[@param xAxis boolean]],yAxis--[[@param yAxis boolean]],zAxis--[[@param zAxis boolean]],p11--[[@param p11 boolean]])return InvokeInt(0xE184F4F0DC5910E7,effectName,x+.0,y+.0,z+.0,xRot+.0,yRot+.0,zRot+.0,scale+.0,xAxis,yAxis,zAxis,p11)end;---@return integer
	--[=[Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json]=]
	StartParticleFxLoopedOnPedBone=function(effectName--[[@param effectName string]],ped--[[@param ped integer]],xOffset--[[@param xOffset number]],yOffset--[[@param yOffset number]],zOffset--[[@param zOffset number]],xRot--[[@param xRot number]],yRot--[[@param yRot number]],zRot--[[@param zRot number]],boneIndex--[[@param boneIndex integer]],scale--[[@param scale number]],xAxis--[[@param xAxis boolean]],yAxis--[[@param yAxis boolean]],zAxis--[[@param zAxis boolean]])return InvokeInt(0xF28DA9F38CD1787C,effectName,ped,xOffset+.0,yOffset+.0,zOffset+.0,xRot+.0,yRot+.0,zRot+.0,boneIndex,scale+.0,xAxis,yAxis,zAxis)end;---@return integer
	--[=[Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json]=]
	StartParticleFxLoopedOnEntity=function(effectName--[[@param effectName string]],entity--[[@param entity integer]],xOffset--[[@param xOffset number]],yOffset--[[@param yOffset number]],zOffset--[[@param zOffset number]],xRot--[[@param xRot number]],yRot--[[@param yRot number]],zRot--[[@param zRot number]],scale--[[@param scale number]],xAxis--[[@param xAxis boolean]],yAxis--[[@param yAxis boolean]],zAxis--[[@param zAxis boolean]])return InvokeInt(0x1AE42C1660FD6517,effectName,entity,xOffset+.0,yOffset+.0,zOffset+.0,xRot+.0,yRot+.0,zRot+.0,scale+.0,xAxis,yAxis,zAxis)end;---@return integer
	--[=[Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json]=]
	StartParticleFxLoopedOnEntityBone=function(effectName--[[@param effectName string]],entity--[[@param entity integer]],xOffset--[[@param xOffset number]],yOffset--[[@param yOffset number]],zOffset--[[@param zOffset number]],xRot--[[@param xRot number]],yRot--[[@param yRot number]],zRot--[[@param zRot number]],boneIndex--[[@param boneIndex integer]],scale--[[@param scale number]],xAxis--[[@param xAxis boolean]],yAxis--[[@param yAxis boolean]],zAxis--[[@param zAxis boolean]])return InvokeInt(0xC6EB449E33977F0B,effectName,entity,xOffset+.0,yOffset+.0,zOffset+.0,xRot+.0,yRot+.0,zRot+.0,boneIndex,scale+.0,xAxis,yAxis,zAxis)end;---@return integer
	--[=[Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json]=]
	StartNetworkedParticleFxLoopedOnEntity=function(effectName--[[@param effectName string]],entity--[[@param entity integer]],xOffset--[[@param xOffset number]],yOffset--[[@param yOffset number]],zOffset--[[@param zOffset number]],xRot--[[@param xRot number]],yRot--[[@param yRot number]],zRot--[[@param zRot number]],scale--[[@param scale number]],xAxis--[[@param xAxis boolean]],yAxis--[[@param yAxis boolean]],zAxis--[[@param zAxis boolean]],r--[[@param r number]],g--[[@param g number]],b--[[@param b number]],a--[[@param a number]])return InvokeInt(0x6F60E89A7B64EE1D,effectName,entity,xOffset+.0,yOffset+.0,zOffset+.0,xRot+.0,yRot+.0,zRot+.0,scale+.0,xAxis,yAxis,zAxis,r+.0,g+.0,b+.0,a+.0)end;---@return integer
	--[=[Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json]=]
	StartNetworkedParticleFxLoopedOnEntityBone=function(effectName--[[@param effectName string]],entity--[[@param entity integer]],xOffset--[[@param xOffset number]],yOffset--[[@param yOffset number]],zOffset--[[@param zOffset number]],xRot--[[@param xRot number]],yRot--[[@param yRot number]],zRot--[[@param zRot number]],boneIndex--[[@param boneIndex integer]],scale--[[@param scale number]],xAxis--[[@param xAxis boolean]],yAxis--[[@param yAxis boolean]],zAxis--[[@param zAxis boolean]],r--[[@param r number]],g--[[@param g number]],b--[[@param b number]],a--[[@param a number]])return InvokeInt(0xDDE23F30CC5A0F03,effectName,entity,xOffset+.0,yOffset+.0,zOffset+.0,xRot+.0,yRot+.0,zRot+.0,boneIndex,scale+.0,xAxis,yAxis,zAxis,r+.0,g+.0,b+.0,a+.0)end;---@return integer
	--[=[p1 is always 0 in the native scripts]=]
	StopParticleFxLooped=function(ptfxHandle--[[@param ptfxHandle integer]],p1--[[@param p1 boolean]])return InvokeVoid(0x8F75998877616996,ptfxHandle,p1)end;
	RemoveParticleFx=function(ptfxHandle--[[@param ptfxHandle integer]],p1--[[@param p1 boolean]])return InvokeVoid(0xC401503DFE8D53CF,ptfxHandle,p1)end;
	RemoveParticleFxFromEntity=function(entity--[[@param entity integer]])return InvokeVoid(0xB8FEAEEBCC127425,entity)end;
	RemoveParticleFxInRange=function(X--[[@param X number]],Y--[[@param Y number]],Z--[[@param Z number]],radius--[[@param radius number]])return InvokeVoid(0xDD19FA1C6D657305,X+.0,Y+.0,Z+.0,radius+.0)end;
	ForceParticleFxInVehicleInterior=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0xBA0127DA25FD54C9,p0,p1)end;
	DoesParticleFxLoopedExist=function(ptfxHandle--[[@param ptfxHandle integer]])return InvokeBool(0x74AFEF0D2E1E409B,ptfxHandle)end;---@return boolean
	SetParticleFxLoopedOffsets=function(ptfxHandle--[[@param ptfxHandle integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],rotX--[[@param rotX number]],rotY--[[@param rotY number]],rotZ--[[@param rotZ number]])return InvokeVoid(0xF7DDEBEC43483C43,ptfxHandle,x+.0,y+.0,z+.0,rotX+.0,rotY+.0,rotZ+.0)end;
	SetParticleFxLoopedEvolution=function(ptfxHandle--[[@param ptfxHandle integer]],propertyName--[[@param propertyName string]],amount--[[@param amount number]],noNetwork--[[@param noNetwork boolean]])return InvokeVoid(0x5F0C4B5B1C393BE2,ptfxHandle,propertyName,amount+.0,noNetwork)end;
	--[=[only works on some fx's

p4 = 0]=]
	SetParticleFxLoopedColour=function(ptfxHandle--[[@param ptfxHandle integer]],r--[[@param r number]],g--[[@param g number]],b--[[@param b number]],p4--[[@param p4 boolean]])return InvokeVoid(0x7F8F65877F88783B,ptfxHandle,r+.0,g+.0,b+.0,p4)end;
	SetParticleFxLoopedAlpha=function(ptfxHandle--[[@param ptfxHandle integer]],alpha--[[@param alpha number]])return InvokeVoid(0x726845132380142E,ptfxHandle,alpha+.0)end;
	SetParticleFxLoopedScale=function(ptfxHandle--[[@param ptfxHandle integer]],scale--[[@param scale number]])return InvokeVoid(0xB44250AAA456492D,ptfxHandle,scale+.0)end;
	SetParticleFxLoopedFarClipDist=function(ptfxHandle--[[@param ptfxHandle integer]],range--[[@param range number]])return InvokeVoid(0xDCB194B85EF7B541,ptfxHandle,range+.0)end;
	SetParticleFxCamInsideVehicle=function(p0--[[@param p0 boolean]])return InvokeVoid(0xEEC4047028426510,p0)end;
	SetParticleFxCamInsideNonplayerVehicle=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 boolean]])return InvokeVoid(0xACEE6F360FC1F6B6,vehicle,p1)end;
	SetParticleFxShootoutBoat=function(p0--[[@param p0 any]])return InvokeVoid(0x96EF97DAEB89BEF5,p0)end;
	ClearParticleFxShootoutBoat=function()return InvokeVoid(0x2A251AA48B2B46DB)end;
	SetParticleFxBloodScale=function(p0--[[@param p0 any]])return InvokeVoid(0x908311265D42A820,p0)end;
	DisableInWaterPtfx=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xCFD16F0DB5A3535C,toggle)end;
	DisableDownwashPtfx=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x5F6DF3D92271E8A1,toggle)end;
	SetParticleFxSlipstreamLodrangeScale=function(scale--[[@param scale number]])return InvokeVoid(0x2B40A97646381508,scale+.0)end;
	--[=[Creates cartoon effect when Michel smokes the weed]=]
	EnableClownBloodVfx=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xD821490579791273,toggle)end;
	--[=[Creates a motion-blur sort of effect, this native does not seem to work, however by using the `START_SCREEN_EFFECT` native with `DrugsMichaelAliensFight` as the effect parameter, you should be able to get the effect.]=]
	EnableAlienBloodVfx=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x9DCE1F0F78260875,toggle)end;
	SetParticleFxBulletImpactScale=function(scale--[[@param scale number]])return InvokeVoid(0x27E32866E9A5C416,scale+.0)end;
	SetParticleFxBulletImpactLodrangeScale=function(p0--[[@param p0 number]])return InvokeVoid(0xBB90E12CAC1DAB25,p0+.0)end;
	SetParticleFxBulletTraceNoAngleReject=function(p0--[[@param p0 boolean]])return InvokeVoid(0xCA4AE345A153D573,p0)end;
	SetParticleFxBangScrapeLodrangeScale=function(p0--[[@param p0 number]])return InvokeVoid(0x54E22EA2C1956A8D,p0+.0)end;
	SetParticleFxFootLodrangeScale=function(p0--[[@param p0 number]])return InvokeVoid(0x949F397A288B28B3,p0+.0)end;
	--[=[Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json]=]
	SetParticleFxFootOverrideName=function(p0--[[@param p0 string]])return InvokeVoid(0xBA3D194057C79A7B,p0)end;
	SetSkidmarkRangeScale=function(scale--[[@param scale number]])return InvokeVoid(0x5DBF05DB5926D089,scale+.0)end;
	SetPtfxForceVehicleInteriorFlag=function(p0--[[@param p0 any]])return InvokeVoid(0xC6730E0D14E50703,p0)end;
	RegisterPostfxBulletImpact=function(weaponWorldPosX--[[@param weaponWorldPosX number]],weaponWorldPosY--[[@param weaponWorldPosY number]],weaponWorldPosZ--[[@param weaponWorldPosZ number]],intensity--[[@param intensity number]])return InvokeVoid(0x170911F37F646F29,weaponWorldPosX+.0,weaponWorldPosY+.0,weaponWorldPosZ+.0,intensity+.0)end;
	ForcePostfxBulletImpactsAfterHud=function(p0--[[@param p0 boolean]])return InvokeVoid(0x9B079E5221D984D3,p0)end;
	--[=[From the b678d decompiled scripts:

 GRAPHICS::USE_PARTICLE_FX_ASSET("FM_Mission_Controler");
 GRAPHICS::USE_PARTICLE_FX_ASSET("scr_apartment_mp");
 GRAPHICS::USE_PARTICLE_FX_ASSET("scr_indep_fireworks");
 GRAPHICS::USE_PARTICLE_FX_ASSET("scr_mp_cig_plane");
 GRAPHICS::USE_PARTICLE_FX_ASSET("scr_mp_creator");
 GRAPHICS::USE_PARTICLE_FX_ASSET("scr_ornate_heist");
 GRAPHICS::USE_PARTICLE_FX_ASSET("scr_prison_break_heist_station");

Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json]=]
	UseParticleFxAsset=function(name--[[@param name string]])return InvokeVoid(0x6C38AF3693A69A91,name)end;
	--[=[Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json]=]
	SetParticleFxOverride=function(oldAsset--[[@param oldAsset string]],newAsset--[[@param newAsset string]])return InvokeVoid(0xEA1E2D93F6F75ED9,oldAsset,newAsset)end;
	--[=[Resets the effect of SET_PARTICLE_FX_OVERRIDE

Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json]=]
	ResetParticleFxOverride=function(name--[[@param name string]])return InvokeVoid(0x89C8553DD3274AAE,name)end;
	SetWeatherPtfxUseOverrideSettings=function(p0--[[@param p0 boolean]])return InvokeVoid(0xA46B73FAA3460AE1,p0)end;
	SetWeatherPtfxOverrideCurrLevel=function(p0--[[@param p0 number]])return InvokeVoid(0xF78B803082D4386F,p0+.0)end;
	WashDecalsInRange=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],range--[[@param range number]],p4--[[@param p4 number]])return InvokeVoid(0x9C30613D50A6ADEF,x+.0,y+.0,z+.0,range+.0,p4+.0)end;
	WashDecalsFromVehicle=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 number]])return InvokeVoid(0x5B712761429DBC14,vehicle,p1+.0)end;
	--[=[Fades nearby decals within the range specified]=]
	FadeDecalsInRange=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],p3--[[@param p3 number]],p4--[[@param p4 number]])return InvokeVoid(0xD77EDADB0420E6E0,x+.0,y+.0,z+.0,p3+.0,p4+.0)end;
	--[=[Removes all decals in range from a position, it includes the bullet holes, blood pools, petrol...]=]
	RemoveDecalsInRange=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],range--[[@param range number]])return InvokeVoid(0x5D6B2D4830A67C62,x+.0,y+.0,z+.0,range+.0)end;
	RemoveDecalsFromObject=function(obj--[[@param obj integer]])return InvokeVoid(0xCCF71CBDDF5B6CB9,obj)end;
	RemoveDecalsFromObjectFacing=function(obj--[[@param obj integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0xA6F6F70FDC6D144C,obj,x+.0,y+.0,z+.0)end;
	RemoveDecalsFromVehicle=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0xE91F1B65F2B48D57,vehicle)end;
	--[=[decal types:

public enum DecalTypes
{
    splatters_blood = 1010,
    splatters_blood_dir = 1015,
    splatters_blood_mist = 1017,
    splatters_mud = 1020,
    splatters_paint = 1030,
    splatters_water = 1040,
    splatters_water_hydrant = 1050,
    splatters_blood2 = 1110,
    weapImpact_metal = 4010,
    weapImpact_concrete = 4020,
    weapImpact_mattress = 4030,
    weapImpact_mud = 4032,
    weapImpact_wood = 4050,
    weapImpact_sand = 4053,
    weapImpact_cardboard = 4040,
    weapImpact_melee_glass = 4100,
    weapImpact_glass_blood = 4102,
    weapImpact_glass_blood2 = 4104,
    weapImpact_shotgun_paper = 4200,
    weapImpact_shotgun_mattress,
    weapImpact_shotgun_metal,
    weapImpact_shotgun_wood,
    weapImpact_shotgun_dirt,
    weapImpact_shotgun_tvscreen,
    weapImpact_shotgun_tvscreen2,
    weapImpact_shotgun_tvscreen3,
    weapImpact_melee_concrete = 4310,
    weapImpact_melee_wood = 4312,
    weapImpact_melee_metal = 4314,
    burn1 = 4421,
    burn2,
    burn3,
    burn4,
    burn5,
    bang_concrete_bang = 5000,
    bang_concrete_bang2,
    bang_bullet_bang,
    bang_bullet_bang2 = 5004,
    bang_glass = 5031,
    bang_glass2,
    solidPool_water = 9000,
    solidPool_blood,
    solidPool_oil,
    solidPool_petrol,
    solidPool_mud,
    porousPool_water,
    porousPool_blood,
    porousPool_oil,
    porousPool_petrol,
    porousPool_mud,
    porousPool_water_ped_drip,
    liquidTrail_water = 9050
}]=]
	AddDecal=function(decalType--[[@param decalType integer]],posX--[[@param posX number]],posY--[[@param posY number]],posZ--[[@param posZ number]],p4--[[@param p4 number]],p5--[[@param p5 number]],p6--[[@param p6 number]],p7--[[@param p7 number]],p8--[[@param p8 number]],p9--[[@param p9 number]],width--[[@param width number]],height--[[@param height number]],rCoef--[[@param rCoef number]],gCoef--[[@param gCoef number]],bCoef--[[@param bCoef number]],opacity--[[@param opacity number]],timeout--[[@param timeout number]],p17--[[@param p17 boolean]],p18--[[@param p18 boolean]],p19--[[@param p19 boolean]])return InvokeInt(0xB302244A1839BDAD,decalType,posX+.0,posY+.0,posZ+.0,p4+.0,p5+.0,p6+.0,p7+.0,p8+.0,p9+.0,width+.0,height+.0,rCoef+.0,gCoef+.0,bCoef+.0,opacity+.0,timeout+.0,p17,p18,p19)end;---@return integer
	AddPetrolDecal=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],groundLvl--[[@param groundLvl number]],width--[[@param width number]],transparency--[[@param transparency number]])return InvokeInt(0x4F5212C7AD880DF8,x+.0,y+.0,z+.0,groundLvl+.0,width+.0,transparency+.0)end;---@return integer
	AddOilDecal=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],groundLvl--[[@param groundLvl number]],width--[[@param width number]],transparency--[[@param transparency number]])return InvokeInt(0x126D7F89FE859A5E,x+.0,y+.0,z+.0,groundLvl+.0,width+.0,transparency+.0)end;---@return integer
	StartPetrolTrailDecals=function(p0--[[@param p0 number]])return InvokeVoid(0x99AC7F0D8B9C893D,p0+.0)end;
	AddPetrolTrailDecalInfo=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],p3--[[@param p3 number]])return InvokeVoid(0x967278682CB6967A,x+.0,y+.0,z+.0,p3+.0)end;
	EndPetrolTrailDecals=function()return InvokeVoid(0x0A123435A26C36CD)end;
	RemoveDecal=function(decal--[[@param decal integer]])return InvokeVoid(0xED3F346429CCD659,decal)end;
	IsDecalAlive=function(decal--[[@param decal integer]])return InvokeBool(0xC694D74949CAFD0C,decal)end;---@return boolean
	GetDecalWashLevel=function(decal--[[@param decal integer]])return InvokeFloat(0x323F647679A09103,decal)end;---@return number
	SetDisablePetrolDecalsIgnitingThisFrame=function()return InvokeVoid(0xD9454B5752C857DC)end;
	SetDisablePetrolDecalsRecyclingThisFrame=function()return InvokeVoid(0x27CFB1B1E078CB2D)end;
	SetDisableDecalRenderingThisFrame=function()return InvokeVoid(0x4B5CFC83122DF602)end;
	GetIsPetrolDecalInRange=function(xCoord--[[@param xCoord number]],yCoord--[[@param yCoord number]],zCoord--[[@param zCoord number]],radius--[[@param radius number]])return InvokeBool(0x2F09F7976C512404,xCoord+.0,yCoord+.0,zCoord+.0,radius+.0)end;---@return boolean
	PatchDecalDiffuseMap=function(decalType--[[@param decalType integer]],textureDict--[[@param textureDict string]],textureName--[[@param textureName string]])return InvokeVoid(0x8A35C742130C6080,decalType,textureDict,textureName)end;
	UnpatchDecalDiffuseMap=function(decalType--[[@param decalType integer]])return InvokeVoid(0xB7ED70C49521A61D,decalType)end;
	MoveVehicleDecals=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x84C8D7C2D30D3280,p0,p1)end;
	--[=[boneIndex is always chassis_dummy in the scripts. The x/y/z params are location relative to the chassis bone.]=]
	AddVehicleCrewEmblem=function(vehicle--[[@param vehicle integer]],ped--[[@param ped integer]],boneIndex--[[@param boneIndex integer]],x1--[[@param x1 number]],x2--[[@param x2 number]],x3--[[@param x3 number]],y1--[[@param y1 number]],y2--[[@param y2 number]],y3--[[@param y3 number]],z1--[[@param z1 number]],z2--[[@param z2 number]],z3--[[@param z3 number]],scale--[[@param scale number]],p13--[[@param p13 any]],alpha--[[@param alpha integer]])return InvokeBool(0x428BDCB9DA58DA53,vehicle,ped,boneIndex,x1+.0,x2+.0,x3+.0,y1+.0,y2+.0,y3+.0,z1+.0,z2+.0,z3+.0,scale+.0,p13,alpha)end;---@return boolean
	AbortVehicleCrewEmblemRequest=function(p0--[[@param p0 integer*]])return InvokeBool(0x82ACC484FFA3B05F,p0)end;---@return boolean
	RemoveVehicleCrewEmblem=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 integer]])return InvokeVoid(0xD2300034310557E4,vehicle,p1)end;
	GetVehicleCrewEmblemRequestState=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 integer]])return InvokeInt(0xFE26117A5841B2FF,vehicle,p1)end;---@return integer
	DoesVehicleHaveCrewEmblem=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 integer]])return InvokeBool(0x060D935D3981A275,vehicle,p1)end;---@return boolean
	DisableCompositeShotgunDecals=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x0E4299C549F0D1F1,toggle)end;
	DisableScuffDecals=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x02369D5C8A51FDCF,toggle)end;
	SetDecalBulletImpactRangeScale=function(p0--[[@param p0 number]])return InvokeVoid(0x46D1A61A21F566FC,p0+.0)end;
	OverrideInteriorSmokeName=function(name--[[@param name string]])return InvokeVoid(0x2A2A52824DB96700,name)end;
	OverrideInteriorSmokeLevel=function(level--[[@param level number]])return InvokeVoid(0x1600FD8CF72EBC12,level+.0)end;
	OverrideInteriorSmokeEnd=function()return InvokeVoid(0xEFB55E7C25D3B3BE)end;
	--[=[Used with 'NG_filmnoir_BW{01,02}' timecycles and the "NOIR_FILTER_SOUNDS" audioref.]=]
	RegisterNoirLensEffect=function()return InvokeVoid(0xA44FF770DFBC5DAE)end;
	DisableVehicleDistantlights=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xC9F98AC1884E73A2,toggle)end;
	RenderShadowedLightsWithNoShadows=function(p0--[[@param p0 boolean]])return InvokeVoid(0x03300B57FCAC6DDB,p0)end;
	RequestEarlyLightCheck=function()return InvokeVoid(0x98EDF76A7271E4F2)end;
	--[=[Forces footstep tracks on all surfaces.]=]
	UseSnowFootVfxWhenUnsheltered=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xAEEDAD1420C65CC0,toggle)end;
	--[=[Forces vehicle trails on all surfaces.]=]
	UseSnowWheelVfxWhenUnsheltered=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x4CC7F0FEA5283FE0,toggle)end;
	DisableRegionVfx=function(p0--[[@param p0 any]])return InvokeVoid(0xEFD97FF47B745B8D,p0)end;
	--[=[Only one match in the scripts:

GRAPHICS::PRESET_INTERIOR_AMBIENT_CACHE("int_carrier_hanger");]=]
	PresetInteriorAmbientCache=function(timecycleModifierName--[[@param timecycleModifierName string]])return InvokeVoid(0xD7021272EB0A451E,timecycleModifierName)end;
	--[=[Loads the specified timecycle modifier. Modifiers are defined separately in another file (e.g. "timecycle_mods_1.xml")

Parameters:
modifierName - The modifier to load (e.g. "V_FIB_IT3", "scanline_cam", etc.)

Full list of timecycle modifiers by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/timecycleModifiers.json]=]
	SetTimecycleModifier=function(modifierName--[[@param modifierName string]])return InvokeVoid(0x2C933ABF17A1DF41,modifierName)end;
	SetTimecycleModifierStrength=function(strength--[[@param strength number]])return InvokeVoid(0x82E7FFCD5B2326B3,strength+.0)end;
	--[=[Full list of timecycle modifiers by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/timecycleModifiers.json]=]
	SetTransitionTimecycleModifier=function(modifierName--[[@param modifierName string]],transition--[[@param transition number]])return InvokeVoid(0x3BCF567485E1971C,modifierName,transition+.0)end;
	SetTransitionOutOfTimecycleModifier=function(strength--[[@param strength number]])return InvokeVoid(0x1CBA05AE7BD7EE05,strength+.0)end;
	ClearTimecycleModifier=function()return InvokeVoid(0x0F07E7745A236711)end;
	--[=[Only use for this in the PC scripts is:

if (GRAPHICS::GET_TIMECYCLE_MODIFIER_INDEX() != -1)]=]
	GetTimecycleModifierIndex=function()return InvokeInt(0xFDF3D97C674AFB66)end;---@return integer
	GetTimecycleTransitionModifierIndex=function()return InvokeInt(0x459FD2C8D0AB78BC)end;---@return integer
	GetIsTimecycleTransitioningOut=function()return InvokeBool(0x98D18905BF723B99)end;---@return boolean
	PushTimecycleModifier=function()return InvokeVoid(0x58F735290861E6B4)end;
	PopTimecycleModifier=function()return InvokeVoid(0x3C8938D7D872211E)end;
	SetCurrentPlayerTcmodifier=function(modifierName--[[@param modifierName string]])return InvokeVoid(0xBBF327DED94E4DEB,modifierName)end;
	SetPlayerTcmodifierTransition=function(value--[[@param value number]])return InvokeVoid(0xBDEB86F4D5809204,value+.0)end;
	SetNextPlayerTcmodifier=function(modifierName--[[@param modifierName string]])return InvokeVoid(0xBF59707B3E5ED531,modifierName)end;
	AddTcmodifierOverride=function(modifierName1--[[@param modifierName1 string]],modifierName2--[[@param modifierName2 string]])return InvokeVoid(0x1A8E2C8B9CF4549C,modifierName1,modifierName2)end;
	ClearAllTcmodifierOverrides=function(p0--[[@param p0 string]])return InvokeVoid(0x15E33297C3E8DC60,p0)end;
	--[=[Full list of timecycle modifiers by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/timecycleModifiers.json]=]
	SetExtraTcmodifier=function(modifierName--[[@param modifierName string]])return InvokeVoid(0x5096FD9CCB49056D,modifierName)end;
	--[=[Clears the secondary timecycle modifier usually set with _SET_EXTRA_TIMECYCLE_MODIFIER]=]
	ClearExtraTcmodifier=function()return InvokeVoid(0x92CCC17A7A2285DA)end;
	--[=[See GET_TIMECYCLE_MODIFIER_INDEX for use, works the same just for the secondary timecycle modifier.
Returns an integer representing the Timecycle modifier]=]
	GetExtraTcmodifier=function()return InvokeInt(0xBB0527EC6341496D)end;---@return integer
	--[=[The same as SET_TIMECYCLE_MODIFIER_STRENGTH but for the secondary timecycle modifier.]=]
	EnableMoonCycleOverride=function(strength--[[@param strength number]])return InvokeVoid(0x2C328AF17210F009,strength+.0)end;
	--[=[Resets the extra timecycle modifier strength normally set with 0x2C328AF17210F009]=]
	DisableMoonCycleOverride=function()return InvokeVoid(0x2BF72AD5B41AA739)end;
	RequestScaleformMovie=function(scaleformName--[[@param scaleformName string]])return InvokeInt(0x11FE353CF9733E6F,scaleformName)end;---@return integer
	--[=[Another REQUEST_SCALEFORM_MOVIE equivalent.]=]
	RequestScaleformMovieWithIgnoreSuperWidescreen=function(scaleformName--[[@param scaleformName string]])return InvokeInt(0x65E7E78842E74CDB,scaleformName)end;---@return integer
	RequestScaleformMovieInstance=function(scaleformName--[[@param scaleformName string]])return InvokeInt(0xC514489CFB8AF806,scaleformName)end;---@return integer
	--[=[Similar to REQUEST_SCALEFORM_MOVIE, but seems to be some kind of "interactive" scaleform movie?

These seem to be the only scaleforms ever requested by this native:
"breaking_news"
"desktop_pc"
"ECG_MONITOR"
"Hacking_PC"
"TEETH_PULLING"

Note: Unless this hash is out-of-order, this native is next-gen only.
]=]
	RequestScaleformMovieSkipRenderWhilePaused=function(scaleformName--[[@param scaleformName string]])return InvokeInt(0xBD06C611BB9048C2,scaleformName)end;---@return integer
	HasScaleformMovieLoaded=function(scaleformHandle--[[@param scaleformHandle integer]])return InvokeBool(0x85F01B8D5B90570E,scaleformHandle)end;---@return boolean
	--[=[val is 1-20 (0 will return false)]=]
	IsActiveScaleformMovieDeleting=function(val--[[@param val integer]])return InvokeBool(0x2FCB133CA50A49EB,val)end;---@return boolean
	--[=[val is 1-20. Return is related to INSTRUCTIONAL_BUTTONS, COLOUR_SWITCHER_02, etc?]=]
	IsScaleformMovieDeleting=function(val--[[@param val integer]])return InvokeBool(0x86255B1FC929E33E,val)end;---@return boolean
	--[=[Only values used in the scripts are:

"heist_mp"
"heistmap_mp"
"instructional_buttons"
"heist_pre"]=]
	HasScaleformMovieFilenameLoaded=function(scaleformName--[[@param scaleformName string]])return InvokeBool(0x0C1C5D756FB5F337,scaleformName)end;---@return boolean
	HasScaleformContainerMovieLoadedIntoParent=function(scaleformHandle--[[@param scaleformHandle integer]])return InvokeBool(0x8217150E1217EBFD,scaleformHandle)end;---@return boolean
	SetScaleformMovieAsNoLongerNeeded=function(scaleformHandle--[[@param scaleformHandle integer*]])return InvokeVoid(0x1D132D614DD86811,scaleformHandle)end;
	SetScaleformMovieToUseSystemTime=function(scaleform--[[@param scaleform integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x6D8EB211944DCE08,scaleform,toggle)end;
	SetScaleformMovieToUseLargeRt=function(scaleformHandle--[[@param scaleformHandle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x32F34FF7F617643B,scaleformHandle,toggle)end;
	--[=[This native is used in some casino scripts to fit the scaleform in the rendertarget.]=]
	SetScaleformMovieToUseSuperLargeRt=function(scaleformHandle--[[@param scaleformHandle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xE6A9F00D4240B519,scaleformHandle,toggle)end;
	DrawScaleformMovie=function(scaleformHandle--[[@param scaleformHandle integer]],x--[[@param x number]],y--[[@param y number]],width--[[@param width number]],height--[[@param height number]],red--[[@param red integer]],green--[[@param green integer]],blue--[[@param blue integer]],alpha--[[@param alpha integer]],p9--[[@param p9 integer]])return InvokeVoid(0x54972ADAF0294A93,scaleformHandle,x+.0,y+.0,width+.0,height+.0,red,green,blue,alpha,p9)end;
	--[=[unk is not used so no need]=]
	DrawScaleformMovieFullscreen=function(scaleform--[[@param scaleform integer]],red--[[@param red integer]],green--[[@param green integer]],blue--[[@param blue integer]],alpha--[[@param alpha integer]],p5--[[@param p5 integer]])return InvokeVoid(0x0DF606929C105BE1,scaleform,red,green,blue,alpha,p5)end;
	DrawScaleformMovieFullscreenMasked=function(scaleform1--[[@param scaleform1 integer]],scaleform2--[[@param scaleform2 integer]],red--[[@param red integer]],green--[[@param green integer]],blue--[[@param blue integer]],alpha--[[@param alpha integer]])return InvokeVoid(0xCF537FDE4FBD4CE5,scaleform1,scaleform2,red,green,blue,alpha)end;
	DrawScaleformMovie3d=function(scaleform--[[@param scaleform integer]],posX--[[@param posX number]],posY--[[@param posY number]],posZ--[[@param posZ number]],rotX--[[@param rotX number]],rotY--[[@param rotY number]],rotZ--[[@param rotZ number]],p7--[[@param p7 number]],p8--[[@param p8 number]],p9--[[@param p9 number]],scaleX--[[@param scaleX number]],scaleY--[[@param scaleY number]],scaleZ--[[@param scaleZ number]],rotationOrder--[[@param rotationOrder integer]])return InvokeVoid(0x87D51D72255D4E78,scaleform,posX+.0,posY+.0,posZ+.0,rotX+.0,rotY+.0,rotZ+.0,p7+.0,p8+.0,p9+.0,scaleX+.0,scaleY+.0,scaleZ+.0,rotationOrder)end;
	DrawScaleformMovie3dSolid=function(scaleform--[[@param scaleform integer]],posX--[[@param posX number]],posY--[[@param posY number]],posZ--[[@param posZ number]],rotX--[[@param rotX number]],rotY--[[@param rotY number]],rotZ--[[@param rotZ number]],p7--[[@param p7 number]],p8--[[@param p8 number]],p9--[[@param p9 number]],scaleX--[[@param scaleX number]],scaleY--[[@param scaleY number]],scaleZ--[[@param scaleZ number]],rotationOrder--[[@param rotationOrder integer]])return InvokeVoid(0x1CE592FDC749D6F5,scaleform,posX+.0,posY+.0,posZ+.0,rotX+.0,rotY+.0,rotZ+.0,p7+.0,p8+.0,p9+.0,scaleX+.0,scaleY+.0,scaleZ+.0,rotationOrder)end;
	--[=[Calls the Scaleform function.]=]
	CallScaleformMovieMethod=function(scaleform--[[@param scaleform integer]],method--[[@param method string]])return InvokeVoid(0xFBD96D87AC96D533,scaleform,method)end;
	--[=[Calls the Scaleform function and passes the parameters as floats.

The number of parameters passed to the function varies, so the end of the parameter list is represented by -1.0.]=]
	CallScaleformMovieMethodWithNumber=function(scaleform--[[@param scaleform integer]],methodName--[[@param methodName string]],param1--[[@param param1 number]],param2--[[@param param2 number]],param3--[[@param param3 number]],param4--[[@param param4 number]],param5--[[@param param5 number]])return InvokeVoid(0xD0837058AE2E4BEE,scaleform,methodName,param1+.0,param2+.0,param3+.0,param4+.0,param5+.0)end;
	--[=[Calls the Scaleform function and passes the parameters as strings.

The number of parameters passed to the function varies, so the end of the parameter list is represented by 0 (NULL).]=]
	CallScaleformMovieMethodWithString=function(scaleform--[[@param scaleform integer]],methodName--[[@param methodName string]],param1--[[@param param1 string]],param2--[[@param param2 string]],param3--[[@param param3 string]],param4--[[@param param4 string]],param5--[[@param param5 string]])return InvokeVoid(0x51BC1ED3CC44E8F7,scaleform,methodName,param1,param2,param3,param4,param5)end;
	--[=[Calls the Scaleform function and passes both float and string parameters (in their respective order).

The number of parameters passed to the function varies, so the end of the float parameters is represented by -1.0, and the end of the string parameters is represented by 0 (NULL).

NOTE: The order of parameters in the function prototype is important! All float parameters must come first, followed by the string parameters.

Examples:
// function MY_FUNCTION(floatParam1, floatParam2, stringParam)
GRAPHICS::CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER_AND_STRING(scaleform, "MY_FUNCTION", 10.0, 20.0, -1.0, -1.0, -1.0, "String param", 0, 0, 0, 0);

// function MY_FUNCTION_2(floatParam, stringParam1, stringParam2)
GRAPHICS::CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER_AND_STRING(scaleform, "MY_FUNCTION_2", 10.0, -1.0, -1.0, -1.0, -1.0, "String param #1", "String param #2", 0, 0, 0);]=]
	CallScaleformMovieMethodWithNumberAndString=function(scaleform--[[@param scaleform integer]],methodName--[[@param methodName string]],floatParam1--[[@param floatParam1 number]],floatParam2--[[@param floatParam2 number]],floatParam3--[[@param floatParam3 number]],floatParam4--[[@param floatParam4 number]],floatParam5--[[@param floatParam5 number]],stringParam1--[[@param stringParam1 string]],stringParam2--[[@param stringParam2 string]],stringParam3--[[@param stringParam3 string]],stringParam4--[[@param stringParam4 string]],stringParam5--[[@param stringParam5 string]])return InvokeVoid(0xEF662D8D57E290B1,scaleform,methodName,floatParam1+.0,floatParam2+.0,floatParam3+.0,floatParam4+.0,floatParam5+.0,stringParam1,stringParam2,stringParam3,stringParam4,stringParam5)end;
	--[=[Pushes a function from the Hud component Scaleform onto the stack. Same behavior as GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD, just a hud component id instead of a Scaleform.

Known components:
19 - MP_RANK_BAR
20 - HUD_DIRECTOR_MODE

This native requires more research - all information can be found inside of 'hud.gfx'. Using a decompiler, the different components are located under "scripts\__Packages\com\rockstargames\gtav\hud\hudComponents" and "scripts\__Packages\com\rockstargames\gtav\Multiplayer".]=]
	BeginScaleformScriptHudMovieMethod=function(hudComponent--[[@param hudComponent integer]],methodName--[[@param methodName string]])return InvokeBool(0x98C494FD5BDFBFD5,hudComponent,methodName)end;---@return boolean
	--[=[Push a function from the Scaleform onto the stack
]=]
	BeginScaleformMovieMethod=function(scaleform--[[@param scaleform integer]],methodName--[[@param methodName string]])return InvokeBool(0xF6E48914C7A8694E,scaleform,methodName)end;---@return boolean
	--[=[Starts frontend (pause menu) scaleform movie methods.
This can be used when you want to make custom frontend menus, and customize things like images or text in the menus etc.
Use `BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND_HEADER` for header scaleform functions.]=]
	BeginScaleformMovieMethodOnFrontend=function(methodName--[[@param methodName string]])return InvokeBool(0xAB58C27C2E6123C6,methodName)end;---@return boolean
	--[=[Starts frontend (pause menu) scaleform movie methods for header options.
Use `BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND` to customize the content inside the frontend menus.]=]
	BeginScaleformMovieMethodOnFrontendHeader=function(methodName--[[@param methodName string]])return InvokeBool(0xB9449845F73F5E9C,methodName)end;---@return boolean
	--[=[Pops and calls the Scaleform function on the stack]=]
	EndScaleformMovieMethod=function()return InvokeVoid(0xC6796A8FFA375E53)end;
	EndScaleformMovieMethodReturnValue=function()return InvokeInt(0xC50AA39A577AF886)end;---@return integer
	--[=[methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE
Returns true if the return value of a scaleform function is ready to be collected (using GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING or GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT).]=]
	IsScaleformMovieMethodReturnValueReady=function(methodReturn--[[@param methodReturn integer]])return InvokeBool(0x768FF8961BA904D6,methodReturn)end;---@return boolean
	--[=[methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE
Used to get a return value from a scaleform function. Returns an int in the same way GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING returns a string.]=]
	GetScaleformMovieMethodReturnValueInt=function(methodReturn--[[@param methodReturn integer]])return InvokeInt(0x2DE7EFA66B906036,methodReturn)end;---@return integer
	--[=[methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE]=]
	GetScaleformMovieMethodReturnValueBool=function(methodReturn--[[@param methodReturn integer]])return InvokeBool(0xD80A80346A45D761,methodReturn)end;---@return boolean
	--[=[methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE
Used to get a return value from a scaleform function. Returns a string in the same way GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT returns an int.]=]
	GetScaleformMovieMethodReturnValueString=function(methodReturn--[[@param methodReturn integer]])return InvokeString(0xE1E258829A885245,methodReturn)end;---@return string
	--[=[Pushes an integer for the Scaleform function onto the stack.]=]
	ScaleformMovieMethodAddParamInt=function(value--[[@param value integer]])return InvokeVoid(0xC3D0841A0CC546A6,value)end;
	--[=[Pushes a float for the Scaleform function onto the stack.]=]
	ScaleformMovieMethodAddParamFloat=function(value--[[@param value number]])return InvokeVoid(0xD69736AAE04DB51A,value+.0)end;
	--[=[Pushes a boolean for the Scaleform function onto the stack.]=]
	ScaleformMovieMethodAddParamBool=function(value--[[@param value boolean]])return InvokeVoid(0xC58424BA936EB458,value)end;
	--[=[Called prior to adding a text component to the UI. After doing so, GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING is called.

Examples:
GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("NUMBER");
HUD::ADD_TEXT_COMPONENT_INTEGER(MISC::ABSI(a_1));
GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();

GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRING");
HUD::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(a_2);
GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();

GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRTNM2");
HUD::ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(v_3);
HUD::ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(v_4);
GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();

GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRTNM1");
HUD::ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(v_3);
GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();]=]
	BeginTextCommandScaleformString=function(componentType--[[@param componentType string]])return InvokeVoid(0x80338406F3475E55,componentType)end;
	EndTextCommandScaleformString=function()return InvokeVoid(0x362E2D3FE93A9959)end;
	--[=[Same as END_TEXT_COMMAND_SCALEFORM_STRING but does not perform HTML conversion for text tokens.

END_TEXT_COMMAND_VIA_SPECIAL_MODIFIABLE_STRING?]=]
	EndTextCommandUnparsedScaleformString=function()return InvokeVoid(0xAE4E8157D9ECF087)end;
	--[=[Same as SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING
Both SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING / _SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING_2 works, but _SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING_2 is usually used for "name" (organisation, players..).]=]
	ScaleformMovieMethodAddParamLiteralString=function(string--[[@param string string]])return InvokeVoid(0x77FE3402004CD1B0,string)end;
	ScaleformMovieMethodAddParamTextureNameString=function(string--[[@param string string]])return InvokeVoid(0xBA7148484BD90365,string)end;
	ScaleformMovieMethodAddParamPlayerNameString=function(string--[[@param string string]])return InvokeVoid(0xE83A3E3557A56640,string)end;
	DoesLatestBriefStringExist=function(p0--[[@param p0 integer]])return InvokeBool(0x5E657EF1099EDD65,p0)end;---@return boolean
	ScaleformMovieMethodAddParamLatestBriefString=function(value--[[@param value integer]])return InvokeVoid(0xEC52C631A1831C03,value)end;
	RequestScaleformScriptHudMovie=function(hudComponent--[[@param hudComponent integer]])return InvokeVoid(0x9304881D6F6537EA,hudComponent)end;
	HasScaleformScriptHudMovieLoaded=function(hudComponent--[[@param hudComponent integer]])return InvokeBool(0xDF6E5987D2B4D140,hudComponent)end;---@return boolean
	RemoveScaleformScriptHudMovie=function(hudComponent--[[@param hudComponent integer]])return InvokeVoid(0xF44A5456AC3F4F97,hudComponent)end;
	PassKeyboardInputToScaleform=function(scaleformHandle--[[@param scaleformHandle integer]])return InvokeBool(0xD1C7CB175E012964,scaleformHandle)end;---@return boolean
	SetTvChannel=function(channel--[[@param channel integer]])return InvokeVoid(0xBAABBB23EB6E484E,channel)end;
	GetTvChannel=function()return InvokeInt(0xFC1E275A90D39995)end;---@return integer
	SetTvVolume=function(volume--[[@param volume number]])return InvokeVoid(0x2982BF73F66E9DDC,volume+.0)end;
	GetTvVolume=function()return InvokeFloat(0x2170813D3DD8661B)end;---@return number
	--[=[All calls to this native are preceded by calls to GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER and GRAPHICS::SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU, respectively.

"act_cinema.ysc", line 1483:
HUD::SET_HUD_COMPONENT_POSITION(15, 0.0, -0.0375);
HUD::SET_TEXT_RENDER_ID(l_AE);
GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(4);
GRAPHICS::SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU(1);
if (GRAPHICS::IS_TVSHOW_CURRENTLY_PLAYING(${movie_arthouse})) {
    GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 0.7375, 1.0, 0.0, 255, 255, 255, 255);
} else { 
    GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 1.0, 1.0, 0.0, 255, 255, 255, 255);
}

"am_mp_property_int.ysc", line 102545:
if (ENTITY::DOES_ENTITY_EXIST(a_2._f3)) {
    if (HUD::IS_NAMED_RENDERTARGET_LINKED(ENTITY::GET_ENTITY_MODEL(a_2._f3))) {
        HUD::SET_TEXT_RENDER_ID(a_2._f1);
        GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(4);
        GRAPHICS::SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU(1);
        GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 1.0, 1.0, 0.0, 255, 255, 255, 255);
        if (GRAPHICS::GET_TV_CHANNEL() == -1) {
            sub_a8fa5(a_2, 1);
        } else { 
            sub_a8fa5(a_2, 1);
            GRAPHICS::ATTACH_TV_AUDIO_TO_ENTITY(a_2._f3);
        }
        HUD::SET_TEXT_RENDER_ID(HUD::GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID());
    }
}
]=]
	DrawTvChannel=function(xPos--[[@param xPos number]],yPos--[[@param yPos number]],xScale--[[@param xScale number]],yScale--[[@param yScale number]],rotation--[[@param rotation number]],red--[[@param red integer]],green--[[@param green integer]],blue--[[@param blue integer]],alpha--[[@param alpha integer]])return InvokeVoid(0xFDDC2B4ED3C69DF0,xPos+.0,yPos+.0,xScale+.0,yScale+.0,rotation+.0,red,green,blue,alpha)end;
	--[=[Loads specified video sequence into the TV Channel
TV_Channel ranges from 0-2
VideoSequence can be any of the following:
"PL_STD_CNT" CNT Standard Channel
"PL_STD_WZL" Weazel Standard Channel
"PL_LO_CNT"
"PL_LO_WZL"
"PL_SP_WORKOUT"
"PL_SP_INV" - Jay Norris Assassination Mission Fail
"PL_SP_INV_EXP" - Jay Norris Assassination Mission Success
"PL_LO_RS" - Righteous Slaughter Ad
"PL_LO_RS_CUTSCENE" - Righteous Slaughter Cut-scene
"PL_SP_PLSH1_INTRO"
"PL_LES1_FAME_OR_SHAME"
"PL_STD_WZL_FOS_EP2"
"PL_MP_WEAZEL" - Weazel Logo on loop
"PL_MP_CCTV" - Generic CCTV loop

Restart:
0=video sequence continues as normal
1=sequence restarts from beginning every time that channel is selected


The above playlists work as intended, and are commonly used, but there are many more playlists, as seen in `tvplaylists.xml`. A pastebin below outlines all playlists, they will be surronded by the name tag I.E. (<Name>PL_STD_CNT</Name> = PL_STD_CNT).
https://pastebin.com/zUzGB6h7]=]
	SetTvChannelPlaylist=function(tvChannel--[[@param tvChannel integer]],playlistName--[[@param playlistName string]],restart--[[@param restart boolean]])return InvokeVoid(0xF7B38B8305F1FE8B,tvChannel,playlistName,restart)end;
	SetTvChannelPlaylistAtHour=function(tvChannel--[[@param tvChannel integer]],playlistName--[[@param playlistName string]],hour--[[@param hour integer]])return InvokeVoid(0x2201C576FACAEBE8,tvChannel,playlistName,hour)end;
	ClearTvChannelPlaylist=function(tvChannel--[[@param tvChannel integer]])return InvokeVoid(0xBEB3D46BB7F043C0,tvChannel)end;
	IsPlaylistOnChannel=function(tvChannel--[[@param tvChannel integer]],p1--[[@param p1 any]])return InvokeBool(0x1F710BFF7DAE6261,tvChannel,p1)end;---@return boolean
	IsTvshowCurrentlyPlaying=function(videoCliphash--[[@param videoCliphash integer]])return InvokeBool(0x0AD973CA1E077B60,videoCliphash)end;---@return boolean
	EnableMovieKeyframeWait=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x74C180030FDE4B69,toggle)end;
	SetTvPlayerWatchingThisFrame=function(p0--[[@param p0 any]])return InvokeVoid(0xD1C55B110E4DF534,p0)end;
	GetCurrentTvClipNamehash=function()return InvokeInt(0x30432A0118736E00)end;---@return integer
	EnableMovieSubtitles=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x873FA65C778AD970,toggle)end;
	Ui3dsceneIsAvailable=function()return InvokeBool(0xD3A10FC7FD8D98CD)end;---@return boolean
	--[=[All presets can be found in common\data\ui\uiscenes.meta]=]
	Ui3dscenePushPreset=function(presetName--[[@param presetName string]])return InvokeBool(0xF1CEA8A4198D8E9A,presetName)end;---@return boolean
	--[=[It's called after UI3DSCENE_IS_AVAILABLE and UI3DSCENE_PUSH_PRESET

presetName was always "CELEBRATION_WINNER"
All presets can be found in common\data\ui\uiscenes.meta]=]
	Ui3dsceneAssignPedToSlot=function(presetName--[[@param presetName string]],ped--[[@param ped integer]],slot--[[@param slot integer]],posX--[[@param posX number]],posY--[[@param posY number]],posZ--[[@param posZ number]])return InvokeBool(0x98C4FE6EC34154CA,presetName,ped,slot,posX+.0,posY+.0,posZ+.0)end;---@return boolean
	Ui3dsceneClearPatchedData=function()return InvokeVoid(0x7A42B2E236E71415)end;
	Ui3dsceneMakePushedPresetPersistent=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x108BE26959A9D9BB,toggle)end;
	--[=[This native enables/disables the gold putting grid display (https://i.imgur.com/TC6cku6.png).
This requires these two natives to be called as well to configure the grid: `TERRAINGRID_SET_PARAMS` and `TERRAINGRID_SET_COLOURS`.]=]
	TerraingridActivate=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xA356990E161C9E65,toggle)end;
	--[=[This native is used along with these two natives: `TERRAINGRID_ACTIVATE` and `TERRAINGRID_SET_COLOURS`.
This native configures the location, size, rotation, normal height, and the difference ratio between min, normal and max.

All those natives combined they will output something like this: https://i.imgur.com/TC6cku6.png

This native renders a box at the given position, with a special shader that renders a grid on world geometry behind it. This box does not have backface culling.
The forward args here are a direction vector, something similar to what's returned by GET_ENTITY_FORWARD_VECTOR.
normalHeight and heightDiff are used for positioning the color gradient of the grid, colors specified via TERRAINGRID_SET_COLOURS.

Example with box superimposed on the image to demonstrate: https://i.imgur.com/wdqskxd.jpg]=]
	TerraingridSetParams=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],forwardX--[[@param forwardX number]],forwardY--[[@param forwardY number]],forwardZ--[[@param forwardZ number]],sizeX--[[@param sizeX number]],sizeY--[[@param sizeY number]],sizeZ--[[@param sizeZ number]],gridScale--[[@param gridScale number]],glowIntensity--[[@param glowIntensity number]],normalHeight--[[@param normalHeight number]],heightDiff--[[@param heightDiff number]])return InvokeVoid(0x1C4FC5752BCD8E48,x+.0,y+.0,z+.0,forwardX+.0,forwardY+.0,forwardZ+.0,sizeX+.0,sizeY+.0,sizeZ+.0,gridScale+.0,glowIntensity+.0,normalHeight+.0,heightDiff+.0)end;
	--[=[This native is used along with these two natives: `TERRAINGRID_ACTIVATE` and `TERRAINGRID_SET_PARAMS`.
This native sets the colors for the golf putting grid. the 'min...' values are for the lower areas that the grid covers, the 'max...' values are for the higher areas that the grid covers, all remaining values are for the 'normal' ground height.
All those natives combined they will output something like this: https://i.imgur.com/TC6cku6.png]=]
	TerraingridSetColours=function(lowR--[[@param lowR integer]],lowG--[[@param lowG integer]],lowB--[[@param lowB integer]],lowAlpha--[[@param lowAlpha integer]],r--[[@param r integer]],g--[[@param g integer]],b--[[@param b integer]],alpha--[[@param alpha integer]],highR--[[@param highR integer]],highG--[[@param highG integer]],highB--[[@param highB integer]],highAlpha--[[@param highAlpha integer]])return InvokeVoid(0x5CE62918F8D703C7,lowR,lowG,lowB,lowAlpha,r,g,b,alpha,highR,highG,highB,highAlpha)end;
	--[=[duration - is how long to play the effect for in milliseconds. If 0, it plays the default length
if loop is true, the effect won't stop until you call ANIMPOSTFX_STOP on it. (only loopable effects)

Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json]=]
	AnimpostfxPlay=function(effectName--[[@param effectName string]],duration--[[@param duration integer]],looped--[[@param looped boolean]])return InvokeVoid(0x2206BF9A37B7F724,effectName,duration,looped)end;
	--[=[See ANIMPOSTFX_PLAY

Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json]=]
	AnimpostfxStop=function(effectName--[[@param effectName string]])return InvokeVoid(0x068E835A1D0DC0E3,effectName)end;
	--[=[See ANIMPOSTFX_PLAY

Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json]=]
	AnimpostfxGetCurrentTime=function(effectName--[[@param effectName string]])return InvokeFloat(0xE35B38A27E8E7179,effectName)end;---@return number
	--[=[Returns whether the specified effect is active.
See ANIMPOSTFX_PLAY

Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json]=]
	AnimpostfxIsRunning=function(effectName--[[@param effectName string]])return InvokeBool(0x36AD3E690DA5ACEB,effectName)end;---@return boolean
	--[=[Stops ALL currently playing effects.]=]
	AnimpostfxStopAll=function()return InvokeVoid(0xB4EDDC19532BFB85)end;
	--[=[Stops the effect and sets a value (bool) in its data (+0x199) to false.
See ANIMPOSTFX_PLAY

Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json]=]
	AnimpostfxStopAndFlushRequests=function(effectName--[[@param effectName string]])return InvokeVoid(0xD2209BE128B5418C,effectName)end;
}
_G.Hud={
	--[=[Initializes the text entry for the the text next to a loading prompt. All natives for building UI texts can be used here


e.g
void StartLoadingMessage(char *text, int spinnerType = 3)
  {
     BEGIN_TEXT_COMMAND_BUSYSPINNER_ON("STRING");
       ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
       END_TEXT_COMMAND_BUSYSPINNER_ON(spinnerType);
    }
/*OR*/
 void ShowLoadingMessage(char *text, int spinnerType = 3, int timeMs = 10000)
  {
     BEGIN_TEXT_COMMAND_BUSYSPINNER_ON("STRING");
       ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
       END_TEXT_COMMAND_BUSYSPINNER_ON(spinnerType);
        WAIT(timeMs);
     BUSYSPINNER_OFF();
 }


These are some localized strings used in the loading spinner.
"PM_WAIT"                   = Please Wait
"CELEB_WPLYRS"              = Waiting For Players.
"CELL_SPINNER2"             = Scanning storage.
"ERROR_CHECKYACHTNAME" = Registering your yacht's name. Please wait.
"ERROR_CHECKPROFANITY"   = Checking your text for profanity. Please wait.
"FM_COR_AUTOD"                        = Just spinner no text
"FM_IHELP_WAT2"                        = Waiting for other players
"FM_JIP_WAITO"                            = Game options are being set
"FMMC_DOWNLOAD"                    = Downloading
"FMMC_PLYLOAD"                         = Loading
"FMMC_STARTTRAN"                    = Launching session
"HUD_QUITTING"                           =  Quiting session
"KILL_STRIP_IDM"                         = Waiting for to accept
"MP_SPINLOADING"                      = Loading]=]
	BeginTextCommandBusyspinnerOn=function(string--[[@param string string]])return InvokeVoid(0xABA17D7CE615ADBF,string)end;
	--[=[enum eBusySpinnerType
{
	BUSY_SPINNER_LEFT,
	BUSY_SPINNER_LEFT_2,
	BUSY_SPINNER_LEFT_3,
	BUSY_SPINNER_SAVE,
	BUSY_SPINNER_RIGHT,
};]=]
	EndTextCommandBusyspinnerOn=function(busySpinnerType--[[@param busySpinnerType integer]])return InvokeVoid(0xBD12F8228410D9B4,busySpinnerType)end;
	--[=[Removes the loading prompt at the bottom right of the screen.]=]
	BusyspinnerOff=function()return InvokeVoid(0x10D373323E5B9C0D)end;
	PreloadBusyspinner=function()return InvokeVoid(0xC65AB383CD91DF98)end;
	BusyspinnerIsOn=function()return InvokeBool(0xD422FCC5F239A915)end;---@return boolean
	BusyspinnerIsDisplaying=function()return InvokeBool(0xB2A592B04648A9CB)end;---@return boolean
	DisablePausemenuSpinner=function(p0--[[@param p0 boolean]])return InvokeVoid(0x9245E81072704B8A,p0)end;
	--[=[Shows the cursor on screen for one frame.]=]
	SetMouseCursorThisFrame=function()return InvokeVoid(0xAAE7CE1D63167423)end;
	--[=[Changes the mouse cursor's sprite. 
1 = Normal
6 = Left Arrow
7 = Right Arrow]=]
	SetMouseCursorStyle=function(spriteId--[[@param spriteId integer]])return InvokeVoid(0x8DB8CFFD58B62552,spriteId)end;
	--[=[Shows/hides the frontend cursor on the pause menu or similar menus.
Clicking off and then on the game window will show it again.]=]
	SetMouseCursorVisible=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x98215325A695E78A,toggle)end;
	--[=[Returns TRUE if mouse is hovering above instructional buttons. Works with all buttons gfx, such as popup_warning, pause_menu_instructional_buttons, instructional_buttons, etc. Note: You have to call TOGGLE_MOUSE_BUTTONS on the scaleform if you want this native to work.]=]
	IsMouseRolledOverInstructionalButtons=function()return InvokeBool(0x3D9ACB1EB139E702)end;---@return boolean
	GetMouseEvent=function(scaleformHandle--[[@param scaleformHandle integer]],p1--[[@param p1 any*]],p2--[[@param p2 any*]],p3--[[@param p3 any*]])return InvokeBool(0x632B2940C67F4EA9,scaleformHandle,p1,p2,p3)end;---@return boolean
	ThefeedOnlyShowTooltips=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x6F1554B0CC2089FA,toggle)end;
	ThefeedSetScriptedMenuHeight=function(pos--[[@param pos number]])return InvokeVoid(0x55598D21339CB998,pos+.0)end;
	--[=[Stops loading screen tips shown by invoking `THEFEED_SHOW`]=]
	ThefeedHide=function()return InvokeVoid(0x32888337579A5970)end;
	--[=[Once called each frame hides all above radar notifications.]=]
	ThefeedHideThisFrame=function()return InvokeVoid(0x25F87B30C382FCA7)end;
	--[=[Displays loading screen tips, requires `THEFEED_AUTO_POST_GAMETIPS_ON` to be called beforehand.]=]
	ThefeedShow=function()return InvokeVoid(0x15CFA549788D35EF)end;
	ThefeedFlushQueue=function()return InvokeVoid(0xA8FDB297A8D25FBA)end;
	--[=[Removes a notification instantly instead of waiting for it to disappear]=]
	ThefeedRemoveItem=function(notificationId--[[@param notificationId integer]])return InvokeVoid(0xBE4390CB40B3E627,notificationId)end;
	ThefeedForceRenderOn=function()return InvokeVoid(0xA13C11E1B5C06BFC)end;
	--[=[Enables loading screen tips to be be shown (`THEFEED_SHOW`), blocks other kinds of notifications from being displayed (at least from current script). Call `0xADED7F5748ACAFE6` to display those again.]=]
	ThefeedForceRenderOff=function()return InvokeVoid(0x583049884A2EEE3C)end;
	ThefeedPause=function()return InvokeVoid(0xFDB423997FA30340)end;
	ThefeedResume=function()return InvokeVoid(0xE1CD1E48E025E661)end;
	ThefeedIsPaused=function()return InvokeBool(0xA9CBFD40B3FA3010)end;---@return boolean
	ThefeedReportLogoOn=function()return InvokeVoid(0xD4438C0564490E63)end;
	ThefeedReportLogoOff=function()return InvokeVoid(0xB695E2CD0A2DA9EE)end;
	--[=[Returns the handle for the notification currently displayed on the screen. Name may be a hash collision, but describes the function accurately.]=]
	ThefeedGetLastShownPhoneActivatableFeedId=function()return InvokeInt(0x82352748437638CA)end;---@return integer
	--[=[Enables loading screen tips to be be shown (`THEFEED_SHOW`), blocks other kinds of notifications from being displayed (at least from current script). Call `THEFEED_AUTO_POST_GAMETIPS_OFF` to display those again.]=]
	ThefeedAutoPostGametipsOn=function()return InvokeVoid(0x56C8B608CFD49854)end;
	--[=[Displays "normal" notifications again after calling `THEFEED_AUTO_POST_GAMETIPS_ON` (those that were drawn before calling this native too), though those will have a weird offset and stay on screen forever (tested with notifications created from same script).]=]
	ThefeedAutoPostGametipsOff=function()return InvokeVoid(0xADED7F5748ACAFE6)end;
	--[=[From the decompiled scripts:
HUD::THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST(6);
HUD::THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST(184);
HUD::THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST(190);

sets background color for the next notification
6 = red
184 = green
190 = yellow

Here is a list of some colors that can be used: https://gyazo.com/68bd384455fceb0a85a8729e48216e15]=]
	ThefeedSetBackgroundColorForNextPost=function(hudColorIndex--[[@param hudColorIndex integer]])return InvokeVoid(0x92F0DA1E27DB96DC,hudColorIndex)end;
	ThefeedSetRgbaParameterForNextMessage=function(red--[[@param red integer]],green--[[@param green integer]],blue--[[@param blue integer]],alpha--[[@param alpha integer]])return InvokeVoid(0x17430B918701C342,red,green,blue,alpha)end;
	--[=[Related to notification color flashing, setting count to 0 invalidates a `THEFEED_SET_RGBA_PARAMETER_FOR_NEXT_MESSAGE` call for the target notification.]=]
	ThefeedSetFlashDurationParameterForNextMessage=function(count--[[@param count integer]])return InvokeVoid(0x17AD8C9706BDD88A,count)end;
	ThefeedSetVibrateParameterForNextMessage=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x4A0C7C9BB10ABB36,toggle)end;
	ThefeedResetAllParameters=function()return InvokeVoid(0xFDD85225B2DEA55E)end;
	--[=[Requires manual management of game stream handles (i.e., 0xBE4390CB40B3E627).]=]
	ThefeedFreezeNextPost=function()return InvokeVoid(0xFDEC055AB549E328)end;
	ThefeedClearFrozenPost=function()return InvokeVoid(0x80FE4F3AB4E1B62A)end;
	ThefeedSetSnapFeedItemPositions=function(p0--[[@param p0 boolean]])return InvokeVoid(0xBAE4F9B97CD43B30,p0)end;
	--[=[Used in the native scripts to reference "GET_PEDHEADSHOT_TXD_STRING" and "CHAR_DEFAULT".]=]
	ThefeedUpdateItemTexture=function(txdString1--[[@param txdString1 string]],txnString1--[[@param txnString1 string]],txdString2--[[@param txdString2 string]],txnString2--[[@param txnString2 string]])return InvokeVoid(0x317EBA71D7543F52,txdString1,txnString1,txdString2,txnString2)end;
	--[=[Declares the entry type of a notification, for example "STRING".

int ShowNotification(char *text)
{
	BEGIN_TEXT_COMMAND_THEFEED_POST("STRING");
	ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
	return END_TEXT_COMMAND_THEFEED_POST_TICKER(1, 1);
}]=]
	BeginTextCommandThefeedPost=function(text--[[@param text string]])return InvokeVoid(0x202709F4C58A0424,text)end;
	--[=[List of picture names: https://pastebin.com/XdpJVbHz
Example result: https://i.imgur.com/SdEZ22m.png]=]
	EndTextCommandThefeedPostStats=function(statTitle--[[@param statTitle string]],iconEnum--[[@param iconEnum integer]],stepVal--[[@param stepVal boolean]],barValue--[[@param barValue integer]],isImportant--[[@param isImportant boolean]],pictureTextureDict--[[@param pictureTextureDict string]],pictureTextureName--[[@param pictureTextureName string]])return InvokeInt(0x2B7E9A4EAAA93C89,statTitle,iconEnum,stepVal,barValue,isImportant,pictureTextureDict,pictureTextureName)end;---@return integer
	--[=[This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.

List of picNames: https://pastebin.com/XdpJVbHz


flash is a bool for fading in.
iconTypes:
1 : Chat Box
2 : Email
3 : Add Friend Request
4 : Nothing
5 : Nothing
6 : Nothing
7 : Right Jumping Arrow
8 : RP Icon
9 : $ Icon

"sender" is the very top header. This can be any old string.
"subject" is the header under the sender.]=]
	EndTextCommandThefeedPostMessagetext=function(txdName--[[@param txdName string]],textureName--[[@param textureName string]],flash--[[@param flash boolean]],iconType--[[@param iconType integer]],sender--[[@param sender string]],subject--[[@param subject string]])return InvokeInt(0x1CCD9A37359072CF,txdName,textureName,flash,iconType,sender,subject)end;---@return integer
	--[=[This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.

Needs more research.

Only one type of usage in the scripts:

HUD::END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_SUBTITLE_LABEL("CHAR_ACTING_UP", "CHAR_ACTING_UP", 0, 0, "DI_FEED_CHAR", a_0);]=]
	EndTextCommandThefeedPostMessagetextSubtitleLabel=function(txdName--[[@param txdName string]],textureName--[[@param textureName string]],flash--[[@param flash boolean]],iconType--[[@param iconType integer]],sender--[[@param sender string]],subject--[[@param subject string]])return InvokeInt(0xC6F580E4C94926AC,txdName,textureName,flash,iconType,sender,subject)end;---@return integer
	--[=[This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.

NOTE: 'duration' is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.

Example, only occurrence in the scripts:
v_8 = HUD::END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_TU("CHAR_SOCIAL_CLUB", "CHAR_SOCIAL_CLUB", 0, 0, &v_9, "", a_5);]=]
	EndTextCommandThefeedPostMessagetextTu=function(txdName--[[@param txdName string]],textureName--[[@param textureName string]],flash--[[@param flash boolean]],iconType--[[@param iconType integer]],sender--[[@param sender string]],subject--[[@param subject string]],duration--[[@param duration number]])return InvokeInt(0x1E6611149DB3DB6B,txdName,textureName,flash,iconType,sender,subject,duration+.0)end;---@return integer
	--[=[This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.

List of picNames https://pastebin.com/XdpJVbHz

flash is a bool for fading in.
iconTypes:
1 : Chat Box
2 : Email
3 : Add Friend Request
4 : Nothing
5 : Nothing
6 : Nothing
7 : Right Jumping Arrow
8 : RP Icon
9 : $ Icon

"sender" is the very top header. This can be any old string.
"subject" is the header under the sender.
"duration" is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.
"clanTag" shows a crew tag in the "sender" header, after the text. You need to use 3 underscores as padding. Maximum length of this field seems to be 7. (e.g. "MK" becomes "___MK", "ACE" becomes "___ACE", etc.)]=]
	EndTextCommandThefeedPostMessagetextWithCrewTag=function(txdName--[[@param txdName string]],textureName--[[@param textureName string]],flash--[[@param flash boolean]],iconType--[[@param iconType integer]],sender--[[@param sender string]],subject--[[@param subject string]],duration--[[@param duration number]],clanTag--[[@param clanTag string]])return InvokeInt(0x5CBF7BADE20DB93E,txdName,textureName,flash,iconType,sender,subject,duration+.0,clanTag)end;---@return integer
	--[=[This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.

List of picNames:  https://pastebin.com/XdpJVbHz

flash is a bool for fading in.
iconTypes:
1 : Chat Box
2 : Email
3 : Add Friend Request
4 : Nothing
5 : Nothing
6 : Nothing
7 : Right Jumping Arrow
8 : RP Icon
9 : $ Icon

"sender" is the very top header. This can be any old string.
"subject" is the header under the sender.
"duration" is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.
"clanTag" shows a crew tag in the "sender" header, after the text. You need to use 3 underscores as padding. Maximum length of this field seems to be 7. (e.g. "MK" becomes "___MK", "ACE" becomes "___ACE", etc.)
iconType2 is a mirror of iconType. It shows in the "subject" line, right under the original iconType.


int IconNotification(char *text, char *text2, char *Subject)
{
    BEGIN_TEXT_COMMAND_THEFEED_POST("STRING");
 ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
   _SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_SOCIAL_CLUB", "CHAR_SOCIAL_CLUB", 1, 7, text2, Subject, 1.0f, "__EXAMPLE", 7);
   return END_TEXT_COMMAND_THEFEED_POST_TICKER(1, 1);
}]=]
	EndTextCommandThefeedPostMessagetextWithCrewTagAndAdditionalIcon=function(txdName--[[@param txdName string]],textureName--[[@param textureName string]],flash--[[@param flash boolean]],iconType1--[[@param iconType1 integer]],sender--[[@param sender string]],subject--[[@param subject string]],duration--[[@param duration number]],clanTag--[[@param clanTag string]],iconType2--[[@param iconType2 integer]],p9--[[@param p9 integer]])return InvokeInt(0x531B84E7DA981FB6,txdName,textureName,flash,iconType1,sender,subject,duration+.0,clanTag,iconType2,p9)end;---@return integer
	EndTextCommandThefeedPostTicker=function(blink--[[@param blink boolean]],p1--[[@param p1 boolean]])return InvokeInt(0x2ED7843F8F801023,blink,p1)end;---@return integer
	EndTextCommandThefeedPostTickerForced=function(blink--[[@param blink boolean]],p1--[[@param p1 boolean]])return InvokeInt(0x44FA03975424A0EE,blink,p1)end;---@return integer
	EndTextCommandThefeedPostTickerWithTokens=function(blink--[[@param blink boolean]],p1--[[@param p1 boolean]])return InvokeInt(0x378E809BF61EC840,blink,p1)end;---@return integer
	--[=[Shows an "award" notification above the minimap, example: https://i.imgur.com/e2DNaKX.png
Example:

HUD::BEGIN_TEXT_COMMAND_THEFEED_POST("HUNT");
HUD::END_TEXT_COMMAND_THEFEED_POST_AWARD("Hunting", "Hunting_Gold_128", 0, 109, "HUD_MED_UNLKED");]=]
	EndTextCommandThefeedPostAward=function(textureDict--[[@param textureDict string]],textureName--[[@param textureName string]],rpBonus--[[@param rpBonus integer]],colorOverlay--[[@param colorOverlay integer]],titleLabel--[[@param titleLabel string]])return InvokeInt(0xAA295B6F28BD587D,textureDict,textureName,rpBonus,colorOverlay,titleLabel)end;---@return integer
	EndTextCommandThefeedPostCrewtag=function(p0--[[@param p0 boolean]],p1--[[@param p1 boolean]],p2--[[@param p2 integer*]],p3--[[@param p3 integer]],isLeader--[[@param isLeader boolean]],unk0--[[@param unk0 boolean]],clanDesc--[[@param clanDesc integer]],R--[[@param R integer]],G--[[@param G integer]],B--[[@param B integer]])return InvokeInt(0x97C9E4E7024A8F2C,p0,p1,p2,p3,isLeader,unk0,clanDesc,R,G,B)end;---@return integer
	EndTextCommandThefeedPostCrewtagWithGameName=function(p0--[[@param p0 boolean]],p1--[[@param p1 boolean]],p2--[[@param p2 integer*]],p3--[[@param p3 integer]],isLeader--[[@param isLeader boolean]],unk0--[[@param unk0 boolean]],clanDesc--[[@param clanDesc integer]],playerName--[[@param playerName string]],R--[[@param R integer]],G--[[@param G integer]],B--[[@param B integer]])return InvokeInt(0x137BC35589E34E1E,p0,p1,p2,p3,isLeader,unk0,clanDesc,playerName,R,G,B)end;---@return integer
	EndTextCommandThefeedPostUnlock=function(gxtLabel1--[[@param gxtLabel1 string]],p1--[[@param p1 integer]],gxtLabel2--[[@param gxtLabel2 string]])return InvokeInt(0x33EE12743CCD6343,gxtLabel1,p1,gxtLabel2)end;---@return integer
	EndTextCommandThefeedPostUnlockTu=function(gxtLabel1--[[@param gxtLabel1 string]],p1--[[@param p1 integer]],gxtLabel2--[[@param gxtLabel2 string]],p3--[[@param p3 integer]])return InvokeInt(0xC8F3AAF93D0600BF,gxtLabel1,p1,gxtLabel2,p3)end;---@return integer
	EndTextCommandThefeedPostUnlockTuWithColor=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]],p5--[[@param p5 any]])return InvokeInt(0x7AE0589093A2E088,p0,p1,p2,p3,p4,p5)end;---@return integer
	EndTextCommandThefeedPostMpticker=function(blink--[[@param blink boolean]],p1--[[@param p1 boolean]])return InvokeInt(0xF020C96915705B3A,blink,p1)end;---@return integer
	EndTextCommandThefeedPostCrewRankupWithLiteralFlag=function(p0--[[@param p0 string]],p1--[[@param p1 string]],p2--[[@param p2 string]],p3--[[@param p3 boolean]],p4--[[@param p4 boolean]])return InvokeInt(0x8EFCCF6EC66D85E4,p0,p1,p2,p3,p4)end;---@return integer
	--[=[This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.

List of picNames: https://pastebin.com/XdpJVbHz
HUD colors and their values: https://pastebin.com/d9aHPbXN

Shows a deathmatch score above the minimap, example: https://i.imgur.com/YmoMklG.png]=]
	EndTextCommandThefeedPostVersusTu=function(txdName1--[[@param txdName1 string]],textureName1--[[@param textureName1 string]],count1--[[@param count1 integer]],txdName2--[[@param txdName2 string]],textureName2--[[@param textureName2 string]],count2--[[@param count2 integer]],hudColor1--[[@param hudColor1 integer]],hudColor2--[[@param hudColor2 integer]])return InvokeInt(0xB6871B0555B02996,txdName1,textureName1,count1,txdName2,textureName2,count2,hudColor1,hudColor2)end;---@return integer
	--[=[returns a notification handle, prints out a notification like below:
type range: 0 - 2
if you set type to 1, image goes from 0 - 39 - Xbox you can add text to

example: 
HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1, 20, "Who you trynna get crazy with, ese? Don't you know I'm LOCO?!");
- https://imgur.com/lGBPCz3]=]
	EndTextCommandThefeedPostReplay=function(type--[[@param type integer]],image--[[@param image integer]],text--[[@param text string]])return InvokeInt(0xD202B92CBF1D816F,type,image,text)end;---@return integer
	--[=[returns a notification handle, prints out a notification like below:
type range: 0 - 2
if you set type to 1, button accepts "~INPUT_SOMETHING~"

example:
HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1, "~INPUT_TALK~", "Who you trynna get crazy with, ese? Don't you know I'm LOCO?!");
- https://imgur.com/UPy0Ial


Examples from the scripts:
l_D1[1/*1*/]=HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1,"~INPUT_REPLAY_START_STOP_RECORDING~","");
l_D1[2/*1*/]=HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1,"~INPUT_SAVE_REPLAY_CLIP~","");
l_D1[1/*1*/]=HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1,"~INPUT_REPLAY_START_STOP_RECORDING~","");
l_D1[2/*1*/]=HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1,"~INPUT_REPLAY_START_STOP_RECORDING_SECONDARY~","");
]=]
	EndTextCommandThefeedPostReplayInput=function(type--[[@param type integer]],button--[[@param button string]],text--[[@param text string]])return InvokeInt(0xDD6CB2CCE7C2735C,type,button,text)end;---@return integer
	--[=[void ShowSubtitle(const char *text)
{
  BEGIN_TEXT_COMMAND_PRINT("STRING");
 ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
   END_TEXT_COMMAND_PRINT(2000, true);
}]=]
	BeginTextCommandPrint=function(GxtEntry--[[@param GxtEntry string]])return InvokeVoid(0xB87A37EEB7FAA67D,GxtEntry)end;
	--[=[Draws the subtitle at middle center of the screen.

int duration = time in milliseconds to show text on screen before disappearing

drawImmediately = If true, the text will be drawn immediately, if false, the text will be drawn after the previous subtitle has finished

Used to be known as _DRAW_SUBTITLE_TIMED]=]
	EndTextCommandPrint=function(duration--[[@param duration integer]],drawImmediately--[[@param drawImmediately boolean]])return InvokeVoid(0x9D77056A530643F6,duration,drawImmediately)end;
	--[=[nothin doin. 

BOOL Message(const char* text)
   {
     BEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED("STRING");
      ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
       return END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED();
   }]=]
	BeginTextCommandIsMessageDisplayed=function(text--[[@param text string]])return InvokeVoid(0x853648FD1063A213,text)end;
	EndTextCommandIsMessageDisplayed=function()return InvokeBool(0x8A9BA1AB3E237613)end;---@return boolean
	--[=[The following were found in the decompiled script files:
STRING, TWOSTRINGS, NUMBER, PERCENTAGE, FO_TWO_NUM, ESMINDOLLA, ESDOLLA, MTPHPER_XPNO, AHD_DIST, CMOD_STAT_0, CMOD_STAT_1, CMOD_STAT_2, CMOD_STAT_3, DFLT_MNU_OPT, F3A_TRAFDEST, ES_HELP_SOC3

ESDOLLA - cash
ESMINDOLLA - cash (negative)

Used to be known as _SET_TEXT_ENTRY]=]
	BeginTextCommandDisplayText=function(text--[[@param text string]])return InvokeVoid(0x25FBB336DF1804CB,text)end;
	--[=[After applying the properties to the text (See HUD::SET_TEXT_), this will draw the text in the applied position. Also 0.0f < x, y < 1.0f, percentage of the axis.

Used to be known as _DRAW_TEXT]=]
	EndTextCommandDisplayText=function(x--[[@param x number]],y--[[@param y number]],p2--[[@param p2 integer]])return InvokeVoid(0xCD015E5BB0D96A57,x+.0,y+.0,p2)end;
	BeginTextCommandGetScreenWidthOfDisplayText=function(text--[[@param text string]])return InvokeVoid(0x54CE8AC98E120CAB,text)end;
	EndTextCommandGetScreenWidthOfDisplayText=function(p0--[[@param p0 boolean]])return InvokeFloat(0x85F061DA64ED2F67,p0)end;---@return number
	--[=[int GetLineCount(char *text, float x, float y)
    {
     BEGIN_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING("STRING");
                ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
      return BEGIN_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING(x, y);
    }]=]
	BeginTextCommandGetNumberOfLinesForString=function(entry--[[@param entry string]])return InvokeVoid(0x521FB041D93DD0E4,entry)end;
	--[=[Determines how many lines the text string will use when drawn on screen. 
Must use 0x521FB041D93DD0E4 for setting up]=]
	EndTextCommandGetNumberOfLinesForString=function(x--[[@param x number]],y--[[@param y number]])return InvokeInt(0x9040DFB09BE75706,x+.0,y+.0)end;---@return integer
	--[=[Used to be known as _SET_TEXT_COMPONENT_FORMAT]=]
	BeginTextCommandDisplayHelp=function(inputType--[[@param inputType string]])return InvokeVoid(0x8509B634FBE7DA11,inputType)end;
	--[=[shape goes from -1 to 50 (may be more).
p0 is always 0.

Example:
void FloatingHelpText(const char* text)
{
    BEGIN_TEXT_COMMAND_DISPLAY_HELP("STRING");
  ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
   END_TEXT_COMMAND_DISPLAY_HELP (0, 0, 1, -1);
}

Image:
- imgbin.org/images/26209.jpg

more inputs/icons:
- https://pastebin.com/nqNYWMSB

Used to be known as _DISPLAY_HELP_TEXT_FROM_STRING_LABEL]=]
	EndTextCommandDisplayHelp=function(p0--[[@param p0 integer]],loop--[[@param loop boolean]],beep--[[@param beep boolean]],shape--[[@param shape integer]])return InvokeVoid(0x238FFE5C7B0498A6,p0,loop,beep,shape)end;
	--[=[BOOL IsContextActive(char *ctx)
    {
     BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(ctx);
     return END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(0);
  }]=]
	BeginTextCommandIsThisHelpMessageBeingDisplayed=function(labelName--[[@param labelName string]])return InvokeVoid(0x0A24DA3A41B718F5,labelName)end;
	EndTextCommandIsThisHelpMessageBeingDisplayed=function(p0--[[@param p0 integer]])return InvokeBool(0x10BDDBFC529428DD,p0)end;---@return boolean
	--[=[Starts a text command to change the name of a blip displayed in the pause menu.
This should be paired with `END_TEXT_COMMAND_SET_BLIP_NAME`, once adding all required text components.
Example:

HUD::BEGIN_TEXT_COMMAND_SET_BLIP_NAME("STRING");
HUD::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("Name");
HUD::END_TEXT_COMMAND_SET_BLIP_NAME(blip);]=]
	BeginTextCommandSetBlipName=function(textLabel--[[@param textLabel string]])return InvokeVoid(0xF9113A30DE5C6670,textLabel)end;
	--[=[Finalizes a text command started with BEGIN_TEXT_COMMAND_SET_BLIP_NAME, setting the name of the specified blip.]=]
	EndTextCommandSetBlipName=function(blip--[[@param blip integer]])return InvokeVoid(0xBC38B49BCB83BC9B,blip)end;
	BeginTextCommandAddDirectlyToPreviousBriefs=function(p0--[[@param p0 string]])return InvokeVoid(0x23D69E0465570028,p0)end;
	EndTextCommandAddDirectlyToPreviousBriefs=function(p0--[[@param p0 boolean]])return InvokeVoid(0xCFDBDF5AE59BA0F4,p0)end;
	--[=[clears a print text command with this text]=]
	BeginTextCommandClearPrint=function(text--[[@param text string]])return InvokeVoid(0xE124FA80A759019C,text)end;
	EndTextCommandClearPrint=function()return InvokeVoid(0xFCC75460ABA29378)end;
	BeginTextCommandOverrideButtonText=function(gxtEntry--[[@param gxtEntry string]])return InvokeVoid(0x8F9EE5687F8EECCD,gxtEntry)end;
	EndTextCommandOverrideButtonText=function(p0--[[@param p0 integer]])return InvokeVoid(0xA86911979638106F,p0)end;
	AddTextComponentInteger=function(value--[[@param value integer]])return InvokeVoid(0x03B504CF259931BC,value)end;
	AddTextComponentFloat=function(value--[[@param value number]],decimalPlaces--[[@param decimalPlaces integer]])return InvokeVoid(0xE7DCB5B874BCD96E,value+.0,decimalPlaces)end;
	AddTextComponentSubstringTextLabel=function(labelName--[[@param labelName string]])return InvokeVoid(0xC63CD5D2920ACBE7,labelName)end;
	--[=[It adds the localized text of the specified GXT entry name. Eg. if the argument is GET_HASH_KEY("ES_HELP"), adds "Continue". Just uses a text labels hash key]=]
	AddTextComponentSubstringTextLabelHashKey=function(gxtEntryHash--[[@param gxtEntryHash integer]])return InvokeVoid(0x17299B63C7683A2B,gxtEntryHash)end;
	AddTextComponentSubstringBlipName=function(blip--[[@param blip integer]])return InvokeVoid(0x80EAD8E2E1D5D52E,blip)end;
	AddTextComponentSubstringPlayerName=function(text--[[@param text string]])return InvokeVoid(0x6C188BE134E074AA,text)end;
	--[=[Adds a timer (e.g. "00:00:00:000"). The appearance of the timer depends on the flags, which needs more research.]=]
	AddTextComponentSubstringTime=function(timestamp--[[@param timestamp integer]],flags--[[@param flags integer]])return InvokeVoid(0x1115F16B8AB9E8BF,timestamp,flags)end;
	AddTextComponentFormattedInteger=function(value--[[@param value integer]],commaSeparated--[[@param commaSeparated boolean]])return InvokeVoid(0x0E4C749FF9DE9CC4,value,commaSeparated)end;
	--[=[p1 was always -1]=]
	AddTextComponentSubstringPhoneNumber=function(p0--[[@param p0 string]],p1--[[@param p1 integer]])return InvokeVoid(0x761B77454205A61D,p0,p1)end;
	--[=[This native (along with ADD_TEXT_COMPONENT_SUBSTRING_KEYBOARD_DISPLAY and ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME) do not actually filter anything. They simply add the provided text (as of 944)]=]
	AddTextComponentSubstringWebsite=function(website--[[@param website string]])return InvokeVoid(0x94CF4AC034C9C986,website)end;
	AddTextComponentSubstringKeyboardDisplay=function(string--[[@param string string]])return InvokeVoid(0x5F68520888E69014,string)end;
	SetColourOfNextTextComponent=function(hudColor--[[@param hudColor integer]])return InvokeVoid(0x39BBF623FC803EAC,hudColor)end;
	--[=[Returns a substring of a specified length starting at a specified position.

Example:
// Get "STRING" text from "MY_STRING"
subStr = HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME("MY_STRING", 3, 6);]=]
	GetCharacterFromAudioConversationFilename=function(text--[[@param text string]],position--[[@param position integer]],length--[[@param length integer]])return InvokeString(0x169BD9382084C8C0,text,position,length)end;---@return string
	--[=[Returns a substring of a specified length starting at a specified position. The result is guaranteed not to exceed the specified max length.

NOTE: The 'maxLength' parameter might actually be the size of the buffer that is returned. More research is needed. -CL69

Example:
// Condensed example of how Rockstar uses this function
strLen = HUD::GET_LENGTH_OF_LITERAL_STRING(MISC::GET_ONSCREEN_KEYBOARD_RESULT());
subStr = HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_WITH_BYTE_LIMIT(MISC::GET_ONSCREEN_KEYBOARD_RESULT(), 0, strLen, 63);

--

"fm_race_creator.ysc", line 85115:
// parameters modified for clarity
BOOL sub_8e5aa(char *text, int length) {
    for (i = 0; i <= (length - 2); i += 1) {
        if (!MISC::ARE_STRINGS_EQUAL(HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_WITH_BYTE_LIMIT(text, i, i + 1, 1), " ")) {
            return FALSE;
        }
    }
    return TRUE;
}]=]
	GetCharacterFromAudioConversationFilenameWithByteLimit=function(text--[[@param text string]],position--[[@param position integer]],length--[[@param length integer]],maxLength--[[@param maxLength integer]])return InvokeString(0xB2798643312205C5,text,position,length,maxLength)end;---@return string
	--[=[Returns a substring that is between two specified positions. The length of the string will be calculated using (endPosition - startPosition).

Example:
// Get "STRING" text from "MY_STRING"
subStr = HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_BYTES("MY_STRING", 3, 9);
// Overflows are possibly replaced with underscores (needs verification)
subStr = HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_BYTES("MY_STRING", 3, 10); // "STRING_"?]=]
	GetCharacterFromAudioConversationFilenameBytes=function(text--[[@param text string]],startPosition--[[@param startPosition integer]],endPosition--[[@param endPosition integer]])return InvokeString(0xCE94AEBA5D82908A,text,startPosition,endPosition)end;---@return string
	--[=[Gets a localized string literal from a label name. Can be used for output of e.g. VEHICLE::GET_LIVERY_NAME. To check if a GXT label can be localized with this, HUD::DOES_TEXT_LABEL_EXIST can be used.]=]
	GetFilenameForAudioConversation=function(labelName--[[@param labelName string]])return InvokeString(0x7B5280EBA9840C72,labelName)end;---@return string
	ClearPrints=function()return InvokeVoid(0xCC33FA791322B9D9)end;
	ClearBrief=function()return InvokeVoid(0x9D292F73ADBD9313)end;
	ClearAllHelpMessages=function()return InvokeVoid(0x6178F68A87A4D3A0)end;
	--[=[p0: found arguments in the b617d scripts: https://pastebin.com/X5akCN7z]=]
	ClearThisPrint=function(p0--[[@param p0 string]])return InvokeVoid(0xCF708001E1E536DD,p0)end;
	ClearSmallPrints=function()return InvokeVoid(0x2CEA2839313C09AC)end;
	DoesTextBlockExist=function(gxt--[[@param gxt string]])return InvokeBool(0x1C7302E725259789,gxt)end;---@return boolean
	--[=[Request a gxt into the passed slot.]=]
	RequestAdditionalText=function(gxt--[[@param gxt string]],slot--[[@param slot integer]])return InvokeVoid(0x71A78003C8E71424,gxt,slot)end;
	RequestAdditionalTextForDlc=function(gxt--[[@param gxt string]],slot--[[@param slot integer]])return InvokeVoid(0x6009F9F1AE90D8A6,gxt,slot)end;
	HasAdditionalTextLoaded=function(slot--[[@param slot integer]])return InvokeBool(0x02245FE4BED318B8,slot)end;---@return boolean
	ClearAdditionalText=function(p0--[[@param p0 integer]],p1--[[@param p1 boolean]])return InvokeVoid(0x2A179DF17CCF04CD,p0,p1)end;
	IsStreamingAdditionalText=function(p0--[[@param p0 integer]])return InvokeBool(0x8B6817B71B85EBF0,p0)end;---@return boolean
	--[=[Checks if the specified gxt has loaded into the passed slot.]=]
	HasThisAdditionalTextLoaded=function(gxt--[[@param gxt string]],slot--[[@param slot integer]])return InvokeBool(0xADBF060E2B30C5BC,gxt,slot)end;---@return boolean
	IsMessageBeingDisplayed=function()return InvokeBool(0x7984C03AA5CC2F41)end;---@return boolean
	--[=[Checks if the passed gxt name exists in the game files.]=]
	DoesTextLabelExist=function(gxt--[[@param gxt string]])return InvokeBool(0xAC09CA973C564252,gxt)end;---@return boolean
	GetFirstNCharactersOfLiteralString=function(string--[[@param string string]],length--[[@param length integer]])return InvokeString(0x98C3CF913D895111,string,length)end;---@return string
	--[=[Returns the string length of the string from the gxt string .]=]
	GetLengthOfStringWithThisTextLabel=function(gxt--[[@param gxt string]])return InvokeInt(0x801BD273D3A23F74,gxt)end;---@return integer
	--[=[Returns the length of the string passed (much like strlen).]=]
	GetLengthOfLiteralString=function(string--[[@param string string]])return InvokeInt(0xF030907CCBB8A9FD,string)end;---@return integer
	GetLengthOfLiteralStringInBytes=function(string--[[@param string string]])return InvokeInt(0x43E4111189E54F0E,string)end;---@return integer
	--[=[This functions converts the hash of a street name into a readable string.

For how to get the hashes, see PATHFIND::GET_STREET_NAME_AT_COORD.]=]
	GetStreetNameFromHashKey=function(hash--[[@param hash integer]])return InvokeString(0xD0EF8A959B8A4CB9,hash)end;---@return string
	IsHudPreferenceSwitchedOn=function()return InvokeBool(0x1930DFA731813EC4)end;---@return boolean
	IsRadarPreferenceSwitchedOn=function()return InvokeBool(0x9EB6522EA68F22FE)end;---@return boolean
	IsSubtitlePreferenceSwitchedOn=function()return InvokeBool(0xAD6DACA4BA53E0A4)end;---@return boolean
	--[=[If Hud should be displayed]=]
	DisplayHud=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xA6294919E56FF02A,toggle)end;
	--[=[Enables drawing some hud components, such as help labels, this frame, when the player is dead.]=]
	DisplayHudWhenNotInStateOfPlayThisFrame=function()return InvokeVoid(0x7669F9E39DC17063)end;
	DisplayHudWhenPausedThisFrame=function()return InvokeVoid(0x402F9ED62087E898)end;
	--[=[If Minimap / Radar should be displayed.]=]
	DisplayRadar=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xA0EBB943C300E693,toggle)end;
	--[=[Setter for GET_FAKE_SPECTATOR_MODE]=]
	SetFakeSpectatorMode=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xCD74233600C4EA6B,toggle)end;
	--[=[Getter for SET_FAKE_SPECTATOR_MODE]=]
	GetFakeSpectatorMode=function()return InvokeBool(0xC2D2AD9EAAE265B8)end;---@return boolean
	IsHudHidden=function()return InvokeBool(0xA86478C6958735C5)end;---@return boolean
	IsRadarHidden=function()return InvokeBool(0x157F93B036700462)end;---@return boolean
	IsMinimapRendering=function()return InvokeBool(0xAF754F20EB5CD51A)end;---@return boolean
	UseVehicleTargetingReticule=function(p0--[[@param p0 any]])return InvokeVoid(0x0C698D8F099174C7,p0)end;
	AddValidVehicleHitHash=function(p0--[[@param p0 any]])return InvokeVoid(0xE4C3B169876D33D7,p0)end;
	ClearValidVehicleHitHashes=function()return InvokeVoid(0xEB81A3DADD503187)end;
	--[=[Enable / disable showing route for the Blip-object.]=]
	SetBlipRoute=function(blip--[[@param blip integer]],enabled--[[@param enabled boolean]])return InvokeVoid(0x4F7D8A9BFB0B43E9,blip,enabled)end;
	ClearAllBlipRoutes=function()return InvokeVoid(0xD12882D3FF82BF11)end;
	SetBlipRouteColour=function(blip--[[@param blip integer]],colour--[[@param colour integer]])return InvokeVoid(0x837155CD2F63DA09,blip,colour)end;
	SetForceShowGps=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x2790F4B17D098E26,toggle)end;
	SetUseSetDestinationInPauseMap=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x6CDD58146A436083,toggle)end;
	SetBlockWantedFlash=function(disabled--[[@param disabled boolean]])return InvokeVoid(0xD1942374085C8469,disabled)end;
	AddNextMessageToPreviousBriefs=function(p0--[[@param p0 boolean]])return InvokeVoid(0x60296AF4BA14ABC5,p0)end;
	ForceNextMessageToPreviousBriefsList=function(p0--[[@param p0 integer]])return InvokeVoid(0x57D760D55F54E071,p0)end;
	--[=[zoom ranges from 0 to 90f in R* Scripts]=]
	SetRadarZoomPrecise=function(zoom--[[@param zoom number]])return InvokeVoid(0xBD12C5EEE184C337,zoom+.0)end;
	--[=[zoomLevel ranges from 0 to 1400 in R* Scripts]=]
	SetRadarZoom=function(zoomLevel--[[@param zoomLevel integer]])return InvokeVoid(0x096EF57A0C999BBA,zoomLevel)end;
	SetRadarZoomToBlip=function(blip--[[@param blip integer]],zoom--[[@param zoom number]])return InvokeVoid(0xF98E4B3E56AFC7B1,blip,zoom+.0)end;
	SetRadarZoomToDistance=function(zoom--[[@param zoom number]])return InvokeVoid(0xCB7CC0D58405AD41,zoom+.0)end;
	--[=[Does nothing (it's a nullsub).]=]
	UpdateRadarZoomToBlip=function()return InvokeVoid(0xD2049635DEB9C375)end;
	GetHudColour=function(hudColorIndex--[[@param hudColorIndex integer]],r--[[@param r integer*]],g--[[@param g integer*]],b--[[@param b integer*]],a--[[@param a integer*]])return InvokeVoid(0x7C9C91AB74A0360F,hudColorIndex,r,g,b,a)end;
	--[=[Sets the color of HUD_COLOUR_SCRIPT_VARIABLE]=]
	SetScriptVariableHudColour=function(r--[[@param r integer]],g--[[@param g integer]],b--[[@param b integer]],a--[[@param a integer]])return InvokeVoid(0xD68A5FF8A3A89874,r,g,b,a)end;
	--[=[Sets the color of HUD_COLOUR_SCRIPT_VARIABLE_2]=]
	SetSecondScriptVariableHudColour=function(r--[[@param r integer]],g--[[@param g integer]],b--[[@param b integer]],a--[[@param a integer]])return InvokeVoid(0x16A304E6CB2BFAB9,r,g,b,a)end;
	--[=[makes hudColorIndex2 color into hudColorIndex color]=]
	ReplaceHudColour=function(hudColorIndex--[[@param hudColorIndex integer]],hudColorIndex2--[[@param hudColorIndex2 integer]])return InvokeVoid(0x1CCC708F0F850613,hudColorIndex,hudColorIndex2)end;
	ReplaceHudColourWithRgba=function(hudColorIndex--[[@param hudColorIndex integer]],r--[[@param r integer]],g--[[@param g integer]],b--[[@param b integer]],a--[[@param a integer]])return InvokeVoid(0xF314CF4F0211894E,hudColorIndex,r,g,b,a)end;
	SetAbilityBarVisibility=function(visible--[[@param visible boolean]])return InvokeVoid(0x1DFEDD15019315A9,visible)end;
	SetAllowAbilityBar=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x889329C80FE5963C,toggle)end;
	FlashAbilityBar=function(millisecondsToFlash--[[@param millisecondsToFlash integer]])return InvokeVoid(0x02CFBA0C9E9275CE,millisecondsToFlash)end;
	SetAbilityBarValue=function(p0--[[@param p0 number]],p1--[[@param p1 number]])return InvokeVoid(0x9969599CCFF5D85E,p0+.0,p1+.0)end;
	FlashWantedDisplay=function(p0--[[@param p0 boolean]])return InvokeVoid(0xA18AFB39081B6A1F,p0)end;
	ForceOffWantedStarFlash=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xBA8D65C1C65702E5,toggle)end;
	SetCustomMpHudColor=function(hudColorId--[[@param hudColorId integer]])return InvokeVoid(0x2ACCB195F3CCD9DE,hudColorId)end;
	--[=[This gets the height of the FONT and not the total text. You need to get the number of lines your text uses, and get the height of a newline (I'm using a smaller value) to get the total text height.]=]
	GetRenderedCharacterHeight=function(size--[[@param size number]],font--[[@param font integer]])return InvokeFloat(0xDB88A37483346780,size+.0,font)end;---@return number
	--[=[Size range : 0F to 1.0F
p0 is unknown and doesn't seem to have an effect, yet in the game scripts it changes to 1.0F sometimes.]=]
	SetTextScale=function(scale--[[@param scale number]],size--[[@param size number]])return InvokeVoid(0x07C837F9A01C34C9,scale+.0,size+.0)end;
	--[=[colors you input not same as you think?
A: for some reason its R B G A]=]
	SetTextColour=function(red--[[@param red integer]],green--[[@param green integer]],blue--[[@param blue integer]],alpha--[[@param alpha integer]])return InvokeVoid(0xBE6B23FFA53FB442,red,green,blue,alpha)end;
	SetTextCentre=function(align--[[@param align boolean]])return InvokeVoid(0xC02F4DBFB51D988B,align)end;
	SetTextRightJustify=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x6B3C4650BC8BEE47,toggle)end;
	--[=[Types -
0: Center-Justify
1: Left-Justify
2: Right-Justify

Right-Justify requires SET_TEXT_WRAP, otherwise it will draw to the far right of the screen]=]
	SetTextJustification=function(justifyType--[[@param justifyType integer]])return InvokeVoid(0x4E096588B13FFECA,justifyType)end;
	--[=[It sets the text in a specified box and wraps the text if it exceeds the boundries. Both values are for X axis. Useful when positioning text set to center or aligned to the right.

start - left boundry on screen position (0.0 - 1.0)
end - right boundry on screen position (0.0 - 1.0)]=]
	SetTextWrap=function(start--[[@param start number]],end_--[[@param end_ number]])return InvokeVoid(0x63145D9C883A1A70,start+.0,end_+.0)end;
	SetTextLeading=function(p0--[[@param p0 integer]])return InvokeVoid(0xA50ABC31E3CDFAFF,p0)end;
	--[=[This native does absolutely nothing, just a nullsub]=]
	SetTextProportional=function(p0--[[@param p0 boolean]])return InvokeVoid(0x038C1F517D7FDCF8,p0)end;
	--[=[fonts that mess up your text where made for number values/misc stuff]=]
	SetTextFont=function(fontType--[[@param fontType integer]])return InvokeVoid(0x66E0276CC5F6B9DA,fontType)end;
	SetTextDropShadow=function()return InvokeVoid(0x1CA3E9EAC9D93E5E)end;
	--[=[distance - shadow distance in pixels, both horizontal and vertical
r, g, b, a - color]=]
	SetTextDropshadow=function(distance--[[@param distance integer]],r--[[@param r integer]],g--[[@param g integer]],b--[[@param b integer]],a--[[@param a integer]])return InvokeVoid(0x465C84BC39F1C351,distance,r,g,b,a)end;
	SetTextOutline=function()return InvokeVoid(0x2513DFB0FB8400FE)end;
	--[=[This native does absolutely nothing, just a nullsub]=]
	SetTextEdge=function(p0--[[@param p0 integer]],r--[[@param r integer]],g--[[@param g integer]],b--[[@param b integer]],a--[[@param a integer]])return InvokeVoid(0x441603240D202FA6,p0,r,g,b,a)end;
	SetTextRenderId=function(renderId--[[@param renderId integer]])return InvokeVoid(0x5F15302936E07111,renderId)end;
	--[=[This function is hard-coded to always return 1.]=]
	GetDefaultScriptRendertargetRenderId=function()return InvokeInt(0x52F0982D7FD156B6)end;---@return integer
	RegisterNamedRendertarget=function(name--[[@param name string]],p1--[[@param p1 boolean]])return InvokeBool(0x57D9C12635E25CE3,name,p1)end;---@return boolean
	IsNamedRendertargetRegistered=function(name--[[@param name string]])return InvokeBool(0x78DCDC15C9F116B4,name)end;---@return boolean
	ReleaseNamedRendertarget=function(name--[[@param name string]])return InvokeBool(0xE9F6FFE837354DD4,name)end;---@return boolean
	LinkNamedRendertarget=function(modelHash--[[@param modelHash integer]])return InvokeVoid(0xF6C09E276AEB3F2D,modelHash)end;
	GetNamedRendertargetRenderId=function(name--[[@param name string]])return InvokeInt(0x1A6478B61C6BDC3B,name)end;---@return integer
	IsNamedRendertargetLinked=function(modelHash--[[@param modelHash integer]])return InvokeBool(0x113750538FA31298,modelHash)end;---@return boolean
	ClearHelp=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x8DFCED7A656F8802,toggle)end;
	IsHelpMessageOnScreen=function()return InvokeBool(0xDAD37F45428801AE)end;---@return boolean
	HasScriptHiddenHelpThisFrame=function()return InvokeBool(0x214CD562A939246A)end;---@return boolean
	IsHelpMessageBeingDisplayed=function()return InvokeBool(0x4D79439A6B55AC67)end;---@return boolean
	IsHelpMessageFadingOut=function()return InvokeBool(0x327EDEEEAC55C369)end;---@return boolean
	SetHelpMessageStyle=function(style--[[@param style integer]],hudColor--[[@param hudColor integer]],alpha--[[@param alpha integer]],p3--[[@param p3 integer]],p4--[[@param p4 integer]])return InvokeVoid(0xB9C362BABECDDC7A,style,hudColor,alpha,p3,p4)end;
	GetStandardBlipEnumId=function()return InvokeInt(0x4A9923385BDB9DAD)end;---@return integer
	GetWaypointBlipEnumId=function()return InvokeInt(0x186E5D252FA50E7D)end;---@return integer
	GetNumberOfActiveBlips=function()return InvokeInt(0x9A3FF3DE163034E8)end;---@return integer
	GetNextBlipInfoId=function(blipSprite--[[@param blipSprite integer]])return InvokeInt(0x14F96AA50D6FBEA7,blipSprite)end;---@return integer
	GetFirstBlipInfoId=function(blipSprite--[[@param blipSprite integer]])return InvokeInt(0x1BEDE233E6CD2A1F,blipSprite)end;---@return integer
	GetClosestBlipInfoId=function(blipSprite--[[@param blipSprite integer]])return InvokeInt(0xD484BF71050CA1EE,blipSprite)end;---@return integer
	GetBlipInfoIdCoord=function(blip--[[@param blip integer]])return InvokeV3(0xFA7C7F0AADF25D09,blip)end;---@return V3
	GetBlipInfoIdDisplay=function(blip--[[@param blip integer]])return InvokeInt(0x1E314167F701DC3B,blip)end;---@return integer
	--[=[Returns a value based on what the blip is attached to
1 - Vehicle
2 - Ped
3 - Object
4 - Coord
5 - unk
6 - Pickup
7 - Radius]=]
	GetBlipInfoIdType=function(blip--[[@param blip integer]])return InvokeInt(0xBE9B0959FFD0779B,blip)end;---@return integer
	GetBlipInfoIdEntityIndex=function(blip--[[@param blip integer]])return InvokeInt(0x4BA4E2553AFEDC2C,blip)end;---@return integer
	--[=[This function is hard-coded to always return 0.]=]
	GetBlipInfoIdPickupIndex=function(blip--[[@param blip integer]])return InvokeInt(0x9B6786E4C03DD382,blip)end;---@return integer
	--[=[Returns the Blip handle of given Entity.]=]
	GetBlipFromEntity=function(entity--[[@param entity integer]])return InvokeInt(0xBC8DBDCA2436F7E8,entity)end;---@return integer
	AddBlipForRadius=function(posX--[[@param posX number]],posY--[[@param posY number]],posZ--[[@param posZ number]],radius--[[@param radius number]])return InvokeInt(0x46818D79B1F7499A,posX+.0,posY+.0,posZ+.0,radius+.0)end;---@return integer
	--[=[Adds a rectangular blip for the specified coordinates/area.

It is recommended to use SET_BLIP_ROTATION and SET_BLIP_COLOUR to make the blip not rotate along with the camera.

By default, the blip will show as a _regular_ blip with the specified color/sprite if it is outside of the minimap view.

Example image:
minimap https://w.wew.wtf/pdcjig.png
big map https://w.wew.wtf/zgcjcm.png

(Native name is _likely_ to actually be ADD_BLIP_FOR_AREA, but due to the usual reasons this can't be confirmed)]=]
	AddBlipForArea=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],width--[[@param width number]],height--[[@param height number]])return InvokeInt(0xCE5D0E5E315DB238,x+.0,y+.0,z+.0,width+.0,height+.0)end;---@return integer
	--[=[Returns red ( default ) blip attached to entity.

Example:
Blip blip; //Put this outside your case or option
blip = HUD::ADD_BLIP_FOR_ENTITY(YourPedOrBodyguardName);
HUD::SET_BLIP_AS_FRIENDLY(blip, true);]=]
	AddBlipForEntity=function(entity--[[@param entity integer]])return InvokeInt(0x5CDE92C702A8FCE7,entity)end;---@return integer
	AddBlipForPickup=function(pickup--[[@param pickup integer]])return InvokeInt(0xBE339365C863BD36,pickup)end;---@return integer
	--[=[Creates an orange ( default ) Blip-object. Returns a Blip-object which can then be modified.]=]
	AddBlipForCoord=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeInt(0x5A039BB0BCA604B6,x+.0,y+.0,z+.0)end;---@return integer
	TriggerSonarBlip=function(posX--[[@param posX number]],posY--[[@param posY number]],posZ--[[@param posZ number]],radius--[[@param radius number]],p4--[[@param p4 integer]])return InvokeVoid(0x72DD432F3CDFC0EE,posX+.0,posY+.0,posZ+.0,radius+.0,p4)end;
	AllowSonarBlips=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x60734CC207C9833C,toggle)end;
	SetBlipCoords=function(blip--[[@param blip integer]],posX--[[@param posX number]],posY--[[@param posY number]],posZ--[[@param posZ number]])return InvokeVoid(0xAE2AF67E9D9AF65D,blip,posX+.0,posY+.0,posZ+.0)end;
	GetBlipCoords=function(blip--[[@param blip integer]])return InvokeV3(0x586AFE3FF72D996E,blip)end;---@return V3
	--[=[Sets the displayed sprite for a specific blip..

You may have your own list, but since dev-c didn't show it I was bored and started looking through scripts and functions to get a presumable almost positive list of a majority of blip IDs
https://pastebin.com/Bpj9Sfft

Blips Images + IDs:
https://gtaxscripting.blogspot.com/2016/05/gta-v-blips-id-and-image.html]=]
	SetBlipSprite=function(blip--[[@param blip integer]],spriteId--[[@param spriteId integer]])return InvokeVoid(0xDF735600A4696DAF,blip,spriteId)end;
	--[=[Blips Images + IDs:
gtaxscripting.blogspot.com/2016/05/gta-v-blips-id-and-image.html]=]
	GetBlipSprite=function(blip--[[@param blip integer]])return InvokeInt(0x1FC877464A04FC4F,blip)end;---@return integer
	SetCopBlipSprite=function(p0--[[@param p0 integer]],p1--[[@param p1 number]])return InvokeVoid(0x9FCB3CBFB3EAD69A,p0,p1+.0)end;
	SetCopBlipSpriteAsStandard=function()return InvokeVoid(0xB7B873520C84C118)end;
	--[=[Doesn't work if the label text of gxtEntry is >= 80.]=]
	SetBlipNameFromTextFile=function(blip--[[@param blip integer]],gxtEntry--[[@param gxtEntry string]])return InvokeVoid(0xEAA0FFE120D92784,blip,gxtEntry)end;
	SetBlipNameToPlayerName=function(blip--[[@param blip integer]],player--[[@param player integer]])return InvokeVoid(0x127DE7B20C60A6A3,blip,player)end;
	--[=[Sets alpha-channel for blip color.

Example:

Blip blip = HUD::ADD_BLIP_FOR_ENTITY(entity);
HUD::SET_BLIP_COLOUR(blip , 3);
HUD::SET_BLIP_ALPHA(blip , 64);
]=]
	SetBlipAlpha=function(blip--[[@param blip integer]],alpha--[[@param alpha integer]])return InvokeVoid(0x45FF974EEE1C8734,blip,alpha)end;
	GetBlipAlpha=function(blip--[[@param blip integer]])return InvokeInt(0x970F608F0EE6C885,blip)end;---@return integer
	SetBlipFade=function(blip--[[@param blip integer]],opacity--[[@param opacity integer]],duration--[[@param duration integer]])return InvokeVoid(0x2AEE8F8390D2298C,blip,opacity,duration)end;
	--[=[Returns -1, 0, +1, depending on if the blip is fading out, doing nothing, or fading in respectively.]=]
	GetBlipFadeDirection=function(blip--[[@param blip integer]])return InvokeInt(0x2C173AE2BDB9385E,blip)end;---@return integer
	--[=[After some testing, looks like you need to use CEIL() on the rotation (vehicle/ped heading) before using it there.]=]
	SetBlipRotation=function(blip--[[@param blip integer]],rotation--[[@param rotation integer]])return InvokeVoid(0xF87683CDF73C3F6E,blip,rotation)end;
	--[=[Does not require whole number/integer rotations.]=]
	SetBlipRotationWithFloat=function(blip--[[@param blip integer]],heading--[[@param heading number]])return InvokeVoid(0xA8B6AFDAC320AC87,blip,heading+.0)end;
	GetBlipRotation=function(blip--[[@param blip integer]])return InvokeInt(0x003E92BA477F9D7F,blip)end;---@return integer
	--[=[Adds up after viewing multiple R* scripts. I believe that the duration is in miliseconds.]=]
	SetBlipFlashTimer=function(blip--[[@param blip integer]],duration--[[@param duration integer]])return InvokeVoid(0xD3CD6FD297AE87CC,blip,duration)end;
	SetBlipFlashInterval=function(blip--[[@param blip integer]],p1--[[@param p1 any]])return InvokeVoid(0xAA51DB313C010A7E,blip,p1)end;
	--[=[https://gtaforums.com/topic/864881-all-blip-color-ids-pictured/]=]
	SetBlipColour=function(blip--[[@param blip integer]],color--[[@param color integer]])return InvokeVoid(0x03D7FB09E75D6B7E,blip,color)end;
	--[=[Can be used to give blips any RGB colour with SET_BLIP_COLOUR(blip, 84).]=]
	SetBlipSecondaryColour=function(blip--[[@param blip integer]],r--[[@param r integer]],g--[[@param g integer]],b--[[@param b integer]])return InvokeVoid(0x14892474891E09EB,blip,r,g,b)end;
	GetBlipColour=function(blip--[[@param blip integer]])return InvokeInt(0xDF729E8D20CF7327,blip)end;---@return integer
	GetBlipHudColour=function(blip--[[@param blip integer]])return InvokeInt(0x729B5F1EFBC0AAEE,blip)end;---@return integer
	IsBlipShortRange=function(blip--[[@param blip integer]])return InvokeBool(0xDA5F8727EB75B926,blip)end;---@return boolean
	IsBlipOnMinimap=function(blip--[[@param blip integer]])return InvokeBool(0xE41CA53051197A27,blip)end;---@return boolean
	DoesBlipHaveGpsRoute=function(blip--[[@param blip integer]])return InvokeBool(0xDD2238F57B977751,blip)end;---@return boolean
	SetBlipHiddenOnLegend=function(blip--[[@param blip integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x54318C915D27E4CE,blip,toggle)end;
	SetBlipHighDetail=function(blip--[[@param blip integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xE2590BC29220CEBB,blip,toggle)end;
	SetBlipAsMissionCreatorBlip=function(blip--[[@param blip integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x24AC0137444F9FD5,blip,toggle)end;
	IsMissionCreatorBlip=function(blip--[[@param blip integer]])return InvokeBool(0x26F49BF3381D933D,blip)end;---@return boolean
	GetNewSelectedMissionCreatorBlip=function()return InvokeInt(0x5C90988E7C8E1AF4)end;---@return integer
	IsHoveringOverMissionCreatorBlip=function()return InvokeBool(0x4167EFE0527D706E)end;---@return boolean
	ShowStartMissionInstructionalButton=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xF1A6C18B35BCADE6,toggle)end;
	ShowContactInstructionalButton=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xC772A904CDE1186F,toggle)end;
	ReloadMapMenu=function()return InvokeVoid(0x2916A928514C9827)end;
	SetBlipMarkerLongDistance=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0xB552929B85FC27EC,p0,p1)end;
	SetBlipFlashes=function(blip--[[@param blip integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xB14552383D39CE3E,blip,toggle)end;
	SetBlipFlashesAlternate=function(blip--[[@param blip integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x2E8D9498C56DD0D1,blip,toggle)end;
	IsBlipFlashing=function(blip--[[@param blip integer]])return InvokeBool(0xA5E41FD83AD6CEF0,blip)end;---@return boolean
	--[=[Sets whether or not the specified blip should only be displayed when nearby, or on the minimap.]=]
	SetBlipAsShortRange=function(blip--[[@param blip integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xBE8BE4FE60E27B72,blip,toggle)end;
	SetBlipScale=function(blip--[[@param blip integer]],scale--[[@param scale number]])return InvokeVoid(0xD38744167B2FA257,blip,scale+.0)end;
	--[=[See https://imgur.com/a/lLkEsMN]=]
	SetBlipScale2d=function(blip--[[@param blip integer]],xScale--[[@param xScale number]],yScale--[[@param yScale number]])return InvokeVoid(0xCD6524439909C979,blip,xScale+.0,yScale+.0)end;
	--[=[See this topic for more details : gtaforums.com/topic/717612-v-scriptnative-documentation-and-research/page-35?p=1069477935]=]
	SetBlipPriority=function(blip--[[@param blip integer]],priority--[[@param priority integer]])return InvokeVoid(0xAE9FC9EF6A9FAC79,blip,priority)end;
	--[=[Display Id behaviours:
0 = Doesn't show up, ever, anywhere.
1 = Doesn't show up, ever, anywhere.
2 = Shows on both main map and minimap. (Selectable on map)
3 = Shows on main map only. (Selectable on map)
4 = Shows on main map only. (Selectable on map)
5 = Shows on minimap only.
6 = Shows on both main map and minimap. (Selectable on map)
7 = Doesn't show up, ever, anywhere.
8 = Shows on both main map and minimap. (Not selectable on map)
9 = Shows on minimap only.
10 = Shows on both main map and minimap. (Not selectable on map)

Anything higher than 10 seems to be exactly the same as 10.]=]
	SetBlipDisplay=function(blip--[[@param blip integer]],displayId--[[@param displayId integer]])return InvokeVoid(0x9029B2F3DA924928,blip,displayId)end;
	--[=[Example: https://i.imgur.com/skY6vAJ.png

Index:
1 = No distance shown in legend
2 = Distance shown in legend
7 = "Other Players" category, also shows distance in legend
10 = "Property" category
11 = "Owned Property" category

Any other value behaves like index = 1, index wraps around after 255
Blips with categories 7, 10 or 11 will all show under the specific categories listing in the map legend, regardless of sprite or name.
Legend entries:
7 = Other Players (BLIP_OTHPLYR)
10 = Property (BLIP_PROPCAT)
11 = Owned Property (BLIP_APARTCAT)

Category needs to be `7` in order for blip names to show on the expanded minimap when using DISPLAY_PLAYER_NAME_TAGS_ON_BLIPS.]=]
	SetBlipCategory=function(blip--[[@param blip integer]],index--[[@param index integer]])return InvokeVoid(0x234CDD44D996FD9A,blip,index)end;
	--[=[In the C++ SDK, this seems not to work-- the blip isn't removed immediately. I use it for saving cars.

E.g.:

Ped pped = PLAYER::PLAYER_PED_ID();
Vehicle v = PED::GET_VEHICLE_PED_IS_USING(pped);
Blip b = HUD::ADD_BLIP_FOR_ENTITY(v);

works fine.
But later attempting to delete it with:

Blip b = HUD::GET_BLIP_FROM_ENTITY(v);
if (HUD::DOES_BLIP_EXIST(b)) HUD::REMOVE_BLIP(&b);

doesn't work. And yes, doesn't work without the DOES_BLIP_EXIST check either. Also, if you attach multiple blips to the same thing (say, a vehicle), and that thing disappears, the blips randomly attach to other things (in my case, a vehicle).

Thus for me, HUD::REMOVE_BLIP(&b) only works if there's one blip, (in my case) the vehicle is marked as no longer needed, you drive away from it and it eventually despawns, AND there is only one blip attached to it. I never intentionally attach multiple blips but if the user saves the car, this adds a blip. Then if they delete it, it is supposed to remove the blip, but it doesn't. Then they can immediately save it again, causing another blip to re-appear.
-------------

Passing the address of the variable instead of the value works for me.
e.g.
int blip = HUD::ADD_BLIP_FOR_ENTITY(ped);
HUD::REMOVE_BLIP(&blip);


Remove blip will currently crash your game, just artificially remove the blip by setting the sprite to a id that is 'invisible'.]=]
	RemoveBlip=function(blip--[[@param blip integer*]])return InvokeVoid(0x86A652570E5F25DD,blip)end;
	--[=[false for enemy
true for friendly]=]
	SetBlipAsFriendly=function(blip--[[@param blip integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x6F6F290102C02AB4,blip,toggle)end;
	PulseBlip=function(blip--[[@param blip integer]])return InvokeVoid(0x742D6FD43115AF73,blip)end;
	ShowNumberOnBlip=function(blip--[[@param blip integer]],number--[[@param number integer]])return InvokeVoid(0xA3C0B359DCB848B6,blip,number)end;
	HideNumberOnBlip=function(blip--[[@param blip integer]])return InvokeVoid(0x532CFF637EF80148,blip)end;
	ShowHeightOnBlip=function(blip--[[@param blip integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x75A16C3DA34F1245,blip,toggle)end;
	--[=[Adds a green checkmark on top of a blip.]=]
	ShowTickOnBlip=function(blip--[[@param blip integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x74513EA3E505181E,blip,toggle)end;
	--[=[Adds a orange checkmark on top of a given blip handle: https://imgur.com/a/aw5OTMF
_SHOW_FRIEND_INDICATOR_ON_BLIP* - _SHOW_HEADING_INDICATOR_ON_BLIP*]=]
	ShowGoldTickOnBlip=function(blip--[[@param blip integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xCAC2031EBF79B1A8,blip,toggle)end;
	ShowForSaleIconOnBlip=function(blip--[[@param blip integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x19BD6E3C0E16A8FA,blip,toggle)end;
	--[=[Adds the GTA: Online player heading indicator to a blip.]=]
	ShowHeadingIndicatorOnBlip=function(blip--[[@param blip integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x5FBCA48327B914DF,blip,toggle)end;
	--[=[Highlights a blip by a cyan color circle.

Color can be changed with SET_BLIP_SECONDARY_COLOUR]=]
	ShowOutlineIndicatorOnBlip=function(blip--[[@param blip integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xB81656BC81FE24D1,blip,toggle)end;
	--[=[Highlights a blip by a half cyan circle on the right side of the blip. https://i.imgur.com/FrV9M4e.png
.Indicating that that player is a friend (in GTA:O). This color can not be changed.
To toggle the left side (crew member indicator) of the half circle around the blip, use: `SHOW_CREW_INDICATOR_ON_BLIP`]=]
	ShowFriendIndicatorOnBlip=function(blip--[[@param blip integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x23C3EB807312F01A,blip,toggle)end;
	--[=[Enables or disables the blue half circle https://i.imgur.com/iZes9Ec.png around the specified blip on the left side of the blip. This is used to indicate that the player is in your crew in GTA:O. Color is changeable by using `SET_BLIP_SECONDARY_COLOUR`.]=]
	ShowCrewIndicatorOnBlip=function(blip--[[@param blip integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xDCFB5D4DB8BF367E,blip,toggle)end;
	--[=[Must be toggled before being queued for animation]=]
	SetBlipExtendedHeightThreshold=function(blip--[[@param blip integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xC4278F70131BAA6D,blip,toggle)end;
	SetBlipShortHeightThreshold=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x4B5B620C9B59ED34,p0,p1)end;
	SetBlipUseHeightIndicatorOnEdge=function(blip--[[@param blip integer]],p1--[[@param p1 any]])return InvokeVoid(0x2C9F302398E13141,blip,p1)end;
	--[=[Makes a blip go small when off the minimap.]=]
	SetBlipAsMinimalOnEdge=function(blip--[[@param blip integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x2B6D467DAB714E8D,blip,toggle)end;
	--[=[Enabling this on a radius blip will make it outline only. See https://cdn.discordapp.com/attachments/553235301632573459/575132227935928330/unknown.png]=]
	SetRadiusBlipEdge=function(blip--[[@param blip integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x25615540D894B814,blip,toggle)end;
	DoesBlipExist=function(blip--[[@param blip integer]])return InvokeBool(0xA6DB27D19ECBB7DA,blip)end;---@return boolean
	--[=[This native removes the current waypoint from the map.

Example:
C#:
Function.Call(Hash.SET_WAYPOINT_OFF);

C++:
HUD::SET_WAYPOINT_OFF();]=]
	SetWaypointOff=function()return InvokeVoid(0xA7E4E2D361C2627F)end;
	DeleteWaypointsFromThisPlayer=function()return InvokeVoid(0xD8E694757BCEA8E9)end;
	RefreshWaypoint=function()return InvokeVoid(0x81FA173F170560D1)end;
	IsWaypointActive=function()return InvokeBool(0x1DD1F58F493F1DA5)end;---@return boolean
	SetNewWaypoint=function(x--[[@param x number]],y--[[@param y number]])return InvokeVoid(0xFE43368D2AA4F2FC,x+.0,y+.0)end;
	SetBlipBright=function(blip--[[@param blip integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xB203913733F27884,blip,toggle)end;
	--[=[As of b2189, the third parameter sets the color of the cone (before b2189 it was ignored). Note that it uses HUD colors, not blip colors.]=]
	SetBlipShowCone=function(blip--[[@param blip integer]],toggle--[[@param toggle boolean]],hudColorIndex--[[@param hudColorIndex integer]])return InvokeVoid(0x13127EC3665E8EE1,blip,toggle,hudColorIndex)end;
	--[=[Interesting fact: A hash collision for this is RESET_JETPACK_MODEL_SETTINGS]=]
	RemoveCopBlipFromPed=function(ped--[[@param ped integer]])return InvokeVoid(0xC594B315EDF2D4AF,ped)end;
	SetupFakeConeData=function(blip--[[@param blip integer]],p1--[[@param p1 number]],p2--[[@param p2 number]],p3--[[@param p3 number]],p4--[[@param p4 number]],p5--[[@param p5 number]],p6--[[@param p6 number]],p7--[[@param p7 any]],p8--[[@param p8 integer]])return InvokeVoid(0xF83D0FEBE75E62C9,blip,p1+.0,p2+.0,p3+.0,p4+.0,p5+.0,p6+.0,p7,p8)end;
	RemoveFakeConeData=function(blip--[[@param blip integer]])return InvokeVoid(0x35A3CD97B2C0A6D2,blip)end;
	ClearFakeConeArray=function()return InvokeVoid(0x8410C5E0CD847B9D)end;
	--[=[This native is used to colorize certain map components like the army base at the top of the map.
p2 appears to be always -1. If p2 is -1 then native wouldn't change the color. See https://gfycat.com/SkinnyPinkChupacabra]=]
	SetMinimapComponent=function(componentId--[[@param componentId integer]],toggle--[[@param toggle boolean]],overrideColor--[[@param overrideColor integer]])return InvokeBool(0x75A9A10948D1DEA6,componentId,toggle,overrideColor)end;---@return boolean
	SetMinimapSonarSweep=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x6B50FC8749632EC1,toggle)end;
	ShowAccountPicker=function()return InvokeVoid(0x60E892BA4F5BDCA4)end;
	GetMainPlayerBlipId=function()return InvokeInt(0xDCD4EC3F419D02FA)end;---@return integer
	SetPmWarningscreenActive=function(p0--[[@param p0 boolean]])return InvokeVoid(0x41350B4FC28E3941,p0)end;
	HideLoadingOnFadeThisFrame=function()return InvokeVoid(0x4B0311D3CDC4648F)end;
	--[=[List of interior hashes: https://pastebin.com/1FUyXNqY
Not for every interior zoom > 0 available.]=]
	SetRadarAsInteriorThisFrame=function(interior--[[@param interior integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z integer]],zoom--[[@param zoom integer]])return InvokeVoid(0x59E727A1C9D3E31A,interior,x+.0,y+.0,z,zoom)end;
	SetInsideVerySmallInterior=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x504DFE62A1692296,toggle)end;
	SetInsideVeryLargeInterior=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x7EC8ABA5E74B3D7A,toggle)end;
	SetRadarAsExteriorThisFrame=function()return InvokeVoid(0xE81B7D2A3DAB2D81)end;
	--[=[Sets the position of the arrow icon representing the player on both the minimap and world map.

Too bad this wouldn't work over the network (obviously not). Could spoof where we would be.]=]
	SetFakePausemapPlayerPositionThisFrame=function(x--[[@param x number]],y--[[@param y number]])return InvokeVoid(0x77E2DD177910E1CF,x+.0,y+.0)end;
	--[=[p2 maybe z float?]=]
	SetFakeGpsPlayerPositionThisFrame=function(x--[[@param x number]],y--[[@param y number]],p2--[[@param p2 any]])return InvokeVoid(0xA17784FCA9548D15,x+.0,y+.0,p2)end;
	IsPausemapInInteriorMode=function()return InvokeBool(0x9049FE339D5F6F6F)end;---@return boolean
	HideMinimapExteriorMapThisFrame=function()return InvokeVoid(0x5FBAE526203990C9)end;
	HideMinimapInteriorMapThisFrame=function()return InvokeVoid(0x20FE7FDFEEAD38C0)end;
	--[=[Toggles the Cayo Perico map.]=]
	SetUseIslandMap=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x5E1460624D194A38,toggle)end;
	SetPauseExteriorRenderingWhileInInterior=function()return InvokeVoid(0x35CCE12EAECB4A51)end;
	--[=[When calling this, the current frame will have the players "arrow icon" be focused on the dead center of the radar.]=]
	DontTiltMinimapThisFrame=function()return InvokeVoid(0x6D14BFDC33B34F55)end;
	DontZoomMinimapWhenRunningThisFrame=function()return InvokeVoid(0x89DA85D949CE57A0)end;
	DontZoomMinimapWhenSnipingThisFrame=function()return InvokeVoid(0x55F5A5F07134DE60)end;
	SetWidescreenFormat=function(p0--[[@param p0 any]])return InvokeVoid(0xC3B07BA00A83B0F1,p0)end;
	DisplayAreaName=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x276B6CE369C33678,toggle)end;
	--[=["DISPLAY_CASH(false);" makes the cash amount render on the screen when appropriate
"DISPLAY_CASH(true);" disables cash amount rendering]=]
	DisplayCash=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x96DEC8D5430208B7,toggle)end;
	--[=[Related to displaying cash on the HUD
Always called before HUD::CHANGE_FAKE_MP_CASH in decompiled scripts]=]
	UseFakeMpCash=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x170F541E1CADD1DE,toggle)end;
	--[=[Displays cash change notifications on HUD.]=]
	ChangeFakeMpCash=function(cash--[[@param cash integer]],bank--[[@param bank integer]])return InvokeVoid(0x0772DF77852C2E30,cash,bank)end;
	DisplayAmmoThisFrame=function(display--[[@param display boolean]])return InvokeVoid(0xA5E78BA2B1331C55,display)end;
	--[=[Displays the crosshair for this frame.]=]
	DisplaySniperScopeThisFrame=function()return InvokeVoid(0x73115226F4814E62)end;
	--[=[Hides HUD and radar this frame and prohibits switching to other weapons (or accessing the weapon wheel)]=]
	HideHudAndRadarThisFrame=function()return InvokeVoid(0x719FF505F097FD20)end;
	--[=[Controls whether to display 'Cash'/'Bank' next to the money balance HUD in Multiplayer (https://i.imgur.com/MiYUtNl.png)]=]
	AllowDisplayOfMultiplayerCashText=function(allow--[[@param allow boolean]])return InvokeVoid(0xE67C6DFD386EA5E7,allow)end;
	SetMultiplayerWalletCash=function()return InvokeVoid(0xC2D15BEF167E27BC)end;
	RemoveMultiplayerWalletCash=function()return InvokeVoid(0x95CF81BD06EE1887)end;
	SetMultiplayerBankCash=function()return InvokeVoid(0xDD21B55DF695CD0A)end;
	RemoveMultiplayerBankCash=function()return InvokeVoid(0xC7C6789AA1CFEDD0)end;
	--[=[This native does absolutely nothing, just a nullsub]=]
	SetMultiplayerHudCash=function(p0--[[@param p0 integer]],p1--[[@param p1 boolean]])return InvokeVoid(0xFD1D220394BCB824,p0,p1)end;
	--[=[Removes multiplayer cash hud each frame]=]
	RemoveMultiplayerHudCash=function()return InvokeVoid(0x968F270E39141ECA)end;
	HideHelpTextThisFrame=function()return InvokeVoid(0xD46923FC481CA285)end;
	IsImeInProgress=function()return InvokeBool(0x801879A9B4F4B2FB)end;---@return boolean
	--[=[The messages are localized strings.
Examples:
"No_bus_money"
"Enter_bus"
"Tour_help"
"LETTERS_HELP2"
"Dummy"

**The bool appears to always be false (if it even is a bool, as it's represented by a zero)**
--------
p1 doesn't seem to make a difference, regardless of the state it's in. 


picture of where on the screen this is displayed? ]=]
	DisplayHelpTextThisFrame=function(message--[[@param message string]],p1--[[@param p1 boolean]])return InvokeVoid(0x960C9FF8F616E41C,message,p1)end;
	--[=[Forces the weapon wheel to show/hide.]=]
	HudForceWeaponWheel=function(show--[[@param show boolean]])return InvokeVoid(0xEB354E5376BC81A7,show)end;
	--[=[Displays "blazer_wheels_up" and "blazer_wheels_down" "weapon" icons when switching between jetski and quadbike modes. Works only on vehicles using "VEHICLE_TYPE_AMPHIBIOUS_QUADBIKE" vehicle type. Needs to be called every time prior to switching modes, otherwise the icon will only appear when switching modes once.]=]
	HudForceSpecialVehicleWeaponWheel=function()return InvokeVoid(0x488043841BBE156F)end;
	--[=[Calling this each frame, stops the player from receiving a weapon via the weapon wheel.]=]
	HudSuppressWeaponWheelResultsThisFrame=function()return InvokeVoid(0x0AFC4AF510774B47)end;
	--[=[Returns the weapon hash to the selected/highlighted weapon in the wheel]=]
	HudGetWeaponWheelCurrentlyHighlighted=function()return InvokeInt(0xA48931185F0536FE)end;---@return integer
	--[=[Set the active slotIndex in the wheel weapon to the slot associated with the provided Weapon hash]=]
	HudSetWeaponWheelTopSlot=function(weaponHash--[[@param weaponHash integer]])return InvokeVoid(0x72C1056D678BB7D8,weaponHash)end;
	--[=[Returns the weapon hash active in a specific weapon wheel slotList]=]
	HudGetWeaponWheelTopSlot=function(weaponTypeIndex--[[@param weaponTypeIndex integer]])return InvokeInt(0xA13E93403F26C812,weaponTypeIndex)end;---@return integer
	--[=[Sets a global that disables many weapon input tasks (shooting, aiming, etc.). Does not work with vehicle weapons, only used in selector.ysc]=]
	HudShowingCharacterSwitchSelection=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x14C9FDCC41F81F63,toggle)end;
	--[=[Only the script that originally called SET_GPS_FLAGS can set them again. Another script cannot set the flags, until the first script that called it has called CLEAR_GPS_FLAGS.

Doesn't seem like the flags are actually read by the game at all.]=]
	SetGpsFlags=function(p0--[[@param p0 integer]],p1--[[@param p1 number]])return InvokeVoid(0x5B440763A4C8D15B,p0,p1+.0)end;
	--[=[Clears the GPS flags. Only the script that originally called SET_GPS_FLAGS can clear them.

Doesn't seem like the flags are actually read by the game at all.]=]
	ClearGpsFlags=function()return InvokeVoid(0x21986729D6A3A830)end;
	SetRaceTrackRender=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x1EAC5F91BCBC5073,toggle)end;
	--[=[Does the same as SET_RACE_TRACK_RENDER(false);]=]
	ClearGpsRaceTrack=function()return InvokeVoid(0x7AA5B4CE533C858B)end;
	--[=[Starts a new GPS custom-route, allowing you to plot lines on the map.
Lines are drawn directly between points.
The GPS custom route works like the GPS multi route, except it does not follow roads.
Example result: https://i.imgur.com/BDm5pzt.png
hudColor: The HUD color of the GPS path.
displayOnFoot: Draws the path regardless if the player is in a vehicle or not.
followPlayer: Draw the path partially between the previous and next point based on the players position between them. When false, the GPS appears to not disappear after the last leg is completed.]=]
	StartGpsCustomRoute=function(hudColor--[[@param hudColor integer]],displayOnFoot--[[@param displayOnFoot boolean]],followPlayer--[[@param followPlayer boolean]])return InvokeVoid(0xDB34E8D56FC13B08,hudColor,displayOnFoot,followPlayer)end;
	AddPointToGpsCustomRoute=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0x311438A071DD9B1A,x+.0,y+.0,z+.0)end;
	--[=[radarThickness: The width of the GPS route on the radar
mapThickness: The width of the GPS route on the map]=]
	SetGpsCustomRouteRender=function(toggle--[[@param toggle boolean]],radarThickness--[[@param radarThickness integer]],mapThickness--[[@param mapThickness integer]])return InvokeVoid(0x900086F371220B6F,toggle,radarThickness,mapThickness)end;
	ClearGpsCustomRoute=function()return InvokeVoid(0xE6DE0561D9232A64)end;
	--[=[Starts a new GPS multi-route, allowing you to create custom GPS paths.
GPS functions like the waypoint, except it can contain multiple points it's forced to go through.
Once the player has passed a point, the GPS will no longer force its path through it.

Works independently from the player-placed waypoint and blip routes.
Example result: https://i.imgur.com/ZZHQatX.png
hudColor: The HUD color of the GPS path.
routeFromPlayer: Makes the GPS draw a path from the player to the next point, rather than the original path from the previous point.
displayOnFoot: Draws the GPS path regardless if the player is in a vehicle or not.]=]
	StartGpsMultiRoute=function(hudColor--[[@param hudColor integer]],routeFromPlayer--[[@param routeFromPlayer boolean]],displayOnFoot--[[@param displayOnFoot boolean]])return InvokeVoid(0x3D3D15AF7BCAAF83,hudColor,routeFromPlayer,displayOnFoot)end;
	AddPointToGpsMultiRoute=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0xA905192A6781C41B,x+.0,y+.0,z+.0)end;
	SetGpsMultiRouteRender=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x3DDA37128DD1ACA8,toggle)end;
	--[=[Does the same as SET_GPS_MULTI_ROUTE_RENDER(false);]=]
	ClearGpsMultiRoute=function()return InvokeVoid(0x67EEDEA1B9BAFD94)end;
	ClearGpsPlayerWaypoint=function()return InvokeVoid(0xFF4FB7C8CDFA3DA7)end;
	SetGpsFlashes=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x320D0E0D936A0E9B,toggle)end;
	SetPlayerIconColour=function(color--[[@param color integer]])return InvokeVoid(0x7B21E0BB01E8224A,color)end;
	--[=[adds a short flash to the Radar/Minimap
Usage: UI.FLASH_MINIMAP_DISPLAY]=]
	FlashMinimapDisplay=function()return InvokeVoid(0xF2DD778C22B15BDA)end;
	FlashMinimapDisplayWithColor=function(hudColorIndex--[[@param hudColorIndex integer]])return InvokeVoid(0x6B1DE27EE78E6A19,hudColorIndex)end;
	ToggleStealthRadar=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x6AFDFB93754950C7,toggle)end;
	SetMinimapInSpectatorMode=function(toggle--[[@param toggle boolean]],ped--[[@param ped integer]])return InvokeVoid(0x1A5CD7752DD28CD3,toggle,ped)end;
	SetMissionName=function(p0--[[@param p0 boolean]],name--[[@param name string]])return InvokeVoid(0x5F28ECF5FC84772F,p0,name)end;
	SetMissionNameForUgcMission=function(p0--[[@param p0 boolean]],name--[[@param name string]])return InvokeVoid(0xE45087D85F468BC2,p0,name)end;
	SetDescriptionForUgcMissionEightStrings=function(p0--[[@param p0 boolean]],p1--[[@param p1 string]],p2--[[@param p2 string]],p3--[[@param p3 string]],p4--[[@param p4 string]],p5--[[@param p5 string]],p6--[[@param p6 string]],p7--[[@param p7 string]],p8--[[@param p8 string]])return InvokeVoid(0x817B86108EB94E51,p0,p1,p2,p3,p4,p5,p6,p7,p8)end;
	SetMinimapBlockWaypoint=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x58FADDED207897DC,toggle)end;
	--[=[Toggles the North Yankton map]=]
	SetMinimapInPrologue=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x9133955F1A2DA957,toggle)end;
	--[=[If true, the entire map will be revealed.

FOW = Fog of War]=]
	SetMinimapHideFow=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xF8DEE0A5600CBB93,toggle)end;
	GetMinimapFowDiscoveryRatio=function()return InvokeFloat(0xE0130B41D3CF4574)end;---@return number
	GetMinimapFowCoordinateIsRevealed=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeBool(0x6E31B91145873922,x+.0,y+.0,z+.0)end;---@return boolean
	SetMinimapFowDoNotUpdate=function(p0--[[@param p0 boolean]])return InvokeVoid(0x62E849B7EB28E770,p0)end;
	--[=[Up to eight coordinates may be revealed per frame]=]
	SetMinimapFowRevealCoordinate=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0x0923DBF87DFF735E,x+.0,y+.0,z+.0)end;
	--[=[Not much is known so far on what it does _exactly_.
All I know for sure is that it draws the specified hole ID on the pause menu map as well as on the mini-map/radar. This native also seems to change some other things related to the pause menu map's behaviour, for example: you can no longer set waypoints, the pause menu map starts up in a 'zoomed in' state. This native does not need to be executed every tick.
You need to center the minimap manually as well as change/lock it's zoom and angle in order for it to appear correctly on the minimap.
You'll also need to use the `GOLF` scaleform in order to get the correct minmap border to show up.
Use `0x35edd5b2e3ff01c0` to reset the map when you no longer want to display any golf holes (you still need to unlock zoom, position and angle of the radar manually after calling this).]=]
	SetMinimapGolfCourse=function(hole--[[@param hole integer]])return InvokeVoid(0x71BDB63DBAF8DA59,hole)end;
	SetMinimapGolfCourseOff=function()return InvokeVoid(0x35EDD5B2E3FF01C0)end;
	--[=[Locks the minimap to the specified angle in integer degrees.

angle: The angle in whole degrees. If less than 0 or greater than 360, unlocks the angle.]=]
	LockMinimapAngle=function(angle--[[@param angle integer]])return InvokeVoid(0x299FAEBB108AE05B,angle)end;
	UnlockMinimapAngle=function()return InvokeVoid(0x8183455E16C42E3A)end;
	--[=[Locks the minimap to the specified world position.]=]
	LockMinimapPosition=function(x--[[@param x number]],y--[[@param y number]])return InvokeVoid(0x1279E861A329E73F,x+.0,y+.0)end;
	UnlockMinimapPosition=function()return InvokeVoid(0x3E93E06DB8EF1F30)end;
	--[=[Argument must be 0.0f or above 38.0f, or it will be ignored.]=]
	SetFakeMinimapMaxAltimeterHeight=function(altitude--[[@param altitude number]],p1--[[@param p1 boolean]],p2--[[@param p2 any]])return InvokeVoid(0xD201F3FF917A506D,altitude+.0,p1,p2)end;
	SetHealthHudDisplayValues=function(health--[[@param health integer]],capacity--[[@param capacity integer]],wasAdded--[[@param wasAdded boolean]])return InvokeVoid(0x3F5CC444DCAAA8F2,health,capacity,wasAdded)end;
	SetMaxHealthHudDisplay=function(maximumValue--[[@param maximumValue integer]])return InvokeVoid(0x975D66A0BC17064C,maximumValue)end;
	SetMaxArmourHudDisplay=function(maximumValue--[[@param maximumValue integer]])return InvokeVoid(0x06A320535F5F0248,maximumValue)end;
	--[=[Toggles the big minimap state like in GTA:Online.]=]
	SetBigmapActive=function(toggleBigMap--[[@param toggleBigMap boolean]],showFullMap--[[@param showFullMap boolean]])return InvokeVoid(0x231C8F89D0539D8F,toggleBigMap,showFullMap)end;
	--[=[Full list of components below

HUD = 0;
HUD_WANTED_STARS = 1;
HUD_WEAPON_ICON = 2;
HUD_CASH = 3;
HUD_MP_CASH = 4;
HUD_MP_MESSAGE = 5;
HUD_VEHICLE_NAME = 6;
HUD_AREA_NAME = 7;
HUD_VEHICLE_CLASS = 8;
HUD_STREET_NAME = 9;
HUD_HELP_TEXT = 10;
HUD_FLOATING_HELP_TEXT_1 = 11;
HUD_FLOATING_HELP_TEXT_2 = 12;
HUD_CASH_CHANGE = 13;
HUD_RETICLE = 14;
HUD_SUBTITLE_TEXT = 15;
HUD_RADIO_STATIONS = 16;
HUD_SAVING_GAME = 17;
HUD_GAME_STREAM = 18;
HUD_WEAPON_WHEEL = 19;
HUD_WEAPON_WHEEL_STATS = 20;
MAX_HUD_COMPONENTS = 21;
MAX_HUD_WEAPONS = 22;
MAX_SCRIPTED_HUD_COMPONENTS = 141;]=]
	IsHudComponentActive=function(id--[[@param id integer]])return InvokeBool(0xBC4C9EA5391ECC0D,id)end;---@return boolean
	IsScriptedHudComponentActive=function(id--[[@param id integer]])return InvokeBool(0xDD100EB17A94FF65,id)end;---@return boolean
	HideScriptedHudComponentThisFrame=function(id--[[@param id integer]])return InvokeVoid(0xE374C498D8BADC14,id)end;
	ShowScriptedHudComponentThisFrame=function(id--[[@param id integer]])return InvokeVoid(0x4F38DCA127DAAEA2,id)end;
	IsScriptedHudComponentHiddenThisFrame=function(id--[[@param id integer]])return InvokeBool(0x09C0403ED9A751C2,id)end;---@return boolean
	--[=[This function hides various HUD (Heads-up Display) components.
Listed below are the integers and the corresponding HUD component.
- 1 : WANTED_STARS
- 2 : WEAPON_ICON
- 3 : CASH
- 4 : MP_CASH
- 5 : MP_MESSAGE
- 6 : VEHICLE_NAME
- 7 : AREA_NAME
- 8 : VEHICLE_CLASS
- 9 : STREET_NAME
- 10 : HELP_TEXT
- 11 : FLOATING_HELP_TEXT_1
- 12 : FLOATING_HELP_TEXT_2
- 13 : CASH_CHANGE
- 14 : RETICLE
- 15 : SUBTITLE_TEXT
- 16 : RADIO_STATIONS
- 17 : SAVING_GAME
- 18 : GAME_STREAM
- 19 : WEAPON_WHEEL
- 20 : WEAPON_WHEEL_STATS
- 21 : HUD_COMPONENTS
- 22 : HUD_WEAPONS

These integers also work for the `SHOW_HUD_COMPONENT_THIS_FRAME` native, but instead shows the HUD Component.]=]
	HideHudComponentThisFrame=function(id--[[@param id integer]])return InvokeVoid(0x6806C51AD12B83B8,id)end;
	--[=[This function hides various HUD (Heads-up Display) components.
Listed below are the integers and the corresponding HUD component.
- 1 : WANTED_STARS
- 2 : WEAPON_ICON
- 3 : CASH
- 4 : MP_CASH
- 5 : MP_MESSAGE
- 6 : VEHICLE_NAME
- 7 : AREA_NAME
- 8 : VEHICLE_CLASS
- 9 : STREET_NAME
- 10 : HELP_TEXT
- 11 : FLOATING_HELP_TEXT_1
- 12 : FLOATING_HELP_TEXT_2
- 13 : CASH_CHANGE
- 14 : RETICLE
- 15 : SUBTITLE_TEXT
- 16 : RADIO_STATIONS
- 17 : SAVING_GAME
- 18 : GAME_STREAM
- 19 : WEAPON_WHEEL
- 20 : WEAPON_WHEEL_STATS
- 21 : HUD_COMPONENTS
- 22 : HUD_WEAPONS

These integers also work for the `HIDE_HUD_COMPONENT_THIS_FRAME` native, but instead hides the HUD Component.]=]
	ShowHudComponentThisFrame=function(id--[[@param id integer]])return InvokeVoid(0x0B4DF1FA60C0E664,id)end;
	--[=[Hides area and vehicle name HUD components for one frame.]=]
	HideStreetAndCarNamesThisFrame=function()return InvokeVoid(0xA4DEDE28B1814289)end;
	ResetReticuleValues=function()return InvokeVoid(0x12782CE0A636E9F0)end;
	ResetHudComponentValues=function(id--[[@param id integer]])return InvokeVoid(0x450930E616475D0D,id)end;
	SetHudComponentPosition=function(id--[[@param id integer]],x--[[@param x number]],y--[[@param y number]])return InvokeVoid(0xAABB1F56E2A17CED,id,x+.0,y+.0)end;
	GetHudComponentPosition=function(id--[[@param id integer]])return InvokeV3(0x223CA69A8C4417FD,id)end;---@return V3
	--[=[This native does absolutely nothing, just a nullsub]=]
	ClearReminderMessage=function()return InvokeVoid(0xB57D8DD645CFA2CF)end;
	--[=[World to relative screen coords, this world to screen will keep the text on screen. Was named _GET_SCREEN_COORD_FROM_WORLD_COORD, but this conflicts with 0x34E82F05DF2974F5. As that hash actually matches GET_SCREEN_COORD_FROM_WORLD_COORD that one supercedes and this one was renamed to _GET_2D_COORD_FROM_3D_COORD]=]
	GetHudScreenPositionFromWorldPosition=function(worldX--[[@param worldX number]],worldY--[[@param worldY number]],worldZ--[[@param worldZ number]],screenX--[[@param screenX number*]],screenY--[[@param screenY number*]])return InvokeInt(0xF9904D11F1ACBEC3,worldX+.0,worldY+.0,worldZ+.0,screenX,screenY)end;---@return integer
	--[=[Shows a menu for reporting UGC content.]=]
	OpenReportugcMenu=function()return InvokeVoid(0x523A590C1A3CC0D3)end;
	ForceCloseReportugcMenu=function()return InvokeVoid(0xEE4C0E6DBC6F2C6F)end;
	IsReportugcMenuOpen=function()return InvokeBool(0x9135584D09A3437E)end;---@return boolean
	IsFloatingHelpTextOnScreen=function(hudIndex--[[@param hudIndex integer]])return InvokeBool(0x2432784ACA090DA4,hudIndex)end;---@return boolean
	SetFloatingHelpTextScreenPosition=function(hudIndex--[[@param hudIndex integer]],x--[[@param x number]],y--[[@param y number]])return InvokeVoid(0x7679CC1BCEBE3D4C,hudIndex,x+.0,y+.0)end;
	SetFloatingHelpTextWorldPosition=function(hudIndex--[[@param hudIndex integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0x784BA7E0ECEB4178,hudIndex,x+.0,y+.0,z+.0)end;
	SetFloatingHelpTextToEntity=function(hudIndex--[[@param hudIndex integer]],entity--[[@param entity integer]],offsetX--[[@param offsetX number]],offsetY--[[@param offsetY number]])return InvokeVoid(0xB094BC1DB4018240,hudIndex,entity,offsetX+.0,offsetY+.0)end;
	SetFloatingHelpTextStyle=function(hudIndex--[[@param hudIndex integer]],p1--[[@param p1 integer]],p2--[[@param p2 integer]],p3--[[@param p3 integer]],p4--[[@param p4 integer]],p5--[[@param p5 integer]])return InvokeVoid(0x788E7FD431BD67F1,hudIndex,p1,p2,p3,p4,p5)end;
	ClearFloatingHelp=function(hudIndex--[[@param hudIndex integer]],p1--[[@param p1 boolean]])return InvokeVoid(0x50085246ABD3FEFA,hudIndex,p1)end;
	--[=[clanFlag: takes a number 0-5]=]
	CreateMpGamerTagWithCrewColor=function(player--[[@param player integer]],username--[[@param username string]],pointedClanTag--[[@param pointedClanTag boolean]],isRockstarClan--[[@param isRockstarClan boolean]],clanTag--[[@param clanTag string]],clanFlag--[[@param clanFlag integer]],r--[[@param r integer]],g--[[@param g integer]],b--[[@param b integer]])return InvokeVoid(0x6DD05E9D83EFA4C9,player,username,pointedClanTag,isRockstarClan,clanTag,clanFlag,r,g,b)end;
	IsMpGamerTagMovieActive=function()return InvokeBool(0x6E0EB3EB47C8D7AA)end;---@return boolean
	--[=[clanFlag: takes a number 0-5]=]
	CreateFakeMpGamerTag=function(ped--[[@param ped integer]],username--[[@param username string]],pointedClanTag--[[@param pointedClanTag boolean]],isRockstarClan--[[@param isRockstarClan boolean]],clanTag--[[@param clanTag string]],clanFlag--[[@param clanFlag integer]])return InvokeInt(0xBFEFE3321A3F5015,ped,username,pointedClanTag,isRockstarClan,clanTag,clanFlag)end;---@return integer
	RemoveMpGamerTag=function(gamerTagId--[[@param gamerTagId integer]])return InvokeVoid(0x31698AA80E0223F8,gamerTagId)end;
	IsMpGamerTagActive=function(gamerTagId--[[@param gamerTagId integer]])return InvokeBool(0x4E929E7A5796FD26,gamerTagId)end;---@return boolean
	IsMpGamerTagFree=function(gamerTagId--[[@param gamerTagId integer]])return InvokeBool(0x595B5178E412E199,gamerTagId)end;---@return boolean
	--[=[enum eMpGamerTagComponent
{
	MP_TAG_GAMER_NAME,
	MP_TAG_CREW_TAG,
	MP_TAG_HEALTH_ARMOUR,
	MP_TAG_BIG_TEXT,
	MP_TAG_AUDIO_ICON,
	MP_TAG_USING_MENU,
	MP_TAG_PASSIVE_MODE,
	MP_TAG_WANTED_STARS,
	MP_TAG_DRIVER,
	MP_TAG_CO_DRIVER,
	MP_TAG_TAGGED,
	MP_TAG_GAMER_NAME_NEARBY,
	MP_TAG_ARROW,
	MP_TAG_PACKAGES,
	MP_TAG_INV_IF_PED_FOLLOWING,
	MP_TAG_RANK_TEXT,
	MP_TAG_TYPING,
	MP_TAG_BAG_LARGE,
	MP_TAG_ARROW,
	MP_TAG_GANG_CEO,
	MP_TAG_GANG_BIKER,
	MP_TAG_BIKER_ARROW,
	MP_TAG_MC_ROLE_PRESIDENT,
	MP_TAG_MC_ROLE_VICE_PRESIDENT,
	MP_TAG_MC_ROLE_ROAD_CAPTAIN,
	MP_TAG_MC_ROLE_SARGEANT,
	MP_TAG_MC_ROLE_ENFORCER,
	MP_TAG_MC_ROLE_PROSPECT,
	MP_TAG_TRANSMITTER,
	MP_TAG_BOMB
};]=]
	SetMpGamerTagVisibility=function(gamerTagId--[[@param gamerTagId integer]],component--[[@param component integer]],toggle--[[@param toggle boolean]],p3--[[@param p3 any]])return InvokeVoid(0x63BB75ABEDC1F6A0,gamerTagId,component,toggle,p3)end;
	SetAllMpGamerTagsVisibility=function(gamerTagId--[[@param gamerTagId integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xEE76FF7E6A0166B0,gamerTagId,toggle)end;
	--[=[Displays a bunch of icons above the players name, and level, and their name twice]=]
	SetMpGamerTagsShouldUseVehicleHealth=function(gamerTagId--[[@param gamerTagId integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xA67F9C46D612B6F1,gamerTagId,toggle)end;
	SetMpGamerTagsShouldUsePointsHealth=function(gamerTagId--[[@param gamerTagId integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xD29EC58C2F6B5014,gamerTagId,toggle)end;
	SetMpGamerTagsPointHealth=function(gamerTagId--[[@param gamerTagId integer]],value--[[@param value integer]],maximumValue--[[@param maximumValue integer]])return InvokeVoid(0x1563FE35E9928E67,gamerTagId,value,maximumValue)end;
	--[=[Sets a gamer tag's component colour

gamerTagId is obtained using for example CREATE_FAKE_MP_GAMER_TAG
Ranges from 0 to 255. 0 is grey health bar, ~50 yellow, 200 purple.]=]
	SetMpGamerTagColour=function(gamerTagId--[[@param gamerTagId integer]],component--[[@param component integer]],hudColorIndex--[[@param hudColorIndex integer]])return InvokeVoid(0x613ED644950626AE,gamerTagId,component,hudColorIndex)end;
	--[=[Ranges from 0 to 255. 0 is grey health bar, ~50 yellow, 200 purple.
Should be enabled as flag (2). Has 0 opacity by default.

- This was _SET_MP_GAMER_TAG_HEALTH_BAR_COLOR,
-> Rockstar use the EU spelling of 'color' so I hashed the same name with COLOUR and it came back as the correct hash, so it has been corrected above.]=]
	SetMpGamerTagHealthBarColour=function(gamerTagId--[[@param gamerTagId integer]],hudColorIndex--[[@param hudColorIndex integer]])return InvokeVoid(0x3158C77A7E888AB4,gamerTagId,hudColorIndex)end;
	--[=[Sets flag's sprite transparency. 0-255.]=]
	SetMpGamerTagAlpha=function(gamerTagId--[[@param gamerTagId integer]],component--[[@param component integer]],alpha--[[@param alpha integer]])return InvokeVoid(0xD48FE545CD46F857,gamerTagId,component,alpha)end;
	--[=[displays wanted star above head]=]
	SetMpGamerTagWantedLevel=function(gamerTagId--[[@param gamerTagId integer]],wantedlvl--[[@param wantedlvl integer]])return InvokeVoid(0xCF228E2AA03099C3,gamerTagId,wantedlvl)end;
	SetMpGamerTagNumPackages=function(gamerTagId--[[@param gamerTagId integer]],p1--[[@param p1 integer]])return InvokeVoid(0x9C16459B2324B2CF,gamerTagId,p1)end;
	SetMpGamerTagName=function(gamerTagId--[[@param gamerTagId integer]],string--[[@param string string]])return InvokeVoid(0xDEA2B8283BAA3944,gamerTagId,string)end;
	IsUpdatingMpGamerTagNameAndCrewDetails=function(gamerTagId--[[@param gamerTagId integer]])return InvokeBool(0xEB709A36958ABE0D,gamerTagId)end;---@return boolean
	SetMpGamerTagBigText=function(gamerTagId--[[@param gamerTagId integer]],string--[[@param string string]])return InvokeVoid(0x7B7723747CCB55B6,gamerTagId,string)end;
	GetCurrentWebpageId=function()return InvokeInt(0x01A358D9128B7A86)end;---@return integer
	GetCurrentWebsiteId=function()return InvokeInt(0x97D47996FC48CBAD)end;---@return integer
	--[=[Returns the ActionScript flagValue.
ActionScript flags are global flags that scaleforms use
Flags found during testing
0: Returns 1 if the web_browser keyboard is open, otherwise 0
1: Returns 1 if the player has clicked back twice on the opening page, otherwise 0 (web_browser)
2: Returns how many links the player has clicked in the web_browser scaleform, returns 0 when the browser gets closed
9: Returns the current selection on the mobile phone scaleform

There are 20 flags in total.]=]
	GetGlobalActionscriptFlag=function(flagIndex--[[@param flagIndex integer]])return InvokeInt(0xE3B05614DCE1D014,flagIndex)end;---@return integer
	ResetGlobalActionscriptFlag=function(flagIndex--[[@param flagIndex integer]])return InvokeVoid(0xB99C4E4D9499DF29,flagIndex)end;
	IsWarningMessageReadyForControl=function()return InvokeBool(0xAF42195A42C63BBA)end;---@return boolean
	--[=[You can only use text entries. No custom text.

Example: SET_WARNING_MESSAGE("t20", 3, "adder", false, -1, 0, 0, true);
errorCode: shows an error code at the bottom left if nonzero]=]
	SetWarningMessage=function(titleMsg--[[@param titleMsg string]],flags--[[@param flags integer]],promptMsg--[[@param promptMsg string]],p3--[[@param p3 boolean]],p4--[[@param p4 integer]],p5--[[@param p5 string]],p6--[[@param p6 string]],showBackground--[[@param showBackground boolean]],errorCode--[[@param errorCode integer]])return InvokeVoid(0x7B1776B3B53F8D74,titleMsg,flags,promptMsg,p3,p4,p5,p6,showBackground,errorCode)end;
	--[=[Shows a warning message on screen with a header.
Note: You can only use text entries. No custom text. You can recreate this easily with scaleforms.
Example: https://i.imgur.com/ITJt8bJ.png]=]
	SetWarningMessageWithHeader=function(entryHeader--[[@param entryHeader string]],entryLine1--[[@param entryLine1 string]],instructionalKey--[[@param instructionalKey integer]],entryLine2--[[@param entryLine2 string]],p4--[[@param p4 boolean]],p5--[[@param p5 any]],showBackground--[[@param showBackground any*]],p7--[[@param p7 any*]],p8--[[@param p8 boolean]],p9--[[@param p9 any]])return InvokeVoid(0xDC38CC1E35B6A5D7,entryHeader,entryLine1,instructionalKey,entryLine2,p4,p5,showBackground,p7,p8,p9)end;
	--[=[You can use this native for custom input, without having to use any scaleform-related natives.
The native must be called on tick.
The entryHeader must be a valid label.
For Single lines use JL_INVITE_N as entryLine1, JL_INVITE_ND for multiple.
Notes:
- additionalIntInfo: replaces first occurrence of ~1~ in provided label with an integer
- additionalTextInfoLine1: replaces first occurrence of ~a~ in provided label, with your custom text
- additionalTextInfoLine2: replaces second occurrence of ~a~ in provided label, with your custom text
- showBackground: shows black background of the warning screen
- errorCode: shows an error code at the bottom left if nonzero
Example of usage:
SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS("ALERT", "JL_INVITE_ND", 66, "", true, -1, -1, "Testing line 1", "Testing line 2", true, 0);
Screenshot:
https://imgur.com/a/IYA7vJ8]=]
	SetWarningMessageWithHeaderAndSubstringFlags=function(entryHeader--[[@param entryHeader string]],entryLine1--[[@param entryLine1 string]],instructionalKey--[[@param instructionalKey integer]],entryLine2--[[@param entryLine2 string]],p4--[[@param p4 boolean]],p5--[[@param p5 any]],additionalIntInfo--[[@param additionalIntInfo any]],additionalTextInfoLine1--[[@param additionalTextInfoLine1 string]],additionalTextInfoLine2--[[@param additionalTextInfoLine2 string]],showBackground--[[@param showBackground boolean]],errorCode--[[@param errorCode integer]])return InvokeVoid(0x701919482C74B5AB,entryHeader,entryLine1,instructionalKey,entryLine2,p4,p5,additionalIntInfo,additionalTextInfoLine1,additionalTextInfoLine2,showBackground,errorCode)end;
	SetWarningMessageWithHeaderExtended=function(entryHeader--[[@param entryHeader string]],entryLine1--[[@param entryLine1 string]],flags--[[@param flags integer]],entryLine2--[[@param entryLine2 string]],p4--[[@param p4 boolean]],p5--[[@param p5 any]],p6--[[@param p6 any*]],p7--[[@param p7 any*]],showBg--[[@param showBg boolean]],p9--[[@param p9 any]],p10--[[@param p10 any]])return InvokeVoid(0x38B55259C2E078ED,entryHeader,entryLine1,flags,entryLine2,p4,p5,p6,p7,showBg,p9,p10)end;
	--[=[labelTitle: Label of the alert's title.
labelMsg: Label of the alert's message.
p2: This is an enum, check the description for a list.
p3: This is an enum, check the description for a list.
labelMsg2: Label of another message line
p5: usually 0
p6: usually -1
p7: usually 0
p8: unknown label
p9: unknown label
background: Set to anything other than 0 or false (even any string) and it will draw a background. Setting it to 0 or false will draw no background.
errorCode: Error code, shown at the bottom left if set to value other than 0.

instructionalKey enum list:
Buttons = {
      Empty = 0,
      Select = 1, -- (RETURN)
      Ok = 2, -- (RETURN)
      Yes = 4, -- (RETURN)
      Back = 8, -- (ESC)
      Cancel = 16, -- (ESC)
      No = 32, -- (ESC)
      RetrySpace = 64, -- (SPACE)
      Restart = 128, -- (SPACE)
      Skip = 256, -- (SPACE)
      Quit = 512, -- (ESC)
      Adjust = 1024, -- (ARROWS)
      SpaceKey = 2048, -- (SPACE)
      Share = 4096, -- (SPACE)
      SignIn = 8192, -- (SPACE)
      Continue = 16384, -- (RETURN)
      AdjustLeftRight = 32768, -- (SCROLL L/R)
      AdjustUpDown = 65536, -- (SCROLL U/D)
      Overwrite = 131072, -- (SPACE)
      SocialClubSignup = 262144, -- (RETURN)
      Confirm = 524288, -- (RETURN)
      Queue = 1048576, -- (RETURN)
      RetryReturn = 2097152, -- (RETURN)
      BackEsc = 4194304, -- (ESC)
      SocialClub = 8388608, -- (RETURN)
      Spectate = 16777216, -- (SPACE)
      OkEsc = 33554432, -- (ESC)
      CancelTransfer = 67108864, -- (ESC)
      LoadingSpinner = 134217728,
      NoReturnToGTA = 268435456, -- (ESC)
      CancelEsc = 536870912, -- (ESC)
}

Alt = {
      Empty = 0,
      No = 1, -- (SPACE)
      Host = 2, -- (ESC)
      SearchForJob = 4, -- (RETURN)
      ReturnKey = 8, -- (TURN)
      Freemode = 16, -- (ESC)
}

Example: https://i.imgur.com/TvmNF4k.png]=]
	SetWarningMessageWithHeaderAndSubstringFlagsExtended=function(labelTitle--[[@param labelTitle string]],labelMessage--[[@param labelMessage string]],p2--[[@param p2 integer]],p3--[[@param p3 integer]],labelMessage2--[[@param labelMessage2 string]],p5--[[@param p5 boolean]],p6--[[@param p6 integer]],p7--[[@param p7 integer]],p8--[[@param p8 string]],p9--[[@param p9 string]],background--[[@param background boolean]],errorCode--[[@param errorCode integer]])return InvokeVoid(0x15803FEC3B9A872B,labelTitle,labelMessage,p2,p3,labelMessage2,p5,p6,p7,p8,p9,background,errorCode)end;
	--[=[Has to do with the confirmation overlay (E.g. confirm exit)]=]
	GetWarningScreenMessageHash=function()return InvokeInt(0x81DF9ABA6C83DFF9)end;---@return integer
	--[=[Some sort of list displayed in a warning message. Yet unknown how to prevent repeating.
Param names copied from the corresponding scaleform function "SET_LIST_ROW".
Example: https://i.imgur.com/arKvOYx.png]=]
	SetWarningMessageOptionItems=function(index--[[@param index integer]],name--[[@param name string]],cash--[[@param cash integer]],rp--[[@param rp integer]],lvl--[[@param lvl integer]],colour--[[@param colour integer]])return InvokeBool(0x0C5A80A9E096D529,index,name,cash,rp,lvl,colour)end;---@return boolean
	SetWarningMessageOptionHighlight=function(p0--[[@param p0 any]])return InvokeBool(0xDAF87174BE7454FF,p0)end;---@return boolean
	RemoveWarningMessageOptionItems=function()return InvokeVoid(0x6EF54AB721DC6242)end;
	IsWarningMessageActive=function()return InvokeBool(0xE18B138FABC53103)end;---@return boolean
	ClearDynamicPauseMenuErrorMessage=function()return InvokeVoid(0x7792424AA0EAC32E)end;
	--[=[If toggle is true, the map is shown in full screen
If toggle is false, the map is shown in normal mode]=]
	CustomMinimapSetActive=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x5354C5BA2EA868A4,toggle)end;
	--[=[Sets the sprite of the next BLIP_GALLERY blip, values used in the native scripts: 143 (ObjectiveBlue), 144 (ObjectiveGreen), 145 (ObjectiveRed), 146 (ObjectiveYellow).]=]
	CustomMinimapSetBlipObject=function(spriteId--[[@param spriteId integer]])return InvokeVoid(0x1EAE6DD17B7A5EFA,spriteId)end;
	--[=[Add a BLIP_GALLERY at the specific coordinate. Used in fm_maintain_transition_players to display race track points.]=]
	CustomMinimapCreateBlip=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeInt(0x551DF99658DB6EE8,x+.0,y+.0,z+.0)end;---@return integer
	CustomMinimapClearBlips=function()return InvokeVoid(0x2708FC083123F9FF)end;
	--[=[Doesn't actually return anything.]=]
	ForceSonarBlipsThisFrame=function()return InvokeBool(0x1121BFA1A1A522A8)end;---@return boolean
	GetNorthBlidIndex=function()return InvokeInt(0x3F0CF9CB7E589B88)end;---@return integer
	--[=[Toggles whether or not name labels are shown on the expanded minimap next to player blips, like in GTA:O.
Doesn't need to be called every frame.
Preview: https://i.imgur.com/DfqKWfJ.png

Make sure to call SET_BLIP_CATEGORY with index 7 for this to work on the desired blip.]=]
	DisplayPlayerNameTagsOnBlips=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x82CEDC33687E1F50,toggle)end;
	--[=[This native does absolutely nothing, just a nullsub]=]
	DrawFrontendBackgroundThisFrame=function()return InvokeVoid(0x211C4EF450086857)end;
	DrawHudOverFadeThisFrame=function()return InvokeVoid(0xBF4F34A85CA2970C)end;
	--[=[Does stuff like this:
gyazo.com/7fcb78ea3520e3dbc5b2c0c0f3712617

Example:
int GetHash = GET_HASH_KEY("fe_menu_version_corona_lobby");
ACTIVATE_FRONTEND_MENU(GetHash, 0, -1);

BOOL p1 is a toggle to define the game in pause.
int p2 is unknown but -1 always works, not sure why though.

[30/03/2017] ins1de :

the int p2 is actually a component variable. When the pause menu is visible, it opens the tab related to it.

Example : Function.Call(Hash.ACTIVATE_FRONTEND_MENU,-1171018317, 0, 42);
Result : Opens the "Online" tab without pausing the menu, with -1 it opens the map.Below is a list of all known Frontend Menu Hashes.
- FE_MENU_VERSION_SP_PAUSE
- FE_MENU_VERSION_MP_PAUSE
- FE_MENU_VERSION_CREATOR_PAUSE
- FE_MENU_VERSION_CUTSCENE_PAUSE
- FE_MENU_VERSION_SAVEGAME
- FE_MENU_VERSION_PRE_LOBBY
- FE_MENU_VERSION_LOBBY
- FE_MENU_VERSION_MP_CHARACTER_SELECT
- FE_MENU_VERSION_MP_CHARACTER_CREATION
- FE_MENU_VERSION_EMPTY
- FE_MENU_VERSION_EMPTY_NO_BACKGROUND
- FE_MENU_VERSION_TEXT_SELECTION
- FE_MENU_VERSION_CORONA
- FE_MENU_VERSION_CORONA_LOBBY
- FE_MENU_VERSION_CORONA_JOINED_PLAYERS
- FE_MENU_VERSION_CORONA_INVITE_PLAYERS
- FE_MENU_VERSION_CORONA_INVITE_FRIENDS
- FE_MENU_VERSION_CORONA_INVITE_CREWS
- FE_MENU_VERSION_CORONA_INVITE_MATCHED_PLAYERS
- FE_MENU_VERSION_CORONA_INVITE_LAST_JOB_PLAYERS
- FE_MENU_VERSION_CORONA_RACE
- FE_MENU_VERSION_CORONA_BETTING
- FE_MENU_VERSION_JOINING_SCREEN
- FE_MENU_VERSION_LANDING_MENU
- FE_MENU_VERSION_LANDING_KEYMAPPING_MENU]=]
	ActivateFrontendMenu=function(menuhash--[[@param menuhash integer]],togglePause--[[@param togglePause boolean]],component--[[@param component integer]])return InvokeVoid(0xEF01D36B9C9D0C7B,menuhash,togglePause,component)end;
	--[=[Before using this native click the native above and look at the decription.

Example:
int GetHash = Function.Call<int>(Hash.GET_HASH_KEY, "fe_menu_version_corona_lobby");
Function.Call(Hash.ACTIVATE_FRONTEND_MENU, GetHash, 0, -1);
Function.Call(Hash.RESTART_FRONTEND_MENU(GetHash, -1);

This native refreshes the frontend menu.

p1 = Hash of Menu
p2 = Unknown but always works with -1.]=]
	RestartFrontendMenu=function(menuHash--[[@param menuHash integer]],p1--[[@param p1 integer]])return InvokeVoid(0x10706DC6AD2D49C0,menuHash,p1)end;
	--[=[if (HUD::GET_CURRENT_FRONTEND_MENU_VERSION() == joaat("fe_menu_version_empty_no_background"))]=]
	GetCurrentFrontendMenuVersion=function()return InvokeInt(0x2309595AD6145265)end;---@return integer
	SetPauseMenuActive=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xDF47FC56C71569CF,toggle)end;
	DisableFrontendThisFrame=function()return InvokeVoid(0x6D3465A73092F0E6)end;
	SuppressFrontendRenderingThisFrame=function()return InvokeVoid(0xBA751764F0821256)end;
	--[=[Allows opening the pause menu this frame, when the player is dead.]=]
	AllowPauseWhenNotInStateOfPlayThisFrame=function()return InvokeVoid(0xCC3FDDED67BCFC63)end;
	SetFrontendActive=function(active--[[@param active boolean]])return InvokeVoid(0x745711A75AB09277,active)end;
	IsPauseMenuActive=function()return InvokeBool(0xB0034A223497FFCB)end;---@return boolean
	IsStorePendingNetworkShutdownToOpen=function()return InvokeBool(0x2F057596F2BD0061)end;---@return boolean
	--[=[Returns:

0
5
10
15
20
25
30
35
]=]
	GetPauseMenuState=function()return InvokeInt(0x272ACD84970869C5)end;---@return integer
	GetPauseMenuPosition=function()return InvokeV3(0x5BFF36D6ED83E0AE)end;---@return V3
	IsPauseMenuRestarting=function()return InvokeBool(0x1C491717107431C7)end;---@return boolean
	--[=[Not present in retail version of the game, actual definiton seems to be
_LOG_DEBUG_INFO(const char* category, const char* debugText);]=]
	ForceScriptedGfxWhenFrontendActive=function(p0--[[@param p0 string]])return InvokeVoid(0x2162C446DFDF38FD,p0)end;
	PauseMenuceptionGoDeeper=function(page--[[@param page integer]])return InvokeVoid(0x77F16B447824DA6C,page)end;
	PauseMenuceptionTheKick=function()return InvokeVoid(0xCDCA26E80FAECB8F)end;
	PauseToggleFullscreenMap=function(p0--[[@param p0 any]])return InvokeVoid(0x2DE6C5E2E996F178,p0)end;
	--[=[Activates the specified frontend menu context.
pausemenu.xml defines some specific menu options using 'context'. Context is basically a 'condition'. 
The `*ALL*` part of the context means that whatever is being defined, will be active when any or all of those conditions after `*ALL*` are met.
The `*NONE*` part of the context section means that whatever is being defined, will NOT be active if any or all of the conditions after `*NONE*` are met.
This basically allows you to hide certain menu sections, or things like instructional buttons.]=]
	PauseMenuActivateContext=function(contextHash--[[@param contextHash integer]])return InvokeVoid(0xDD564BDD0472C936,contextHash)end;
	PauseMenuDeactivateContext=function(contextHash--[[@param contextHash integer]])return InvokeVoid(0x444D8CF241EC25C5,contextHash)end;
	PauseMenuIsContextActive=function(contextHash--[[@param contextHash integer]])return InvokeBool(0x84698AB38D0C6636,contextHash)end;---@return boolean
	PauseMenuIsContextMenuActive=function()return InvokeBool(0x2A25ADC48F87841F)end;---@return boolean
	PauseMenuGetHairColourIndex=function()return InvokeInt(0xDE03620F8703A9DF)end;---@return integer
	PauseMenuGetMouseHoverIndex=function()return InvokeInt(0x359AF31A4B52F5ED)end;---@return integer
	PauseMenuGetMouseHoverUniqueId=function()return InvokeInt(0x13C4B962653A5280)end;---@return integer
	PauseMenuGetMouseClickEvent=function(p0--[[@param p0 any*]],p1--[[@param p1 any*]],p2--[[@param p2 any*]])return InvokeBool(0xC8E1071177A23BE5,p0,p1,p2)end;---@return boolean
	PauseMenuRedrawInstructionalButtons=function(p0--[[@param p0 integer]])return InvokeVoid(0x4895BDEA16E7C080,p0)end;
	PauseMenuSetBusySpinner=function(p0--[[@param p0 boolean]],position--[[@param position integer]],spinnerIndex--[[@param spinnerIndex integer]])return InvokeVoid(0xC78E239AC5B2DDB9,p0,position,spinnerIndex)end;
	PauseMenuSetWarnOnTabChange=function(p0--[[@param p0 boolean]])return InvokeVoid(0xF06EBB91A81E09E3,p0)end;
	IsFrontendReadyForControl=function()return InvokeBool(0x3BAB9A4E4F2FF5C7)end;---@return boolean
	--[=[Disables frontend (works in custom frontends, not sure about regular pause menu) navigation keys on keyboard. Not sure about controller. Does not disable mouse controls. No need to call this every tick.

To enable the keys again, use `0x14621BB1DF14E2B2`.]=]
	TakeControlOfFrontend=function()return InvokeVoid(0xEC9264727EEC0F28)end;
	--[=[Enables frontend (works in custom frontends, not sure about regular pause menu) navigation keys on keyboard if they were disabled using the native below.
To disable the keys, use `0xEC9264727EEC0F28`]=]
	ReleaseControlOfFrontend=function()return InvokeVoid(0x14621BB1DF14E2B2)end;
	CodeWantsScriptToTakeControl=function()return InvokeBool(0x66E7CB63C97B7D20)end;---@return boolean
	GetScreenCodeWantsScriptToControl=function()return InvokeInt(0x593FEAE1F73392D4)end;---@return integer
	IsNavigatingMenuContent=function()return InvokeBool(0x4E3CD0EF8A489541)end;---@return boolean
	HasMenuTriggerEventOccurred=function()return InvokeBool(0xF284AC67940C6812)end;---@return boolean
	HasMenuLayoutChangedEventOccurred=function()return InvokeBool(0x2E22FEFA0100275E)end;---@return boolean
	SetSavegameListUniqueId=function(p0--[[@param p0 any]])return InvokeVoid(0x0CF54F20DE43879C,p0)end;
	GetMenuTriggerEventDetails=function(lastItemMenuId--[[@param lastItemMenuId integer*]],selectedItemUniqueId--[[@param selectedItemUniqueId integer*]])return InvokeVoid(0x36C1451A88A09630,lastItemMenuId,selectedItemUniqueId)end;
	--[=[lastItemMenuId: this is the menuID of the last selected item minus 1000 (lastItem.menuID - 1000)
selectedItemMenuId: same as lastItemMenuId except for the currently selected menu item
selectedItemUniqueId: this is uniqueID of the currently selected menu item

when the pausemenu is closed:
lastItemMenuId = -1
selectedItemMenuId = -1
selectedItemUniqueId = 0

when the header gains focus:
lastItemMenuId updates as normal or 0 if the pausemenu was just opened
selectedItemMenuId becomes a unique id for the pausemenu page that focus was taken from (?) or 0 if the pausemenu was just opened
selectedItemUniqueId = -1

when focus is moved from the header to a pausemenu page:
lastItemMenuId becomes a unique id for the pausemenu page that focus was moved to (?)
selectedItemMenuId = -1
selectedItemUniqueId updates as normal]=]
	GetMenuLayoutChangedEventDetails=function(lastItemMenuId--[[@param lastItemMenuId integer*]],selectedItemMenuId--[[@param selectedItemMenuId integer*]],selectedItemUniqueId--[[@param selectedItemUniqueId integer*]])return InvokeVoid(0x7E17BE53E1AAABAF,lastItemMenuId,selectedItemMenuId,selectedItemUniqueId)end;
	GetPmPlayerCrewColor=function(r--[[@param r integer*]],g--[[@param g integer*]],b--[[@param b integer*]])return InvokeBool(0xA238192F33110615,r,g,b)end;---@return boolean
	GetMenuPedIntStat=function(p0--[[@param p0 any]],p1--[[@param p1 any*]])return InvokeBool(0xEF4CED81CEBEDC6D,p0,p1)end;---@return boolean
	GetCharacterMenuPedIntStat=function(p0--[[@param p0 any]],p1--[[@param p1 any*]],p2--[[@param p2 any]])return InvokeBool(0xCA6B2F7CE32AB653,p0,p1,p2)end;---@return boolean
	GetMenuPedMaskedIntStat=function(statHash--[[@param statHash integer]],outValue--[[@param outValue integer*]],mask--[[@param mask integer]],p3--[[@param p3 boolean]])return InvokeBool(0x90A6526CF0381030,statHash,outValue,mask,p3)end;---@return boolean
	GetCharacterMenuPedMaskedIntStat=function(statHash--[[@param statHash integer]],outValue--[[@param outValue any*]],p2--[[@param p2 integer]],mask--[[@param mask integer]],p4--[[@param p4 boolean]])return InvokeBool(0x24A49BEAF468DC90,statHash,outValue,p2,mask,p4)end;---@return boolean
	GetMenuPedFloatStat=function(statHash--[[@param statHash integer]],outValue--[[@param outValue number*]])return InvokeBool(0x5FBD7095FE7AE57F,statHash,outValue)end;---@return boolean
	GetCharacterMenuPedFloatStat=function(statHash--[[@param statHash number]],outValue--[[@param outValue number*]],p2--[[@param p2 boolean]])return InvokeBool(0x8F08017F9D7C47BD,statHash+.0,outValue,p2)end;---@return boolean
	--[=[p0 was always 0xAE2602A3.]=]
	GetMenuPedBoolStat=function(statHash--[[@param statHash integer]],outValue--[[@param outValue boolean*]])return InvokeBool(0x052991E59076E4E4,statHash,outValue)end;---@return boolean
	ClearPedInPauseMenu=function()return InvokeVoid(0x5E62BE5DC58E9E06)end;
	--[=[p1 is either 1 or 2 in the PC scripts.]=]
	GivePedToPauseMenu=function(ped--[[@param ped integer]],p1--[[@param p1 integer]])return InvokeVoid(0xAC0BFBDC3BE00E14,ped,p1)end;
	--[=[Toggles the light state for the pause menu ped in frontend menus.

This is used by R* in combination with `SET_PAUSE_MENU_PED_SLEEP_STATE` to toggle the "offline" or "online" state in the "friends" tab of the pause menu in GTA Online.


Example:
Lights On: https://vespura.com/hi/i/2019-04-01_16-09_540ee_1015.png
Lights Off: https://vespura.com/hi/i/2019-04-01_16-10_8b5e7_1016.png]=]
	SetPauseMenuPedLighting=function(state--[[@param state boolean]])return InvokeVoid(0x3CA6050692BC61B0,state)end;
	--[=[Toggles the pause menu ped sleep state for frontend menus.

Example: https://vespura.com/hi/i/2019-04-01_15-51_8ed38_1014.gif

`state` 0 will make the ped slowly fall asleep, 1 will slowly wake the ped up.]=]
	SetPauseMenuPedSleepState=function(state--[[@param state boolean]])return InvokeVoid(0xECF128344E9FF9F1,state)end;
	OpenOnlinePoliciesMenu=function()return InvokeVoid(0x805D7CBB36FD6C4C)end;
	AreOnlinePoliciesUpToDate=function()return InvokeBool(0xF13FE2A80C05C561)end;---@return boolean
	--[=[Returns the same as IS_SOCIAL_CLUB_ACTIVE]=]
	IsOnlinePoliciesMenuActive=function()return InvokeBool(0x6F72CD94F7B5B68C)end;---@return boolean
	--[=[Uses the `SOCIAL_CLUB2` scaleform.
menu: GALLERY, MISSIONS, CREWS, MIGRATE, PLAYLISTS, JOBS]=]
	OpenSocialClubMenu=function(menu--[[@param menu integer]])return InvokeVoid(0x75D3691713C3B05A,menu)end;
	CloseSocialClubMenu=function()return InvokeVoid(0xD2B32BE3FC1626C6)end;
	--[=[HUD::SET_SOCIAL_CLUB_TOUR("Gallery");
HUD::SET_SOCIAL_CLUB_TOUR("Missions");
HUD::SET_SOCIAL_CLUB_TOUR("General");
HUD::SET_SOCIAL_CLUB_TOUR("Playlists");]=]
	SetSocialClubTour=function(name--[[@param name string]])return InvokeVoid(0x9E778248D6685FE0,name)end;
	IsSocialClubActive=function()return InvokeBool(0xC406BE343FC4B9AF)end;---@return boolean
	SetTextInputBoxEnabled=function(p0--[[@param p0 boolean]])return InvokeVoid(0x1185A8087587322C,p0)end;
	ForceCloseTextInputBox=function()return InvokeVoid(0x8817605C2BA76200)end;
	SetAllowCommaOnTextInput=function(p0--[[@param p0 any]])return InvokeVoid(0x577599CCED639CA2,p0)end;
	OverrideMpTextChatTeamString=function(gxtEntryHash--[[@param gxtEntryHash integer]])return InvokeVoid(0x6A1738B4323FE2D9,gxtEntryHash)end;
	--[=[Returns whether or not the text chat (MULTIPLAYER_CHAT Scaleform component) is active.]=]
	IsMpTextChatTyping=function()return InvokeBool(0xB118AF58B5F332A1)end;---@return boolean
	CloseMpTextChat=function()return InvokeVoid(0x1AC8F4AD40E22127)end;
	MpTextChatIsTeamJob=function(p0--[[@param p0 any]])return InvokeVoid(0x7C226D5346D4D10A,p0)end;
	OverrideMpTextChatColor=function(p0--[[@param p0 integer]],hudColor--[[@param hudColor integer]])return InvokeVoid(0xF47E567B3630DD12,p0,hudColor)end;
	--[=[Hides the chat history, closes the input box and makes it unable to be opened unless called again with FALSE.]=]
	MpTextChatDisable=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x1DB21A44B09E8BA3,toggle)end;
	FlagPlayerContextInTournament=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xCEF214315D276FD1,toggle)end;
	--[=[This native turns on the AI blip on the specified ped. It also disappears automatically when the ped is too far or if the ped is dead. You don't need to control it with other natives.

See gtaforums.com/topic/884370-native-research-ai-blips for further information.]=]
	SetPedHasAiBlip=function(ped--[[@param ped integer]],hasCone--[[@param hasCone boolean]])return InvokeVoid(0xD30C50DF888D58B5,ped,hasCone)end;
	--[=[color: see SET_BLIP_COLOUR]=]
	SetPedHasAiBlipWithColour=function(ped--[[@param ped integer]],hasCone--[[@param hasCone boolean]],color--[[@param color integer]])return InvokeVoid(0xB13DCB4C6FAAD238,ped,hasCone,color)end;
	DoesPedHaveAiBlip=function(ped--[[@param ped integer]])return InvokeBool(0x15B8ECF844EE67ED,ped)end;---@return boolean
	SetPedAiBlipGangId=function(ped--[[@param ped integer]],gangId--[[@param gangId integer]])return InvokeVoid(0xE52B8E7F85D39A08,ped,gangId)end;
	SetPedAiBlipHasCone=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x3EED80DFF7325CAA,ped,toggle)end;
	SetPedAiBlipForcedOn=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x0C4BBF625CA98C4E,ped,toggle)end;
	SetPedAiBlipNoticeRange=function(ped--[[@param ped integer]],range--[[@param range number]])return InvokeVoid(0x97C65887D4B37FA9,ped,range+.0)end;
	SetPedAiBlipSprite=function(ped--[[@param ped integer]],spriteId--[[@param spriteId integer]])return InvokeVoid(0xFCFACD0DB9D7A57D,ped,spriteId)end;
	GetAiPedPedBlipIndex=function(ped--[[@param ped integer]])return InvokeInt(0x7CD934010E115C2C,ped)end;---@return integer
	--[=[Returns the current AI BLIP for the specified ped]=]
	GetAiPedVehicleBlipIndex=function(ped--[[@param ped integer]])return InvokeInt(0x56176892826A4FE8,ped)end;---@return integer
	HasDirectorModeBeenLaunchedByCode=function()return InvokeBool(0xA277800A9EAE340E)end;---@return boolean
	SetDirectorModeLaunchedByScript=function()return InvokeVoid(0x2632482FD6B9AB87)end;
	--[=[If toggle is true, hides special ability bar / character name in the pause menu
If toggle is false, shows special ability bar / character name in the pause menu]=]
	SetPlayerIsInDirectorMode=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x808519373FD336A3,toggle)end;
	SetDirectorModeAvailable=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x04655F9D075D0AE5,toggle)end;
	HideHudmarkersThisFrame=function()return InvokeVoid(0x243296A510B562B6)end;
}
_G.Interior={
	GetInteriorHeading=function(interior--[[@param interior integer]])return InvokeFloat(0xF49B58631D9E22D9,interior)end;---@return number
	GetInteriorLocationAndNamehash=function(interior--[[@param interior integer]],position--[[@param position V3*]],nameHash--[[@param nameHash integer*]])return InvokeVoid(0x252BDC06B73FA6EA,interior,position,nameHash)end;
	--[=[Returns the group ID of the specified interior.
0 = default
1 = subway station, subway tracks, sewers
3 = train tunnel under mirror park
5 = tunnel near del perro
6 = train tunnel near chilliad
7 = train tunnel near josiah
8 = train tunnel in sandy shores
9 = braddock tunnel (near chilliad)
12 = tunnel under fort zancudo
14 = train tunnel under cypress flats
18 = rockford plaza parking garage
19 = arcadius parking garage
20 = union depository parking garage
21 = fib parking garage]=]
	GetInteriorGroupId=function(interior--[[@param interior integer]])return InvokeInt(0xE4A84ABF135EF91A,interior)end;---@return integer
	GetOffsetFromInteriorInWorldCoords=function(interior--[[@param interior integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeV3(0x9E3B3E6D66F6E22F,interior,x+.0,y+.0,z+.0)end;---@return V3
	IsInteriorScene=function()return InvokeBool(0xBC72B5D7A1CBD54D)end;---@return boolean
	IsValidInterior=function(interior--[[@param interior integer]])return InvokeBool(0x26B0E73D7EAAF4D3,interior)end;---@return boolean
	ClearRoomForEntity=function(entity--[[@param entity integer]])return InvokeVoid(0xB365FC0C4E27FFA7,entity)end;
	ForceRoomForEntity=function(entity--[[@param entity integer]],interior--[[@param interior integer]],roomHashKey--[[@param roomHashKey integer]])return InvokeVoid(0x52923C4710DD9907,entity,interior,roomHashKey)end;
	--[=[Gets the room hash key from the room that the specified entity is in. Each room in every interior has a unique key. Returns 0 if the entity is outside.]=]
	GetRoomKeyFromEntity=function(entity--[[@param entity integer]])return InvokeInt(0x47C2A06D4F5F424B,entity)end;---@return integer
	--[=[Seems to do the exact same as INTERIOR::GET_ROOM_KEY_FROM_ENTITY]=]
	GetKeyForEntityInRoom=function(entity--[[@param entity integer]])return InvokeInt(0x399685DB942336BC,entity)end;---@return integer
	--[=[Returns the handle of the interior that the entity is in. Returns 0 if outside.]=]
	GetInteriorFromEntity=function(entity--[[@param entity integer]])return InvokeInt(0x2107BA504071A6BB,entity)end;---@return integer
	RetainEntityInInterior=function(entity--[[@param entity integer]],interior--[[@param interior integer]])return InvokeVoid(0x82EBB79E258FA2B7,entity,interior)end;
	--[=[Immediately removes entity from an interior. Like sets entity to `limbo` room.]=]
	ClearInteriorStateOfEntity=function(entity--[[@param entity integer]])return InvokeVoid(0x85D5422B2039A70D,entity)end;
	ForceActivatingTrackingOnEntity=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x38C1CB1CB119A016,p0,p1)end;
	ForceRoomForGameViewport=function(interiorID--[[@param interiorID integer]],roomHashKey--[[@param roomHashKey integer]])return InvokeVoid(0x920D853F3E17F1DA,interiorID,roomHashKey)end;
	--[=[Example of use (carmod_shop)
INTERIOR::SET_ROOM_FOR_GAME_VIEWPORT_BY_NAME("V_CarModRoom");]=]
	SetRoomForGameViewportByName=function(roomName--[[@param roomName string]])return InvokeVoid(0xAF348AFCB575A441,roomName)end;
	--[=[Usage: INTERIOR::SET_ROOM_FOR_GAME_VIEWPORT_BY_KEY(INTERIOR::GET_KEY_FOR_ENTITY_IN_ROOM(PLAYER::PLAYER_PED_ID()));]=]
	SetRoomForGameViewportByKey=function(roomHashKey--[[@param roomHashKey integer]])return InvokeVoid(0x405DC2AEF6AF95B9,roomHashKey)end;
	GetRoomKeyForGameViewport=function()return InvokeInt(0xA6575914D2A0B450)end;---@return integer
	ClearRoomForGameViewport=function()return InvokeVoid(0x23B59D8912F94246)end;
	--[=[Returns the current interior id from gameplay camera]=]
	GetInteriorFromPrimaryView=function()return InvokeInt(0xE7D267EC6CA966C3)end;---@return integer
	--[=[Returns interior ID from specified coordinates. If coordinates are outside, then it returns 0.

Example for VB.NET
Dim interiorID As Integer = Native.Function.Call(Of Integer)(Hash.GET_INTERIOR_AT_COORDS, X, Y, Z)]=]
	GetInteriorAtCoords=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeInt(0xB0F7F8663821D9C3,x+.0,y+.0,z+.0)end;---@return integer
	AddPickupToInteriorRoomByName=function(pickup--[[@param pickup integer]],roomName--[[@param roomName string]])return InvokeVoid(0x3F6167F351168730,pickup,roomName)end;
	PinInteriorInMemory=function(interior--[[@param interior integer]])return InvokeVoid(0x2CA429C029CCF247,interior)end;
	--[=[Does something similar to INTERIOR::DISABLE_INTERIOR.

You don't fall through the floor but everything is invisible inside and looks the same as when INTERIOR::DISABLE_INTERIOR is used. Peds behaves normally inside. ]=]
	UnpinInterior=function(interior--[[@param interior integer]])return InvokeVoid(0x261CCE7EED010641,interior)end;
	IsInteriorReady=function(interior--[[@param interior integer]])return InvokeBool(0x6726BDCCC1932F0E,interior)end;---@return boolean
	--[=[Only used once in the entire game scripts.
Does not actually return anything.]=]
	SetInteriorInUse=function(interior--[[@param interior integer]])return InvokeBool(0x4C2330E61D3DEB56,interior)end;---@return boolean
	--[=[Returns the interior ID representing the requested interior at that location (if found?). The supplied interior string is not the same as the one used to load the interior.

Use: INTERIOR::UNPIN_INTERIOR(INTERIOR::GET_INTERIOR_AT_COORDS_WITH_TYPE(x, y, z, interior))

Interior types include: "V_Michael", "V_Franklins", "V_Franklinshouse", etc.. you can find them in the scripts.

Not a very useful native as you could just use GET_INTERIOR_AT_COORDS instead and get the same result, without even having to specify the interior type.]=]
	GetInteriorAtCoordsWithType=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],interiorType--[[@param interiorType string]])return InvokeInt(0x05B7A89BD78797FC,x+.0,y+.0,z+.0,interiorType)end;---@return integer
	--[=[Hashed version of GET_INTERIOR_AT_COORDS_WITH_TYPE]=]
	GetInteriorAtCoordsWithTypehash=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],typeHash--[[@param typeHash integer]])return InvokeInt(0xF0F77ADB9F67E79D,x+.0,y+.0,z+.0,typeHash)end;---@return integer
	ActivateInteriorGroupsUsingCamera=function()return InvokeVoid(0x483ACA1176CA93F1)end;
	--[=[Returns true if the collision at the specified coords is marked as being outside (false if there's an interior)]=]
	IsCollisionMarkedOutside=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeBool(0xEEA5AC2EDA7C33E8,x+.0,y+.0,z+.0)end;---@return boolean
	GetInteriorFromCollision=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeInt(0xEC4CF9FCB29A4424,x+.0,y+.0,z+.0)end;---@return integer
	EnableStadiumProbesThisFrame=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x7ECDF98587E92DEC,toggle)end;
	--[=[More info: http://gtaforums.com/topic/836367-adding-props-to-interiors/

Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json]=]
	ActivateInteriorEntitySet=function(interior--[[@param interior integer]],entitySetName--[[@param entitySetName string]])return InvokeVoid(0x55E86AF2712B36A1,interior,entitySetName)end;
	--[=[Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json]=]
	DeactivateInteriorEntitySet=function(interior--[[@param interior integer]],entitySetName--[[@param entitySetName string]])return InvokeVoid(0x420BD37289EEE162,interior,entitySetName)end;
	--[=[Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json]=]
	IsInteriorEntitySetActive=function(interior--[[@param interior integer]],entitySetName--[[@param entitySetName string]])return InvokeBool(0x35F7DD45E8C0A16D,interior,entitySetName)end;---@return boolean
	--[=[Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json]=]
	SetInteriorEntitySetTintIndex=function(interior--[[@param interior integer]],entitySetName--[[@param entitySetName string]],color--[[@param color integer]])return InvokeVoid(0xC1F1920BAF281317,interior,entitySetName,color)end;
	RefreshInterior=function(interior--[[@param interior integer]])return InvokeVoid(0x41F37C3427C75AE0,interior)end;
	--[=[This is the native that is used to hide the exterior of GTA Online apartment buildings when you are inside an apartment.

More info: http://gtaforums.com/topic/836301-hiding-gta-online-apartment-exteriors/]=]
	EnableExteriorCullModelThisFrame=function(mapObjectHash--[[@param mapObjectHash integer]])return InvokeVoid(0xA97F257D0151A6AB,mapObjectHash)end;
	EnableShadowCullModelThisFrame=function(mapObjectHash--[[@param mapObjectHash integer]])return InvokeVoid(0x50C375537449F369,mapObjectHash)end;
	--[=[Example: 
This removes the interior from the strip club and when trying to walk inside the player just falls:

INTERIOR::DISABLE_INTERIOR(118018, true);]=]
	DisableInterior=function(interior--[[@param interior integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x6170941419D7D8EC,interior,toggle)end;
	IsInteriorDisabled=function(interior--[[@param interior integer]])return InvokeBool(0xBC5115A5A939DD15,interior)end;---@return boolean
	--[=[Does something similar to INTERIOR::DISABLE_INTERIOR]=]
	CapInterior=function(interior--[[@param interior integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xD9175F941610DB54,interior,toggle)end;
	IsInteriorCapped=function(interior--[[@param interior integer]])return InvokeBool(0x92BAC8ACF88CEC26,interior)end;---@return boolean
	DisableMetroSystem=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x9E6542F0CE8E70A3,toggle)end;
	--[=[Jenkins hash _might_ be 0xFC227584.]=]
	SetIsExteriorOnly=function(entity--[[@param entity integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x7241CCB7D020DB69,entity,toggle)end;
}
_G.Itemset={
	CreateItemset=function(p0--[[@param p0 boolean]])return InvokeInt(0x35AD299F50D91B24,p0)end;---@return integer
	DestroyItemset=function(itemset--[[@param itemset integer]])return InvokeVoid(0xDE18220B1C183EDA,itemset)end;
	IsItemsetValid=function(itemset--[[@param itemset integer]])return InvokeBool(0xB1B1EA596344DFAB,itemset)end;---@return boolean
	AddToItemset=function(item--[[@param item integer]],itemset--[[@param itemset integer]])return InvokeBool(0xE3945201F14637DD,item,itemset)end;---@return boolean
	RemoveFromItemset=function(item--[[@param item integer]],itemset--[[@param itemset integer]])return InvokeVoid(0x25E68244B0177686,item,itemset)end;
	GetItemsetSize=function(itemset--[[@param itemset integer]])return InvokeInt(0xD9127E83ABF7C631,itemset)end;---@return integer
	GetIndexedItemInItemset=function(index--[[@param index integer]],itemset--[[@param itemset integer]])return InvokeInt(0x7A197E2521EE2BAB,index,itemset)end;---@return integer
	IsInItemset=function(item--[[@param item integer]],itemset--[[@param itemset integer]])return InvokeBool(0x2D0FC594D1E9C107,item,itemset)end;---@return boolean
	CleanItemset=function(itemset--[[@param itemset integer]])return InvokeVoid(0x41BC0D722FC04221,itemset)end;
}
_G.Loadingscreen={
	--[=[This function is hard-coded to always return 0.]=]
	LobbyAutoMultiplayerMenu=function()return InvokeBool(0xF2CA003F167E21D2)end;---@return boolean
	LobbyAutoMultiplayerFreemode=function()return InvokeBool(0xEF7D17BC6C85264C)end;---@return boolean
	LobbySetAutoMultiplayer=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xB0C56BD3D808D863,toggle)end;
	LobbyAutoMultiplayerEvent=function()return InvokeBool(0x8AA464D4E0F6ACCD)end;---@return boolean
	LobbySetAutoMultiplayerEvent=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xFC309E94546FCDB5,toggle)end;
	LobbyAutoMultiplayerRandomJob=function()return InvokeBool(0xC6DC823253FBB366)end;---@return boolean
	LobbySetAutoMpRandomJob=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xC7E7181C09F33B69,toggle)end;
	ShutdownSessionClearsAutoMultiplayer=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xFA1E0E893D915215,toggle)end;
}
_G.Localization={
	--[=[Same return values as GET_CURRENT_LANGUAGE]=]
	LocalizationGetSystemLanguage=function()return InvokeInt(0x497420E022796B3F)end;---@return integer
	--[=[0 = american (en-US)
1 = french (fr-FR)
2 = german (de-DE)
3 = italian (it-IT)
4 = spanish (es-ES)
5 = brazilian (pt-BR)
6 = polish (pl-PL)
7 = russian (ru-RU)
8 = korean (ko-KR)
9 = chinesetrad (zh-TW)
10 = japanese (ja-JP)
11 = mexican (es-MX)
12 = chinesesimp (zh-CN)]=]
	GetCurrentLanguage=function()return InvokeInt(0x2BDD44CC428A7EAE)end;---@return integer
	--[=[Possible return values: 0, 1, 2]=]
	LocalizationGetSystemDateType=function()return InvokeInt(0xA8AE43AEC1A61314)end;---@return integer
}
_G.Misc={
	GetAllocatedStackSize=function()return InvokeInt(0x8B3CA62B1EF19B62)end;---@return integer
	GetNumberOfFreeStacksOfThisSize=function(stackSize--[[@param stackSize integer]])return InvokeInt(0xFEAD16FC8F9DFC0F,stackSize)end;---@return integer
	SetRandomSeed=function(seed--[[@param seed integer]])return InvokeVoid(0x444D98F98C11F3EC,seed)end;
	--[=[Maximum value is 1.
At a value of 0 the game will still run at a minimum time scale.

Slow Motion 1: 0.6
Slow Motion 2: 0.4
Slow Motion 3: 0.2]=]
	SetTimeScale=function(timeScale--[[@param timeScale number]])return InvokeVoid(0x1D408577D440E81E,timeScale+.0)end;
	--[=[If true, the player can't save the game. 


If the parameter is true, sets the mission flag to true, if the parameter is false, the function does nothing at all.

^ also, if the mission flag is already set, the function does nothing at all]=]
	SetMissionFlag=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xC4301E5121A0ED73,toggle)end;
	GetMissionFlag=function()return InvokeBool(0xA33CDCCDA663159E)end;---@return boolean
	--[=[If the parameter is true, sets the random event flag to true, if the parameter is false, the function does nothing at all.
Does nothing if the mission flag is set.]=]
	SetRandomEventFlag=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x971927086CFD2158,toggle)end;
	GetRandomEventFlag=function()return InvokeBool(0xD2D57F1D764117B1)end;---@return boolean
	--[=[Returns pointer to an empty string.]=]
	GetContentToLoad=function()return InvokeString(0x24DA7D7667FD7B09)end;---@return string
	--[=[Does nothing (it's a nullsub). Seems to be PS4 specific.]=]
	ActivityFeedCreate=function(p0--[[@param p0 string]],p1--[[@param p1 string]])return InvokeVoid(0x4DCDF92BF64236CD,p0,p1)end;
	--[=[Does nothing (it's a nullsub). Seems to be PS4 specific.]=]
	ActivityFeedAddSubstringToCaption=function(p0--[[@param p0 string]])return InvokeVoid(0x31125FD509D9043F,p0)end;
	--[=[Does nothing (it's a nullsub). Seems to be PS4 specific.]=]
	ActivityFeedAddLiteralSubstringToCaption=function(p0--[[@param p0 string]])return InvokeVoid(0xEBD3205A207939ED,p0)end;
	--[=[Does nothing (it's a nullsub). Seems to be PS4 specific.]=]
	ActivityFeedAddIntToCaption=function(p0--[[@param p0 any]])return InvokeVoid(0x97E7E2C04245115B,p0)end;
	--[=[Does nothing (it's a nullsub). Seems to be PS4 specific.]=]
	ActivityFeedLargeImageUrl=function(p0--[[@param p0 string]])return InvokeVoid(0x916CA67D26FD1E37,p0)end;
	--[=[Does nothing (it's a nullsub). Seems to be PS4 specific.]=]
	ActivityFeedActionStartWithCommandLine=function(p0--[[@param p0 string]],p1--[[@param p1 string]])return InvokeVoid(0xEB078CA2B5E82ADD,p0,p1)end;
	--[=[Does nothing (it's a nullsub). Seems to be PS4 specific.]=]
	ActivityFeedActionStartWithCommandLineAdd=function(p0--[[@param p0 string]])return InvokeVoid(0x703CC7F60CBB2B57,p0)end;
	--[=[Does nothing (it's a nullsub). Seems to be PS4 specific.]=]
	ActivityFeedPost=function()return InvokeVoid(0x8951EB9C6906D3C8)end;
	--[=[Does nothing (it's a nullsub). Seems to be PS4 specific.

Used only once in the scripts (ingamehud) with p0 = "AF_GAMEMODE"]=]
	ActivityFeedOnlinePlayedWithPost=function(p0--[[@param p0 string]])return InvokeVoid(0xBA4B8D83BDC75551,p0)end;
	--[=[Hardcoded to return false.]=]
	HasResumedFromSuspend=function()return InvokeBool(0xE8B9C0EC9E183F35)end;---@return boolean
	--[=[Sets GtaThread+0x14A]=]
	SetScriptHighPrio=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x65D2EBB47E1CEC21,toggle)end;
	--[=[Sets bit 3 in GtaThread+0x150]=]
	SetThisIsATriggerScript=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x6F2135B6129620C1,toggle)end;
	InformCodeOfContentIdOfCurrentUgcMission=function(p0--[[@param p0 string]])return InvokeVoid(0x8D74E26F54B4E5C3,p0)end;
	GetBaseElementLocationFromMetadataBlock=function(p0--[[@param p0 any*]],p1--[[@param p1 any*]],p2--[[@param p2 any]],p3--[[@param p3 boolean]])return InvokeBool(0xB335F761606DB47C,p0,p1,p2,p3)end;---@return boolean
	--[=[Returns current weather name hash]=]
	GetPrevWeatherTypeHashName=function()return InvokeInt(0x564B884A05EC45A3)end;---@return integer
	--[=[Returns weather name hash]=]
	GetNextWeatherTypeHashName=function()return InvokeInt(0x711327CD09C8F162)end;---@return integer
	IsPrevWeatherType=function(weatherType--[[@param weatherType string]])return InvokeBool(0x44F28F86433B10A9,weatherType)end;---@return boolean
	IsNextWeatherType=function(weatherType--[[@param weatherType string]])return InvokeBool(0x2FAA3A30BEC0F25D,weatherType)end;---@return boolean
	--[=[The following weatherTypes are used in the scripts:
"CLEAR"
"EXTRASUNNY"
"CLOUDS"
"OVERCAST"
"RAIN"
"CLEARING"
"THUNDER"
"SMOG"
"FOGGY"
"XMAS"
"SNOW"
"SNOWLIGHT"
"BLIZZARD"
"HALLOWEEN"
"NEUTRAL"]=]
	SetWeatherTypePersist=function(weatherType--[[@param weatherType string]])return InvokeVoid(0x704983DF373B198F,weatherType)end;
	--[=[The following weatherTypes are used in the scripts:
"CLEAR"
"EXTRASUNNY"
"CLOUDS"
"OVERCAST"
"RAIN"
"CLEARING"
"THUNDER"
"SMOG"
"FOGGY"
"XMAS"
"SNOW"
"SNOWLIGHT"
"BLIZZARD"
"HALLOWEEN"
"NEUTRAL"]=]
	SetWeatherTypeNowPersist=function(weatherType--[[@param weatherType string]])return InvokeVoid(0xED712CA327900C8A,weatherType)end;
	--[=[The following weatherTypes are used in the scripts:
"CLEAR"
"EXTRASUNNY"
"CLOUDS"
"OVERCAST"
"RAIN"
"CLEARING"
"THUNDER"
"SMOG"
"FOGGY"
"XMAS"
"SNOW"
"SNOWLIGHT"
"BLIZZARD"
"HALLOWEEN"
"NEUTRAL"]=]
	SetWeatherTypeNow=function(weatherType--[[@param weatherType string]])return InvokeVoid(0x29B487C359E19889,weatherType)end;
	SetWeatherTypeOvertimePersist=function(weatherType--[[@param weatherType string]],time--[[@param time number]])return InvokeVoid(0xFB5045B7C42B75BF,weatherType,time+.0)end;
	SetRandomWeatherType=function()return InvokeVoid(0x8B05F884CF7E8020)end;
	ClearWeatherTypePersist=function()return InvokeVoid(0xCCC39339BEF76CF5)end;
	ClearWeatherTypeNowPersistNetwork=function(milliseconds--[[@param milliseconds integer]])return InvokeVoid(0x0CF97F497FE7D048,milliseconds)end;
	GetCurrWeatherState=function(weatherType1--[[@param weatherType1 integer*]],weatherType2--[[@param weatherType2 integer*]],percentWeather2--[[@param percentWeather2 number*]])return InvokeVoid(0xF3BBE884A14BB413,weatherType1,weatherType2,percentWeather2)end;
	--[=[Mixes two weather types. If percentWeather2 is set to 0.0f, then the weather will be entirely of weatherType1, if it is set to 1.0f it will be entirely of weatherType2. If it's set somewhere in between, there will be a mixture of weather behaviors. To test, try this in the RPH console, and change the float to different values between 0 and 1:

execute "NativeFunction.Natives.x578C752848ECFA0C(Game.GetHashKey(""RAIN""), Game.GetHashKey(""SMOG""), 0.50f);

Note that unlike most of the other weather natives, this native takes the hash of the weather name, not the plain string. These are the weather names and their hashes:

CLEAR  0x36A83D84
EXTRASUNNY  0x97AA0A79
CLOUDS  0x30FDAF5C
OVERCAST    0xBB898D2D
RAIN    0x54A69840
CLEARING    0x6DB1A50D
THUNDER 0xB677829F
SMOG    0x10DCF4B5
FOGGY   0xAE737644
XMAS    0xAAC9C895
SNOWLIGHT   0x23FB812B
BLIZZARD    0x27EA2814





/* OLD INVALID INFO BELOW */
Not tested. Based purely on disassembly. Instantly sets the weather to sourceWeather, then transitions to targetWeather over the specified transitionTime in seconds.

If an invalid hash is specified for sourceWeather, the current weather type will be used.
If an invalid hash is specified for targetWeather, the next weather type will be used.
If an invalid hash is specified for both sourceWeather and targetWeather, the function just changes the transition time of the current transition.]=]
	SetCurrWeatherState=function(weatherType1--[[@param weatherType1 integer]],weatherType2--[[@param weatherType2 integer]],percentWeather2--[[@param percentWeather2 number]])return InvokeVoid(0x578C752848ECFA0C,weatherType1,weatherType2,percentWeather2+.0)end;
	--[=[Appears to have an optional bool parameter that is unused in the scripts.

If you pass true, something will be set to zero.]=]
	SetOverrideWeather=function(weatherType--[[@param weatherType string]])return InvokeVoid(0xA43D5C6FE51ADBEF,weatherType)end;
	--[=[Identical to SET_OVERRIDE_WEATHER but has an additional BOOL param that sets some weather var to 0 if true]=]
	SetOverrideWeatherex=function(weatherType--[[@param weatherType string]],p1--[[@param p1 boolean]])return InvokeVoid(0x1178E104409FE58C,weatherType,p1)end;
	ClearOverrideWeather=function()return InvokeVoid(0x338D2E3477711050)end;
	WaterOverrideSetShorewaveamplitude=function(amplitude--[[@param amplitude number]])return InvokeVoid(0xB8F87EAD7533B176,amplitude+.0)end;
	WaterOverrideSetShorewaveminamplitude=function(minAmplitude--[[@param minAmplitude number]])return InvokeVoid(0xC3EAD29AB273ECE8,minAmplitude+.0)end;
	WaterOverrideSetShorewavemaxamplitude=function(maxAmplitude--[[@param maxAmplitude number]])return InvokeVoid(0xA7A1127490312C36,maxAmplitude+.0)end;
	WaterOverrideSetOceannoiseminamplitude=function(minAmplitude--[[@param minAmplitude number]])return InvokeVoid(0x31727907B2C43C55,minAmplitude+.0)end;
	WaterOverrideSetOceanwaveamplitude=function(amplitude--[[@param amplitude number]])return InvokeVoid(0x405591EC8FD9096D,amplitude+.0)end;
	WaterOverrideSetOceanwaveminamplitude=function(minAmplitude--[[@param minAmplitude number]])return InvokeVoid(0xF751B16FB32ABC1D,minAmplitude+.0)end;
	WaterOverrideSetOceanwavemaxamplitude=function(maxAmplitude--[[@param maxAmplitude number]])return InvokeVoid(0xB3E6360DDE733E82,maxAmplitude+.0)end;
	WaterOverrideSetRipplebumpiness=function(bumpiness--[[@param bumpiness number]])return InvokeVoid(0x7C9C0B1EEB1F9072,bumpiness+.0)end;
	WaterOverrideSetRippleminbumpiness=function(minBumpiness--[[@param minBumpiness number]])return InvokeVoid(0x6216B116083A7CB4,minBumpiness+.0)end;
	WaterOverrideSetRipplemaxbumpiness=function(maxBumpiness--[[@param maxBumpiness number]])return InvokeVoid(0x9F5E6BB6B34540DA,maxBumpiness+.0)end;
	WaterOverrideSetRippledisturb=function(disturb--[[@param disturb number]])return InvokeVoid(0xB9854DFDE0D833D6,disturb+.0)end;
	--[=[This seems to edit the water wave, intensity around your current location.

0.0f = Normal
1.0f = So Calm and Smooth, a boat will stay still.
3.0f = Really Intense.]=]
	WaterOverrideSetStrength=function(strength--[[@param strength number]])return InvokeVoid(0xC54A08C85AE4D410,strength+.0)end;
	WaterOverrideFadeIn=function(p0--[[@param p0 number]])return InvokeVoid(0xA8434F1DFF41D6E7,p0+.0)end;
	WaterOverrideFadeOut=function(p0--[[@param p0 number]])return InvokeVoid(0xC3C221ADDDE31A11,p0+.0)end;
	--[=[Sets the the normalized wind speed value. The wind speed clamps always at 12.0, SET_WIND sets the wind in a percentage, 0.0 is 0 and 1.0 is 12.0. Setting this value to a negative number resumes the random wind speed changes provided by the game.]=]
	SetWind=function(speed--[[@param speed number]])return InvokeVoid(0xAC3A74E8384A9919,speed+.0)end;
	--[=[Using this native will set the absolute wind speed value. The wind speed clamps to a range of 0.0- 12.0. Setting this value to a negative number resumes the random wind speed changes provided by the game.]=]
	SetWindSpeed=function(speed--[[@param speed number]])return InvokeVoid(0xEE09ECEDBABE47FC,speed+.0)end;
	GetWindSpeed=function()return InvokeFloat(0xA8CF1CC0AFCD3F12)end;---@return number
	--[=[The wind direction in radians
180 degrees (PI), wind will blow from the south. Setting this value to a negative number resumes the random wind direction changes provided by the game.]=]
	SetWindDirection=function(direction--[[@param direction number]])return InvokeVoid(0xEB0F4468467B4528,direction+.0)end;
	GetWindDirection=function()return InvokeV3(0x1F400FEF721170DA)end;---@return V3
	--[=[With an `intensity` higher than `0.5f`, only the creation of puddles gets faster, rain and rain sound won't increase after that.
With an `intensity` of `0.0f` rain and rain sounds are disabled and there won't be any new puddles.
To use the rain intensity of the current weather, call this native with `-1f` as `intensity`.]=]
	SetRain=function(intensity--[[@param intensity number]])return InvokeVoid(0x643E26EA6E024D92,intensity+.0)end;
	GetRainLevel=function()return InvokeFloat(0x96695E368AD855F3)end;---@return number
	SetSnow=function(level--[[@param level number]])return InvokeVoid(0x7F06937B0CDCBC1A,level+.0)end;
	GetSnowLevel=function()return InvokeFloat(0xC5868A966E5BE3AE)end;---@return number
	--[=[creates single lightning+thunder at random position]=]
	ForceLightningFlash=function()return InvokeVoid(0xF6062E089251C898)end;
	SetCloudSettingsOverride=function(p0--[[@param p0 string]])return InvokeVoid(0x02DEAAC8F8EA7FE7,p0)end;
	PreloadCloudHat=function(name--[[@param name string]])return InvokeVoid(0x11B56FBBF7224868,name)end;
	--[=[The following cloudhats are useable:
altostratus
Cirrus
cirrocumulus
Clear 01
Cloudy 01
Contrails
Horizon
horizonband1
horizonband2
horizonband3
horsey
Nimbus
Puffs
RAIN
Snowy 01
Stormy 01
stratoscumulus
Stripey
shower
Wispy
]=]
	LoadCloudHat=function(name--[[@param name string]],transitionTime--[[@param transitionTime number]])return InvokeVoid(0xFC4842A34657BFCB,name,transitionTime+.0)end;
	UnloadCloudHat=function(name--[[@param name string]],p1--[[@param p1 number]])return InvokeVoid(0xA74802FB8D0B7814,name,p1+.0)end;
	UnloadAllCloudHats=function()return InvokeVoid(0x957E790EA1727B64)end;
	SetCloudsAlpha=function(opacity--[[@param opacity number]])return InvokeVoid(0xF36199225D6D8C86,opacity+.0)end;
	GetCloudsAlpha=function()return InvokeFloat(0x20AC25E781AE4A84)end;---@return number
	GetGameTimer=function()return InvokeInt(0x9CD27B0045628463)end;---@return integer
	GetFrameTime=function()return InvokeFloat(0x15C40837039FFAF7)end;---@return number
	GetSystemTimeStep=function()return InvokeFloat(0xE599A503B3837E1B)end;---@return number
	GetFrameCount=function()return InvokeInt(0xFC8202EFC642E6F2)end;---@return integer
	GetRandomFloatInRange=function(startRange--[[@param startRange number]],endRange--[[@param endRange number]])return InvokeFloat(0x313CE5879CEB6FCD,startRange+.0,endRange+.0)end;---@return number
	GetRandomIntInRange=function(startRange--[[@param startRange integer]],endRange--[[@param endRange integer]])return InvokeInt(0xD53343AA4FB7DD28,startRange,endRange)end;---@return integer
	GetRandomMwcIntInRange=function(startRange--[[@param startRange integer]],endRange--[[@param endRange integer]])return InvokeInt(0xF2D49816A804D134,startRange,endRange)end;---@return integer
	--[=[Gets the ground elevation at the specified position. Note that if the specified position is below ground level, the function will output zero!

x: Position on the X-axis to get ground elevation at.
y: Position on the Y-axis to get ground elevation at.
z: Position on the Z-axis to get ground elevation at.
groundZ: The ground elevation at the specified position.
ignoreWater: Nearly always 0, very rarely 1 in the scripts: https://gfycat.com/NiftyTatteredCricket

Bear in mind this native can only calculate the elevation when the coordinates are within the client's render distance.]=]
	GetGroundZFor3dCoord=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],groundZ--[[@param groundZ number*]],ignoreWater--[[@param ignoreWater boolean]],p5--[[@param p5 boolean]])return InvokeBool(0xC906A7DAB05C8D2B,x+.0,y+.0,z+.0,groundZ,ignoreWater,p5)end;---@return boolean
	GetGroundZAndNormalFor3dCoord=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],groundZ--[[@param groundZ number*]],normal--[[@param normal V3*]])return InvokeBool(0x8BDC7BFC57A81E76,x+.0,y+.0,z+.0,groundZ,normal)end;---@return boolean
	GetGroundZExcludingObjectsFor3dCoord=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],groundZ--[[@param groundZ number*]],p4--[[@param p4 boolean]],p5--[[@param p5 boolean]])return InvokeBool(0x9E82F0F362881B29,x+.0,y+.0,z+.0,groundZ,p4,p5)end;---@return boolean
	Asin=function(p0--[[@param p0 number]])return InvokeFloat(0xC843060B5765DCE7,p0+.0)end;---@return number
	Acos=function(p0--[[@param p0 number]])return InvokeFloat(0x1D08B970013C34B6,p0+.0)end;---@return number
	Tan=function(p0--[[@param p0 number]])return InvokeFloat(0x632106CC96E82E91,p0+.0)end;---@return number
	Atan=function(p0--[[@param p0 number]])return InvokeFloat(0xA9D1795CD5043663,p0+.0)end;---@return number
	Atan2=function(p0--[[@param p0 number]],p1--[[@param p1 number]])return InvokeFloat(0x8927CBF9D22261A4,p0+.0,p1+.0)end;---@return number
	--[=[Returns the distance between two three-dimensional points, optionally ignoring the Z values.
If useZ is false, only the 2D plane (X-Y) will be considered for calculating the distance.

Consider using this faster native instead: SYSTEM::VDIST - DVIST always takes in consideration the 3D coordinates.]=]
	GetDistanceBetweenCoords=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],useZ--[[@param useZ boolean]])return InvokeFloat(0xF1B760881820C952,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,useZ)end;---@return number
	GetAngleBetween2dVectors=function(x1--[[@param x1 number]],y1--[[@param y1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]])return InvokeFloat(0x186FC4BE848E1C92,x1+.0,y1+.0,x2+.0,y2+.0)end;---@return number
	--[=[dx = x1 - x2
dy = y1 - y2]=]
	GetHeadingFromVector2d=function(dx--[[@param dx number]],dy--[[@param dy number]])return InvokeFloat(0x2FFB6B224F4B2926,dx+.0,dy+.0)end;---@return number
	--[=[returns a float between 0.0 and 1.0, clamp: sets whether the product should be clamped between the given coordinates]=]
	GetRatioOfClosestPointOnLine=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],x3--[[@param x3 number]],y3--[[@param y3 number]],z3--[[@param z3 number]],clamp--[[@param clamp boolean]])return InvokeFloat(0x7F8F6405F4777AF6,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,x3+.0,y3+.0,z3+.0,clamp)end;---@return number
	--[=[clamp: sets whether the product should be clamped between the given coordinates]=]
	GetClosestPointOnLine=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],x3--[[@param x3 number]],y3--[[@param y3 number]],z3--[[@param z3 number]],clamp--[[@param clamp boolean]])return InvokeV3(0x21C235BC64831E5A,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,x3+.0,y3+.0,z3+.0,clamp)end;---@return V3
	GetLinePlaneIntersection=function(p0--[[@param p0 number]],p1--[[@param p1 number]],p2--[[@param p2 number]],p3--[[@param p3 number]],p4--[[@param p4 number]],p5--[[@param p5 number]],p6--[[@param p6 number]],p7--[[@param p7 number]],p8--[[@param p8 number]],p9--[[@param p9 number]],p10--[[@param p10 number]],p11--[[@param p11 number]],p12--[[@param p12 number*]])return InvokeBool(0xF56DFB7B61BE7276,p0+.0,p1+.0,p2+.0,p3+.0,p4+.0,p5+.0,p6+.0,p7+.0,p8+.0,p9+.0,p10+.0,p11+.0,p12)end;---@return boolean
	GetPointAreaOverlap=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]],p5--[[@param p5 any]],p6--[[@param p6 any]],p7--[[@param p7 any]],p8--[[@param p8 any]],p9--[[@param p9 any]],p10--[[@param p10 any]],p11--[[@param p11 any]],p12--[[@param p12 any]],p13--[[@param p13 any]])return InvokeBool(0xA0AD167E4B39D9A2,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13)end;---@return boolean
	--[=[This sets bit [offset] of [address] to on.

The offsets used are different bits to be toggled on and off, typically there is only one address used in a script.

Example:
MISC::SET_BIT(&bitAddress, 1);

To check if this bit has been enabled:
MISC::IS_BIT_SET(bitAddress, 1); // will return 1 afterwards

Please note, this method may assign a value to [address] when used.]=]
	SetBit=function(address--[[@param address integer*]],offset--[[@param offset integer]])return InvokeVoid(0x933D6A9EEC1BACD0,address,offset)end;
	--[=[This sets bit [offset] of [address] to off.

Example:
MISC::CLEAR_BIT(&bitAddress, 1);

To check if this bit has been enabled:
MISC::IS_BIT_SET(bitAddress, 1); // will return 0 afterwards]=]
	ClearBit=function(address--[[@param address integer*]],offset--[[@param offset integer]])return InvokeVoid(0xE80492A9AC099A93,address,offset)end;
	--[=[This native converts its past string to hash. It is hashed using jenkins one at a time method.]=]
	GetHashKey=function(string--[[@param string string]])return InvokeInt(0xD24D37CC275948CC,string)end;---@return integer
	--[=[This native always come right before SET_ENTITY_QUATERNION where its final 4 parameters are SLERP_NEAR_QUATERNION p9 to p12]=]
	SlerpNearQuaternion=function(t--[[@param t number]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],w--[[@param w number]],x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],w1--[[@param w1 number]],outX--[[@param outX number*]],outY--[[@param outY number*]],outZ--[[@param outZ number*]],outW--[[@param outW number*]])return InvokeVoid(0xF2F6A2FA49278625,t+.0,x+.0,y+.0,z+.0,w+.0,x1+.0,y1+.0,z1+.0,w1+.0,outX,outY,outZ,outW)end;
	IsAreaOccupied=function(p0--[[@param p0 number]],p1--[[@param p1 number]],p2--[[@param p2 number]],p3--[[@param p3 number]],p4--[[@param p4 number]],p5--[[@param p5 number]],p6--[[@param p6 boolean]],p7--[[@param p7 boolean]],p8--[[@param p8 boolean]],p9--[[@param p9 boolean]],p10--[[@param p10 boolean]],p11--[[@param p11 any]],p12--[[@param p12 boolean]])return InvokeBool(0xA61B4DF533DCB56E,p0+.0,p1+.0,p2+.0,p3+.0,p4+.0,p5+.0,p6,p7,p8,p9,p10,p11,p12)end;---@return boolean
	IsAreaOccupiedSlow=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]],p5--[[@param p5 any]],p6--[[@param p6 any]],p7--[[@param p7 any]],p8--[[@param p8 any]],p9--[[@param p9 any]],p10--[[@param p10 any]],p11--[[@param p11 any]],p12--[[@param p12 any]])return InvokeBool(0x39455BF4F4F55186,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12)end;---@return boolean
	--[=[`range`: The range, seems to not be very accurate during testing.
`p4`: Unknown, when set to true it seems to always return true no matter what I try.
`checkVehicle`: Check for any vehicles in that area.
`checkPeds`: Check for any peds in that area.
`ignoreEntity`: This entity will be ignored if it's in the area. Set to 0 if you don't want to exclude any entities.
The BOOL parameters that are documented have not been confirmed. They are just documented from what I've found during testing. They may not work as expected in all cases.

Returns true if there is anything in that location matching the provided parameters.]=]
	IsPositionOccupied=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],range--[[@param range number]],p4--[[@param p4 boolean]],checkVehicles--[[@param checkVehicles boolean]],checkPeds--[[@param checkPeds boolean]],p7--[[@param p7 boolean]],p8--[[@param p8 boolean]],ignoreEntity--[[@param ignoreEntity integer]],p10--[[@param p10 boolean]])return InvokeBool(0xADCDE75E1C60F32D,x+.0,y+.0,z+.0,range+.0,p4,checkVehicles,checkPeds,p7,p8,ignoreEntity,p10)end;---@return boolean
	IsPointObscuredByAMissionEntity=function(p0--[[@param p0 number]],p1--[[@param p1 number]],p2--[[@param p2 number]],p3--[[@param p3 number]],p4--[[@param p4 number]],p5--[[@param p5 number]],p6--[[@param p6 any]])return InvokeBool(0xE54E209C35FFA18D,p0+.0,p1+.0,p2+.0,p3+.0,p4+.0,p5+.0,p6)end;---@return boolean
	--[=[Example: CLEAR_AREA(0, 0, 0, 30, true, false, false, false);]=]
	ClearArea=function(X--[[@param X number]],Y--[[@param Y number]],Z--[[@param Z number]],radius--[[@param radius number]],p4--[[@param p4 boolean]],ignoreCopCars--[[@param ignoreCopCars boolean]],ignoreObjects--[[@param ignoreObjects boolean]],p7--[[@param p7 boolean]])return InvokeVoid(0xA56F01F3765B93A0,X+.0,Y+.0,Z+.0,radius+.0,p4,ignoreCopCars,ignoreObjects,p7)end;
	--[=[MISC::CLEAR_AREA_LEAVE_VEHICLE_HEALTH(x, y, z, radius, false, false, false, false); seem to make all objects go away, peds, vehicles etc. All booleans set to true doesn't seem to change anything. ]=]
	ClearAreaLeaveVehicleHealth=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]],p4--[[@param p4 boolean]],p5--[[@param p5 boolean]],p6--[[@param p6 boolean]],p7--[[@param p7 boolean]])return InvokeVoid(0x957838AAF91BD12D,x+.0,y+.0,z+.0,radius+.0,p4,p5,p6,p7)end;
	--[=[Example:
CLEAR_AREA_OF_VEHICLES(0.0f, 0.0f, 0.0f, 10000.0f, false, false, false, false, false, false);]=]
	ClearAreaOfVehicles=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]],p4--[[@param p4 boolean]],p5--[[@param p5 boolean]],p6--[[@param p6 boolean]],p7--[[@param p7 boolean]],p8--[[@param p8 boolean]],p9--[[@param p9 boolean]],p10--[[@param p10 any]])return InvokeVoid(0x01C7B9B38428AEB6,x+.0,y+.0,z+.0,radius+.0,p4,p5,p6,p7,p8,p9,p10)end;
	ClearAngledAreaOfVehicles=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],width--[[@param width number]],p7--[[@param p7 boolean]],p8--[[@param p8 boolean]],p9--[[@param p9 boolean]],p10--[[@param p10 boolean]],p11--[[@param p11 boolean]],p12--[[@param p12 any]],p13--[[@param p13 any]])return InvokeVoid(0x11DB3500F042A8AA,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,width+.0,p7,p8,p9,p10,p11,p12,p13)end;
	--[=[I looked through the PC scripts that this site provides you with a link to find. It shows the last param mainly uses, (0, 2, 6, 16, and 17) so I am going to assume it is a type of flag. ]=]
	ClearAreaOfObjects=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]],flags--[[@param flags integer]])return InvokeVoid(0xDD9B9B385AAC7F5B,x+.0,y+.0,z+.0,radius+.0,flags)end;
	--[=[Example:       CLEAR_AREA_OF_PEDS(0, 0, 0, 10000, 1);]=]
	ClearAreaOfPeds=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]],flags--[[@param flags integer]])return InvokeVoid(0xBE31FD6CE464AC59,x+.0,y+.0,z+.0,radius+.0,flags)end;
	--[=[flags appears to always be 0]=]
	ClearAreaOfCops=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]],flags--[[@param flags integer]])return InvokeVoid(0x04F8FC8FCF58F88D,x+.0,y+.0,z+.0,radius+.0,flags)end;
	--[=[flags is usually 0 in the scripts.]=]
	ClearAreaOfProjectiles=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]],flags--[[@param flags integer]])return InvokeVoid(0x0A1CB9094635D1A6,x+.0,y+.0,z+.0,radius+.0,flags)end;
	--[=[Possibly used to clear scenario points.]=]
	ClearScenarioSpawnHistory=function()return InvokeVoid(0x7EC6F9A478A6A512)end;
	--[=[ignoreVehicle - bypasses vehicle check of the local player (it will not open if you are in a vehicle and this is set to false)]=]
	SetSaveMenuActive=function(ignoreVehicle--[[@param ignoreVehicle boolean]])return InvokeVoid(0xC9BF75D28165FF77,ignoreVehicle)end;
	GetStatusOfManualSave=function()return InvokeInt(0x397BAA01068BAA96)end;---@return integer
	SetCreditsActive=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xB938B7E6D3C0620C,toggle)end;
	SetCreditsFadeOutWithScreen=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xB51B9AB9EF81868C,toggle)end;
	HaveCreditsReachedEnd=function()return InvokeBool(0x075F1D57402C93BA)end;---@return boolean
	AreCreditsRunning=function()return InvokeBool(0xD19C0826DC20CF1C)end;---@return boolean
	TerminateAllScriptsWithThisName=function(scriptName--[[@param scriptName string]])return InvokeVoid(0x9DC711BC69C548DF,scriptName)end;
	NetworkSetScriptIsSafeForNetworkGame=function()return InvokeVoid(0x9243BAC96D64C050)end;
	--[=[Returns the index of the newly created hospital spawn point.

p3 might be radius?]=]
	AddHospitalRestart=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],p3--[[@param p3 number]],p4--[[@param p4 any]])return InvokeInt(0x1F464EF988465A81,x+.0,y+.0,z+.0,p3+.0,p4)end;---@return integer
	--[=[The game by default has 5 hospital respawn points. Disabling them all will cause the player to respawn at the last position they were.]=]
	DisableHospitalRestart=function(hospitalIndex--[[@param hospitalIndex integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xC8535819C450EBA8,hospitalIndex,toggle)end;
	AddPoliceRestart=function(p0--[[@param p0 number]],p1--[[@param p1 number]],p2--[[@param p2 number]],p3--[[@param p3 number]],p4--[[@param p4 any]])return InvokeInt(0x452736765B31FC4B,p0+.0,p1+.0,p2+.0,p3+.0,p4)end;---@return integer
	--[=[Disables the spawn point at the police house on the specified index.

policeIndex: The police house index.
toggle: true to enable the spawn point, false to disable.

- Nacorpio]=]
	DisablePoliceRestart=function(policeIndex--[[@param policeIndex integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x23285DED6EBD7EA3,policeIndex,toggle)end;
	SetRestartCoordOverride=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],heading--[[@param heading number]])return InvokeVoid(0x706B5EDCAA7FA663,x+.0,y+.0,z+.0,heading+.0)end;
	ClearRestartCoordOverride=function()return InvokeVoid(0xA2716D40842EAF79)end;
	PauseDeathArrestRestart=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x2C2B3493FBF51C71,toggle)end;
	IgnoreNextRestart=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x21FFB63D8C615361,toggle)end;
	--[=[Sets whether the game should fade out after the player dies.]=]
	SetFadeOutAfterDeath=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x4A18E01DF2C87B86,toggle)end;
	--[=[Sets whether the game should fade out after the player is arrested.]=]
	SetFadeOutAfterArrest=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x1E0B4DC0D990A4E7,toggle)end;
	--[=[Sets whether the game should fade in after the player dies or is arrested.]=]
	SetFadeInAfterDeathArrest=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xDA66D2796BA33F12,toggle)end;
	SetFadeInAfterLoad=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xF3D78F59DFE18D79,toggle)end;
	--[=[returns savehouseHandle]=]
	RegisterSaveHouse=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],p3--[[@param p3 number]],p4--[[@param p4 string]],p5--[[@param p5 any]],p6--[[@param p6 any]])return InvokeInt(0xC0714D0A7EEECA54,x+.0,y+.0,z+.0,p3+.0,p4,p5,p6)end;---@return integer
	SetSaveHouse=function(savehouseHandle--[[@param savehouseHandle integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0x4F548CABEAE553BC,savehouseHandle,p1,p2)end;
	OverrideSaveHouse=function(p0--[[@param p0 boolean]],p1--[[@param p1 number]],p2--[[@param p2 number]],p3--[[@param p3 number]],p4--[[@param p4 number]],p5--[[@param p5 boolean]],p6--[[@param p6 number]],p7--[[@param p7 number]])return InvokeBool(0x1162EA8AE9D24EEA,p0,p1+.0,p2+.0,p3+.0,p4+.0,p5,p6+.0,p7+.0)end;---@return boolean
	GetSaveHouseDetailsAfterSuccessfulLoad=function(p0--[[@param p0 V3*]],p1--[[@param p1 number*]],fadeInAfterLoad--[[@param fadeInAfterLoad boolean*]],p3--[[@param p3 boolean*]])return InvokeBool(0xA4A0065E39C9F25C,p0,p1,fadeInAfterLoad,p3)end;---@return boolean
	DoAutoSave=function()return InvokeVoid(0x50EEAAD86232EE55)end;
	--[=[Returns true if profile setting 208 is equal to 0.]=]
	GetIsAutoSaveOff=function()return InvokeBool(0x6E04F06094C87047)end;---@return boolean
	IsAutoSaveInProgress=function()return InvokeBool(0x69240733738C19A0)end;---@return boolean
	HasCodeRequestedAutosave=function()return InvokeBool(0x2107A3773771186D)end;---@return boolean
	ClearCodeRequestedAutosave=function()return InvokeVoid(0x06462A961E94B67C)end;
	BeginReplayStats=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0xE0E500246FF73D66,p0,p1)end;
	AddReplayStatValue=function(value--[[@param value any]])return InvokeVoid(0x69FE6DC87BD2A5E9,value)end;
	EndReplayStats=function()return InvokeVoid(0xA23E821FBDF8A5F2)end;
	HaveReplayStatsBeenStored=function()return InvokeBool(0xD642319C54AADEB6)end;---@return boolean
	GetReplayStatMissionId=function()return InvokeInt(0x5B1F2E327B6B6FE1)end;---@return integer
	GetReplayStatMissionType=function()return InvokeInt(0x2B626A0150E4D449)end;---@return integer
	GetReplayStatCount=function()return InvokeInt(0xDC9274A7EF6B2867)end;---@return integer
	GetReplayStatAtIndex=function(index--[[@param index integer]])return InvokeInt(0x8098C8D6597AAE18,index)end;---@return integer
	ClearReplayStats=function()return InvokeVoid(0x1B1AB132A16FDA55)end;
	QueueMissionRepeatLoad=function()return InvokeBool(0x72DE52178C291CB5)end;---@return boolean
	--[=[Shows the screen which is visible before you redo a mission? The game will make a restoration point where you will cameback when the mission is over.
Returns 1 if the message isn't currently on screen]=]
	QueueMissionRepeatSave=function()return InvokeBool(0x44A0BDC559B35F6E)end;---@return boolean
	QueueMissionRepeatSaveForBenchmarkTest=function()return InvokeBool(0xEB2104E905C6F2E9)end;---@return boolean
	GetStatusOfMissionRepeatSave=function()return InvokeInt(0x2B5E102E4A42F2BF)end;---@return integer
	IsMemoryCardInUse=function()return InvokeBool(0x8A75CE2956274ADD)end;---@return boolean
	ShootSingleBulletBetweenCoords=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],damage--[[@param damage integer]],p7--[[@param p7 boolean]],weaponHash--[[@param weaponHash integer]],ownerPed--[[@param ownerPed integer]],isAudible--[[@param isAudible boolean]],isInvisible--[[@param isInvisible boolean]],speed--[[@param speed number]])return InvokeVoid(0x867654CBC7606F2C,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,damage,p7,weaponHash,ownerPed,isAudible,isInvisible,speed+.0)end;
	--[=[entity - entity to ignore]=]
	ShootSingleBulletBetweenCoordsIgnoreEntity=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],damage--[[@param damage integer]],p7--[[@param p7 boolean]],weaponHash--[[@param weaponHash integer]],ownerPed--[[@param ownerPed integer]],isAudible--[[@param isAudible boolean]],isInvisible--[[@param isInvisible boolean]],speed--[[@param speed number]],entity--[[@param entity integer]],p14--[[@param p14 any]])return InvokeVoid(0xE3A7742E0B7A2F8B,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,damage,p7,weaponHash,ownerPed,isAudible,isInvisible,speed+.0,entity,p14)end;
	--[=[entity - entity to ignore
targetEntity - entity to home in on, if the weapon hash provided supports homing]=]
	ShootSingleBulletBetweenCoordsIgnoreEntityNew=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],damage--[[@param damage integer]],p7--[[@param p7 boolean]],weaponHash--[[@param weaponHash integer]],ownerPed--[[@param ownerPed integer]],isAudible--[[@param isAudible boolean]],isInvisible--[[@param isInvisible boolean]],speed--[[@param speed number]],entity--[[@param entity integer]],p14--[[@param p14 boolean]],p15--[[@param p15 boolean]],targetEntity--[[@param targetEntity integer]],p17--[[@param p17 boolean]],p18--[[@param p18 any]],p19--[[@param p19 any]],p20--[[@param p20 any]])return InvokeVoid(0xBFE5756E7407064A,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,damage,p7,weaponHash,ownerPed,isAudible,isInvisible,speed+.0,entity,p14,p15,targetEntity,p17,p18,p19,p20)end;
	--[=[Gets the dimensions of a model.

Calculate (maximum - minimum) to get the size, in which case, Y will be how long the model is.

Example from the scripts: MISC::GET_MODEL_DIMENSIONS(ENTITY::GET_ENTITY_MODEL(PLAYER::PLAYER_PED_ID()), &v_1A, &v_17);]=]
	GetModelDimensions=function(modelHash--[[@param modelHash integer]],minimum--[[@param minimum V3*]],maximum--[[@param maximum V3*]])return InvokeVoid(0x03E8D3D5F549087A,modelHash,minimum,maximum)end;
	--[=[Sets a visually fake wanted level on the user interface. Used by Rockstar's scripts to "override" regular wanted levels and make custom ones while the real wanted level and multipliers are still in effect.

Max is 6, anything above this makes it just 6. Also the mini-map gets the red & blue flashing effect.]=]
	SetFakeWantedLevel=function(fakeWantedLevel--[[@param fakeWantedLevel integer]])return InvokeVoid(0x1454F2448DE30163,fakeWantedLevel)end;
	GetFakeWantedLevel=function()return InvokeInt(0x4C9296CBCD1B971E)end;---@return integer
	UsingMissionCreator=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xF14878FC50BEC6EE,toggle)end;
	AllowMissionCreatorWarp=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xDEA36202FC3382DF,toggle)end;
	SetMinigameInProgress=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x19E00D7322C6F85B,toggle)end;
	IsMinigameInProgress=function()return InvokeBool(0x2B4A15E44DE0F478)end;---@return boolean
	IsThisAMinigameScript=function()return InvokeBool(0x7B30F65D7B710098)end;---@return boolean
	--[=[This function is hard-coded to always return 0.]=]
	IsSniperInverted=function()return InvokeBool(0x61A23B7EDA9BDA24)end;---@return boolean
	--[=[Returns true if the game is using the metric measurement system (profile setting 227), false if imperial is used.]=]
	ShouldUseMetricMeasurements=function()return InvokeBool(0xD3D15555431AB793)end;---@return boolean
	GetProfileSetting=function(profileSetting--[[@param profileSetting integer]])return InvokeInt(0xC488FF2356EA7791,profileSetting)end;---@return integer
	AreStringsEqual=function(string1--[[@param string1 string]],string2--[[@param string2 string]])return InvokeBool(0x0C515FAB3FF9EA92,string1,string2)end;---@return boolean
	--[=[Compares two strings up to a specified number of characters.

Parameters:
str1 - String to be compared.
str2 - String to be compared.
matchCase - Comparison will be case-sensitive.
maxLength - Maximum number of characters to compare. A value of -1 indicates an infinite length.

Returns:
A value indicating the relationship between the strings:
<0 - The first non-matching character in 'str1' is less than the one in 'str2'. (e.g. 'A' < 'B', so result = -1)
0 - The contents of both strings are equal.
>0 - The first non-matching character in 'str1' is less than the one in 'str2'. (e.g. 'B' > 'A', so result = 1)

Examples:
MISC::COMPARE_STRINGS("STRING", "string", false, -1); // 0; equal
MISC::COMPARE_STRINGS("TESTING", "test", false, 4); // 0; equal
MISC::COMPARE_STRINGS("R2D2", "R2xx", false, 2); // 0; equal
MISC::COMPARE_STRINGS("foo", "bar", false, -1); // 4; 'f' > 'b'
MISC::COMPARE_STRINGS("A", "A", true, 1); // 0; equal

When comparing case-sensitive strings, lower-case characters are greater than upper-case characters:
MISC::COMPARE_STRINGS("A", "a", true, 1); // -1; 'A' < 'a'
MISC::COMPARE_STRINGS("a", "A", true, 1); // 1; 'a' > 'A']=]
	CompareStrings=function(str1--[[@param str1 string]],str2--[[@param str2 string]],matchCase--[[@param matchCase boolean]],maxLength--[[@param maxLength integer]])return InvokeInt(0x1E34710ECD4AB0EB,str1,str2,matchCase,maxLength)end;---@return integer
	Absi=function(value--[[@param value integer]])return InvokeInt(0xF0D31AD191A74F87,value)end;---@return integer
	Absf=function(value--[[@param value number]])return InvokeFloat(0x73D57CFFDD12C355,value+.0)end;---@return number
	--[=[Determines whether there is a sniper bullet within the specified coordinates. The coordinates form an axis-aligned bounding box.]=]
	IsSniperBulletInArea=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]])return InvokeBool(0xFEFCF11B01287125,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0)end;---@return boolean
	--[=[Determines whether there is a projectile within the specified coordinates. The coordinates form a rectangle.

- Nacorpio


ownedByPlayer = only projectiles fired by the player will be detected.]=]
	IsProjectileInArea=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],ownedByPlayer--[[@param ownedByPlayer boolean]])return InvokeBool(0x5270A8FBC098C3F8,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,ownedByPlayer)end;---@return boolean
	--[=[Determines whether there is a projectile of a specific type within the specified coordinates. The coordinates form a axis-aligned bounding box.]=]
	IsProjectileTypeInArea=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],type--[[@param type integer]],ownedByPlayer--[[@param ownedByPlayer boolean]])return InvokeBool(0x2E0DC353342C4A6D,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,type,ownedByPlayer)end;---@return boolean
	--[=[See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.]=]
	IsProjectileTypeInAngledArea=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],width--[[@param width number]],p7--[[@param p7 any]],ownedByPlayer--[[@param ownedByPlayer boolean]])return InvokeBool(0xF0BC12401061DEA0,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,width+.0,p7,ownedByPlayer)end;---@return boolean
	IsProjectileTypeWithinDistance=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],projectileHash--[[@param projectileHash integer]],radius--[[@param radius number]],ownedByPlayer--[[@param ownedByPlayer boolean]])return InvokeBool(0x34318593248C8FB2,x+.0,y+.0,z+.0,projectileHash,radius+.0,ownedByPlayer)end;---@return boolean
	GetCoordsOfProjectileTypeInArea=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],projectileHash--[[@param projectileHash integer]],projectilePos--[[@param projectilePos V3*]],ownedByPlayer--[[@param ownedByPlayer boolean]])return InvokeBool(0x8D7A43EC6A5FEA45,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,projectileHash,projectilePos,ownedByPlayer)end;---@return boolean
	GetCoordsOfProjectileTypeInAngledArea=function(vecAngledAreaPoint1X--[[@param vecAngledAreaPoint1X number]],vecAngledAreaPoint1Y--[[@param vecAngledAreaPoint1Y number]],vecAngledAreaPoint1Z--[[@param vecAngledAreaPoint1Z number]],vecAngledAreaPoint2X--[[@param vecAngledAreaPoint2X number]],vecAngledAreaPoint2Y--[[@param vecAngledAreaPoint2Y number]],vecAngledAreaPoint2Z--[[@param vecAngledAreaPoint2Z number]],distanceOfOppositeFace--[[@param distanceOfOppositeFace number]],weaponType--[[@param weaponType integer]],positionOut--[[@param positionOut V3*]],bIsPlayer--[[@param bIsPlayer boolean]])return InvokeBool(0x3DA8C28346B62CED,vecAngledAreaPoint1X+.0,vecAngledAreaPoint1Y+.0,vecAngledAreaPoint1Z+.0,vecAngledAreaPoint2X+.0,vecAngledAreaPoint2Y+.0,vecAngledAreaPoint2Z+.0,distanceOfOppositeFace+.0,weaponType,positionOut,bIsPlayer)end;---@return boolean
	GetCoordsOfProjectileTypeWithinDistance=function(ped--[[@param ped integer]],weaponHash--[[@param weaponHash integer]],distance--[[@param distance number]],outCoords--[[@param outCoords V3*]],p4--[[@param p4 boolean]])return InvokeBool(0xDFB4138EEFED7B81,ped,weaponHash,distance+.0,outCoords,p4)end;---@return boolean
	GetProjectileOfProjectileTypeWithinDistance=function(ped--[[@param ped integer]],weaponHash--[[@param weaponHash integer]],distance--[[@param distance number]],outCoords--[[@param outCoords V3*]],outProjectile--[[@param outProjectile integer*]],p5--[[@param p5 boolean]])return InvokeBool(0x82FDE6A57EE4EE44,ped,weaponHash,distance+.0,outCoords,outProjectile,p5)end;---@return boolean
	--[=[For projectiles, see: IS_PROJECTILE_TYPE_IN_ANGLED_AREA
See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
Returns True if a bullet, as maintained by a pool within CWeaponManager, has been fired into the defined angled area.]=]
	IsBulletInAngledArea=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],width--[[@param width number]],ownedByPlayer--[[@param ownedByPlayer boolean]])return InvokeBool(0x1A8B5F3C01E2B477,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,width+.0,ownedByPlayer)end;---@return boolean
	IsBulletInArea=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]],ownedByPlayer--[[@param ownedByPlayer boolean]])return InvokeBool(0x3F2023999AD51C1F,x+.0,y+.0,z+.0,radius+.0,ownedByPlayer)end;---@return boolean
	IsBulletInBox=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],ownedByPlayer--[[@param ownedByPlayer boolean]])return InvokeBool(0xDE0F6D7450D37351,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,ownedByPlayer)end;---@return boolean
	--[=[p3 - possibly radius?]=]
	HasBulletImpactedInArea=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],p3--[[@param p3 number]],p4--[[@param p4 boolean]],p5--[[@param p5 boolean]])return InvokeBool(0x9870ACFB89A90995,x+.0,y+.0,z+.0,p3+.0,p4,p5)end;---@return boolean
	HasBulletImpactedInBox=function(p0--[[@param p0 number]],p1--[[@param p1 number]],p2--[[@param p2 number]],p3--[[@param p3 number]],p4--[[@param p4 number]],p5--[[@param p5 number]],p6--[[@param p6 boolean]],p7--[[@param p7 boolean]])return InvokeBool(0xDC8C5D7CFEAB8394,p0+.0,p1+.0,p2+.0,p3+.0,p4+.0,p5+.0,p6,p7)end;---@return boolean
	--[=[PS4]=]
	IsOrbisVersion=function()return InvokeBool(0xA72BC0B675B1519E)end;---@return boolean
	--[=[XBOX ONE]=]
	IsDurangoVersion=function()return InvokeBool(0x4D982ADB1978442D)end;---@return boolean
	IsXbox360Version=function()return InvokeBool(0xF6201B4DAF662A9D)end;---@return boolean
	IsPs3Version=function()return InvokeBool(0xCCA1072C29D096C2)end;---@return boolean
	IsPcVersion=function()return InvokeBool(0x48AF36444B965238)end;---@return boolean
	IsSteamVersion=function()return InvokeBool(0x0A27B2B6282F7169)end;---@return boolean
	--[=[Used to block some of the prostitute stuff due to laws in Australia.]=]
	IsAussieVersion=function()return InvokeBool(0x9F1935CA1F724008)end;---@return boolean
	IsJapaneseVersion=function()return InvokeBool(0xB8C0BB75D8A77DB3)end;---@return boolean
	IsXboxPlatform=function()return InvokeBool(0x138679CA01E21F53)end;---@return boolean
	--[=[Xbox Series (Scarlett) version...]=]
	IsScarlettVersion=function()return InvokeBool(0xC545AB1CF97ABB34)end;---@return boolean
	IsScePlatform=function()return InvokeBool(0xF911E695C1EB8518)end;---@return boolean
	--[=[PS5 (Prospero) version...]=]
	IsProsperoVersion=function()return InvokeBool(0x807ABE1AB65C24D2)end;---@return boolean
	IsStringNull=function(string--[[@param string string]])return InvokeBool(0xF22B6C47C6EAB066,string)end;---@return boolean
	IsStringNullOrEmpty=function(string--[[@param string string]])return InvokeBool(0xCA042B6957743895,string)end;---@return boolean
	--[=[Returns false if it's a null or empty string or if the string is too long. outInteger will be set to -999 in that case.

If all checks have passed successfully, the return value will be set to whatever strtol(string, 0i64, 10); returns.]=]
	StringToInt=function(string--[[@param string string]],outInteger--[[@param outInteger integer*]])return InvokeBool(0x5A5F40FE637EB584,string,outInteger)end;---@return boolean
	SetBitsInRange=function(var--[[@param var integer*]],rangeStart--[[@param rangeStart integer]],rangeEnd--[[@param rangeEnd integer]],p3--[[@param p3 integer]])return InvokeVoid(0x8EF07E15701D61ED,var,rangeStart,rangeEnd,p3)end;
	GetBitsInRange=function(var--[[@param var integer]],rangeStart--[[@param rangeStart integer]],rangeEnd--[[@param rangeEnd integer]])return InvokeInt(0x53158863FCC0893A,var,rangeStart,rangeEnd)end;---@return integer
	--[=[See description of `ADD_STUNT_JUMP_ANGLED` for detailed info. The only difference really is this one does not have the radius (or angle, not sure) floats parameters for entry and landing zones.]=]
	AddStuntJump=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],x3--[[@param x3 number]],y3--[[@param y3 number]],z3--[[@param z3 number]],x4--[[@param x4 number]],y4--[[@param y4 number]],z4--[[@param z4 number]],camX--[[@param camX number]],camY--[[@param camY number]],camZ--[[@param camZ number]],p15--[[@param p15 integer]],p16--[[@param p16 integer]],p17--[[@param p17 integer]])return InvokeInt(0x1A992DA297A4630C,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,x3+.0,y3+.0,z3+.0,x4+.0,y4+.0,z4+.0,camX+.0,camY+.0,camZ+.0,p15,p16,p17)end;---@return integer
	--[=[Creates a new stunt jump.

The radius1 and radius2 might actually not be a radius at all, but that's what it seems to me testing them in-game. But they may be 'angle' floats instead, considering this native is named ADD_STUNT_JUMP_**ANGLED**.

Info about the specific 'parameter sections':


**x1, y1, z1, x2, y2, z2 and radius1:**

First coordinates are for the jump entry area, and the radius that will be checked around that area. So if you're not exactly within the coordinates, but you are within the outter radius limit then it will still register as entering the stunt jump. Note as mentioned above, the radius is just a guess, I'm not really sure about it's exact purpose.


**x3, y3, z3, x4, y4, z4 and radius2:**

Next part is the landing area, again starting with the left bottom (nearest to the stunt jump entry zone) coordinate, and the second one being the top right furthest away part of the landing area. Followed by another (most likely) radius float, this is usually slightly larger than the entry zone 'radius' float value, just because you have quite a lot of places where you can land (I'm guessing).


**camX, camY and camZ:**

The final coordinate in this native is the Camera position. Rotation and zoom/FOV is managed by the game itself, you just need to provide the camera location.


**unk1, unk2 and unk3:**

Not sure what these are for, but they're always `150, 0, 0` in decompiled scripts.

Here is a list of almost all of the stunt jumps from GTA V (taken from decompiled scripts): https://pastebin.com/EW1jBPkY]=]
	AddStuntJumpAngled=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],radius1--[[@param radius1 number]],x3--[[@param x3 number]],y3--[[@param y3 number]],z3--[[@param z3 number]],x4--[[@param x4 number]],y4--[[@param y4 number]],z4--[[@param z4 number]],radius2--[[@param radius2 number]],camX--[[@param camX number]],camY--[[@param camY number]],camZ--[[@param camZ number]],p17--[[@param p17 integer]],p18--[[@param p18 integer]],p19--[[@param p19 integer]])return InvokeInt(0xBBE5D803A5360CBF,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,radius1+.0,x3+.0,y3+.0,z3+.0,x4+.0,y4+.0,z4+.0,radius2+.0,camX+.0,camY+.0,camZ+.0,p17,p18,p19)end;---@return integer
	--[=[Toggles some stunt jump stuff.]=]
	ToggleShowOptionalStuntJumpCamera=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xFB80AB299D2EE1BD,toggle)end;
	DeleteStuntJump=function(p0--[[@param p0 integer]])return InvokeVoid(0xDC518000E39DAE1F,p0)end;
	EnableStuntJumpSet=function(p0--[[@param p0 integer]])return InvokeVoid(0xE369A5783B866016,p0)end;
	DisableStuntJumpSet=function(p0--[[@param p0 integer]])return InvokeVoid(0xA5272EBEDD4747F6,p0)end;
	SetStuntJumpsCanTrigger=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xD79185689F8FD5DF,toggle)end;
	IsStuntJumpInProgress=function()return InvokeBool(0x7A3F19700A4D0525)end;---@return boolean
	IsStuntJumpMessageShowing=function()return InvokeBool(0x2272B0A1343129F4)end;---@return boolean
	GetNumSuccessfulStuntJumps=function()return InvokeInt(0x996DD1E1E02F1008)end;---@return integer
	GetTotalSuccessfulStuntJumps=function()return InvokeInt(0x6856EC3D35C81EA4)end;---@return integer
	CancelStuntJump=function()return InvokeVoid(0xE6B7B0ACD4E4B75E)end;
	--[=[Make sure to call this from the correct thread if you're using multiple threads because all other threads except the one which is calling SET_GAME_PAUSED will be paused which means you will lose control and the game remains in paused mode until you exit GTA5.exe]=]
	SetGamePaused=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x577D1284D6873711,toggle)end;
	SetThisScriptCanBePaused=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xAA391C728106F7AF,toggle)end;
	SetThisScriptCanRemoveBlipsCreatedByAnyScript=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xB98236CAAECEF897,toggle)end;
	--[=[This native appears on the cheat_controller script and tracks a combination of buttons, which may be used to toggle cheats in-game. Credits to ThreeSocks for the info. The hash contains the combination, while the "amount" represents the amount of buttons used in a combination. The following page can be used to make a button combination: gta5offset.com/ts/hash/

INT_SCORES_SCORTED was a hash collision]=]
	HasCheatWithHashBeenActivated=function(hash--[[@param hash integer]],amount--[[@param amount integer]])return InvokeBool(0x071E2A839DE82D90,hash,amount)end;---@return boolean
	--[=[Get inputted "Cheat code", for example:

while (TRUE)
{
    if (MISC::HAS_PC_CHEAT_WITH_HASH_BEEN_ACTIVATED(${fugitive}))
    {
       // Do something.
    }
    SYSTEM::WAIT(0);
}

Calling this will also set the last saved string hash to zero.
]=]
	HasPcCheatWithHashBeenActivated=function(hash--[[@param hash integer]])return InvokeBool(0x557E43C447E700A8,hash)end;---@return boolean
	OverrideFreezeFlags=function(p0--[[@param p0 boolean]])return InvokeVoid(0xFA3FFB0EEBC288A3,p0)end;
	--[=[Formerly known as _LOWER_MAP_PROP_DENSITY and wrongly due to idiots as _ENABLE_MP_DLC_MAPS.
Sets the maximum prop density and changes a loading screen flag from 'loading story mode' to 'loading GTA Online'. Does not touch DLC map data at all.

In fact, I doubt this changes the flag whatsoever, that's the OTHER native idiots use together with this that does so, this one only causes a loading screen to show as it reloads map data.]=]
	SetInstancePriorityMode=function(p0--[[@param p0 integer]])return InvokeVoid(0x9BAE5AD2508DF078,p0)end;
	--[=[Sets an unknown flag used by CScene in determining which entities from CMapData scene nodes to draw, similar to SET_INSTANCE_PRIORITY_MODE.]=]
	SetInstancePriorityHint=function(flag--[[@param flag integer]])return InvokeVoid(0xC5F0A8EBD3F361CE,flag)end;
	--[=[This function is hard-coded to always return 0.]=]
	IsFrontendFading=function()return InvokeBool(0x7EA2B6AF97ECA6ED)end;---@return boolean
	--[=[spawns a few distant/out-of-sight peds, vehicles, animals etc each time it is called]=]
	PopulateNow=function()return InvokeVoid(0x7472BB270D7B4F3E)end;
	GetIndexOfCurrentLevel=function()return InvokeInt(0xCBAD6729F7B1F4FC)end;---@return integer
	--[=[level can be from 0 to 3
0: 9.8 - normal
1: 2.4 - low
2: 0.1 - very low
3: 0.0 - off]=]
	SetGravityLevel=function(level--[[@param level integer]])return InvokeVoid(0x740E14FAD5842351,level)end;
	StartSaveData=function(p0--[[@param p0 any*]],p1--[[@param p1 any]],p2--[[@param p2 boolean]])return InvokeVoid(0xA9575F812C6A7997,p0,p1,p2)end;
	StopSaveData=function()return InvokeVoid(0x74E20C9145FB66FD)end;
	GetSizeOfSaveData=function(p0--[[@param p0 boolean]])return InvokeInt(0xA09F896CE912481F,p0)end;---@return integer
	RegisterIntToSave=function(p0--[[@param p0 any*]],name--[[@param name string]])return InvokeVoid(0x34C9EE5986258415,p0,name)end;
	RegisterInt64ToSave=function(p0--[[@param p0 any*]],name--[[@param name string]])return InvokeVoid(0xA735353C77334EA0,p0,name)end;
	RegisterEnumToSave=function(p0--[[@param p0 any*]],name--[[@param name string]])return InvokeVoid(0x10C2FA78D0E128A1,p0,name)end;
	RegisterFloatToSave=function(p0--[[@param p0 any*]],name--[[@param name string]])return InvokeVoid(0x7CAEC29ECB5DFEBB,p0,name)end;
	RegisterBoolToSave=function(p0--[[@param p0 any*]],name--[[@param name string]])return InvokeVoid(0xC8F4131414C835A1,p0,name)end;
	RegisterTextLabelToSave=function(p0--[[@param p0 any*]],name--[[@param name string]])return InvokeVoid(0xEDB1232C5BEAE62F,p0,name)end;
	--[=[MISC::REGISTER_TEXT_LABEL_15_TO_SAVE(&a_0._f1, "tlPlateText");
MISC::REGISTER_TEXT_LABEL_15_TO_SAVE(&a_0._f1C, "tlPlateText_pending");
MISC::REGISTER_TEXT_LABEL_15_TO_SAVE(&a_0._f10B, "tlCarAppPlateText");]=]
	RegisterTextLabel15ToSave=function(p0--[[@param p0 any*]],name--[[@param name string]])return InvokeVoid(0x6F7794F28C6B2535,p0,name)end;
	--[=[Only found 3 times in decompiled scripts.

MISC::REGISTER_TEXT_LABEL_23_TO_SAVE(a_0, "Movie_Name_For_This_Player");
MISC::REGISTER_TEXT_LABEL_23_TO_SAVE(&a_0._fB, "Ringtone_For_This_Player");
MISC::REGISTER_TEXT_LABEL_23_TO_SAVE(&a_0._f1EC4._f12[v_A/*6*/], &v_13); // where v_13 is "MPATMLOGSCRS0" thru "MPATMLOGSCRS15"]=]
	RegisterTextLabel23ToSave=function(p0--[[@param p0 any*]],name--[[@param name string]])return InvokeVoid(0x48F069265A0E4BEC,p0,name)end;
	--[=[Only found 2 times in decompiled scripts.

MISC::REGISTER_TEXT_LABEL_31_TO_SAVE(&a_0._f1F5A._f6[0/*8*/], "TEMPSTAT_LABEL"); // gets saved in a struct called "g_SaveData_STRING_ScriptSaves"
MISC::REGISTER_TEXT_LABEL_31_TO_SAVE(&a_0._f4B4[v_1A/*8*/], &v_5); // where v_5 is "Name0" thru "Name9", gets saved in a struct called "OUTFIT_Name"]=]
	RegisterTextLabel31ToSave=function(p0--[[@param p0 any*]],name--[[@param name string]])return InvokeVoid(0x8269816F6CFD40F8,p0,name)end;
	--[=[MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(a_0, "Thumb_label");
MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f10, "Photo_label");
MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(a_0, "GXTlabel");
MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f21, "StringComp");
MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f43, "SecondStringComp");
MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f53, "ThirdStringComp");
MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f32, "SenderStringComp");
MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f726[v_1A/*16*/], &v_20); // where v_20 is "LastJobTL_0_1" thru "LastJobTL_2_1", gets saved in a struct called "LAST_JobGamer_TL"
MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f4B, "PAID_PLAYER");
MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f5B, "RADIO_STATION");]=]
	RegisterTextLabel63ToSave=function(p0--[[@param p0 any*]],name--[[@param name string]])return InvokeVoid(0xFAA457EF263E8763,p0,name)end;
	StartSaveStructWithSize=function(p0--[[@param p0 any*]],size--[[@param size integer]],structName--[[@param structName string]])return InvokeVoid(0xBF737600CDDBEADD,p0,size,structName)end;
	StopSaveStruct=function()return InvokeVoid(0xEB1774DF12BB9F12)end;
	StartSaveArrayWithSize=function(p0--[[@param p0 any*]],size--[[@param size integer]],arrayName--[[@param arrayName string]])return InvokeVoid(0x60FE567DF1B1AF9D,p0,size,arrayName)end;
	StopSaveArray=function()return InvokeVoid(0x04456F95153C6BE4)end;
	CopyScriptStruct=function(dst--[[@param dst any*]],src--[[@param src any*]],size--[[@param size integer]])return InvokeVoid(0x213AEB2B90CBA7AC,dst,src,size)end;
	--[=[https://alloc8or.re/gta5/doc/enums/DispatchType.txt]=]
	EnableDispatchService=function(dispatchService--[[@param dispatchService integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xDC0F817884CDD856,dispatchService,toggle)end;
	BlockDispatchServiceResourceCreation=function(dispatchService--[[@param dispatchService integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x9B2BD3773123EA2F,dispatchService,toggle)end;
	GetNumberResourcesAllocatedToWantedLevel=function(dispatchService--[[@param dispatchService integer]])return InvokeInt(0xEB4A0C2D56441717,dispatchService)end;---@return integer
	--[=[As for the 'police' incident, it will call police cars to you, but unlike PedsInCavalcades & Merryweather they won't start shooting at you unless you shoot first or shoot at them. The top 2 however seem to cancel theirselves if there is noone dead around you or a fire. I only figured them out as I found out the 3rd param is definately the amountOfPeople and they called incident 3 in scripts with 4 people (which the firetruck has) and incident 5 with 2 people (which the ambulence has). The 4 param I cant say is radius, but for the pedsInCavalcades and Merryweather R* uses 0.0f and for the top 3 (Emergency Services) they use 3.0f. 

Side Note: It seems calling the pedsInCavalcades or Merryweather then removing it seems to break you from calling the EmergencyEvents and I also believe pedsInCavalcades. (The V cavalcades of course not IV).

Side Note 2: I say it breaks as if you call this proper,
if(CREATE_INCIDENT) etc it will return false if you do as I said above.
=====================================================]=]
	CreateIncident=function(dispatchService--[[@param dispatchService integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],numUnits--[[@param numUnits integer]],radius--[[@param radius number]],outIncidentID--[[@param outIncidentID integer*]],p7--[[@param p7 any]],p8--[[@param p8 any]])return InvokeBool(0x3F892CAF67444AE7,dispatchService,x+.0,y+.0,z+.0,numUnits,radius+.0,outIncidentID,p7,p8)end;---@return boolean
	--[=[As for the 'police' incident, it will call police cars to you, but unlike PedsInCavalcades & Merryweather they won't start shooting at you unless you shoot first or shoot at them. The top 2 however seem to cancel theirselves if there is noone dead around you or a fire. I only figured them out as I found out the 3rd param is definately the amountOfPeople and they called incident 3 in scripts with 4 people (which the firetruck has) and incident 5 with 2 people (which the ambulence has). The 4 param I cant say is radius, but for the pedsInCavalcades and Merryweather R* uses 0.0f and for the top 3 (Emergency Services) they use 3.0f. 

Side Note: It seems calling the pedsInCavalcades or Merryweather then removing it seems to break you from calling the EmergencyEvents and I also believe pedsInCavalcades. (The V cavalcades of course not IV).

Side Note 2: I say it breaks as if you call this proper,
if(CREATE_INCIDENT) etc it will return false if you do as I said above.
=====================================================]=]
	CreateIncidentWithEntity=function(dispatchService--[[@param dispatchService integer]],ped--[[@param ped integer]],numUnits--[[@param numUnits integer]],radius--[[@param radius number]],outIncidentID--[[@param outIncidentID integer*]],p5--[[@param p5 any]],p6--[[@param p6 any]])return InvokeBool(0x05983472F0494E60,dispatchService,ped,numUnits,radius+.0,outIncidentID,p5,p6)end;---@return boolean
	--[=[Delete an incident with a given id.

=======================================================
Correction, I have change this to int, instead of int*
as it doesn't use a pointer to the createdIncident.
If you try it you will crash (or) freeze.
=======================================================]=]
	DeleteIncident=function(incidentId--[[@param incidentId integer]])return InvokeVoid(0x556C1AA270D5A207,incidentId)end;
	--[=[=======================================================
Correction, I have change this to int, instead of int*
as it doesn't use a pointer to the createdIncident.
If you try it you will crash (or) freeze.
=======================================================]=]
	IsIncidentValid=function(incidentId--[[@param incidentId integer]])return InvokeBool(0xC8BC6461E629BEAA,incidentId)end;---@return boolean
	SetIncidentRequestedUnits=function(incidentId--[[@param incidentId integer]],dispatchService--[[@param dispatchService integer]],numUnits--[[@param numUnits integer]])return InvokeVoid(0xB08B85D860E7BA3C,incidentId,dispatchService,numUnits)end;
	SetIdealSpawnDistanceForIncident=function(incidentId--[[@param incidentId integer]],p1--[[@param p1 number]])return InvokeVoid(0xD261BA3E7E998072,incidentId,p1+.0)end;
	--[=[Finds a position ahead of the player by predicting the players next actions.
The positions match path finding node positions.
When roads diverge, the position may rapidly change between two or more positions. This is due to the engine not being certain of which path the player will take.]=]
	FindSpawnPointInDirection=function(posX--[[@param posX number]],posY--[[@param posY number]],posZ--[[@param posZ number]],fwdVecX--[[@param fwdVecX number]],fwdVecY--[[@param fwdVecY number]],fwdVecZ--[[@param fwdVecZ number]],distance--[[@param distance number]],spawnPoint--[[@param spawnPoint V3*]])return InvokeBool(0x6874E2190B0C1972,posX+.0,posY+.0,posZ+.0,fwdVecX+.0,fwdVecY+.0,fwdVecZ+.0,distance+.0,spawnPoint)end;---@return boolean
	AddPopMultiplierArea=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],p6--[[@param p6 number]],p7--[[@param p7 number]],p8--[[@param p8 boolean]],p9--[[@param p9 boolean]])return InvokeInt(0x67F6413D3220E18D,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,p6+.0,p7+.0,p8,p9)end;---@return integer
	DoesPopMultiplierAreaExist=function(id--[[@param id integer]])return InvokeBool(0x1327E2FE9746BAEE,id)end;---@return boolean
	RemovePopMultiplierArea=function(id--[[@param id integer]],p1--[[@param p1 boolean]])return InvokeVoid(0xB129E447A2EDA4BF,id,p1)end;
	IsPopMultiplierAreaNetworked=function(id--[[@param id integer]])return InvokeBool(0x1312F4B242609CE3,id)end;---@return boolean
	--[=[This native is adding a zone, where you can change density settings. For example, you can add a zone on 0.0, 0.0, 0.0 with radius 900.0 and vehicleMultiplier 0.0, and you will not see any new population vehicle spawned in a radius of 900.0 from 0.0, 0.0, 0.0. Returns the id. You can have only 15 zones at the same time. You can remove zone using REMOVE_POP_MULTIPLIER_SPHERE]=]
	AddPopMultiplierSphere=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]],pedMultiplier--[[@param pedMultiplier number]],vehicleMultiplier--[[@param vehicleMultiplier number]],p6--[[@param p6 boolean]],p7--[[@param p7 boolean]])return InvokeInt(0x32C7A7E8C43A1F80,x+.0,y+.0,z+.0,radius+.0,pedMultiplier+.0,vehicleMultiplier+.0,p6,p7)end;---@return integer
	DoesPopMultiplierSphereExist=function(id--[[@param id integer]])return InvokeBool(0x171BAFB3C60389F4,id)end;---@return boolean
	--[=[Removes population multiplier sphere]=]
	RemovePopMultiplierSphere=function(id--[[@param id integer]],p1--[[@param p1 boolean]])return InvokeVoid(0xE6869BECDD8F2403,id,p1)end;
	--[=[Makes the ped jump around like they're in a tennis match]=]
	EnableTennisMode=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0x28A04B411933F8A6,ped,toggle,p2)end;
	IsTennisMode=function(ped--[[@param ped integer]])return InvokeBool(0x5D5479D115290C3F,ped)end;---@return boolean
	--[=[Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json]=]
	PlayTennisSwingAnim=function(ped--[[@param ped integer]],animDict--[[@param animDict string]],animName--[[@param animName string]],p3--[[@param p3 number]],p4--[[@param p4 number]],p5--[[@param p5 boolean]])return InvokeVoid(0xE266ED23311F24D4,ped,animDict,animName,p3+.0,p4+.0,p5)end;
	GetTennisSwingAnimComplete=function(ped--[[@param ped integer]])return InvokeBool(0x17DF68D720AA77F8,ped)end;---@return boolean
	GetTennisSwingAnimCanBeInterrupted=function(ped--[[@param ped integer]])return InvokeBool(0x19BFED045C647C49,ped)end;---@return boolean
	GetTennisSwingAnimSwung=function(ped--[[@param ped integer]])return InvokeBool(0xE95B0C7D5BA3B96B,ped)end;---@return boolean
	PlayTennisDiveAnim=function(ped--[[@param ped integer]],p1--[[@param p1 integer]],p2--[[@param p2 number]],p3--[[@param p3 number]],p4--[[@param p4 number]],p5--[[@param p5 boolean]])return InvokeVoid(0x8FA9C42FC5D7C64B,ped,p1,p2+.0,p3+.0,p4+.0,p5)end;
	--[=[From the scripts:

MISC::SET_TENNIS_MOVE_NETWORK_SIGNAL_FLOAT(sub_aa49(a_0), "ForcedStopDirection", v_E);

Related to tennis mode.]=]
	SetTennisMoveNetworkSignalFloat=function(ped--[[@param ped integer]],p1--[[@param p1 string]],p2--[[@param p2 number]])return InvokeVoid(0x54F157E0336A3822,ped,p1,p2+.0)end;
	ResetDispatchSpawnLocation=function()return InvokeVoid(0x5896F2BD5683A4E1)end;
	SetDispatchSpawnLocation=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0xD10F442036302D50,x+.0,y+.0,z+.0)end;
	ResetDispatchIdealSpawnDistance=function()return InvokeVoid(0x77A84429DD9F0A15)end;
	SetDispatchIdealSpawnDistance=function(distance--[[@param distance number]])return InvokeVoid(0x6FE601A64180D423,distance+.0)end;
	ResetDispatchTimeBetweenSpawnAttempts=function(p0--[[@param p0 any]])return InvokeVoid(0xEB2DB0CAD13154B3,p0)end;
	SetDispatchTimeBetweenSpawnAttempts=function(p0--[[@param p0 any]],p1--[[@param p1 number]])return InvokeVoid(0x44F7CBC1BEB3327D,p0,p1+.0)end;
	SetDispatchTimeBetweenSpawnAttemptsMultiplier=function(p0--[[@param p0 any]],p1--[[@param p1 number]])return InvokeVoid(0x48838ED9937A15D1,p0,p1+.0)end;
	--[=[To remove, see: REMOVE_DISPATCH_SPAWN_BLOCKING_AREA
See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.]=]
	AddDispatchSpawnAngledBlockingArea=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],width--[[@param width number]])return InvokeInt(0x918C7B2D2FF3928B,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,width+.0)end;---@return integer
	AddDispatchSpawnSphereBlockingArea=function(x1--[[@param x1 number]],y1--[[@param y1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]])return InvokeInt(0x2D4259F1FEB81DA9,x1+.0,y1+.0,x2+.0,y2+.0)end;---@return integer
	RemoveDispatchSpawnBlockingArea=function(p0--[[@param p0 integer]])return InvokeVoid(0x264AC28B01B353A5,p0)end;
	ResetDispatchSpawnBlockingAreas=function()return InvokeVoid(0xAC7BFD5C1D83EA75)end;
	ResetWantedResponseNumPedsToSpawn=function()return InvokeVoid(0xD9F692D349249528)end;
	SetWantedResponseNumPedsToSpawn=function(p0--[[@param p0 integer]],p1--[[@param p1 integer]])return InvokeVoid(0xE532EC1A63231B4F,p0,p1)end;
	AddTacticalNavMeshPoint=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0xB8721407EE9C3FF6,x+.0,y+.0,z+.0)end;
	ClearTacticalNavMeshPoints=function()return InvokeVoid(0xB3CD58CCA6CDA852)end;
	--[=[Activates (usused?) riot mode. All NPCs are being hostile to each other (including player). Also the game will give weapons (pistols, smgs) to random NPCs.]=]
	SetRiotModeEnabled=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x2587A48BC88DFADF,toggle)end;
	DisplayOnscreenKeyboardWithLongerInitialString=function(p0--[[@param p0 integer]],windowTitle--[[@param windowTitle string]],p2--[[@param p2 any*]],defaultText--[[@param defaultText string]],defaultConcat1--[[@param defaultConcat1 string]],defaultConcat2--[[@param defaultConcat2 string]],defaultConcat3--[[@param defaultConcat3 string]],defaultConcat4--[[@param defaultConcat4 string]],defaultConcat5--[[@param defaultConcat5 string]],defaultConcat6--[[@param defaultConcat6 string]],defaultConcat7--[[@param defaultConcat7 string]],maxInputLength--[[@param maxInputLength integer]])return InvokeVoid(0xCA78CFA0366592FE,p0,windowTitle,p2,defaultText,defaultConcat1,defaultConcat2,defaultConcat3,defaultConcat4,defaultConcat5,defaultConcat6,defaultConcat7,maxInputLength)end;
	--[=[sfink: note, p0 is set to 6 for PC platform in at least 1 script, or to `unk::_get_ui_language_id() == 0` otherwise.

NOTE: windowTitle uses text labels, and an invalid value will display nothing.

www.gtaforums.com/topic/788343-vrel-script-hook-v/?p=1067380474

windowTitle's
-----------------
CELL_EMAIL_BOD  =   "Enter your Eyefind message"
CELL_EMAIL_BODE =   "Message too long. Try again"
CELL_EMAIL_BODF    =   "Forbidden message. Try again"
CELL_EMAIL_SOD    =   "Enter your Eyefind subject"
CELL_EMAIL_SODE =   "Subject too long. Try again"
CELL_EMAIL_SODF    =   "Forbidden text. Try again"
CELL_EMASH_BOD   =   "Enter your Eyefind message"
CELL_EMASH_BODE =   "Message too long. Try again"
CELL_EMASH_BODF    =   "Forbidden message. Try again"
CELL_EMASH_SOD    =   "Enter your Eyefind subject"
CELL_EMASH_SODE =   "Subject too long. Try again"
CELL_EMASH_SODF    =   "Forbidden Text. Try again"
FMMC_KEY_TIP10   =   "Enter Synopsis"
FMMC_KEY_TIP12  =   "Enter Custom Team Name"
FMMC_KEY_TIP12F =   "Forbidden Text. Try again"
FMMC_KEY_TIP12N  =   "Custom Team Name"
FMMC_KEY_TIP8 =   "Enter Message"
FMMC_KEY_TIP8F   =   "Forbidden Text. Try again"
FMMC_KEY_TIP8FS  =   "Invalid Message. Try again"
FMMC_KEY_TIP8S  =   "Enter Message"
FMMC_KEY_TIP9    =   "Enter Outfit Name"
FMMC_KEY_TIP9F   =   "Invalid Outfit Name. Try again"
FMMC_KEY_TIP9N  =   "Outfit Name"
PM_NAME_CHALL  =   "Enter Challenge Name"]=]
	DisplayOnscreenKeyboard=function(p0--[[@param p0 integer]],windowTitle--[[@param windowTitle string]],p2--[[@param p2 string]],defaultText--[[@param defaultText string]],defaultConcat1--[[@param defaultConcat1 string]],defaultConcat2--[[@param defaultConcat2 string]],defaultConcat3--[[@param defaultConcat3 string]],maxInputLength--[[@param maxInputLength integer]])return InvokeVoid(0x00DC833F2568DBF6,p0,windowTitle,p2,defaultText,defaultConcat1,defaultConcat2,defaultConcat3,maxInputLength)end;
	--[=[Returns the current status of the onscreen keyboard, and updates the output.

Status Codes:

-1: Keyboard isn't active
0: User still editing
1: User has finished editing
2: User has canceled editing]=]
	UpdateOnscreenKeyboard=function()return InvokeInt(0x0CF2B696BBF945AE)end;---@return integer
	--[=[Returns NULL unless UPDATE_ONSCREEN_KEYBOARD() returns 1 in the same tick.]=]
	GetOnscreenKeyboardResult=function()return InvokeString(0x8362B09B91893647)end;---@return string
	--[=[DO NOT use this as it doesn't clean up the text input box properly and your script will get stuck in the UPDATE_ONSCREEN_KEYBOARD() loop.
Use FORCE_CLOSE_TEXT_INPUT_BOX instead.]=]
	CancelOnscreenKeyboard=function()return InvokeVoid(0x58A39BE597CE99CD)end;
	--[=[p0 was always 2 in R* scripts.
Called before calling DISPLAY_ONSCREEN_KEYBOARD if the input needs to be saved.]=]
	NextOnscreenKeyboardResultWillDisplayUsingTheseFonts=function(p0--[[@param p0 integer]])return InvokeVoid(0x3ED1438C1F5C6612,p0)end;
	--[=[Appears to remove stealth kill action from memory]=]
	ActionManagerEnableAction=function(hash--[[@param hash integer]],enable--[[@param enable boolean]])return InvokeVoid(0xA6A12939F16D85BE,hash,enable)end;
	--[=[GET_GAME_TIMER() / 1000]=]
	GetRealWorldTime=function()return InvokeInt(0x3F60413F5DF65748)end;---@return integer
	SupressRandomEventThisFrame=function(eventType--[[@param eventType integer]],suppress--[[@param suppress boolean]])return InvokeVoid(0x1EAE0A6E978894A2,eventType,suppress)end;
	SetExplosiveAmmoThisFrame=function(player--[[@param player integer]])return InvokeVoid(0xA66C71C98D5F2CFB,player)end;
	SetFireAmmoThisFrame=function(player--[[@param player integer]])return InvokeVoid(0x11879CDD803D30F4,player)end;
	SetExplosiveMeleeThisFrame=function(player--[[@param player integer]])return InvokeVoid(0xFF1BED81BFDC0FE0,player)end;
	SetSuperJumpThisFrame=function(player--[[@param player integer]])return InvokeVoid(0x57FFF03E423A4C0B,player)end;
	SetBeastJumpThisFrame=function(player--[[@param player integer]])return InvokeVoid(0x438822C279B73B93,player)end;
	SetForcedJumpThisFrame=function(player--[[@param player integer]])return InvokeVoid(0xA1183BCFEE0F93D1,player)end;
	HasGameInstalledThisSession=function()return InvokeBool(0x6FDDF453C0C756EC)end;---@return boolean
	SetTickerJohnmarstonIsDone=function()return InvokeVoid(0xFB00CA71DA386228)end;
	AreProfileSettingsValid=function()return InvokeBool(0x5AA3BEFA29F03AD4)end;---@return boolean
	PreventArrestStateThisFrame=function()return InvokeVoid(0xE3D969D2785FFB5E)end;
	--[=[Sets the localplayer playerinfo state back to playing (State 0)

States are:
-1: "Invalid"
0: "Playing"
1: "Died"
2: "Arrested"
3: "Failed Mission"
4: "Left Game"
5: "Respawn"
6: "In MP Cutscene"]=]
	ForceGameStatePlaying=function()return InvokeVoid(0xC0AA53F866B3134D)end;
	ScriptRaceInit=function(p0--[[@param p0 integer]],p1--[[@param p1 integer]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x0A60017F841A54F2,p0,p1,p2,p3)end;
	ScriptRaceShutdown=function()return InvokeVoid(0x1FF6BF9A63E5757F)end;
	ScriptRacePlayerHitCheckpoint=function(player--[[@param player integer]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x1BB299305C3E8C13,player,p1,p2,p3)end;
	ScriptRaceGetPlayerSplitTime=function(player--[[@param player integer]],p1--[[@param p1 integer*]],p2--[[@param p2 integer*]])return InvokeBool(0x8EF5573A1F801A5C,player,p1,p2)end;---@return boolean
	StartEndUserBenchmark=function()return InvokeVoid(0x92790862E36C2ADA)end;
	StopEndUserBenchmark=function()return InvokeVoid(0xC7DB36C24634F52B)end;
	ResetEndUserBenchmark=function()return InvokeVoid(0x437138B6A830166A)end;
	--[=[Saves the benchmark recording to %USERPROFILE%\Documents\Rockstar Games\GTA V\Benchmarks and submits some metrics.]=]
	SaveEndUserBenchmark=function()return InvokeVoid(0x37DEB0AA183FB6D8)end;
	--[=[Returns true if the current frontend menu is FE_MENU_VERSION_SP_PAUSE]=]
	UiStartedEndUserBenchmark=function()return InvokeBool(0xEA2F2061875EED90)end;---@return boolean
	--[=[Returns true if the current frontend menu is FE_MENU_VERSION_LANDING_MENU]=]
	LandingScreenStartedEndUserBenchmark=function()return InvokeBool(0x3BBBD13E5041A79E)end;---@return boolean
	--[=[Returns true if command line option '-benchmark' is set.]=]
	IsCommandlineEndUserBenchmark=function()return InvokeBool(0xA049A5BE0F04F2F8)end;---@return boolean
	--[=[Returns value of the '-benchmarkIterations' command line option.]=]
	GetBenchmarkIterations=function()return InvokeInt(0x4750FC27570311EC)end;---@return integer
	--[=[Returns value of the '-benchmarkPass' command line option.]=]
	GetBenchmarkPass=function()return InvokeInt(0x1B2366C3F2A5C8DF)end;---@return integer
	--[=[In singleplayer it does exactly what the name implies. In FiveM / GTA:Online it shows `Disconnecting from GTA Online` HUD and then quits the game.]=]
	RestartGame=function()return InvokeVoid(0xE574A662ACAEFBB1)end;
	--[=[Exits the game and downloads a fresh social club update on next restart.]=]
	QuitGame=function()return InvokeVoid(0xEB6891F03362FB12)end;
	--[=[Hardcoded to always return true.]=]
	HasAsyncInstallFinished=function()return InvokeBool(0x14832BF2ABA53FC5)end;---@return boolean
	CleanupAsyncInstall=function()return InvokeVoid(0xC79AE21974B01FB2)end;
	--[=[aka "constrained"]=]
	PlmIsInConstrainedMode=function()return InvokeBool(0x684A41975F077262)end;---@return boolean
	--[=[Returns duration of how long the game has been in power-saving mode (aka "constrained") in milliseconds.]=]
	PlmGetConstrainedDurationMs=function()return InvokeInt(0xABB2FA71C83A1B72)end;---@return integer
	--[=[If toggle is true, the ped's head is shown in the pause menu
If toggle is false, the ped's head is not shown in the pause menu]=]
	SetPlayerIsInAnimalForm=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x4EBB7E87AA0DBED4,toggle)end;
	--[=[Although we don't have a jenkins hash for this one, the name is 100% confirmed.]=]
	GetIsPlayerInAnimalForm=function()return InvokeBool(0x9689123E3F213AA5)end;---@return boolean
	SetPlayerIsRepeatingAMission=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x9D8D44ADBBA61EF2,toggle)end;
	--[=[Does nothing (it's a nullsub).]=]
	DisableScreenDimmingThisFrame=function()return InvokeVoid(0x23227DF0B2115469)end;
	GetCityDensity=function()return InvokeFloat(0xD10282B6E3751BA0)end;---@return number
	UseActiveCameraForTimeslicingCentre=function()return InvokeVoid(0x693478ACBD7F18E7)end;
	SetContentIdIndex=function(contentId--[[@param contentId integer]],index--[[@param index integer]])return InvokeVoid(0x4B82FA6F2D624634,contentId,index)end;
	GetContentIdIndex=function(contentId--[[@param contentId integer]])return InvokeInt(0xECF041186C5A94DC,contentId)end;---@return integer
}
_G.Mobile={
	--[=[Creates a mobile phone of the specified type.

Possible phone types:

0 - Default phone / Michael's phone
1 - Trevor's phone
2 - Franklin's phone
3 - Unused police phone
4 - Prologue phone

Higher values may crash your game.]=]
	CreateMobilePhone=function(phoneType--[[@param phoneType integer]])return InvokeVoid(0xA4E8E696C532FBC7,phoneType)end;
	--[=[Destroys the currently active mobile phone.]=]
	DestroyMobilePhone=function()return InvokeVoid(0x3BC861DF703E5097)end;
	--[=[The minimum/default is 500.0f. If you plan to make it bigger set it's position as well. Also this seems to need to be called in a loop as when you close the phone the scale is reset. If not in a loop you'd need to call it everytime before you re-open the phone.]=]
	SetMobilePhoneScale=function(scale--[[@param scale number]])return InvokeVoid(0xCBDD322A73D6D932,scale+.0)end;
	--[=[Last parameter is unknown and always zero.]=]
	SetMobilePhoneRotation=function(rotX--[[@param rotX number]],rotY--[[@param rotY number]],rotZ--[[@param rotZ number]],p3--[[@param p3 any]])return InvokeVoid(0xBB779C0CA917E865,rotX+.0,rotY+.0,rotZ+.0,p3)end;
	GetMobilePhoneRotation=function(rotation--[[@param rotation V3*]],p1--[[@param p1 integer]])return InvokeVoid(0x1CEFB61F193070AE,rotation,p1)end;
	SetMobilePhonePosition=function(posX--[[@param posX number]],posY--[[@param posY number]],posZ--[[@param posZ number]])return InvokeVoid(0x693A5C6D6734085B,posX+.0,posY+.0,posZ+.0)end;
	GetMobilePhonePosition=function(position--[[@param position V3*]])return InvokeVoid(0x584FDFDA48805B86,position)end;
	--[=[If bool Toggle = true so the mobile is hide to screen.
If bool Toggle = false so the mobile is show to screen.]=]
	ScriptIsMovingMobilePhoneOffscreen=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xF511F759238A5122,toggle)end;
	--[=[This one is weird and seems to return a TRUE state regardless of whether the phone is visible on screen or tucked away.


I can confirm the above. This function is hard-coded to always return 1.]=]
	CanPhoneBeSeenOnScreen=function()return InvokeBool(0xC4E2813898C97A4B)end;---@return boolean
	SetMobilePhoneDofState=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x375A706A5C2FD084,toggle)end;
	--[=[For move the finger of player, the value of int goes 1 at 5.]=]
	CellSetInput=function(direction--[[@param direction integer]])return InvokeVoid(0x95C9E72F3D7DEC9B,direction)end;
	--[=[if the bool "Toggle" is "true" so the phone is lean.
if the bool "Toggle" is "false" so the phone is not lean.]=]
	CellHorizontalModeToggle=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x44E44169EF70138E,toggle)end;
	CellCamActivate=function(p0--[[@param p0 boolean]],p1--[[@param p1 boolean]])return InvokeVoid(0xFDE8F069C542D126,p0,p1)end;
	CellCamActivateSelfieMode=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x015C49A93E3E086E,toggle)end;
	CellCamActivateShallowDofMode=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xA2CCBE62CD4C91A4,toggle)end;
	CellCamSetSelfieModeSideOffsetScaling=function(p0--[[@param p0 number]])return InvokeVoid(0x1B0B4AEED5B9B41C,p0+.0)end;
	CellCamSetSelfieModeHorzPanOffset=function(horizontalPan--[[@param horizontalPan number]])return InvokeVoid(0x53F4892D18EC90A4,horizontalPan+.0)end;
	CellCamSetSelfieModeVertPanOffset=function(vertPan--[[@param vertPan number]])return InvokeVoid(0x3117D84EFA60F77B,vertPan+.0)end;
	CellCamSetSelfieModeRollOffset=function(roll--[[@param roll number]])return InvokeVoid(0x15E69E2802C24B8D,roll+.0)end;
	CellCamSetSelfieModeDistanceScaling=function(distanceScaling--[[@param distanceScaling number]])return InvokeVoid(0xAC2890471901861C,distanceScaling+.0)end;
	CellCamSetSelfieModeHeadYawOffset=function(yaw--[[@param yaw number]])return InvokeVoid(0xD6ADE981781FCA09,yaw+.0)end;
	CellCamSetSelfieModeHeadRollOffset=function(roll--[[@param roll number]])return InvokeVoid(0xF1E22DC13F5EEBAD,roll+.0)end;
	CellCamSetSelfieModeHeadPitchOffset=function(pitch--[[@param pitch number]])return InvokeVoid(0x466DA42C89865553,pitch+.0)end;
	CellCamIsCharVisibleNoFaceCheck=function(entity--[[@param entity integer]])return InvokeBool(0x439E9BC95B7E7FBE,entity)end;---@return boolean
	GetMobilePhoneRenderId=function(renderId--[[@param renderId integer*]])return InvokeVoid(0xB4A53E05F68B6FA1,renderId)end;
}
_G.Money={
	NetworkInitializeCash=function(wallet--[[@param wallet integer]],bank--[[@param bank integer]])return InvokeVoid(0x3DA5ECD1A56CBA6D,wallet,bank)end;
	--[=[Note the 2nd parameters are always 1, 0. I have a feeling it deals with your money, wallet, bank. So when you delete the character it of course wipes the wallet cash at that time. So if that was the case, it would be eg, NETWORK_DELETE_CHARACTER(characterIndex, deleteWalletCash, deleteBankCash);]=]
	NetworkDeleteCharacter=function(characterSlot--[[@param characterSlot integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0x05A50AF38947EB8D,characterSlot,p1,p2)end;
	NetworkManualDeleteCharacter=function(characterSlot--[[@param characterSlot integer]])return InvokeVoid(0x821418C727FCACD7,characterSlot)end;
	NetworkGetPlayerIsHighEarner=function()return InvokeBool(0xFB2456B2040A6A67)end;---@return boolean
	NetworkClearCharacterWallet=function(characterSlot--[[@param characterSlot integer]])return InvokeVoid(0xA921DED15FDF28F5,characterSlot)end;
	NetworkGivePlayerJobshareCash=function(amount--[[@param amount integer]],gamerHandle--[[@param gamerHandle any*]])return InvokeVoid(0xFB18DF9CB95E0105,amount,gamerHandle)end;
	NetworkReceivePlayerJobshareCash=function(value--[[@param value integer]],gamerHandle--[[@param gamerHandle any*]])return InvokeVoid(0x56A3B51944C50598,value,gamerHandle)end;
	NetworkCanShareJobCash=function()return InvokeBool(0x1C2473301B1C66BA)end;---@return boolean
	--[=[index
-------
See function sub_1005 in am_boat_taxi.ysc

context
----------
"BACKUP_VAGOS"
"BACKUP_LOST"
"BACKUP_FAMILIES"
"HIRE_MUGGER"
"HIRE_MERCENARY"
"BUY_CARDROPOFF"
"HELI_PICKUP"
"BOAT_PICKUP"
"CLEAR_WANTED"
"HEAD_2_HEAD"
"CHALLENGE"
"SHARE_LAST_JOB"
"DEFAULT"

reason
---------
"NOTREACHTARGET"
"TARGET_ESCAPE"
"DELIVERY_FAIL"
"NOT_USED"
"TEAM_QUIT"
"SERVER_ERROR"
"RECEIVE_LJ_L"
"CHALLENGE_PLAYER_LEFT"
"DEFAULT"

unk
-----
Unknown bool value

]=]
	NetworkRefundCash=function(index--[[@param index integer]],context--[[@param context string]],reason--[[@param reason string]],p3--[[@param p3 boolean]])return InvokeVoid(0xF9C812CD7C46E817,index,context,reason,p3)end;
	NetworkDeductCash=function(amount--[[@param amount integer]],p1--[[@param p1 string]],p2--[[@param p2 string]],p3--[[@param p3 boolean]],p4--[[@param p4 boolean]],p5--[[@param p5 boolean]])return InvokeVoid(0x18B7AE224B087E26,amount,p1,p2,p3,p4,p5)end;
	NetworkMoneyCanBet=function(amount--[[@param amount integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeBool(0x81404F3DC124FE5B,amount,p1,p2)end;---@return boolean
	NetworkCanBet=function(amount--[[@param amount integer]])return InvokeBool(0x3A54E33660DED67F,amount)end;---@return boolean
	--[=[GTAO_CASINO_HOUSE
GTAO_CASINO_INSIDETRACK
GTAO_CASINO_LUCKYWHEEL
GTAO_CASINO_BLACKJACK
GTAO_CASINO_ROULETTE
GTAO_CASINO_SLOTS
GTAO_CASINO_PURCHASE_CHIPS

NETWORK_C*]=]
	NetworkCasinoCanBet=function(hash--[[@param hash integer]])return InvokeBool(0x158C16F5E4CF41F8,hash)end;---@return boolean
	NetworkCasinoCanBetPvc=function()return InvokeBool(0x394DCDB9E836B7A9)end;---@return boolean
	NetworkCasinoCanBetAmount=function(p0--[[@param p0 any]])return InvokeBool(0xF62F6D9528358FE4,p0)end;---@return boolean
	NetworkCasinoCanBuyChipsPvc=function()return InvokeBool(0x8968D4D8C6C40C11)end;---@return boolean
	NetworkCasinoBuyChips=function(p0--[[@param p0 integer]],p1--[[@param p1 integer]])return InvokeBool(0x3BD101471C7F9EEC,p0,p1)end;---@return boolean
	NetworkCasinoSellChips=function(p0--[[@param p0 integer]],p1--[[@param p1 integer]])return InvokeBool(0xED44897CB336F480,p0,p1)end;---@return boolean
	--[=[Does nothing (it's a nullsub).]=]
	NetworkDeferCashTransactionsUntilShopSave=function()return InvokeVoid(0xCD0F5B5D932AE473)end;
	CanPayAmountToBoss=function(p0--[[@param p0 integer]],p1--[[@param p1 integer]],amount--[[@param amount integer]],p3--[[@param p3 integer*]])return InvokeBool(0x9777734DAD16992F,p0,p1,amount,p3)end;---@return boolean
	NetworkEarnFromPickup=function(amount--[[@param amount integer]])return InvokeVoid(0xED1517D3AF17C698,amount)end;
	NetworkEarnFromCashingOut=function(amount--[[@param amount integer]])return InvokeVoid(0x718FBBF67414FA36,amount)end;
	NetworkEarnFromGangattackPickup=function(amount--[[@param amount integer]])return InvokeVoid(0xA03D4ACE0A3284CE,amount)end;
	NetworkEarnAssassinateTargetKilled=function(amount--[[@param amount integer]])return InvokeVoid(0xFA700D8A9905F78A,amount)end;
	--[=[For the money bags that drop a max of $40,000. Often called 40k bags.

Most likely NETWORK_EARN_FROM_ROB***]=]
	NetworkEarnFromRobArmoredCars=function(amount--[[@param amount integer]])return InvokeVoid(0xF514621E8EA463D0,amount)end;
	NetworkEarnFromCrateDrop=function(amount--[[@param amount integer]])return InvokeVoid(0xB1CC1B9EC3007A2A,amount)end;
	NetworkEarnFromBetting=function(amount--[[@param amount integer]],p1--[[@param p1 string]])return InvokeVoid(0x827A5BA1A44ACA6D,amount,p1)end;
	NetworkEarnFromJob=function(amount--[[@param amount integer]],p1--[[@param p1 string]])return InvokeVoid(0xB2CC4836834E8A98,amount,p1)end;
	NetworkEarnFromJobx2=function(amount--[[@param amount integer]],p1--[[@param p1 string]])return InvokeVoid(0xDEBBF584665411D0,amount,p1)end;
	NetworkEarnFromPremiumJob=function(amount--[[@param amount integer]],p1--[[@param p1 string]])return InvokeVoid(0xC8407624CEF2354B,amount,p1)end;
	NetworkEarnFromBendJob=function(amount--[[@param amount integer]],heistHash--[[@param heistHash string]])return InvokeVoid(0x61326EE6DF15B0CA,amount,heistHash)end;
	NetworkEarnFromChallengeWin=function(p0--[[@param p0 any]],p1--[[@param p1 any*]],p2--[[@param p2 boolean]])return InvokeVoid(0x2B171E6B2F64D8DF,p0,p1,p2)end;
	NetworkEarnFromBounty=function(amount--[[@param amount integer]],gamerHandle--[[@param gamerHandle any*]],p2--[[@param p2 any*]],p3--[[@param p3 any]])return InvokeVoid(0x131BB5DA15453ACF,amount,gamerHandle,p2,p3)end;
	NetworkEarnFromImportExport=function(amount--[[@param amount integer]],modelHash--[[@param modelHash integer]])return InvokeVoid(0xF92A014A634442D6,amount,modelHash)end;
	NetworkEarnFromHoldups=function(amount--[[@param amount integer]])return InvokeVoid(0x45B8154E077D9E4D,amount)end;
	NetworkEarnFromProperty=function(amount--[[@param amount integer]],propertyName--[[@param propertyName integer]])return InvokeVoid(0x849648349D77F5C5,amount,propertyName)end;
	--[=[DSPORT]=]
	NetworkEarnFromAiTargetKill=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x515B4A22E4D3C6D7,p0,p1)end;
	NetworkEarnFromNotBadsport=function(amount--[[@param amount integer]])return InvokeVoid(0x4337511FA8221D36,amount)end;
	NetworkEarnFromVehicle=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]],p5--[[@param p5 any]],p6--[[@param p6 any]],p7--[[@param p7 any]])return InvokeVoid(0xB539BD8A4C1EECF8,p0,p1,p2,p3,p4,p5,p6,p7)end;
	NetworkEarnFromPersonalVehicle=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]],p5--[[@param p5 any]],p6--[[@param p6 any]],p7--[[@param p7 any]],p8--[[@param p8 any]])return InvokeVoid(0x3F4D00167E41E0AD,p0,p1,p2,p3,p4,p5,p6,p7,p8)end;
	--[=[type either Monthly,Weekly,Daily]=]
	NetworkEarnFromDailyObjectives=function(amount--[[@param amount integer]],type--[[@param type string]],characterSlot--[[@param characterSlot integer]])return InvokeVoid(0x6EA318C91C1A8786,amount,type,characterSlot)end;
	--[=[Example for p1: "AM_DISTRACT_COPS"]=]
	NetworkEarnFromAmbientJob=function(p0--[[@param p0 integer]],p1--[[@param p1 string]],p2--[[@param p2 any*]])return InvokeVoid(0xFB6DB092FBAE29E6,p0,p1,p2)end;
	NetworkEarnFromJobBonus=function(p0--[[@param p0 any]],p1--[[@param p1 any*]],p2--[[@param p2 any*]])return InvokeVoid(0x6816FB4416760775,p0,p1,p2)end;
	NetworkEarnFromCriminalMastermind=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0xFA009A62990671D4,p0,p1,p2)end;
	NetworkEarnHeistAward=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0x9D4FDBB035229669,p0,p1,p2)end;
	NetworkEarnFirstTimeBonus=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0x11B0A20C493F7E36,p0,p1,p2)end;
	NetworkEarnGoon=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0xCDA1C62BE2777802,p0,p1,p2)end;
	NetworkEarnBoss=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0x08B0CA7A6AB3AC32,p0,p1,p2)end;
	NetworkEarnAgency=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x0CB1BE0633C024A8,p0,p1,p2,p3)end;
	NetworkEarnFromWarehouse=function(amount--[[@param amount integer]],id--[[@param id integer]])return InvokeVoid(0x3E4ADAFF1830F146,amount,id)end;
	NetworkEarnFromContraband=function(amount--[[@param amount integer]],p1--[[@param p1 any]])return InvokeVoid(0xECA658CE2A4E5A72,amount,p1)end;
	NetworkEarnFromDestroyingContraband=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0x84C0116D012E8FC2,p0,p1,p2)end;
	NetworkEarnFromSmugglerWork=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]],p5--[[@param p5 any]])return InvokeVoid(0x6B7E4FB50D5F3D65,p0,p1,p2,p3,p4,p5)end;
	NetworkEarnFromHangarTrade=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x31BA138F6304FB9F,p0,p1)end;
	NetworkEarnPurchaseClubHouse=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x55A1E095DB052FA5,p0,p1)end;
	NetworkEarnFromBusinessProduct=function(amount--[[@param amount integer]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x8586789730B10CAF,amount,p1,p2,p3)end;
	NetworkEarnFromVehicleExport=function(amount--[[@param amount integer]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0xEDEAD9A91EC768B3,amount,p1,p2)end;
	NetworkEarnSmugglerAgency=function(amount--[[@param amount integer]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0xDEE612F2D71B0308,amount,p1,p2,p3)end;
	NetworkEarnBountyHunterReward=function(p0--[[@param p0 any]])return InvokeVoid(0xF6B170F9A02E9E87,p0)end;
	NetworkEarnFromBusinessBattle=function(p0--[[@param p0 any]])return InvokeVoid(0x42FCE14F50F27291,p0)end;
	NetworkEarnFromClubManagementParticipation=function(p0--[[@param p0 any]],p1--[[@param p1 integer]])return InvokeVoid(0xA75EAC69F59E96E7,p0,p1)end;
	NetworkEarnFromFmbbPhonecallMission=function(p0--[[@param p0 any]])return InvokeVoid(0xC5156361F26E2212,p0)end;
	NetworkEarnFromBusinessHubSell=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0x0B39CF0D53F1C883,p0,p1,p2)end;
	NetworkEarnFromFmbbBossWork=function(p0--[[@param p0 any]])return InvokeVoid(0x1FDA0AA679C9919B,p0)end;
	NetworkEarnFmbbWageBonus=function(p0--[[@param p0 any]])return InvokeVoid(0xFFFBA1B1F7C0B6F4,p0)end;
	NetworkCanSpendMoney=function(p0--[[@param p0 any]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],p3--[[@param p3 boolean]],p4--[[@param p4 any]],p5--[[@param p5 any]])return InvokeBool(0xAB3CAA6B422164DA,p0,p1,p2,p3,p4,p5)end;---@return boolean
	NetworkCanSpendMoney2=function(p0--[[@param p0 any]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],p3--[[@param p3 boolean]],p4--[[@param p4 any*]],p5--[[@param p5 any]],p6--[[@param p6 any]])return InvokeBool(0x7303E27CC6532080,p0,p1,p2,p3,p4,p5,p6)end;---@return boolean
	NetworkBuyItem=function(amount--[[@param amount integer]],item--[[@param item integer]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 boolean]],item_name--[[@param item_name string]],p6--[[@param p6 any]],p7--[[@param p7 any]],p8--[[@param p8 any]],p9--[[@param p9 boolean]])return InvokeVoid(0xF0077C797F66A355,amount,item,p2,p3,p4,item_name,p6,p7,p8,p9)end;
	NetworkSpentTaxi=function(amount--[[@param amount integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],p3--[[@param p3 any]],p4--[[@param p4 any]])return InvokeVoid(0x17C3A7D31EAE39F9,amount,p1,p2,p3,p4)end;
	NetworkPayEmployeeWage=function(p0--[[@param p0 any]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0x5FD5ED82CBBE9989,p0,p1,p2)end;
	NetworkPayMatchEntryFee=function(amount--[[@param amount integer]],matchId--[[@param matchId string]],p2--[[@param p2 boolean]],p3--[[@param p3 boolean]])return InvokeVoid(0x9346E14F2AF74D46,amount,matchId,p2,p3)end;
	NetworkSpentBetting=function(amount--[[@param amount integer]],p1--[[@param p1 integer]],matchId--[[@param matchId string]],p3--[[@param p3 boolean]],p4--[[@param p4 boolean]])return InvokeVoid(0x1C436FD11FFA692F,amount,p1,matchId,p3,p4)end;
	NetworkSpentWager=function(p0--[[@param p0 any]],p1--[[@param p1 any]],amount--[[@param amount integer]])return InvokeVoid(0xD99DB210089617FE,p0,p1,amount)end;
	NetworkSpentInStripclub=function(p0--[[@param p0 any]],p1--[[@param p1 boolean]],p2--[[@param p2 any]],p3--[[@param p3 boolean]])return InvokeVoid(0xEE99784E4467689C,p0,p1,p2,p3)end;
	NetworkBuyHealthcare=function(cost--[[@param cost integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0xD9B067E55253E3DD,cost,p1,p2)end;
	--[=[p1 = 0 (always)
p2 = 1 (always)]=]
	NetworkBuyAirstrike=function(cost--[[@param cost integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],p3--[[@param p3 any]])return InvokeVoid(0x763B4BD305338F19,cost,p1,p2,p3)end;
	NetworkBuyBackupGang=function(p0--[[@param p0 integer]],p1--[[@param p1 integer]],p2--[[@param p2 boolean]],p3--[[@param p3 boolean]],npcProvider--[[@param npcProvider integer]])return InvokeVoid(0xA3EDDAA42411D3B9,p0,p1,p2,p3,npcProvider)end;
	--[=[p1 = 0 (always)
p2 = 1 (always)]=]
	NetworkBuyHeliStrike=function(cost--[[@param cost integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],p3--[[@param p3 any]])return InvokeVoid(0x81AA4610E3FD3A69,cost,p1,p2,p3)end;
	NetworkSpentAmmoDrop=function(p0--[[@param p0 any]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],p3--[[@param p3 any]])return InvokeVoid(0xB162DC95C0A3317B,p0,p1,p2,p3)end;
	--[=[p1 is just an assumption. p2 was false and p3 was true.]=]
	NetworkBuyBounty=function(amount--[[@param amount integer]],victim--[[@param victim integer]],p2--[[@param p2 boolean]],p3--[[@param p3 boolean]],p4--[[@param p4 any]])return InvokeVoid(0x7B718E197453F2D9,amount,victim,p2,p3,p4)end;
	NetworkBuyProperty=function(cost--[[@param cost integer]],propertyName--[[@param propertyName integer]],p2--[[@param p2 boolean]],p3--[[@param p3 boolean]])return InvokeVoid(0x650A08A280870AF6,cost,propertyName,p2,p3)end;
	NetworkBuySmokes=function(p0--[[@param p0 integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0x75AF80E61248EEBD,p0,p1,p2)end;
	NetworkSpentHeliPickup=function(p0--[[@param p0 any]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],p3--[[@param p3 any]])return InvokeVoid(0x7BF1D73DB2ECA492,p0,p1,p2,p3)end;
	NetworkSpentBoatPickup=function(p0--[[@param p0 any]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],p3--[[@param p3 any]])return InvokeVoid(0x524EE43A37232C00,p0,p1,p2,p3)end;
	NetworkSpentBullShark=function(p0--[[@param p0 any]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],p3--[[@param p3 any]])return InvokeVoid(0xA6DD8458CE24012C,p0,p1,p2,p3)end;
	NetworkSpentCashDrop=function(amount--[[@param amount integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0x289016EC778D60E0,amount,p1,p2)end;
	--[=[Only used once in a script (am_contact_requests)
p1 = 0
p2 = 1]=]
	NetworkSpentHireMugger=function(p0--[[@param p0 any]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],p3--[[@param p3 any]])return InvokeVoid(0xE404BFB981665BF0,p0,p1,p2,p3)end;
	NetworkSpentRobbedByMugger=function(amount--[[@param amount integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],p3--[[@param p3 any]])return InvokeVoid(0x995A65F15F581359,amount,p1,p2,p3)end;
	NetworkSpentHireMercenary=function(p0--[[@param p0 any]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],p3--[[@param p3 any]])return InvokeVoid(0xE7B80E2BF9D80BD6,p0,p1,p2,p3)end;
	NetworkSpentBuyWantedlevel=function(p0--[[@param p0 any]],p1--[[@param p1 any*]],p2--[[@param p2 boolean]],p3--[[@param p3 boolean]],p4--[[@param p4 any]])return InvokeVoid(0xE1B13771A843C4F6,p0,p1,p2,p3,p4)end;
	NetworkSpentBuyOfftheradar=function(p0--[[@param p0 any]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],p3--[[@param p3 any]])return InvokeVoid(0xA628A745E2275C5D,p0,p1,p2,p3)end;
	NetworkSpentBuyRevealPlayers=function(p0--[[@param p0 any]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],p3--[[@param p3 any]])return InvokeVoid(0x6E176F1B18BC0637,p0,p1,p2,p3)end;
	NetworkSpentCarwash=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 boolean]],p4--[[@param p4 boolean]])return InvokeVoid(0xEC03C719DB2F4306,p0,p1,p2,p3,p4)end;
	NetworkSpentCinema=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 boolean]],p3--[[@param p3 boolean]])return InvokeVoid(0x6B38ECB05A63A685,p0,p1,p2,p3)end;
	NetworkSpentTelescope=function(p0--[[@param p0 any]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0x7FE61782AD94CC09,p0,p1,p2)end;
	NetworkSpentHoldups=function(p0--[[@param p0 any]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0xD9B86B9872039763,p0,p1,p2)end;
	NetworkSpentBuyPassiveMode=function(p0--[[@param p0 any]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],p3--[[@param p3 any]])return InvokeVoid(0x6D3A430D1A809179,p0,p1,p2,p3)end;
	NetworkSpentBankInterest=function(p0--[[@param p0 integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0xCA230C9682556CF1,p0,p1,p2)end;
	NetworkSpentProstitutes=function(p0--[[@param p0 any]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0xB21B89501CFAC79E,p0,p1,p2)end;
	NetworkSpentArrestBail=function(p0--[[@param p0 any]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0x812F5488B1B2A299,p0,p1,p2)end;
	--[=[According to how I understood this in the freemode script alone,
The first parameter is determined by a function named, func_5749 within the freemode script which has a list of all the vehicles and a set price to return which some vehicles deals with globals as well. So the first parameter is basically the set in stone insurance cost it's gonna charge you for that specific vehicle model.

The second parameter whoever put it was right, they call GET_ENTITY_MODEL with the vehicle as the paremeter.

The third parameter is the network handle as they call their little struct<13> func or atleast how the script decompiled it to look which in lamens terms just returns the network handle of the previous owner based on DECOR_GET_INT(vehicle, "Previous_Owner").

The fourth parameter is a bool that returns true/false depending on if your bank balance is greater then 0.

The fifth and last parameter is a bool that returns true/false depending on if you have the money for the car based on the cost returned by func_5749. In the freemode script eg,
bool hasTheMoney = MONEY::_GET_BANK_BALANCE() < carCost.]=]
	NetworkSpentPayVehicleInsurancePremium=function(amount--[[@param amount integer]],vehicleModel--[[@param vehicleModel integer]],gamerHandle--[[@param gamerHandle any*]],notBankrupt--[[@param notBankrupt boolean]],hasTheMoney--[[@param hasTheMoney boolean]])return InvokeVoid(0x9FF28D88C766E3E8,amount,vehicleModel,gamerHandle,notBankrupt,hasTheMoney)end;
	NetworkSpentCallPlayer=function(p0--[[@param p0 any]],p1--[[@param p1 any*]],p2--[[@param p2 boolean]],p3--[[@param p3 boolean]])return InvokeVoid(0xACDE7185B374177C,p0,p1,p2,p3)end;
	NetworkSpentBounty=function(p0--[[@param p0 any]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0x29B260B84947DFCC,p0,p1,p2)end;
	NetworkSpentFromRockstar=function(p0--[[@param p0 integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0x6A445B64ED7ABEB5,p0,p1,p2)end;
	--[=[Hardcoded to return 0.]=]
	NetworkSpendEarnedFromBankAndWallets=function(amount--[[@param amount integer]])return InvokeInt(0x9B5016A6433A68C5,amount)end;---@return integer
	--[=[This isn't a hash collision.]=]
	ProcessCashGift=function(p0--[[@param p0 integer*]],p1--[[@param p1 integer*]],p2--[[@param p2 string]])return InvokeString(0x20194D48EAEC9A41,p0,p1,p2)end;---@return string
	NetworkSpentMoveSubmarine=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0xCD4D66B43B1DD28D,p0,p1,p2)end;
	NetworkSpentPlayerHealthcare=function(p0--[[@param p0 integer]],p1--[[@param p1 integer]],p2--[[@param p2 boolean]],p3--[[@param p3 boolean]])return InvokeVoid(0x7C99101F7FCE2EE5,p0,p1,p2,p3)end;
	NetworkSpentNoCops=function(p0--[[@param p0 any]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],p3--[[@param p3 any]])return InvokeVoid(0xD5BB406F4E04019F,p0,p1,p2,p3)end;
	NetworkSpentCargoSourcing=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]],p5--[[@param p5 any]])return InvokeVoid(0x948705F6F9C50824,p0,p1,p2,p3,p4,p5)end;
	NetworkSpentRequestJob=function(p0--[[@param p0 any]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],p3--[[@param p3 any]])return InvokeVoid(0x8204DA7934DF3155,p0,p1,p2,p3)end;
	NetworkSpentRequestHeist=function(p0--[[@param p0 any]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],p3--[[@param p3 any]])return InvokeVoid(0x9D26502BB97BFE62,p0,p1,p2,p3)end;
	--[=[The first parameter is the amount spent which is store in a global when this native is called. The global returns 10. Which is the price for both rides.

The last 3 parameters are, 
2,0,1 in the am_ferriswheel.c
1,0,1 in the am_rollercoaster.c
]=]
	NetworkBuyFairgroundRide=function(amount--[[@param amount integer]],p1--[[@param p1 any]],p2--[[@param p2 boolean]],p3--[[@param p3 boolean]],p4--[[@param p4 any]])return InvokeVoid(0x8A7B3952DD64D2B5,amount,p1,p2,p3,p4)end;
	NetworkEconomyHasFixedCrazyNumbers=function()return InvokeBool(0x7C4FCCD2E4DEB394)end;---@return boolean
	NetworkSpentJobSkip=function(amount--[[@param amount integer]],matchId--[[@param matchId string]],p2--[[@param p2 boolean]],p3--[[@param p3 boolean]])return InvokeVoid(0x28F174A67B8D0C2F,amount,matchId,p2,p3)end;
	NetworkSpentBossGoon=function(amount--[[@param amount integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeBool(0xFFBE02CD385356BD,amount,p1,p2)end;---@return boolean
	NetworkSpendGoon=function(p0--[[@param p0 integer]],p1--[[@param p1 integer]],amount--[[@param amount integer]])return InvokeVoid(0x08A1B82B91900682,p0,p1,amount)end;
	NetworkSpendBoss=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0xDBC966A01C02BCA7,p0,p1,p2)end;
	NetworkSpentMoveYacht=function(amount--[[@param amount integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0xE7DF4E0545DFB56E,amount,p1,p2)end;
	NetworkSpentRenameOrganization=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0xFC4EE00A7B3BFB76,p0,p1,p2,p3)end;
	NetworkBuyContrabandMission=function(p0--[[@param p0 integer]],p1--[[@param p1 integer]],p2--[[@param p2 integer]],p3--[[@param p3 boolean]],p4--[[@param p4 boolean]])return InvokeVoid(0x30FD873ECE50E9F6,p0,p1,p2,p3,p4)end;
	NetworkSpentPaServiceHeli=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x112209CE0290C03A,p0,p1,p2,p3)end;
	NetworkSpentPaServiceVehicle=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0xED5FD7AF10F5E262,p0,p1,p2,p3)end;
	NetworkSpentPaServiceSnack=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x0D30EB83668E63C5,p0,p1,p2,p3)end;
	NetworkSpentPaServiceDancer=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0xB49ECA122467D05F,p0,p1,p2,p3)end;
	NetworkSpentPaServiceImpound=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0xE23ADC6FCB1F29AE,p0,p1,p2)end;
	NetworkSpentPaHeliPickup=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x0FE8E1FCD2B86B33,p0,p1,p2,p3)end;
	NetworkSpentPurchaseOfficeProperty=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]])return InvokeVoid(0x69EF772B192614C1,p0,p1,p2,p3,p4)end;
	NetworkSpentUpgradeOfficeProperty=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]])return InvokeVoid(0x8E243837643D9583,p0,p1,p2,p3,p4)end;
	NetworkSpentPurchaseWarehouseProperty=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0xBD0EFB25CCA8F97A,p0,p1,p2,p3)end;
	NetworkSpentUpgradeWarehouseProperty=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0xA95F667A755725DA,p0,p1,p2,p3)end;
	NetworkSpentPurchaseImpexpWarehouseProperty=function(amount--[[@param amount integer]],data--[[@param data any*]],p2--[[@param p2 boolean]],p3--[[@param p3 boolean]])return InvokeVoid(0x33981D6804E62F49,amount,data,p2,p3)end;
	NetworkSpentUpgradeImpexpWarehouseProperty=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x4128464231E3CA0B,p0,p1,p2,p3)end;
	NetworkSpentTradeImpexpWarehouseProperty=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x2FAB6614CE22E196,p0,p1,p2,p3)end;
	NetworkSpentOrderWarehouseVehicle=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x05F04155A226FBBF,p0,p1,p2,p3)end;
	NetworkSpentOrderBodyguardVehicle=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0xE8B0B270B6E7C76E,p0,p1,p2,p3)end;
	NetworkSpentJukebox=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x5BCDE0F640C773D2,p0,p1,p2,p3)end;
	NetworkSpentPurchaseClubHouse=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x998E18CEB44487FC,p0,p1,p2,p3)end;
	NetworkSpentUpgradeClubHouse=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0xFA07759E6FDDD7CF,p0,p1,p2,p3)end;
	NetworkSpentPurchaseBusinessProperty=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x6FD97159FE3C971A,p0,p1,p2,p3)end;
	NetworkSpentUpgradeBusinessProperty=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x675D19C6067CAE08,p0,p1,p2,p3)end;
	NetworkSpentTradeBusinessProperty=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0xA51B086B0B2C0F7A,p0,p1,p2,p3)end;
	NetworkSpentMcAbility=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]])return InvokeVoid(0xD7CCCBA28C4ECAF0,p0,p1,p2,p3,p4)end;
	NetworkSpentPayBusinessSupplies=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x0035BB914316F1E3,p0,p1,p2,p3)end;
	NetworkSpentChangeAppearance=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0x5F456788B05FAEAC,p0,p1,p2)end;
	NetworkSpentVehicleExportMods=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]],p5--[[@param p5 any]],p6--[[@param p6 any]],p7--[[@param p7 any]],p8--[[@param p8 any]],p9--[[@param p9 any]])return InvokeVoid(0xA75CCF58A60A5FD1,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9)end;
	NetworkSpentPurchaseOfficeGarage=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0xB4C2EC463672474E,p0,p1,p2,p3)end;
	NetworkSpentUpgradeOfficeGarage=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x2AFC2D19B50797F2,p0,p1,p2,p3)end;
	NetworkSpentImportExportRepair=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0xC1952F3773BA18FE,p0,p1,p2)end;
	NetworkSpentPurchaseHangar=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0xCCB339CC970452DA,p0,p1,p2,p3)end;
	NetworkSpentUpgradeHangar=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x615EB504B0788DAF,p0,p1,p2,p3)end;
	NetworkSpentHangarUtilityCharges=function(amount--[[@param amount integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0xB18AC2ECBB15CB6A,amount,p1,p2)end;
	NetworkSpentHangarStaffCharges=function(amount--[[@param amount integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0xB1F1346FD57685D7,amount,p1,p2)end;
	NetworkSpentBuyTruck=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0xAC272C0AE01B4BD8,p0,p1,p2,p3)end;
	NetworkSpentUpgradeTruck=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x365E877C61D6988B,p0,p1,p2,p3)end;
	NetworkSpentBuyBunker=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x12D148D26538D0F9,p0,p1,p2,p3)end;
	NetworkSpentUpradeBunker=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x0C82D21A77C22D49,p0,p1,p2,p3)end;
	NetworkEarnFromSellBunker=function(amount--[[@param amount integer]],bunkerHash--[[@param bunkerHash integer]])return InvokeVoid(0x9251B6ABF2D0A5B4,amount,bunkerHash)end;
	NetworkSpentBallisticEquipment=function(amount--[[@param amount integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0x5D97630A8A0EF123,amount,p1,p2)end;
	NetworkEarnRdrBonus=function(amount--[[@param amount integer]],p1--[[@param p1 any]])return InvokeVoid(0x7A5349B773584675,amount,p1)end;
	NetworkEarnWagePayment=function(amount--[[@param amount integer]],p1--[[@param p1 any]])return InvokeVoid(0x35F8DA0E8A31EF1B,amount,p1)end;
	NetworkEarnWagePaymentBonus=function(amount--[[@param amount integer]])return InvokeVoid(0x005ACA7100BD101D,amount)end;
	NetworkSpentBuyBase=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x4EA3F425C7744D21,p0,p1,p2,p3)end;
	NetworkSpentUpgradeBase=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x3DD3F33A5D55EA6F,p0,p1,p2,p3)end;
	NetworkSpentBuyTiltrotor=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x0CCE73BC7A11E885,p0,p1,p2,p3)end;
	NetworkSpentUpgradeTiltrotor=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x165E135D6DFA2907,p0,p1,p2,p3)end;
	NetworkSpentEmployAssassins=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x5BBBD92186E1F1C5,p0,p1,p2,p3)end;
	NetworkSpendGangopsCannon=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x771ADB0E7635B7BF,p0,p1,p2,p3)end;
	NetworkSpendGangopsSkipMission=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0xDA947AE8880D5C18,p0,p1,p2,p3)end;
	NetworkSpendCasinoHeistSkipMission=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x487009DD91D93429,p0,p1,p2,p3)end;
	NetworkEarnSellBase=function(amount--[[@param amount integer]],baseNameHash--[[@param baseNameHash integer]])return InvokeVoid(0x0E1E2FF3F4EC11AA,amount,baseNameHash)end;
	NetworkEarnTargetRefund=function(amount--[[@param amount integer]],p1--[[@param p1 integer]])return InvokeVoid(0x5B669CF2299A271F,amount,p1)end;
	NetworkEarnGangopsWages=function(amount--[[@param amount integer]],p1--[[@param p1 integer]])return InvokeVoid(0x2DCB19ABAB0380A8,amount,p1)end;
	NetworkEarnGangopsWagesBonus=function(amount--[[@param amount integer]],p1--[[@param p1 integer]])return InvokeVoid(0x15BB2A5C757EB91F,amount,p1)end;
	NetworkEarnDarChallenge=function(amount--[[@param amount integer]],p1--[[@param p1 any]])return InvokeVoid(0xCAC672087B4A24AB,amount,p1)end;
	NetworkEarnDoomsdayFinaleBonus=function(amount--[[@param amount integer]],vehicleHash--[[@param vehicleHash integer]])return InvokeVoid(0x128A747F4A230952,amount,vehicleHash)end;
	NetworkEarnGangopsAward=function(amount--[[@param amount integer]],p1--[[@param p1 string]],p2--[[@param p2 any]])return InvokeVoid(0xA9A31475F530DFDA,amount,p1,p2)end;
	NetworkEarnGangopsElite=function(amount--[[@param amount integer]],p1--[[@param p1 string]],actIndex--[[@param actIndex integer]])return InvokeVoid(0x2597A0D4A4FC2C77,amount,p1,actIndex)end;
	NetworkServiceEarnGangopsRivalDelivery=function(earnedMoney--[[@param earnedMoney integer]])return InvokeVoid(0x1B882107C23A9022,earnedMoney)end;
	NetworkSpendGangopsStartStrand=function(type--[[@param type integer]],amount--[[@param amount integer]],p2--[[@param p2 boolean]],p3--[[@param p3 boolean]])return InvokeVoid(0xA19EC0786E326E06,type,amount,p2,p3)end;
	NetworkSpendGangopsTripSkip=function(amount--[[@param amount integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0x5ECE6FD7B4EC8D6A,amount,p1,p2)end;
	NetworkEarnGangopsPrepParticipation=function(amount--[[@param amount integer]])return InvokeVoid(0xED26584F6BDCBBFD,amount)end;
	NetworkEarnGangopsSetup=function(amount--[[@param amount integer]],p1--[[@param p1 string]])return InvokeVoid(0xA9160796D47A2CF8,amount,p1)end;
	NetworkEarnGangopsFinale=function(amount--[[@param amount integer]],p1--[[@param p1 string]])return InvokeVoid(0x1C121FC9545E0D52,amount,p1)end;
	NetworkSpendGangopsRepairCost=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0x2A7CEC72C3443BCC,p0,p1,p2)end;
	NetworkEarnNightclub=function(p0--[[@param p0 any]])return InvokeVoid(0xE0F82D68C7039158,p0)end;
	NetworkEarnNightclubDancing=function(p0--[[@param p0 any]])return InvokeVoid(0xB4DEAE67F35E2ACD,p0)end;
	NetworkEarnBbEventBonus=function(amount--[[@param amount integer]])return InvokeVoid(0xFDD8D2440DAF1590,amount)end;
	NetworkSpentPurchaseHackerTruck=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x2A93C46AAB1EACC9,p0,p1,p2,p3)end;
	NetworkSpentUpgradeHackerTruck=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x226C284C830D0CA8,p0,p1,p2,p3)end;
	NetworkEarnHackerTruck=function(p0--[[@param p0 any]],amount--[[@param amount integer]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0xE8815FE993896AD3,p0,amount,p2,p3)end;
	NetworkSpentPurchaseNightclubAndWarehouse=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0xED76D195E6E3BF7F,p0,p1,p2,p3)end;
	NetworkSpentUpgradeNightclubAndWarehouse=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x1DC9B749E7AE282B,p0,p1,p2,p3)end;
	NetworkEarnNightclubAndWarehouse=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]],p5--[[@param p5 any]],p6--[[@param p6 any]])return InvokeVoid(0xC6E74CF8C884C880,p0,p1,p2,p3,p4,p5,p6)end;
	NetworkSpendNightclubAndWarehouse=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x65482BFD0923C8A1,p0,p1,p2,p3)end;
	NetworkSpentRdrHatchetBonus=function(amount--[[@param amount integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0xE284D46FFDB82E36,amount,p1,p2)end;
	NetworkSpentNightclubEntryFee=function(player--[[@param player integer]],amount--[[@param amount integer]],p1--[[@param p1 any]],p2--[[@param p2 boolean]],p3--[[@param p3 boolean]])return InvokeVoid(0x876056684281655D,player,amount,p1,p2,p3)end;
	NetworkSpendNightclubBarDrink=function(amount--[[@param amount integer]],p1--[[@param p1 any]],p2--[[@param p2 boolean]],p3--[[@param p3 boolean]])return InvokeVoid(0xDD21B016E4289465,amount,p1,p2,p3)end;
	NetworkSpendBountyHunterMission=function(amount--[[@param amount integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0x1BEA0CD93470BB1F,amount,p1,p2)end;
	NetworkSpentRehireDj=function(amount--[[@param amount integer]],p1--[[@param p1 any]],p2--[[@param p2 boolean]],p3--[[@param p3 boolean]])return InvokeVoid(0xF6C8A544E4CF14FC,amount,p1,p2,p3)end;
	NetworkSpentArenaJoinSpectator=function(amount--[[@param amount integer]],p1--[[@param p1 any]],p2--[[@param p2 boolean]],p3--[[@param p3 boolean]])return InvokeVoid(0x14EAEA58F93B55AF,amount,p1,p2,p3)end;
	NetworkEarnArenaSkillLevelProgression=function(amount--[[@param amount integer]],p1--[[@param p1 any]])return InvokeVoid(0xE08256F972C7BB2C,amount,p1)end;
	NetworkEarnArenaCareerProgression=function(amount--[[@param amount integer]],p1--[[@param p1 any]])return InvokeVoid(0x0F99F70C61F14619,amount,p1)end;
	NetworkSpendMakeItRain=function(amount--[[@param amount integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0xE5F5A060439C2F5D,amount,p1,p2)end;
	NetworkSpendBuyArena=function(amount--[[@param amount integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],p3--[[@param p3 string]])return InvokeVoid(0x40D5DA9550B7CB46,amount,p1,p2,p3)end;
	NetworkSpendUpgradeArena=function(amount--[[@param amount integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],p3--[[@param p3 string]])return InvokeVoid(0x037ABB06825D7AB1,amount,p1,p2,p3)end;
	--[=[type either, 1 for cam spectate, 2 for drone]=]
	NetworkSpendArenaSpectatorBox=function(amount--[[@param amount integer]],type--[[@param type integer]],p2--[[@param p2 boolean]],p3--[[@param p3 boolean]])return InvokeVoid(0x7049BF858601DC0F,amount,type,p2,p3)end;
	NetworkSpendSpinTheWheelPayment=function(amount--[[@param amount integer]],p1--[[@param p1 any]],p2--[[@param p2 boolean]])return InvokeVoid(0x9A5BD1D0000B339C,amount,p1,p2)end;
	NetworkEarnSpinTheWheelCash=function(amount--[[@param amount integer]])return InvokeVoid(0x676C48776CACBB5A,amount)end;
	NetworkSpendArenaPremium=function(amount--[[@param amount integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0x619496D837EFD920,amount,p1,p2)end;
	NetworkEarnArenaWar=function(amount--[[@param amount integer]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x631F1CB8FB4130AA,amount,p1,p2,p3)end;
	NetworkEarnArenaWarAssassinateTarget=function(amount--[[@param amount integer]])return InvokeVoid(0x5E7AE8AABE8B7C0D,amount)end;
	NetworkEarnArenaWarEventCargo=function(amount--[[@param amount integer]])return InvokeVoid(0xA82959062361B259,amount)end;
	NetworkEarnRcTimeTrial=function(amount--[[@param amount integer]])return InvokeVoid(0xDFF49EE984E7AAE8,amount)end;
	NetworkEarnDailyObjectiveEvent=function(amount--[[@param amount integer]])return InvokeVoid(0x5128DF14A5BB86FC,amount)end;
	NetworkSpendCasinoMembership=function(amount--[[@param amount integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],p3--[[@param p3 integer]])return InvokeVoid(0xFBBE0570EDF39D46,amount,p1,p2,p3)end;
	NetworkSpendBuyCasino=function(amount--[[@param amount integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],data--[[@param data any*]])return InvokeVoid(0x34A6FC4D06C4DA0F,amount,p1,p2,data)end;
	NetworkSpendUpgradeCasino=function(amount--[[@param amount integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],data--[[@param data any*]])return InvokeVoid(0x4740D62BC1B4EBEA,amount,p1,p2,data)end;
	NetworkSpendCasinoGeneric=function(amount--[[@param amount integer]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]])return InvokeVoid(0x88BF9B612B84D3C3,amount,p1,p2,p3,p4)end;
	NetworkEarnCasinoTimeTrialWin=function(amount--[[@param amount integer]])return InvokeVoid(0x0819DB99FD2FBBD8,amount)end;
	NetworkEarnCollectablesActionFigures=function(amount--[[@param amount integer]])return InvokeVoid(0x5517F90043466049,amount)end;
	NetworkEarnCasinoCollectableCompletedCollection=function(amount--[[@param amount integer]])return InvokeVoid(0x83AD64F53F4E9483,amount)end;
	NetworkEarnSellPrizeVehicle=function(amount--[[@param amount integer]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0x8BCB27A057DF7B7F,amount,p1,p2)end;
	NetworkEarnCasinoMissionReward=function(amount--[[@param amount integer]])return InvokeVoid(0x566FD402B25787DE,amount)end;
	NetworkEarnCasinoStoryMissionReward=function(amount--[[@param amount integer]])return InvokeVoid(0xAC95ED552157E092,amount)end;
	NetworkEarnCasinoMissionParticipation=function(amount--[[@param amount integer]])return InvokeVoid(0x09E8F18641BE2575,amount)end;
	NetworkEarnCasinoAward=function(amount--[[@param amount integer]],hash--[[@param hash integer]])return InvokeVoid(0x973A9781A34F8DEB,amount,hash)end;
	NetworkSpendBuyArcade=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x870289A558348378,p0,p1,p2,p3)end;
	NetworkSpendUpgradeArcade=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x5574637681911FDA,p0,p1,p2,p3)end;
	NetworkSpendCasinoHeist=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]],p5--[[@param p5 any]],p6--[[@param p6 any]],p7--[[@param p7 any]],p8--[[@param p8 any]],p9--[[@param p9 any]],p10--[[@param p10 any]])return InvokeVoid(0xD30E8392F407C328,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10)end;
	NetworkSpendArcadeMgmt=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]])return InvokeVoid(0xB5B58E24868CB09E,p0,p1,p2,p3,p4)end;
	NetworkSpendPlayArcade=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]])return InvokeVoid(0xEAD3D81F2C3A1458,p0,p1,p2,p3,p4)end;
	NetworkSpendArcade=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]])return InvokeVoid(0x43AA7FAC4E6D6687,p0,p1,p2,p3,p4)end;
	NetworkEarnCasinoHeist=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]],p5--[[@param p5 any]],p6--[[@param p6 any]])return InvokeVoid(0x72E7C7B9615FA3C3,p0,p1,p2,p3,p4,p5,p6)end;
	NetworkEarnUpgradeArcade=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0x4C3B75694F7E0D9C,p0,p1,p2)end;
	NetworkEarnArcade=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]])return InvokeVoid(0xD29334ED1A256DBF,p0,p1,p2,p3,p4)end;
	NetworkEarnCollectables=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0xA95CFB4E02390842,p0,p1,p2)end;
	NetworkEarnChallenge=function(amount--[[@param amount integer]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0x0DD362F14F18942A,amount,p1,p2)end;
	NetworkEarnCasinoHeistAwards=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]])return InvokeVoid(0x3EC7471E6909798A,p0,p1,p2,p3,p4)end;
	NetworkEarnCollectableItem=function(amount--[[@param amount integer]],p1--[[@param p1 any]])return InvokeVoid(0x84FF63BD4966F33D,amount,p1)end;
	NetworkEarnCollectableCompletedCollection=function(amount--[[@param amount integer]],p1--[[@param p1 any]])return InvokeVoid(0x5C9B198AF5A54FA6,amount,p1)end;
	NetworkEarnYatchMission=function(amount--[[@param amount integer]],p1--[[@param p1 any]])return InvokeVoid(0xDE68E30D89F97132,amount,p1)end;
	NetworkEarnDispatchCall=function(amount--[[@param amount integer]],p1--[[@param p1 any]])return InvokeVoid(0xE2E244AB823B4483,amount,p1)end;
	NetworkSpendBeachParty=function(p0--[[@param p0 any]])return InvokeVoid(0x54ABA22FA6371249,p0)end;
	NetworkSpendSubmarine=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]],p5--[[@param p5 any]])return InvokeVoid(0x6C8BC1488527AAAB,p0,p1,p2,p3,p4,p5)end;
	NetworkSpendCasinoClub=function(amount1--[[@param amount1 integer]],p1--[[@param p1 any]],p2--[[@param p2 boolean]],p3--[[@param p3 any]],p4--[[@param p4 integer]],p5--[[@param p5 integer]],p6--[[@param p6 integer]],amount2--[[@param amount2 integer]],p8--[[@param p8 any]])return InvokeVoid(0xC991C255AA6D90B2,amount1,p1,p2,p3,p4,p5,p6,amount2,p8)end;
	NetworkSpendBuySub=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x90CD7C6871FBF1B4,p0,p1,p2,p3)end;
	NetworkSpendUpgradeSub=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x89049A84065CE68E,p0,p1,p2,p3)end;
	NetworkSpendIslandHeist=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0xE86689E5F82DE429,p0,p1,p2,p3)end;
	NetworkEarnIslandHeist=function(amount1--[[@param amount1 integer]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],amount2--[[@param amount2 integer]],p5--[[@param p5 integer]])return InvokeVoid(0xD21D111C46BA9F15,amount1,p1,p2,p3,amount2,p5)end;
	NetworkEarnBeachPartyLostFound=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0xA51338E0DCCD4065,p0,p1,p2)end;
	NetworkEarnFromIslandHeistDjMission=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0xE2BB399D90942091,p0,p1)end;
	NetworkSpendCarClubMembership=function(amount1--[[@param amount1 integer]],p1--[[@param p1 any]],p2--[[@param p2 any]],amount2--[[@param amount2 integer]],p4--[[@param p4 any]])return InvokeVoid(0x1464E17207CD36E2,amount1,p1,p2,amount2,p4)end;
	NetworkSpendCarClubBar=function(p0--[[@param p0 any]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],p3--[[@param p3 any]])return InvokeVoid(0x925227803A0EAA1B,p0,p1,p2,p3)end;
	NetworkSpendAutoshopModify=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]])return InvokeVoid(0x9BEA350D7C48061B,p0,p1,p2,p3,p4)end;
	NetworkSpendCarClubTakeover=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0xD1E46824E6FB92B5,p0,p1,p2,p3)end;
	NetworkSpendBuyAutoshop=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0xEEB7E5D1FEB20869,p0,p1,p2,p3)end;
	NetworkSpendUpgradeAutoshop=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0xDD829AA198FDC46C,p0,p1,p2,p3)end;
	NetworkEarnAutoshopBusiness=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0x36A7FD5A7194B03E,p0,p1,p2)end;
	NetworkEarnAutoshopIncome=function(p0--[[@param p0 any]],p1--[[@param p1 integer]])return InvokeVoid(0xC66D1CF99ED7FE25,p0,p1)end;
	NetworkEarnCarclubMembership=function(p0--[[@param p0 any]])return InvokeVoid(0xBC6227792A188E2E,p0)end;
	NetworkEarnDailyVehicle=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x533073E8A596008C,p0,p1)end;
	NetworkEarnDailyVehicleBonus=function(p0--[[@param p0 any]])return InvokeVoid(0xFE65AFE7308E32B2,p0)end;
	NetworkEarnTunerAward=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0xB846F547D3792DF6,p0,p1,p2)end;
	NetworkEarnTunerRobbery=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]])return InvokeVoid(0xBCB266247193AC61,p0,p1,p2,p3,p4)end;
	NetworkEarnUpgradeAutoshop=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0xC10322A8D3E061EE,p0,p1)end;
	NetworkSpendInteractionMenuAbility=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x93AA4165CB67E925,p0,p1,p2,p3)end;
	NetworkSpendSetCommonFields=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 boolean]])return InvokeVoid(0xB9F7A469460E7A4A,p0,p1,p2,p3)end;
	NetworkSpendSetDiscount=function(p0--[[@param p0 boolean]])return InvokeVoid(0x7E2F4E8F44CAF4E0,p0)end;
	NetworkSpendBuyAgency=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0xEA8CD3C9B3C35884,p0,p1,p2,p3)end;
	NetworkSpendUpgradeAgency=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x6CCA64840589A3B6,p0,p1,p2,p3)end;
	NetworkSpendAgency=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]])return InvokeVoid(0x1B2120405080125C,p0,p1,p2,p3,p4)end;
	NetworkSpendHidden=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0xBF8793B91EA094A7,p0,p1,p2,p3)end;
	NetworkSpendSourceBike=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0xD9DF467CBE4398C8,p0,p1,p2,p3)end;
	NetworkSpendCompSuv=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0xD86581F9E7CDA383,p0,p1,p2,p3)end;
	NetworkSpendSuvFstTrvl=function(p0--[[@param p0 integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],p3--[[@param p3 any]])return InvokeVoid(0x61A2DF64ED2D396E,p0,p1,p2,p3)end;
	NetworkSpendSupply=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0xEBD482B82ACB8BAD,p0,p1,p2,p3)end;
	NetworkSpendBikeShop=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x923AEA8E78F8DF0B,p0,p1,p2,p3)end;
	NetworkSpendVehicleRequested=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]])return InvokeVoid(0x02D24A35A9CC3503,p0,p1,p2,p3,p4)end;
	NetworkSpendGunrunning=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x2CEB0E0BC2A77C05,p0,p1,p2,p3)end;
	NetworkEarnAgencySafe=function(p0--[[@param p0 any]])return InvokeVoid(0x663B4B9D11742A12,p0)end;
	NetworkEarnAwardContract=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x146D4EB6D22A403F,p0,p1)end;
	NetworkEarnAgencyContract=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x38482AD49CB905C7,p0,p1)end;
	NetworkEarnAwardPhone=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x7397A115030F1BE3,p0,p1)end;
	NetworkEarnAgencyPhone=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0xE29F3D5FA63B1B82,p0,p1,p2)end;
	NetworkEarnAwardFixerMission=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x88D6C327D6C57C45,p0,p1)end;
	NetworkEarnFixerPrep=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x6283E5DE4C4460C6,p0,p1)end;
	NetworkEarnFixerFinale=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0xBA154373C5FE51E8,p0,p1)end;
	NetworkEarnFixerAgencyShortTrip=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0xF4A8E57460BF2037,p0,p1)end;
	NetworkEarnAwardShortTrip=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x5B4DBDED84D6A420,p0,p1)end;
	NetworkEarnFixerRivalDelivery=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x235D41210B3A1A5E,p0,p1)end;
	NetworkEarnUpgradeAgency=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0xD07C7C3F1995108C,p0,p1)end;
	NetworkSpendApartmentUtilities=function(amount--[[@param amount integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],data--[[@param data any*]])return InvokeVoid(0x1254B5B3925EFD3D,amount,p1,p2,data)end;
	NetworkSpendBusinessPropertyFees=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x92D1CFDA1227FF1C,p0,p1,p2,p3)end;
	NetworkEarnSightseeingReward=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x45087AE480B233AC,p0,p1,p2,p3)end;
	NetworkEarnBikerShop=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x2C5809EB9DF57257,p0,p1)end;
	NetworkEarnBiker=function(p0--[[@param p0 any]])return InvokeVoid(0x71BEC32FA466E105,p0)end;
	NetworkYohanSourceGoods=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x59498BC8B1C8B15C,p0,p1,p2,p3)end;
	NetworkSpendBuyMfgarage=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0xA2ED36DCF0FCA413,p0,p1,p2,p3)end;
	NetworkSpendUpgradeMfgarage=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0xCF8F346DDDC66643,p0,p1,p2,p3)end;
	NetworkSpendBuySupplies=function(p0--[[@param p0 integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],p3--[[@param p3 integer]])return InvokeVoid(0xB48185C0CA67B16B,p0,p1,p2,p3)end;
	NetworkSpendBuyAcidLab=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0xF1E26A7924327152,p0,p1,p2,p3)end;
	NetworkSpendUpgradeAcidLabEquipment=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x110EE9D486C23126,p0,p1,p2,p3)end;
	NetworkSpendUpgradeAcidLabArmor=function(p0--[[@param p0 integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],p3--[[@param p3 integer]])return InvokeVoid(0xA7D541C9ACD63133,p0,p1,p2,p3)end;
	NetworkSpendUpgradeAcidLabScoop=function(p0--[[@param p0 integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],p3--[[@param p3 integer]])return InvokeVoid(0x2940558E05BCC2EC,p0,p1,p2,p3)end;
	NetworkSpendUpgradeAcidLabMines=function(p0--[[@param p0 integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],p3--[[@param p3 integer]])return InvokeVoid(0x4B99AB08C92C54E4,p0,p1,p2,p3)end;
	NetworkSpendRenameAcidLab=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x842B1C5AF61ACDE9,p0,p1,p2,p3)end;
	NetworkSpendRenameAcidProduct=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x446798F7495DD7D8,p0,p1,p2,p3)end;
	NetworkEarnAwardJuggaloMission=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0xDDF047577F1A02A7,p0,p1)end;
	NetworkEarnAwardAcidLab=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0xD1A8165767AD2D23,p0,p1)end;
	NetworkEarnAwardDailyStash=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0xC30650FA74A19D02,p0,p1)end;
	NetworkEarnAwardDeadDrop=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0xD01EBAEA1F905EF6,p0,p1)end;
	NetworkEarnAwardRandomEvent=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0xBEAFBB1B98B7EF55,p0,p1)end;
	NetworkEarnAwardTaxi=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0xA914768AD35CD3A5,p0,p1)end;
	NetworkEarnStreetDealer=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0xA81017EE1324FDFE,p0,p1)end;
	NetworkEarnSellAcid=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x79B656937DF6DF5D,p0,p1)end;
	NetworkEarnSetupParticipationAcidLab=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0xE3942D59E8A7F70D,p0,p1)end;
	NetworkEarnSourceParticipationAcidLab=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x136F11B5DF1B304D,p0,p1)end;
	NetworkEarnSellParticipationAcidLab=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0xCA3EF9B09A8D76B4,p0,p1)end;
	NetworkEarnJuggaloStoryMission=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0xE01D10BA8CD53621,p0,p1)end;
	NetworkEarnJuggaloStoryMissionParticipation=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x40FF6CCCC476185C,p0,p1)end;
	--[=[JUGGALO_PHONE_MISSION...]=]
	NetworkEarnFooliganJob=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0xCE4452AE85F5E252,p0,p1)end;
	--[=[JUGGALO_PHONE_MISSION_PARTICIPATION...]=]
	NetworkEarnFooliganJobParticipation=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0xC376B92D0E060970,p0,p1)end;
	NetworkEarnTaxiJob=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x991E1588FAD9019D,p0,p1)end;
	NetworkEarnDailyStashHouseCompleted=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0xCABC9874AFA70D6D,p0,p1)end;
	NetworkEarnDailyStashHouseParticipation=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x9C0C6BD0F94CE391,p0,p1)end;
	--[=[Used for SERVICE_EARN_AVENGER_OPERATIONS & SERVICE_EARN_AVENGER_OPS_BONUS]=]
	NetworkEarnAvenger=function(amount--[[@param amount integer]],p1--[[@param p1 integer]])return InvokeVoid(0x55F006B9D4A46C1D,amount,p1)end;
	NetworkEarnSmugglerOps=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0xDEA273D5F8A9661A,p0,p1,p2)end;
	NetworkEarnBonusObjective=function(amount--[[@param amount integer]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0xDCEF983C24191997,amount,p1,p2)end;
	NetworkEarnProgressHub=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0xF8332B06F0EECC9C,p0,p1)end;
	NetworkSpentAirFreight=function(hangarCargoSourcingPrice--[[@param hangarCargoSourcingPrice integer]],fromBank--[[@param fromBank boolean]],fromBankAndWallet--[[@param fromBankAndWallet boolean]],cost--[[@param cost integer]],warehouseId--[[@param warehouseId integer]],warehouseSlot--[[@param warehouseSlot integer]])return InvokeVoid(0x8C7E8D6F96C9E948,hangarCargoSourcingPrice,fromBank,fromBankAndWallet,cost,warehouseId,warehouseSlot)end;
	NetworkSpentSkipCargoSourceSetup=function(amount--[[@param amount integer]],fromBank--[[@param fromBank boolean]],fromBankAndWallet--[[@param fromBankAndWallet boolean]],cost--[[@param cost integer]])return InvokeVoid(0xED1B407BADA42CEC,amount,fromBank,fromBankAndWallet,cost)end;
	--[=[Hash p3 = STEALTH_MODULE]=]
	NetworkSpentStealthModule=function(amount--[[@param amount integer]],fromBank--[[@param fromBank boolean]],fromBankAndWallet--[[@param fromBankAndWallet boolean]],p3--[[@param p3 integer]])return InvokeVoid(0x95CE79A6939C537A,amount,fromBank,fromBankAndWallet,p3)end;
	--[=[Hash p3 = MISSILE_JAMMER]=]
	NetworkSpentMissileJammer=function(amount--[[@param amount integer]],fromBank--[[@param fromBank boolean]],fromBankAndWallet--[[@param fromBankAndWallet boolean]],p3--[[@param p3 integer]])return InvokeVoid(0xD687100F616163F4,amount,fromBank,fromBankAndWallet,p3)end;
	NetworkGetVcBankBalance=function()return InvokeInt(0x76EF28DA05EA395A)end;---@return integer
	NetworkGetVcWalletBalance=function(characterSlot--[[@param characterSlot integer]])return InvokeInt(0xA40F9C2623F6A8B5,characterSlot)end;---@return integer
	NetworkGetVcBalance=function()return InvokeInt(0x5CBAD97E059E1B94)end;---@return integer
	NetworkGetEvcBalance=function()return InvokeInt(0x5D1E75F91C07DEE5)end;---@return integer
	NetworkGetPvcBalance=function()return InvokeInt(0x4F54F3B6C202FB4E)end;---@return integer
	NetworkGetStringWalletBalance=function(characterSlot--[[@param characterSlot integer]])return InvokeString(0xF9B10B529DCFB33B,characterSlot)end;---@return string
	NetworkGetStringBankBalance=function()return InvokeString(0xA6FA3979BED01B81)end;---@return string
	NetworkGetStringBankWalletBalance=function(character--[[@param character integer]])return InvokeString(0x700AF71AE615E6DD,character)end;---@return string
	--[=[Returns true if wallet balance >= amount.]=]
	NetworkGetCanSpendFromWallet=function(amount--[[@param amount integer]],characterSlot--[[@param characterSlot integer]])return InvokeBool(0xED5AB8860415BABA,amount,characterSlot)end;---@return boolean
	--[=[Returns true if bank balance >= amount.]=]
	NetworkGetCanSpendFromBank=function(amount--[[@param amount integer]])return InvokeBool(0xA31FD6A0865B6D14,amount)end;---@return boolean
	--[=[Returns true if bank balance + wallet balance >= amount.]=]
	NetworkGetCanSpendFromBankAndWallet=function(amount--[[@param amount integer]],characterSlot--[[@param characterSlot integer]])return InvokeBool(0xDC18531D7019A535,amount,characterSlot)end;---@return boolean
	--[=[Retturns the same value as NETWORK_GET_REMAINING_TRANSFER_BALANCE.]=]
	NetworkGetPvcTransferBalance=function()return InvokeInt(0x13A8DE2FD77D04F3)end;---@return integer
	--[=[Returns false if amount > wallet balance or daily transfer limit has been hit.]=]
	NetworkGetCanTransferCash=function(amount--[[@param amount integer]])return InvokeBool(0x08E8EEADFD0DC4A0,amount)end;---@return boolean
	NetworkCanReceivePlayerCash=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeBool(0x5D17BE59D2123284,p0,p1,p2,p3)end;---@return boolean
	--[=[Returns the same value as NETWORK_GET_PVC_TRANSFER_BALANCE.]=]
	NetworkGetRemainingTransferBalance=function()return InvokeInt(0xEA560AC9EEB1E19B)end;---@return integer
	--[=[Does nothing and always returns 0.]=]
	WithdrawVc=function(amount--[[@param amount integer]])return InvokeInt(0xF70EFA14FE091429,amount)end;---@return integer
	--[=[Does nothing and always returns false.]=]
	DepositVc=function(amount--[[@param amount integer]])return InvokeBool(0xE260E0BB9CD995AC,amount)end;---@return boolean
	--[=[This function is hard-coded to always return 1.]=]
	HasVcWithdrawalCompleted=function(p0--[[@param p0 any]])return InvokeBool(0xE154B48B68EF72BC,p0)end;---@return boolean
	--[=[This function is hard-coded to always return 1.]=]
	WasVcWithdrawalSuccessful=function(p0--[[@param p0 any]])return InvokeBool(0x6FCF8DDEA146C45B,p0)end;---@return boolean
}
_G.Netshopping={
	NetGameserverUseServerTransactions=function()return InvokeBool(0x7D2708796355B20B)end;---@return boolean
	NetGameserverCatalogItemIsValid=function(name--[[@param name string]])return InvokeBool(0xBD4D7EAF8A30F637,name)end;---@return boolean
	NetGameserverCatalogItemKeyIsValid=function(hash--[[@param hash integer]])return InvokeBool(0x247F0F73A182EA0B,hash)end;---@return boolean
	--[=[bool is always true in game scripts]=]
	NetGameserverGetPrice=function(itemHash--[[@param itemHash integer]],categoryHash--[[@param categoryHash integer]],p2--[[@param p2 boolean]])return InvokeInt(0xC27009422FCCA88D,itemHash,categoryHash,p2)end;---@return integer
	NetGameserverCatalogIsValid=function()return InvokeBool(0x3C4487461E9B0DCB)end;---@return boolean
	NetGameserverIsCatalogCurrent=function()return InvokeBool(0x2B949A1E6AEC8F6A)end;---@return boolean
	NetGameserverGetCatalogCloudCrc=function()return InvokeInt(0x85F6C9ABA1DE2BCF)end;---@return integer
	NetGameserverRefreshServerCatalog=function()return InvokeBool(0x357B152EF96C30B6)end;---@return boolean
	NetGameserverRetrieveCatalogRefreshStatus=function(state--[[@param state integer*]])return InvokeBool(0xCF38DAFBB49EDE5E,state)end;---@return boolean
	NetGameserverInitSession=function()return InvokeBool(0xE3E5A7C64CA2C6ED)end;---@return boolean
	NetGameserverRetrieveInitSessionStatus=function(p0--[[@param p0 integer*]])return InvokeBool(0x0395CB47B022E62C,p0)end;---@return boolean
	NetGameserverStartSession=function(charSlot--[[@param charSlot integer]])return InvokeBool(0xA135AC892A58FC07,charSlot)end;---@return boolean
	NetGameserverStartSessionPending=function()return InvokeBool(0x72EB7BA9B69BF6AB)end;---@return boolean
	NetGameserverRetrieveStartSessionStatus=function(p0--[[@param p0 integer*]])return InvokeBool(0x170910093218C8B9,p0)end;---@return boolean
	NetGameserverRetrieveSessionErrorCode=function(p0--[[@param p0 integer*]])return InvokeBool(0xC13C38E47EA5DF31,p0)end;---@return boolean
	NetGameserverIsSessionValid=function(charSlot--[[@param charSlot integer]])return InvokeBool(0xB24F0944DA203D9E,charSlot)end;---@return boolean
	NetGameserverClearSession=function(p0--[[@param p0 integer]])return InvokeBool(0x74A0FD0688F1EE45,p0)end;---@return boolean
	NetGameserverSessionApplyReceivedData=function(charSlot--[[@param charSlot integer]])return InvokeBool(0x2F41D51BA3BCD1F1,charSlot)end;---@return boolean
	NetGameserverIsSessionRefreshPending=function()return InvokeBool(0x810E8431C0614BF9)end;---@return boolean
	--[=[Note: only one of the arguments can be set to true at a time]=]
	NetGameserverStartSessionRestart=function(inventory--[[@param inventory boolean]],playerbalance--[[@param playerbalance boolean]])return InvokeBool(0x35A1B3E1D1315CFA,inventory,playerbalance)end;---@return boolean
	NetGameserverTransactionInProgress=function()return InvokeBool(0x613F125BA3BD2EB9)end;---@return boolean
	NetGameserverGetSessionStateAndStatus=function(p0--[[@param p0 integer*]],p1--[[@param p1 boolean*]])return InvokeBool(0x897433D292B44130,p0,p1)end;---@return boolean
	NetGameserverBasketStart=function(transactionId--[[@param transactionId integer*]],categoryHash--[[@param categoryHash integer]],actionHash--[[@param actionHash integer]],flags--[[@param flags integer]])return InvokeBool(0x279F08B1A4B29B7E,transactionId,categoryHash,actionHash,flags)end;---@return boolean
	NetGameserverBasketEnd=function()return InvokeBool(0xFA336E7F40C0A0D0)end;---@return boolean
	NetGameserverBasketIsActive=function()return InvokeBool(0xA65568121DF2EA26)end;---@return boolean
	NetGameserverBasketAddItem=function(itemData--[[@param itemData any*]],quantity--[[@param quantity integer]])return InvokeBool(0xF30980718C8ED876,itemData,quantity)end;---@return boolean
	NetGameserverBasketIsFull=function()return InvokeBool(0x27F76CC6C55AD30E)end;---@return boolean
	NetGameserverBasketApplyServerData=function(p0--[[@param p0 any]],p1--[[@param p1 any*]])return InvokeBool(0xE1A0450ED46A7812,p0,p1)end;---@return boolean
	NetGameserverCheckoutStart=function(transactionId--[[@param transactionId integer]])return InvokeBool(0x39BE7CEA8D9CC8E6,transactionId)end;---@return boolean
	NetGameserverBeginService=function(transactionId--[[@param transactionId integer*]],categoryHash--[[@param categoryHash integer]],itemHash--[[@param itemHash integer]],actionTypeHash--[[@param actionTypeHash integer]],value--[[@param value integer]],flags--[[@param flags integer]])return InvokeBool(0x3C5FD37B5499582E,transactionId,categoryHash,itemHash,actionTypeHash,value,flags)end;---@return boolean
	NetGameserverEndService=function(transactionId--[[@param transactionId integer]])return InvokeBool(0xE2A99A9B524BEFFF,transactionId)end;---@return boolean
	NetGameserverDeleteCharacter=function(slot--[[@param slot integer]],transfer--[[@param transfer boolean]],reason--[[@param reason integer]])return InvokeBool(0x51F1A8E48C3D2F6D,slot,transfer,reason)end;---@return boolean
	NetGameserverDeleteCharacterGetStatus=function()return InvokeInt(0x0A6D923DFFC9BD89)end;---@return integer
	NetGameserverDeleteSetTelemetryNonceSeed=function()return InvokeBool(0x112CEF1615A1139F)end;---@return boolean
	NetGameserverTransferBankToWallet=function(charSlot--[[@param charSlot integer]],amount--[[@param amount integer]])return InvokeBool(0xD47A2C1BA117471D,charSlot,amount)end;---@return boolean
	NetGameserverTransferWalletToBank=function(charSlot--[[@param charSlot integer]],amount--[[@param amount integer]])return InvokeBool(0xC2F7FE5309181C7D,charSlot,amount)end;---@return boolean
	--[=[Same as 0x350AA5EBC03D3BD2]=]
	NetGameserverTransferBankToWalletGetStatus=function()return InvokeInt(0x23789E777D14CE44)end;---@return integer
	--[=[Same as 0x23789E777D14CE44]=]
	NetGameserverTransferWalletToBankGetStatus=function()return InvokeInt(0x350AA5EBC03D3BD2)end;---@return integer
	--[=[Used to be NETWORK_SHOP_CASH_TRANSFER_SET_TELEMETRY_NONCE_SEED]=]
	NetGameserverTransferCashSetTelemetryNonceSeed=function()return InvokeBool(0x498C1E05CE5F7877)end;---@return boolean
	NetGameserverSetTelemetryNonceSeed=function(p0--[[@param p0 integer]])return InvokeBool(0x9507D4271988E1AE,p0)end;---@return boolean
}
_G.Network={
	--[=[Online version is defined here: update\update.rpf\common\data\version.txt

Example:

[ONLINE_VERSION_NUMBER]
1.33

_GET_ONLINE_VERSION() will return "1.33"]=]
	GetOnlineVersion=function()return InvokeString(0xFCA9373EF340AC0A)end;---@return string
	--[=[Returns whether the player is signed into Social Club.]=]
	NetworkIsSignedIn=function()return InvokeBool(0x054354A99211EB96)end;---@return boolean
	--[=[Returns whether the game is not in offline mode.

seemed not to work for some ppl]=]
	NetworkIsSignedOnline=function()return InvokeBool(0x1077788E268557C2)end;---@return boolean
	--[=[This function is hard-coded to always return 1.]=]
	NetworkIsNpAvailable=function()return InvokeBool(0xBD545D44CCE70597)end;---@return boolean
	--[=[This function is hard-coded to always return 1.]=]
	NetworkIsNpPending=function()return InvokeBool(0xEBCAB9E5048434F4)end;---@return boolean
	--[=[Hardcoded to return zero.

==== PS4 specific info ====

Returns some sort of unavailable reason:
-1 = REASON_INVALID
 0 = REASON_OTHER
 1 = REASON_SYSTEM_UPDATE
 2 = REASON_GAME_UPDATE
 3 = REASON_SIGNED_OUT
 4 = REASON_AGE
 5 = REASON_CONNECTION

=================================]=]
	NetworkGetNpUnavailableReason=function()return InvokeInt(0x74FB3E29E6D10FA9)end;---@return integer
	--[=[This function is hard-coded to always return 1.]=]
	NetworkIsConnetedToNpPresence=function()return InvokeBool(0x7808619F31FF22DB)end;---@return boolean
	--[=[This function is hard-coded to always return 0.]=]
	NetworkIsLoggedInToPsn=function()return InvokeBool(0xA0FA4EC6A05DA44E)end;---@return boolean
	--[=[Returns whether the signed-in user has valid Rockstar Online Services (ROS) credentials.]=]
	NetworkHasValidRosCredentials=function()return InvokeBool(0x85443FF4C328F53B)end;---@return boolean
	NetworkIsRefreshingRosCredentials=function()return InvokeBool(0x8D11E61A4ABF49CC)end;---@return boolean
	NetworkIsCloudAvailable=function()return InvokeBool(0x9A4CF4F48AD77302)end;---@return boolean
	NetworkHasSocialClubAccount=function()return InvokeBool(0x67A5589628E0CFF6)end;---@return boolean
	NetworkAreSocialClubPoliciesCurrent=function()return InvokeBool(0xBA9775570DB788CF)end;---@return boolean
	--[=[If you are host, returns true else returns false.]=]
	NetworkIsHost=function()return InvokeBool(0x8DB296B814EDDA07)end;---@return boolean
	NetworkGetHostPlayerIndex=function()return InvokeInt(0x8251FB94DC4FDFC8)end;---@return integer
	NetworkWasGameSuspended=function()return InvokeBool(0x4237E822315D8BA9)end;---@return boolean
	NetworkHaveOnlinePrivileges=function()return InvokeBool(0x25CB5A9F37BFD063)end;---@return boolean
	NetworkHasAgeRestrictions=function()return InvokeBool(0x1353F87E89946207)end;---@return boolean
	NetworkHaveUserContentPrivileges=function(p0--[[@param p0 integer]])return InvokeBool(0x72D918C99BCACC54,p0)end;---@return boolean
	NetworkHaveCommunicationPrivileges=function(p0--[[@param p0 integer]],player--[[@param player integer]])return InvokeBool(0xAEEF48CDF5B6CE7C,p0,player)end;---@return boolean
	NetworkCheckOnlinePrivileges=function(p0--[[@param p0 any]],p1--[[@param p1 boolean]])return InvokeBool(0x78321BEA235FD8CD,p0,p1)end;---@return boolean
	NetworkCheckUserContentPrivileges=function(p0--[[@param p0 integer]],p1--[[@param p1 integer]],p2--[[@param p2 boolean]])return InvokeBool(0x595F028698072DD9,p0,p1,p2)end;---@return boolean
	NetworkCheckCommunicationPrivileges=function(p0--[[@param p0 integer]],p1--[[@param p1 integer]],p2--[[@param p2 boolean]])return InvokeBool(0x83F28CE49FBBFFBA,p0,p1,p2)end;---@return boolean
	NetworkCheckTextCommunicationPrivileges=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeBool(0x07EAB372C8841D99,p0,p1,p2)end;---@return boolean
	NetworkIsUsingOnlinePromotion=function()return InvokeBool(0x906CA41A4B74ECA4)end;---@return boolean
	NetworkShouldShowPromotionAlertScreen=function()return InvokeBool(0x023ACAB2DC9DC4A4)end;---@return boolean
	NetworkHasSocialNetworkingSharingPriv=function()return InvokeBool(0x76BF03FADBF154F5)end;---@return boolean
	NetworkGetAgeGroup=function()return InvokeInt(0x9614B71F8ADB982B)end;---@return integer
	NetworkCheckPrivileges=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeBool(0x0CF6CC51AA18F0F8,p0,p1,p2)end;---@return boolean
	--[=[Hardcoded to return false.]=]
	NetworkIsPrivilegeCheckInProgress=function()return InvokeBool(0x64E5C4CC82847B73)end;---@return boolean
	NetworkSetPrivilegeCheckResultNotNeeded=function()return InvokeVoid(0x1F7BC3539F9E0224)end;
	--[=[Hardcoded to return true.]=]
	NetworkResolvePrivilegeUserContent=function()return InvokeBool(0xDE9225854F37BF72)end;---@return boolean
	NetworkHavePlatformSubscription=function()return InvokeBool(0x5EA784D197556507)end;---@return boolean
	NetworkIsPlatformSubscriptionCheckPending=function()return InvokeBool(0xA8ACB6459542A8C8)end;---@return boolean
	NetworkShowAccountUpgradeUi=function()return InvokeVoid(0x83FE8D7229593017)end;
	NetworkIsShowingSystemUiOrRecentlyRequestedUpsell=function()return InvokeBool(0x7788DFE15016A182)end;---@return boolean
	NetworkNeedToStartNewGameButBlocked=function()return InvokeBool(0x53C10C8BD774F2C9)end;---@return boolean
	NetworkCanBail=function()return InvokeBool(0x580CE4438479CC61)end;---@return boolean
	NetworkBail=function(p0--[[@param p0 integer]],p1--[[@param p1 integer]],p2--[[@param p2 integer]])return InvokeVoid(0x95914459A87EBA28,p0,p1,p2)end;
	NetworkOnReturnToSinglePlayer=function()return InvokeVoid(0x283B6062A2C01E9B)end;
	NetworkTransitionStart=function(p0--[[@param p0 integer]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeBool(0x8B4FFC790CA131EF,p0,p1,p2,p3)end;---@return boolean
	NetworkTransitionAddStage=function(hash--[[@param hash integer]],p1--[[@param p1 integer]],p2--[[@param p2 integer]],state--[[@param state integer]],p4--[[@param p4 integer]])return InvokeBool(0xC3BFED92026A2AAD,hash,p1,p2,state,p4)end;---@return boolean
	NetworkTransitionFinish=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeBool(0x04918A41BC9B8157,p0,p1,p2)end;---@return boolean
	--[=[11 - Need to download tunables.
12 - Need to download background script.

Returns 1 if the multiplayer is loaded, otherwhise 0.]=]
	NetworkCanAccessMultiplayer=function(loadingState--[[@param loadingState integer*]])return InvokeBool(0xAF50DA1A3F8B1BA4,loadingState)end;---@return boolean
	NetworkIsMultiplayerDisabled=function()return InvokeBool(0x9747292807126EDA)end;---@return boolean
	NetworkCanEnterMultiplayer=function()return InvokeBool(0x7E782A910C362C25)end;---@return boolean
	NetworkSessionDoFreeroamQuickmatch=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeBool(0x330ED4D05491934F,p0,p1,p2)end;---@return boolean
	NetworkSessionDoFriendMatchmaking=function(p0--[[@param p0 integer]],p1--[[@param p1 integer]],p2--[[@param p2 integer]])return InvokeBool(0x2CFC76E0D087C994,p0,p1,p2)end;---@return boolean
	--[=[p4 seems to be unused in 1.60/build 2628]=]
	NetworkSessionDoCrewMatchmaking=function(crewId--[[@param crewId integer]],p1--[[@param p1 integer]],p2--[[@param p2 integer]],maxPlayers--[[@param maxPlayers integer]])return InvokeBool(0x94BC51E9449D917F,crewId,p1,p2,maxPlayers)end;---@return boolean
	NetworkSessionDoActivityQuickmatch=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]])return InvokeBool(0xBE3E347A87ACEB82,p0,p1,p2,p3,p4)end;---@return boolean
	--[=[Does nothing in online but in offline it will cause the screen to fade to black. Nothing happens past then, the screen will sit at black until you restart GTA. Other stuff must be needed to actually host a session.]=]
	NetworkSessionHost=function(p0--[[@param p0 integer]],maxPlayers--[[@param maxPlayers integer]],p2--[[@param p2 boolean]])return InvokeBool(0x6F3D4ED9BEE4E61D,p0,maxPlayers,p2)end;---@return boolean
	NetworkSessionHostClosed=function(p0--[[@param p0 integer]],maxPlayers--[[@param maxPlayers integer]])return InvokeBool(0xED34C0C02C098BB7,p0,maxPlayers)end;---@return boolean
	--[=[Does nothing in online but in offline it will cause the screen to fade to black. Nothing happens past then, the screen will sit at black until you restart GTA. Other stuff must be needed to actually host a session.]=]
	NetworkSessionHostFriendsOnly=function(p0--[[@param p0 integer]],maxPlayers--[[@param maxPlayers integer]])return InvokeBool(0xB9CFD27A5D578D83,p0,maxPlayers)end;---@return boolean
	NetworkSessionIsClosedFriends=function()return InvokeBool(0xFBCFA2EA2E206890)end;---@return boolean
	NetworkSessionIsClosedCrew=function()return InvokeBool(0x74732C6CA90DA2B4)end;---@return boolean
	NetworkSessionIsSolo=function()return InvokeBool(0xF3929C2379B60CCE)end;---@return boolean
	NetworkSessionIsPrivate=function()return InvokeBool(0xCEF70AA5B3F89BA1)end;---@return boolean
	--[=[p0 is always false and p1 varies.
NETWORK_SESSION_END(0, 1)
NETWORK_SESSION_END(0, 0)
Results in: "Connection to session lost due to an unknown network error. Please return to Grand Theft Auto V and try again later."]=]
	NetworkSessionEnd=function(p0--[[@param p0 boolean]],p1--[[@param p1 boolean]])return InvokeBool(0xA02E59562D711006,p0,p1)end;---@return boolean
	NetworkSessionLeave=function(p0--[[@param p0 any]])return InvokeBool(0xB9351A07A0D458B1,p0)end;---@return boolean
	--[=[Only works as host.]=]
	NetworkSessionKickPlayer=function(player--[[@param player integer]])return InvokeVoid(0xFA8904DC5F304220,player)end;
	NetworkSessionGetKickVote=function(player--[[@param player integer]])return InvokeBool(0xD6D09A6F32F49EF1,player)end;---@return boolean
	NetworkSessionReserveSlotsTransition=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeBool(0x041C7F2A6C9894E6,p0,p1,p2)end;---@return boolean
	NetworkJoinPreviouslyFailedSession=function()return InvokeBool(0x59DF79317F85A7E0)end;---@return boolean
	NetworkJoinPreviouslyFailedTransition=function()return InvokeBool(0xFFE1E5B792D92B34)end;---@return boolean
	NetworkSessionSetMatchmakingGroup=function(matchmakingGroup--[[@param matchmakingGroup integer]])return InvokeVoid(0x49EC8030F5015F8B,matchmakingGroup)end;
	--[=[playerType is an unsigned int from 0 to 4
0 = regular joiner
4 = spectator]=]
	NetworkSessionSetMatchmakingGroupMax=function(playerType--[[@param playerType integer]],playerCount--[[@param playerCount integer]])return InvokeVoid(0x8B6A4DD0AF9CE215,playerType,playerCount)end;
	NetworkSessionGetMatchmakingGroupFree=function(p0--[[@param p0 integer]])return InvokeInt(0x56CE820830EF040B,p0)end;---@return integer
	--[=[groupId range: [0, 4]]=]
	NetworkSessionAddActiveMatchmakingGroup=function(groupId--[[@param groupId integer]])return InvokeVoid(0xCAE55F48D3D7875C,groupId)end;
	NetworkSessionSetUniqueCrewLimit=function(p0--[[@param p0 any]])return InvokeVoid(0xF49ABC20D8552257,p0)end;
	NetworkSessionSetUniqueCrewLimitTransition=function(p0--[[@param p0 any]])return InvokeVoid(0x4811BBAC21C5FCD5,p0)end;
	NetworkSessionSetUniqueCrewOnlyCrewsTransition=function(p0--[[@param p0 boolean]])return InvokeVoid(0x5539C3EBF104A53A,p0)end;
	NetworkSessionSetCrewLimitMaxMembersTransition=function(p0--[[@param p0 any]])return InvokeVoid(0x702BC4D605522539,p0)end;
	NetworkSessionSetMatchmakingPropertyId=function(p0--[[@param p0 boolean]])return InvokeVoid(0x3F52E880AAF6C8CA,p0)end;
	--[=[p0 in the decompiled scripts is always the stat mesh_texblend * 0.07 to int]=]
	NetworkSessionSetMatchmakingMentalState=function(p0--[[@param p0 integer]])return InvokeVoid(0xF1EEA2DDA9FFA69D,p0)end;
	NetworkSessionSetNumBosses=function(num--[[@param num integer]])return InvokeVoid(0x59D421683D31835A,num)end;
	NetworkSessionSetScriptValidateJoin=function()return InvokeVoid(0x1153FA02A659051C)end;
	NetworkSessionValidateJoin=function(p0--[[@param p0 boolean]])return InvokeVoid(0xC19F6C8E7865A6FF,p0)end;
	--[=[..]=]
	NetworkAddFollowers=function(p0--[[@param p0 integer*]],p1--[[@param p1 integer]])return InvokeVoid(0x236406F60CF216D6,p0,p1)end;
	NetworkClearFollowers=function()return InvokeVoid(0x058F43EC59A8631A)end;
	NetworkGetGlobalMultiplayerClock=function(hours--[[@param hours integer*]],minutes--[[@param minutes integer*]],seconds--[[@param seconds integer*]])return InvokeVoid(0x6D03BFBD643B2A02,hours,minutes,seconds)end;
	NetworkSessionSetGamemode=function(p0--[[@param p0 any]])return InvokeVoid(0x600F8CB31C7AAB6E,p0)end;
	NetworkSessionGetHostAimPreference=function()return InvokeInt(0xDFFA5BE8381C3314)end;---@return integer
	NetworkFindGamersInCrew=function(crewId--[[@param crewId integer]])return InvokeBool(0xE532D6811B3A4D2A,crewId)end;---@return boolean
	--[=[Uses attributes to find players with similar stats. Upper/Lower limit must be above zero or the fallback limit +/-0.1 is used.
There can be up to 15 attributes, they are as follows:

0 = Races
1 = Parachuting
2 = Horde
3 = Darts
4 = Arm Wrestling
5 = Tennis
6 = Golf
7 = Shooting Range
8 = Deathmatch
9 = MPPLY_MCMWIN/MPPLY_CRMISSION]=]
	NetworkFindMatchedGamers=function(attribute--[[@param attribute integer]],fallbackLimit--[[@param fallbackLimit number]],lowerLimit--[[@param lowerLimit number]],upperLimit--[[@param upperLimit number]])return InvokeBool(0xF7B2CFDE5C9F700D,attribute,fallbackLimit+.0,lowerLimit+.0,upperLimit+.0)end;---@return boolean
	NetworkIsFindingGamers=function()return InvokeBool(0xDDDF64C91BFCF0AA)end;---@return boolean
	NetworkDidFindGamersSucceed=function()return InvokeBool(0xF9B83B77929D8863)end;---@return boolean
	NetworkGetNumFoundGamers=function()return InvokeInt(0xA1B043EE79A916FB)end;---@return integer
	NetworkGetFoundGamer=function(p0--[[@param p0 any*]],p1--[[@param p1 any]])return InvokeBool(0x9DCFF2AFB68B3476,p0,p1)end;---@return boolean
	NetworkClearFoundGamers=function()return InvokeVoid(0x6D14CCEE1B40381A)end;
	NetworkQueueGamerForStatus=function(p0--[[@param p0 any*]])return InvokeBool(0x85A0EF54A500882C,p0)end;---@return boolean
	NetworkGetGamerStatusFromQueue=function()return InvokeBool(0x2CC848A861D01493)end;---@return boolean
	NetworkIsGettingGamerStatus=function()return InvokeBool(0x94A8394D150B013A)end;---@return boolean
	NetworkDidGetGamerStatusSucceed=function()return InvokeBool(0x5AE17C6B0134B7F1)end;---@return boolean
	NetworkGetGamerStatusResult=function(p0--[[@param p0 any*]],p1--[[@param p1 any]])return InvokeBool(0x02A8BEC6FD9AF660,p0,p1)end;---@return boolean
	NetworkClearGetGamerStatus=function()return InvokeVoid(0x86E0660E4F5C956D)end;
	NetworkSessionJoinInvite=function()return InvokeVoid(0xC6F8AB8A4189CF3A)end;
	NetworkSessionCancelInvite=function()return InvokeVoid(0x2FBF47B1B36D36F9)end;
	NetworkSessionForceCancelInvite=function()return InvokeVoid(0xA29177F7703B5644)end;
	NetworkHasPendingInvite=function()return InvokeBool(0xAC8C7B9B88C4A668)end;---@return boolean
	NetworkHasConfirmedInvite=function()return InvokeBool(0xC42DD763159F3461)end;---@return boolean
	--[=[Triggers a CEventNetworkInviteConfirmed event]=]
	NetworkRequestInviteConfirmedEvent=function()return InvokeBool(0x62A0296C1BB1CEB3)end;---@return boolean
	NetworkSessionWasInvited=function()return InvokeBool(0x23DFB504655D0CE4)end;---@return boolean
	NetworkSessionGetInviter=function(gamerHandle--[[@param gamerHandle any*]])return InvokeVoid(0xE57397B4A3429DD0,gamerHandle)end;
	--[=[Seems to be true while "Getting GTA Online session details" shows up.]=]
	NetworkSessionIsAwaitingInviteResponse=function()return InvokeBool(0xD313DE83394AF134)end;---@return boolean
	NetworkSessionIsDisplayingInviteConfirmation=function()return InvokeBool(0xBDB6F89C729CF388)end;---@return boolean
	NetworkSuppressInvite=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xA0682D67EF1FBA3D,toggle)end;
	NetworkBlockInvites=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x34F9E9049454A7A0,toggle)end;
	NetworkBlockJoinQueueInvites=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xCFEB8AF24FC1D0BB,toggle)end;
	NetworkSetCanReceiveRsInvites=function(p0--[[@param p0 boolean]])return InvokeVoid(0x68980414688F7F9D,p0)end;
	NetworkStoreInviteThroughRestart=function()return InvokeVoid(0xF814FEC6A19FD6E0)end;
	NetworkAllowInviteProcessInPlayerSwitch=function(p0--[[@param p0 boolean]])return InvokeVoid(0x6B07B9CE4D390375,p0)end;
	NetworkSetScriptReadyForEvents=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x7AC752103856FB20,toggle)end;
	NetworkIsOfflineInvitePending=function()return InvokeBool(0x74698374C45701D2)end;---@return boolean
	NetworkClearOfflineInvitePending=function()return InvokeVoid(0x140E6A44870A11CE)end;
	--[=[Loads up the map that is loaded when beeing in mission creator
Player gets placed in a mix between online/offline mode
p0 is always 2 in R* scripts.

Appears to be patched in gtav b757 (game gets terminated) alonside with most other network natives to prevent online modding ~ghost30812]=]
	NetworkSessionHostSinglePlayer=function(p0--[[@param p0 integer]])return InvokeVoid(0xC74C33FCA52856D5,p0)end;
	NetworkSessionLeaveSinglePlayer=function()return InvokeVoid(0x3442775428FD2DAA)end;
	NetworkIsGameInProgress=function()return InvokeBool(0x10FAB35428CCC9D7)end;---@return boolean
	NetworkIsSessionActive=function()return InvokeBool(0xD83C2B94E7508980)end;---@return boolean
	NetworkIsInSession=function()return InvokeBool(0xCA97246103B63917)end;---@return boolean
	--[=[This checks if player is playing on gta online or not.
Please add an if and block your mod if this is "true".]=]
	NetworkIsSessionStarted=function()return InvokeBool(0x9DE624D2FC4B603F)end;---@return boolean
	NetworkIsSessionBusy=function()return InvokeBool(0xF4435D66A8E2905E)end;---@return boolean
	NetworkCanSessionEnd=function()return InvokeBool(0x4EEBC3694E49C572)end;---@return boolean
	NetworkGetGameMode=function()return InvokeInt(0x4C9034162368E206)end;---@return integer
	NetworkSessionMarkVisible=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x271CC6AB59EBF9A5,toggle)end;
	NetworkSessionIsVisible=function()return InvokeBool(0xBA416D68C631496A)end;---@return boolean
	NetworkSessionBlockJoinRequests=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xA73667484D7037C3,toggle)end;
	--[=[num player slots allowed in session, seems to work? 32 max]=]
	NetworkSessionChangeSlots=function(slots--[[@param slots integer]],p1--[[@param p1 boolean]])return InvokeVoid(0xB4AB419E0D86ACAE,slots,p1)end;
	NetworkSessionGetPrivateSlots=function()return InvokeInt(0x53AFD64C6758F2F9)end;---@return integer
	NetworkSessionVoiceHost=function()return InvokeBool(0x9C1556705F864230)end;---@return boolean
	NetworkSessionVoiceLeave=function()return InvokeBool(0x6793E42BE02B575D)end;---@return boolean
	NetworkSessionVoiceConnectToPlayer=function(gamerHandle--[[@param gamerHandle any*]])return InvokeVoid(0xABD5E88B8A2D3DB2,gamerHandle)end;
	NetworkSessionVoiceRespondToRequest=function(p0--[[@param p0 boolean]],p1--[[@param p1 integer]])return InvokeVoid(0x7F8413B7FC2AA6B9,p0,p1)end;
	NetworkSessionVoiceSetTimeout=function(timeout--[[@param timeout integer]])return InvokeVoid(0x5B8ED3DB018927B1,timeout)end;
	NetworkSessionIsInVoiceSession=function()return InvokeBool(0x855BC38818F6F684)end;---@return boolean
	NetworkSessionIsVoiceSessionActive=function()return InvokeBool(0xB5D3453C98456528)end;---@return boolean
	NetworkSessionIsVoiceSessionBusy=function()return InvokeBool(0xEF0912DDF7C4CB4B)end;---@return boolean
	--[=[Message is limited to 64 characters.]=]
	NetworkSendTextMessage=function(message--[[@param message string]],gamerHandle--[[@param gamerHandle any*]])return InvokeBool(0x3A214F2EC889B100,message,gamerHandle)end;---@return boolean
	NetworkSetActivitySpectator=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x75138790B4359A74,toggle)end;
	NetworkIsActivitySpectator=function()return InvokeBool(0x12103B9E0C9F92FB)end;---@return boolean
	NetworkSetActivityPlayerMax=function(p0--[[@param p0 any]])return InvokeVoid(0x0E4F77F7B9D74D84,p0)end;
	NetworkSetActivitySpectatorMax=function(maxSpectators--[[@param maxSpectators integer]])return InvokeVoid(0x9D277B76D1D12222,maxSpectators)end;
	NetworkGetActivityPlayerNum=function(p0--[[@param p0 boolean]])return InvokeInt(0x73E2B500410DA5A2,p0)end;---@return integer
	NetworkIsActivitySpectatorFromHandle=function(gamerHandle--[[@param gamerHandle any*]])return InvokeBool(0x2763BBAA72A7BCB9,gamerHandle)end;---@return boolean
	--[=[p0: Unknown int
p1: Unknown int
p2: Unknown int
p3: Unknown int
p4: Unknown always 0 in decompiled scripts
p5: BOOL purpose unknown, both 0 and 1 are used in decompiled scripts.
p6: BOOL purpose unknown, both 0 and 1 are used in decompiled scripts.
p7: Unknown int, it's an int according to decompiled scripts, however the value is always 0 or 1.
p8: Unknown int, it's an int according to decompiled scripts, however the value is always 0 or 1.
p9: Unknown int, sometimes 0, but also 32768 or 16384 appear in decompiled scripst, maybe a flag of some sort?

From what I can tell it looks like it does the following:
Creates/hosts a new transition to another online session, using this in FiveM will result in other players being disconencted from the server/preventing them from joining. This is most likely because I entered the wrong session parameters since they're pretty much all unknown right now.
You also need to use `NetworkJoinTransition(Player player)` and `NetworkLaunchTransition()`.]=]
	NetworkHostTransition=function(p0--[[@param p0 integer]],p1--[[@param p1 integer]],p2--[[@param p2 integer]],p3--[[@param p3 integer]],p4--[[@param p4 any]],p5--[[@param p5 boolean]],p6--[[@param p6 boolean]],p7--[[@param p7 integer]],p8--[[@param p8 any]],p9--[[@param p9 integer]])return InvokeBool(0xA60BB5CE242BB254,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9)end;---@return boolean
	NetworkDoTransitionQuickmatch=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]],p5--[[@param p5 any]])return InvokeBool(0x71FB0EBCD4915D56,p0,p1,p2,p3,p4,p5)end;---@return boolean
	NetworkDoTransitionQuickmatchAsync=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]],p5--[[@param p5 any]])return InvokeBool(0xA091A5E44F0072E5,p0,p1,p2,p3,p4,p5)end;---@return boolean
	NetworkDoTransitionQuickmatchWithGroup=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any*]],p5--[[@param p5 any]],p6--[[@param p6 any]],p7--[[@param p7 any]])return InvokeBool(0x9C4AB58491FDC98A,p0,p1,p2,p3,p4,p5,p6,p7)end;---@return boolean
	NetworkJoinGroupActivity=function()return InvokeBool(0xA06509A691D12BE4)end;---@return boolean
	NetworkClearGroupActivity=function()return InvokeVoid(0x1888694923EF4591)end;
	NetworkRetainActivityGroup=function()return InvokeVoid(0xB13E88E655E5A3BC)end;
	NetworkIsTransitionClosedFriends=function()return InvokeBool(0x6512765E3BE78C50)end;---@return boolean
	NetworkIsTransitionClosedCrew=function()return InvokeBool(0x0DBD5D7E3C5BEC3B)end;---@return boolean
	NetworkIsTransitionSolo=function()return InvokeBool(0x5DC577201723960A)end;---@return boolean
	NetworkIsTransitionPrivate=function()return InvokeBool(0x5A6AA44FF8E931E6)end;---@return boolean
	NetworkGetNumTransitionNonAsyncGamers=function()return InvokeInt(0x617F49C2668E6155)end;---@return integer
	NetworkMarkAsPreferredActivity=function(p0--[[@param p0 boolean]])return InvokeVoid(0x261E97AD7BCF3D40,p0)end;
	NetworkMarkAsWaitingAsync=function(p0--[[@param p0 boolean]])return InvokeVoid(0x39917E1B4CB0F911,p0)end;
	NetworkSetInProgressFinishTime=function(p0--[[@param p0 any]])return InvokeVoid(0x2CE9D95E4051AECD,p0)end;
	NetworkSetTransitionCreatorHandle=function(p0--[[@param p0 any*]])return InvokeVoid(0xEF26739BCD9907D5,p0)end;
	NetworkClearTransitionCreatorHandle=function()return InvokeVoid(0xFB3272229A82C759)end;
	NetworkInviteGamersToTransition=function(p0--[[@param p0 any*]],p1--[[@param p1 any]])return InvokeBool(0x4A595C32F77DFF76,p0,p1)end;---@return boolean
	NetworkSetGamerInvitedToTransition=function(gamerHandle--[[@param gamerHandle any*]])return InvokeVoid(0xCA2C8073411ECDB6,gamerHandle)end;
	NetworkLeaveTransition=function()return InvokeBool(0xD23A1A815D21DB19)end;---@return boolean
	NetworkLaunchTransition=function()return InvokeBool(0x2DCF46CB1A4F0884)end;---@return boolean
	--[=[Appears to set whether a transition should be started when the session is migrating.]=]
	NetworkSetDoNotLaunchFromJoinAsMigratedHost=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xA2E9C1AB8A92E8CD,toggle)end;
	NetworkCancelTransitionMatchmaking=function()return InvokeVoid(0x023782EFC70585EE)end;
	NetworkBailTransition=function(p0--[[@param p0 integer]],p1--[[@param p1 integer]],p2--[[@param p2 integer]])return InvokeVoid(0xEAA572036990CD1B,p0,p1,p2)end;
	NetworkDoTransitionToGame=function(p0--[[@param p0 boolean]],maxPlayers--[[@param maxPlayers integer]])return InvokeBool(0x3E9BB38102A589B0,p0,maxPlayers)end;---@return boolean
	NetworkDoTransitionToNewGame=function(p0--[[@param p0 boolean]],maxPlayers--[[@param maxPlayers integer]],p2--[[@param p2 boolean]])return InvokeBool(0x4665F51EFED00034,p0,maxPlayers,p2)end;---@return boolean
	--[=[p2 is true 3/4 of the occurrences I found.
'players' is the number of players for a session. On PS3/360 it's always 18. On PC it's 32.]=]
	NetworkDoTransitionToFreemode=function(p0--[[@param p0 any*]],p1--[[@param p1 any]],p2--[[@param p2 boolean]],players--[[@param players integer]],p4--[[@param p4 boolean]])return InvokeBool(0x3AAD8B2FCA1E289F,p0,p1,p2,players,p4)end;---@return boolean
	NetworkDoTransitionToNewFreemode=function(p0--[[@param p0 any*]],p1--[[@param p1 any]],players--[[@param players integer]],p3--[[@param p3 boolean]],p4--[[@param p4 boolean]],p5--[[@param p5 boolean]])return InvokeBool(0x9E80A5BA8109F974,p0,p1,players,p3,p4,p5)end;---@return boolean
	NetworkIsTransitionToGame=function()return InvokeBool(0x9D7696D8F4FA6CB7)end;---@return boolean
	--[=[Returns count.]=]
	NetworkGetTransitionMembers=function(data--[[@param data any*]],dataCount--[[@param dataCount integer]])return InvokeInt(0x73B000F7FBC55829,data,dataCount)end;---@return integer
	NetworkApplyTransitionParameter=function(p0--[[@param p0 integer]],p1--[[@param p1 integer]])return InvokeVoid(0x521638ADA1BA0D18,p0,p1)end;
	NetworkApplyTransitionParameterString=function(p0--[[@param p0 integer]],string--[[@param string string]],p2--[[@param p2 boolean]])return InvokeVoid(0xEBEFC2E77084F599,p0,string,p2)end;
	NetworkSendTransitionGamerInstruction=function(gamerHandle--[[@param gamerHandle any*]],p1--[[@param p1 string]],p2--[[@param p2 integer]],p3--[[@param p3 integer]],p4--[[@param p4 boolean]])return InvokeBool(0x31D1D2B858D25E6B,gamerHandle,p1,p2,p3,p4)end;---@return boolean
	NetworkMarkTransitionGamerAsFullyJoined=function(p0--[[@param p0 any*]])return InvokeBool(0x5728BB6D63E3FF1D,p0)end;---@return boolean
	NetworkIsTransitionHost=function()return InvokeBool(0x0B824797C9BF2159)end;---@return boolean
	NetworkIsTransitionHostFromHandle=function(gamerHandle--[[@param gamerHandle any*]])return InvokeBool(0x6B5C83BA3EFE6A10,gamerHandle)end;---@return boolean
	NetworkGetTransitionHost=function(gamerHandle--[[@param gamerHandle any*]])return InvokeBool(0x65042B9774C4435E,gamerHandle)end;---@return boolean
	NetworkIsInTransition=function()return InvokeBool(0x68049AEFF83D8F0A)end;---@return boolean
	NetworkIsTransitionStarted=function()return InvokeBool(0x53FA83401D9C07FE)end;---@return boolean
	NetworkIsTransitionBusy=function()return InvokeBool(0x520F3282A53D26B7)end;---@return boolean
	NetworkIsTransitionMatchmaking=function()return InvokeBool(0x292564C735375EDF)end;---@return boolean
	NetworkIsTransitionLeavePostponed=function()return InvokeBool(0xC571D0E77D8BBC29)end;---@return boolean
	NetworkTransitionSetInProgress=function(p0--[[@param p0 any]])return InvokeVoid(0x1398582B7F72B3ED,p0)end;
	NetworkTransitionSetContentCreator=function(p0--[[@param p0 any]])return InvokeVoid(0x1F8E00FB18239600,p0)end;
	NetworkTransitionSetActivityIsland=function(p0--[[@param p0 any]])return InvokeVoid(0xF6F4383B7C92F11A,p0)end;
	NetworkOpenTransitionMatchmaking=function()return InvokeVoid(0x2B3A8F7CA3A38FDE)end;
	NetworkCloseTransitionMatchmaking=function()return InvokeVoid(0x43F4DBA69710E01E)end;
	NetworkIsTransitionOpenToMatchmaking=function()return InvokeBool(0x37A4494483B9F5C9)end;---@return boolean
	NetworkSetTransitionVisibilityLock=function(p0--[[@param p0 boolean]],p1--[[@param p1 boolean]])return InvokeVoid(0x0C978FDA19692C2C,p0,p1)end;
	NetworkIsTransitionVisibilityLocked=function()return InvokeBool(0xD0A484CB2F829FBE)end;---@return boolean
	NetworkSetTransitionActivityId=function(p0--[[@param p0 any]])return InvokeVoid(0x30DE938B516F0AD2,p0)end;
	NetworkChangeTransitionSlots=function(p0--[[@param p0 any]],p1--[[@param p1 boolean]])return InvokeVoid(0xEEEDA5E6D7080987,p0,p1)end;
	NetworkTransitionBlockJoinRequests=function(p0--[[@param p0 boolean]])return InvokeVoid(0x973D76AA760A6CB6,p0)end;
	NetworkHasPlayerStartedTransition=function(player--[[@param player integer]])return InvokeBool(0x9AC9CCBFA8C29795,player)end;---@return boolean
	NetworkAreTransitionDetailsValid=function(p0--[[@param p0 any]])return InvokeBool(0x2615AA2A695930C1,p0)end;---@return boolean
	--[=[int handle[76];
          NETWORK_HANDLE_FROM_FRIEND(iSelectedPlayer, &handle[0], 13);
          Player uVar2 = NETWORK_GET_PLAYER_FROM_GAMER_HANDLE(&handle[0]);
          NETWORK_JOIN_TRANSITION(uVar2);
nothing doin.]=]
	NetworkJoinTransition=function(player--[[@param player integer]])return InvokeBool(0x9D060B08CD63321A,player)end;---@return boolean
	NetworkHasInvitedGamerToTransition=function(p0--[[@param p0 any*]])return InvokeBool(0x7284A47B3540E6CF,p0)end;---@return boolean
	NetworkHasTransitionInviteBeenAcked=function(p0--[[@param p0 any*]])return InvokeBool(0x3F9990BF5F22759C,p0)end;---@return boolean
	NetworkIsActivitySession=function()return InvokeBool(0x05095437424397FA)end;---@return boolean
	NetworkDisableRealtimeMultiplayer=function()return InvokeVoid(0x236905C700FDB54D)end;
	--[=[Does nothing. It's just a nullsub.]=]
	NetworkSetPresenceSessionInvitesBlocked=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x4A9FDE3A5A6D0437,toggle)end;
	NetworkSendInviteViaPresence=function(gamerHandle--[[@param gamerHandle any*]],p1--[[@param p1 string]],dataCount--[[@param dataCount integer]],p3--[[@param p3 integer]])return InvokeBool(0xC3C7A6AFDB244624,gamerHandle,p1,dataCount,p3)end;---@return boolean
	NetworkSendTransitionInviteViaPresence=function(gamerHandle--[[@param gamerHandle any*]],p1--[[@param p1 string]],dataCount--[[@param dataCount integer]],p3--[[@param p3 integer]])return InvokeBool(0xC116FF9B4D488291,gamerHandle,p1,dataCount,p3)end;---@return boolean
	--[=[Contains the string "NETWORK_SEND_PRESENCE_TRANSITION_INVITE" but so does 0xC116FF9B4D488291; seems to fit alphabetically here, tho.]=]
	NetworkSendImportantTransitionInviteViaPresence=function(gamerHandle--[[@param gamerHandle any*]],p1--[[@param p1 string]],dataCount--[[@param dataCount integer]],p3--[[@param p3 integer]])return InvokeBool(0x1171A97A3D3981B6,gamerHandle,p1,dataCount,p3)end;---@return boolean
	NetworkGetPresenceInviteIndexById=function(p0--[[@param p0 integer]])return InvokeInt(0x742B58F723233ED9,p0)end;---@return integer
	NetworkGetNumPresenceInvites=function()return InvokeInt(0xCEFA968912D0F78D)end;---@return integer
	NetworkAcceptPresenceInvite=function(p0--[[@param p0 integer]])return InvokeBool(0xFA91550DF9318B22,p0)end;---@return boolean
	NetworkRemovePresenceInvite=function(p0--[[@param p0 integer]])return InvokeBool(0xF0210268DB0974B1,p0)end;---@return boolean
	NetworkGetPresenceInviteId=function(p0--[[@param p0 integer]])return InvokeInt(0xDFF09646E12EC386,p0)end;---@return integer
	NetworkGetPresenceInviteInviter=function(p0--[[@param p0 integer]])return InvokeString(0x4962CC4AA2F345B7,p0)end;---@return string
	NetworkGetPresenceInviteHandle=function(p0--[[@param p0 any]],p1--[[@param p1 any*]])return InvokeBool(0x38D5B0FEBB086F75,p0,p1)end;---@return boolean
	NetworkGetPresenceInviteSessionId=function(p0--[[@param p0 any]])return InvokeInt(0x26E1CD96B0903D60,p0)end;---@return integer
	NetworkGetPresenceInviteContentId=function(p0--[[@param p0 integer]])return InvokeString(0x24409FC4C55CB22D,p0)end;---@return string
	NetworkGetPresenceInvitePlaylistLength=function(p0--[[@param p0 integer]])return InvokeInt(0xD39B3FFF8FFDD5BF,p0)end;---@return integer
	NetworkGetPresenceInvitePlaylistCurrent=function(p0--[[@param p0 integer]])return InvokeInt(0x728C4CC7920CD102,p0)end;---@return integer
	NetworkGetPresenceInviteFromAdmin=function(p0--[[@param p0 integer]])return InvokeBool(0x3DBF2DF0AEB7D289,p0)end;---@return boolean
	NetworkGetPresenceInviteIsTournament=function(p0--[[@param p0 any]])return InvokeBool(0x8806CEBFABD3CE05,p0)end;---@return boolean
	NetworkHasFollowInvite=function()return InvokeBool(0x76D9B976C4C09FDE)end;---@return boolean
	NetworkActionFollowInvite=function()return InvokeBool(0xC88156EBB786F8D5)end;---@return boolean
	NetworkClearFollowInvite=function()return InvokeBool(0x439BFDE3CD0610F6)end;---@return boolean
	NetworkRemoveAndCancelAllInvites=function()return InvokeVoid(0xEBF8284D8CADEB53)end;
	NetworkRemoveTransitionInvite=function(p0--[[@param p0 any*]])return InvokeVoid(0x7524B431B2E6F7EE,p0)end;
	NetworkRemoveAllTransitionInvite=function()return InvokeVoid(0x726E0375C7A26368)end;
	NetworkRemoveAndCancelAllTransitionInvites=function()return InvokeVoid(0xF083835B70BA9BFE)end;
	NetworkInviteGamers=function(p0--[[@param p0 any*]],p1--[[@param p1 any]],p2--[[@param p2 any*]],p3--[[@param p3 any]])return InvokeBool(0x9D80CD1D0E6327DE,p0,p1,p2,p3)end;---@return boolean
	NetworkHasInvitedGamer=function(p0--[[@param p0 any*]])return InvokeBool(0x4D86CD31E8976ECE,p0)end;---@return boolean
	NetworkHasMadeInviteDecision=function(gamerHandle--[[@param gamerHandle any*]])return InvokeBool(0x71DC455F5CD1C2B1,gamerHandle)end;---@return boolean
	NetworkGetInviteReplyStatus=function(p0--[[@param p0 any]])return InvokeInt(0x3855FB5EB2C5E8B2,p0)end;---@return integer
	NetworkGetCurrentlySelectedGamerHandleFromInviteMenu=function(p0--[[@param p0 any*]])return InvokeBool(0x74881E6BCAE2327C,p0)end;---@return boolean
	NetworkSetCurrentlySelectedGamerHandleFromInviteMenu=function(p0--[[@param p0 any*]])return InvokeBool(0x7206F674F2A3B1BB,p0)end;---@return boolean
	NetworkSetInviteOnCallForInviteMenu=function(p0--[[@param p0 any*]])return InvokeVoid(0x66F010A4B031A331,p0)end;
	NetworkCheckDataManagerSucceededForHandle=function(p0--[[@param p0 integer]],gamerHandle--[[@param gamerHandle any*]])return InvokeBool(0x44B37CDCAE765AAE,p0,gamerHandle)end;---@return boolean
	NetworkCheckDataManagerForHandle=function(p0--[[@param p0 any]],gamerHandle--[[@param gamerHandle any*]])return InvokeBool(0x4AD490AE1536933B,p0,gamerHandle)end;---@return boolean
	NetworkSetInviteFailedMessageForInviteMenu=function(p0--[[@param p0 any*]],p1--[[@param p1 any*]])return InvokeVoid(0x0D77A82DC2D0DA59,p0,p1)end;
	FilloutPmPlayerList=function(gamerHandle--[[@param gamerHandle any*]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeBool(0xCBBD7C4991B64809,gamerHandle,p1,p2)end;---@return boolean
	FilloutPmPlayerListWithNames=function(p0--[[@param p0 any*]],p1--[[@param p1 any*]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeBool(0x716B6DB9D1886106,p0,p1,p2,p3)end;---@return boolean
	RefreshPlayerListStats=function(p0--[[@param p0 integer]])return InvokeBool(0xE26CCFF8094D8C74,p0)end;---@return boolean
	NetworkSetCurrentDataManagerHandle=function(p0--[[@param p0 any*]])return InvokeBool(0x796A87B3B68D1F3D,p0)end;---@return boolean
	--[=[Hardcoded to return false.]=]
	NetworkIsInPlatformParty=function()return InvokeBool(0x2FC5650B0271CB57)end;---@return boolean
	NetworkGetPlatformPartyMemberCount=function()return InvokeInt(0x01ABCE5E7CBDA196)end;---@return integer
	NetworkGetPlatformPartyMembers=function(data--[[@param data any*]],dataSize--[[@param dataSize integer]])return InvokeInt(0x120364DE2845DAF8,data,dataSize)end;---@return integer
	--[=[Hardcoded to return false.]=]
	NetworkIsInPlatformPartyChat=function()return InvokeBool(0xFD8B834A8BA05048)end;---@return boolean
	--[=[This would be nice to see if someone is in party chat, but 2 sad notes.
1) It only becomes true if said person is speaking in that party at the time.
2) It will never, become true unless you are in that party with said person.]=]
	NetworkIsChattingInPlatformParty=function(gamerHandle--[[@param gamerHandle any*]])return InvokeBool(0x8DE9945BCC9AEC52,gamerHandle)end;---@return boolean
	NetworkCanQueueForPreviousSessionJoin=function()return InvokeBool(0x2BF66D2E7414F686)end;---@return boolean
	NetworkIsQueuingForSessionJoin=function()return InvokeBool(0x14922ED3E38761F0)end;---@return boolean
	NetworkClearQueuedJoinRequest=function()return InvokeVoid(0x6CE50E47F5543D0C)end;
	NetworkSendQueuedJoinRequest=function()return InvokeVoid(0xFA2888E3833C8E96)end;
	NetworkRemoveAllQueuedJoinRequests=function()return InvokeVoid(0x25D990F8E0E3F13C)end;
	NetworkSeedRandomNumberGenerator=function(seed--[[@param seed integer]])return InvokeVoid(0xF1B84178F8674195,seed)end;
	NetworkGetRandomInt=function()return InvokeInt(0x599E4FA1F87EB5FF)end;---@return integer
	--[=[Same as GET_RANDOM_INT_IN_RANGE]=]
	NetworkGetRandomIntRanged=function(rangeStart--[[@param rangeStart integer]],rangeEnd--[[@param rangeEnd integer]])return InvokeInt(0xE30CF56F1EFA5F43,rangeStart,rangeEnd)end;---@return integer
	NetworkGetRandomFloatRanged=function(rangeStart--[[@param rangeStart number]],rangeEnd--[[@param rangeEnd number]])return InvokeFloat(0x04BD27B5ACB67067,rangeStart+.0,rangeEnd+.0)end;---@return number
	NetworkPlayerIsCheater=function()return InvokeBool(0x655B91F1495A9090)end;---@return boolean
	NetworkPlayerGetCheaterReason=function()return InvokeInt(0x172F75B6EE2233BA)end;---@return integer
	NetworkPlayerIsBadsport=function()return InvokeBool(0x19D8DA0E5A68045A)end;---@return boolean
	RemoteCheaterPlayerDetected=function(player--[[@param player integer]],a--[[@param a integer]],b--[[@param b integer]])return InvokeBool(0x472841A026D26D8B,player,a,b)end;---@return boolean
	BadSportPlayerLeftDetected=function(gamerHandle--[[@param gamerHandle any*]],event--[[@param event integer]],amountReceived--[[@param amountReceived integer]])return InvokeBool(0xEC5E3AF5289DCA81,gamerHandle,event,amountReceived)end;---@return boolean
	NetworkAddInvalidObjectModel=function(modelHash--[[@param modelHash integer]])return InvokeVoid(0x7F562DBC212E81F9,modelHash)end;
	NetworkRemoveInvalidObjectModel=function(modelHash--[[@param modelHash integer]])return InvokeVoid(0x791EDB5803B2F468,modelHash)end;
	NetworkClearInvalidObjectModels=function()return InvokeVoid(0x03B2F03A53D85E41)end;
	NetworkApplyPedScarData=function(ped--[[@param ped integer]],p1--[[@param p1 integer]])return InvokeVoid(0xE66C690248F11150,ped,p1)end;
	NetworkSetThisScriptIsNetworkScript=function(maxNumMissionParticipants--[[@param maxNumMissionParticipants integer]],p1--[[@param p1 boolean]],instanceId--[[@param instanceId integer]])return InvokeVoid(0x1CA59E306ECB80A5,maxNumMissionParticipants,p1,instanceId)end;
	NetworkTryToSetThisScriptIsNetworkScript=function(p0--[[@param p0 any]],p1--[[@param p1 boolean]],p2--[[@param p2 any]])return InvokeBool(0xD1110739EEADB592,p0,p1,p2)end;---@return boolean
	NetworkGetThisScriptIsNetworkScript=function()return InvokeBool(0x2910669969E9535E)end;---@return boolean
	NetworkGetMaxNumParticipants=function()return InvokeInt(0xA6C90FBC38E395EE)end;---@return integer
	NetworkGetNumParticipants=function()return InvokeInt(0x18D0456E86604654)end;---@return integer
	NetworkGetScriptStatus=function()return InvokeInt(0x57D158647A6BFABF)end;---@return integer
	NetworkRegisterHostBroadcastVariables=function(vars--[[@param vars integer*]],numVars--[[@param numVars integer]],debugName--[[@param debugName string]])return InvokeVoid(0x3E9B2F01C50DF595,vars,numVars,debugName)end;
	NetworkRegisterPlayerBroadcastVariables=function(vars--[[@param vars integer*]],numVars--[[@param numVars integer]],debugName--[[@param debugName string]])return InvokeVoid(0x3364AA97340CA215,vars,numVars,debugName)end;
	NetworkRegisterHighFrequencyHostBroadcastVariables=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0xEA8C0DDB10E2822A,p0,p1,p2)end;
	NetworkRegisterHighFrequencyPlayerBroadcastVariables=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0xD6D7478CA62B8D41,p0,p1,p2)end;
	NetworkFinishBroadcastingData=function()return InvokeVoid(0x64F62AFB081E260D)end;
	NetworkHasReceivedHostBroadcastData=function()return InvokeBool(0x5D10B3795F3FC886)end;---@return boolean
	NetworkGetPlayerIndex=function(player--[[@param player integer]])return InvokeInt(0x24FB80D107371267,player)end;---@return integer
	NetworkGetParticipantIndex=function(index--[[@param index integer]])return InvokeInt(0x1B84DF6AF2A46938,index)end;---@return integer
	--[=[Returns the Player associated to a given Ped when in an online session.]=]
	NetworkGetPlayerIndexFromPed=function(ped--[[@param ped integer]])return InvokeInt(0x6C0E2E0125610278,ped)end;---@return integer
	--[=[Returns the amount of players connected in the current session. Only works when connected to a session/server.]=]
	NetworkGetNumConnectedPlayers=function()return InvokeInt(0xA4A79DD2D9600654)end;---@return integer
	NetworkIsPlayerConnected=function(player--[[@param player integer]])return InvokeBool(0x93DC1BE4E1ABE9D1,player)end;---@return boolean
	NetworkGetTotalNumPlayers=function()return InvokeInt(0xCF61D4B4702EE9EB)end;---@return integer
	NetworkIsParticipantActive=function(p0--[[@param p0 integer]])return InvokeBool(0x6FF8FF40B6357D45,p0)end;---@return boolean
	NetworkIsPlayerActive=function(player--[[@param player integer]])return InvokeBool(0xB8DFD30D6973E135,player)end;---@return boolean
	NetworkIsPlayerAParticipant=function(player--[[@param player integer]])return InvokeBool(0x3CA58F6CB7CBD784,player)end;---@return boolean
	NetworkIsHostOfThisScript=function()return InvokeBool(0x83CD99A1E6061AB5)end;---@return boolean
	NetworkGetHostOfThisScript=function()return InvokeInt(0xC7B4D79B01FA7A5C)end;---@return integer
	--[=[scriptName examples:
"freemode", "AM_CR_SecurityVan", ...

Most of the time, these values are used:
instance_id = -1
position_hash = 0]=]
	NetworkGetHostOfScript=function(scriptName--[[@param scriptName string]],instance_id--[[@param instance_id integer]],position_hash--[[@param position_hash integer]])return InvokeInt(0x1D6A14F1F9A736FC,scriptName,instance_id,position_hash)end;---@return integer
	NetworkSetMissionFinished=function()return InvokeVoid(0x3B3D11CD9FFCDFC9)end;
	NetworkIsScriptActive=function(scriptName--[[@param scriptName string]],instance_id--[[@param instance_id integer]],p2--[[@param p2 boolean]],position_hash--[[@param position_hash integer]])return InvokeBool(0x9D40DF90FAD26098,scriptName,instance_id,p2,position_hash)end;---@return boolean
	NetworkIsScriptActiveByHash=function(scriptHash--[[@param scriptHash integer]],p1--[[@param p1 integer]],p2--[[@param p2 boolean]],p3--[[@param p3 integer]])return InvokeBool(0xDA7DE67F5FE5EE13,scriptHash,p1,p2,p3)end;---@return boolean
	NetworkIsThreadANetworkScript=function(threadId--[[@param threadId integer]])return InvokeBool(0x560B423D73015E77,threadId)end;---@return boolean
	NetworkGetNumScriptParticipants=function(scriptName--[[@param scriptName string]],instance_id--[[@param instance_id integer]],position_hash--[[@param position_hash integer]])return InvokeInt(0x3658E8CD94FC121A,scriptName,instance_id,position_hash)end;---@return integer
	NetworkGetInstanceIdOfThisScript=function()return InvokeInt(0x638A3A81733086DB)end;---@return integer
	NetworkGetPositionHashOfThisScript=function()return InvokeInt(0x257ED0FADF750BCF)end;---@return integer
	NetworkIsPlayerAParticipantOnScript=function(player--[[@param player integer]],script--[[@param script string]],instance_id--[[@param instance_id integer]])return InvokeBool(0x1AD5B71586B94820,player,script,instance_id)end;---@return boolean
	NetworkPreventScriptHostMigration=function()return InvokeVoid(0x2302C0264EA58D31)end;
	NetworkRequestToBeHostOfThisScript=function()return InvokeVoid(0x741A3D8380319A81)end;
	--[=[Return the local Participant ID]=]
	ParticipantId=function()return InvokeInt(0x90986E8876CE0A83)end;---@return integer
	--[=[Return the local Participant ID.

This native is exactly the same as 'PARTICIPANT_ID' native.]=]
	ParticipantIdToInt=function()return InvokeInt(0x57A3BDDAD8E5AA0A)end;---@return integer
	NetworkGetKillerOfPlayer=function(player--[[@param player integer]],weaponHash--[[@param weaponHash integer*]])return InvokeInt(0x2DA41ED6E1FCD7A5,player,weaponHash)end;---@return integer
	NetworkGetDestroyerOfNetworkId=function(netId--[[@param netId integer]],weaponHash--[[@param weaponHash integer*]])return InvokeInt(0x7A1ADEEF01740A24,netId,weaponHash)end;---@return integer
	NetworkGetDestroyerOfEntity=function(entity--[[@param entity integer]],weaponHash--[[@param weaponHash integer*]])return InvokeInt(0xC434133D9BA52777,entity,weaponHash)end;---@return integer
	--[=[NETWORK_GET_ASSISTED_DAMAGE_OF_ENTITY that ensures the entity is dead (IS_ENTITY_DEAD)]=]
	NetworkGetAssistedKillOfEntity=function(player--[[@param player integer]],entity--[[@param entity integer]],p2--[[@param p2 integer*]])return InvokeBool(0x83660B734994124D,player,entity,p2)end;---@return boolean
	NetworkGetAssistedDamageOfEntity=function(player--[[@param player integer]],entity--[[@param entity integer]],p2--[[@param p2 integer*]])return InvokeBool(0x4CACA84440FA26F6,player,entity,p2)end;---@return boolean
	NetworkGetEntityKillerOfPlayer=function(player--[[@param player integer]],weaponHash--[[@param weaponHash integer*]])return InvokeInt(0x42B2DAA6B596F5F8,player,weaponHash)end;---@return integer
	NetworkSetCurrentPublicContentId=function(missionId--[[@param missionId string]])return InvokeVoid(0x2C863ACDCD12B3DB,missionId)end;
	NetworkSetCurrentChatOption=function(newChatOption--[[@param newChatOption integer]])return InvokeVoid(0x3DAD00265FBF356B,newChatOption)end;
	--[=[mpSettingSpawn:

enum eMpSettingSpawn
{
	MP_SETTING_SPAWN_NULL,
	MP_SETTING_SPAWN_PROPERTY,
	MP_SETTING_SPAWN_LAST_POSITION,
	MP_SETTING_SPAWN_GARAGE,
	MP_SETTING_SPAWN_RANDOM,
	MP_SETTING_SPAWN_PRIVATE_YACHT,
	MP_SETTING_SPAWN_OFFICE,
	MP_SETTING_SPAWN_CLUBHOUSE,
	MP_SETTING_SPAWN_IE_WAREHOUSE,
	MP_SETTING_SPAWN_BUNKER,
	MP_SETTING_SPAWN_HANGAR,
	MP_SETTING_SPAWN_DEFUNCT_BASE,
	MP_SETTING_SPAWN_NIGHTCLUB,
	MP_SETTING_SPAWN_ARENA_GARAGE,
	MP_SETTING_SPAWN_CASINO_APARTMENT,
	MP_SETTING_SPAWN_ARCADE,
	MP_SETTING_SPAWN_SUBMARINE,
	MP_SETTING_SPAWN_CAR_MEET,
	MP_SETTING_SPAWN_AUTO_SHOP,
	MP_SETTING_SPAWN_FIXER_HQ,
	MP_SETTING_SPAWN_MAX,
};]=]
	NetworkSetCurrentSpawnLocationOption=function(mpSettingSpawn--[[@param mpSettingSpawn integer]])return InvokeVoid(0xAA6D5451DC3448B6,mpSettingSpawn)end;
	--[=[Used by MetricVEHICLE_DIST_DRIVEN]=]
	NetworkSetVehicleDrivenInTestDrive=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x8C70252FC40F320B,toggle)end;
	--[=[Sets 'loc' variable used in MetricVEHICLE_DIST_DRIVEN]=]
	NetworkSetVehicleDrivenLocation=function(location--[[@param location integer]])return InvokeVoid(0xA0CE91E47531D3BB,location)end;
	NetworkResurrectLocalPlayer=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],heading--[[@param heading number]],p4--[[@param p4 boolean]],changetime--[[@param changetime boolean]],p6--[[@param p6 boolean]],p7--[[@param p7 integer]],p8--[[@param p8 integer]])return InvokeVoid(0xEA23C49EAA83ACFB,x+.0,y+.0,z+.0,heading+.0,p4,changetime,p6,p7,p8)end;
	NetworkSetLocalPlayerInvincibleTime=function(time--[[@param time integer]])return InvokeVoid(0x2D95C7E2D7E07307,time)end;
	NetworkIsLocalPlayerInvincible=function()return InvokeBool(0x8A8694B48715B000)end;---@return boolean
	NetworkDisableInvincibleFlashing=function(player--[[@param player integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x9DD368BF06983221,player,toggle)end;
	NetworkPatchPostCutsceneHs4fTunEnt=function(ped--[[@param ped integer]])return InvokeVoid(0xF0BC9BCD24A511D5,ped)end;
	NetworkSetLocalPlayerSyncLookAt=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x524FF0AEFF9C3973,toggle)end;
	NetworkHasEntityBeenRegisteredWithThisThread=function(entity--[[@param entity integer]])return InvokeBool(0xB07D3185E11657A5,entity)end;---@return boolean
	NetworkGetNetworkIdFromEntity=function(entity--[[@param entity integer]])return InvokeInt(0xA11700682F3AD45C,entity)end;---@return integer
	NetworkGetEntityFromNetworkId=function(netId--[[@param netId integer]])return InvokeInt(0xCE4E5D9B0A4FF560,netId)end;---@return integer
	NetworkGetEntityIsNetworked=function(entity--[[@param entity integer]])return InvokeBool(0xC7827959479DCC78,entity)end;---@return boolean
	NetworkGetEntityIsLocal=function(entity--[[@param entity integer]])return InvokeBool(0x0991549DE4D64762,entity)end;---@return boolean
	NetworkRegisterEntityAsNetworked=function(entity--[[@param entity integer]])return InvokeVoid(0x06FAACD625D80CAA,entity)end;
	NetworkUnregisterNetworkedEntity=function(entity--[[@param entity integer]])return InvokeVoid(0x7368E683BB9038D6,entity)end;
	NetworkDoesNetworkIdExist=function(netId--[[@param netId integer]])return InvokeBool(0x38CE16C96BD11344,netId)end;---@return boolean
	NetworkDoesEntityExistWithNetworkId=function(netId--[[@param netId integer]])return InvokeBool(0x18A47D074708FD68,netId)end;---@return boolean
	NetworkRequestControlOfNetworkId=function(netId--[[@param netId integer]])return InvokeBool(0xA670B3662FAFFBD0,netId)end;---@return boolean
	NetworkHasControlOfNetworkId=function(netId--[[@param netId integer]])return InvokeBool(0x4D36070FE0215186,netId)end;---@return boolean
	--[=[Returns true if the specified network id is controlled by someone else.]=]
	NetworkIsNetworkIdRemotelyControlled=function(netId--[[@param netId integer]])return InvokeBool(0x7242F8B741CE1086,netId)end;---@return boolean
	NetworkRequestControlOfEntity=function(entity--[[@param entity integer]])return InvokeBool(0xB69317BF5E782347,entity)end;---@return boolean
	NetworkRequestControlOfDoor=function(doorID--[[@param doorID integer]])return InvokeBool(0x870DDFD5A4A796E4,doorID)end;---@return boolean
	NetworkHasControlOfEntity=function(entity--[[@param entity integer]])return InvokeBool(0x01BF60A500E28887,entity)end;---@return boolean
	NetworkHasControlOfPickup=function(pickup--[[@param pickup integer]])return InvokeBool(0x5BC9495F0B3B6FA6,pickup)end;---@return boolean
	NetworkHasControlOfDoor=function(doorHash--[[@param doorHash integer]])return InvokeBool(0xCB3C68ADB06195DF,doorHash)end;---@return boolean
	NetworkIsDoorNetworked=function(doorHash--[[@param doorHash integer]])return InvokeBool(0xC01E93FAC20C3346,doorHash)end;---@return boolean
	--[=[calls from vehicle to net.
]=]
	VehToNet=function(vehicle--[[@param vehicle integer]])return InvokeInt(0xB4C94523F023419C,vehicle)end;---@return integer
	--[=[gets the network id of a ped]=]
	PedToNet=function(ped--[[@param ped integer]])return InvokeInt(0x0EDEC3C276198689,ped)end;---@return integer
	--[=[Lets objects spawn online simply do it like this:

int createdObject = OBJ_TO_NET(CREATE_OBJECT_NO_OFFSET(oball, pCoords.x, pCoords.y, pCoords.z, 1, 0, 0));]=]
	ObjToNet=function(object--[[@param object integer]])return InvokeInt(0x99BFDC94A603E541,object)end;---@return integer
	NetToVeh=function(netHandle--[[@param netHandle integer]])return InvokeInt(0x367B936610BA360C,netHandle)end;---@return integer
	--[=[gets the ped id of a network id]=]
	NetToPed=function(netHandle--[[@param netHandle integer]])return InvokeInt(0xBDCD95FC216A8B3E,netHandle)end;---@return integer
	--[=[gets the object id of a network id]=]
	NetToObj=function(netHandle--[[@param netHandle integer]])return InvokeInt(0xD8515F5FEA14CB3F,netHandle)end;---@return integer
	--[=[gets the entity id of a network id]=]
	NetToEnt=function(netHandle--[[@param netHandle integer]])return InvokeInt(0xBFFEAB45A9A9094A,netHandle)end;---@return integer
	NetworkGetLocalHandle=function(gamerHandle--[[@param gamerHandle any*]],gamerHandleSize--[[@param gamerHandleSize integer]])return InvokeVoid(0xE86051786B66CD8E,gamerHandle,gamerHandleSize)end;
	NetworkHandleFromUserId=function(userId--[[@param userId string]],gamerHandle--[[@param gamerHandle any*]],gamerHandleSize--[[@param gamerHandleSize integer]])return InvokeVoid(0xDCD51DD8F87AEC5C,userId,gamerHandle,gamerHandleSize)end;
	NetworkHandleFromMemberId=function(memberId--[[@param memberId string]],gamerHandle--[[@param gamerHandle any*]],gamerHandleSize--[[@param gamerHandleSize integer]])return InvokeVoid(0xA0FD21BED61E5C4C,memberId,gamerHandle,gamerHandleSize)end;
	NetworkHandleFromPlayer=function(player--[[@param player integer]],gamerHandle--[[@param gamerHandle any*]],gamerHandleSize--[[@param gamerHandleSize integer]])return InvokeVoid(0x388EB2B86C73B6B3,player,gamerHandle,gamerHandleSize)end;
	NetworkHashFromPlayerHandle=function(player--[[@param player integer]])return InvokeInt(0xBC1D768F2F5D6C05,player)end;---@return integer
	NetworkHashFromGamerHandle=function(gamerHandle--[[@param gamerHandle any*]])return InvokeInt(0x58575AC3CF2CA8EC,gamerHandle)end;---@return integer
	NetworkHandleFromFriend=function(friendIndex--[[@param friendIndex integer]],gamerHandle--[[@param gamerHandle any*]],gamerHandleSize--[[@param gamerHandleSize integer]])return InvokeVoid(0xD45CB817D7E177D2,friendIndex,gamerHandle,gamerHandleSize)end;
	NetworkGamertagFromHandleStart=function(gamerHandle--[[@param gamerHandle any*]])return InvokeBool(0x9F0C0A981D73FA56,gamerHandle)end;---@return boolean
	NetworkGamertagFromHandlePending=function()return InvokeBool(0xB071E27958EF4CF0)end;---@return boolean
	NetworkGamertagFromHandleSucceeded=function()return InvokeBool(0xFD00798DBA7523DD)end;---@return boolean
	NetworkGetGamertagFromHandle=function(gamerHandle--[[@param gamerHandle any*]])return InvokeString(0x426141162EBE5CDB,gamerHandle)end;---@return string
	--[=[Hardcoded to return -1.]=]
	NetworkDisplaynamesFromHandlesStart=function(p0--[[@param p0 any*]],p1--[[@param p1 any]])return InvokeInt(0xD66C9E72B3CC4982,p0,p1)end;---@return integer
	--[=[This function is hard-coded to always return 0.]=]
	NetworkGetDisplaynamesFromHandles=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeInt(0x58CC181719256197,p0,p1,p2)end;---@return integer
	NetworkAreHandlesTheSame=function(gamerHandle1--[[@param gamerHandle1 any*]],gamerHandle2--[[@param gamerHandle2 any*]])return InvokeBool(0x57DBA049E110F217,gamerHandle1,gamerHandle2)end;---@return boolean
	NetworkIsHandleValid=function(gamerHandle--[[@param gamerHandle any*]],gamerHandleSize--[[@param gamerHandleSize integer]])return InvokeBool(0x6F79B93B0A8E4133,gamerHandle,gamerHandleSize)end;---@return boolean
	NetworkGetPlayerFromGamerHandle=function(gamerHandle--[[@param gamerHandle any*]])return InvokeInt(0xCE5F689CF5A0A49D,gamerHandle)end;---@return integer
	NetworkMemberIdFromGamerHandle=function(gamerHandle--[[@param gamerHandle any*]])return InvokeString(0xC82630132081BB6F,gamerHandle)end;---@return string
	NetworkIsGamerInMySession=function(gamerHandle--[[@param gamerHandle any*]])return InvokeBool(0x0F10B05DDF8D16E9,gamerHandle)end;---@return boolean
	NetworkShowProfileUi=function(gamerHandle--[[@param gamerHandle any*]])return InvokeVoid(0x859ED1CEA343FCA8,gamerHandle)end;
	--[=[Returns the name of a given player. Returns "**Invalid**" if rlGamerInfo of the given player cannot be retrieved or the player doesn't exist.]=]
	NetworkPlayerGetName=function(player--[[@param player integer]])return InvokeString(0x7718D2E2060837D2,player)end;---@return string
	--[=[Returns a string of the player's Rockstar Id. 
Takes a 24 char buffer. Returns the buffer or "**Invalid**" if rlGamerInfo of the given player cannot be retrieved or the player doesn't exist.]=]
	NetworkPlayerGetUserid=function(player--[[@param player integer]],userID--[[@param userID integer*]])return InvokeString(0x4927FC39CD0869A0,player,userID)end;---@return string
	--[=[Checks if a specific value (BYTE) in CNetGamePlayer is nonzero.
Returns always false in Singleplayer.

No longer used for dev checks since first mods were released on PS3 & 360.
R* now checks with the IS_DLC_PRESENT native for the dlc hash 2532323046,
if that is present it will unlock dev stuff.]=]
	NetworkPlayerIsRockstarDev=function(player--[[@param player integer]])return InvokeBool(0x544ABDDA3B409B6D,player)end;---@return boolean
	NetworkPlayerIndexIsCheater=function(player--[[@param player integer]])return InvokeBool(0x565E430DB3B05BEC,player)end;---@return boolean
	NetworkEntityGetObjectId=function(entity--[[@param entity integer]])return InvokeInt(0x815F18AD865F057F,entity)end;---@return integer
	--[=[I've had this return the player's ped handle sometimes, but also other random entities.
Whatever p0 is, it's at least not synced to other players.
At least not all the time, some p0 values actually output the same entity, (different handle of course, but same entity).
But another p0 value may return an entity for player x, but not for player y (it'll just return -1 even if the entity exists on both clients).

Returns an entity handle or -1, value changes based on p0's value.]=]
	NetworkGetEntityFromObjectId=function(p0--[[@param p0 any]])return InvokeInt(0x37D5F739FD494675,p0)end;---@return integer
	NetworkIsInactiveProfile=function(p0--[[@param p0 any*]])return InvokeBool(0x7E58745504313A2E,p0)end;---@return boolean
	NetworkGetMaxFriends=function()return InvokeInt(0xAFEBB0D5D8F687D2)end;---@return integer
	NetworkGetFriendCount=function()return InvokeInt(0x203F1CFD823B27A4)end;---@return integer
	NetworkGetFriendName=function(friendIndex--[[@param friendIndex integer]])return InvokeString(0xE11EBBB2A783FE8B,friendIndex)end;---@return string
	NetworkGetFriendDisplayName=function(friendIndex--[[@param friendIndex integer]])return InvokeString(0x4164F227D052E293,friendIndex)end;---@return string
	NetworkIsFriendOnline=function(name--[[@param name string]])return InvokeBool(0x425A44533437B64D,name)end;---@return boolean
	NetworkIsFriendHandleOnline=function(gamerHandle--[[@param gamerHandle any*]])return InvokeBool(0x87EB7A3FFCB314DB,gamerHandle)end;---@return boolean
	--[=[In scripts R* calls 'NETWORK_GET_FRIEND_NAME' in this param.]=]
	NetworkIsFriendInSameTitle=function(friendName--[[@param friendName string]])return InvokeBool(0x2EA9A3BEDF3F17B8,friendName)end;---@return boolean
	NetworkIsFriendInMultiplayer=function(friendName--[[@param friendName string]])return InvokeBool(0x57005C18827F3A28,friendName)end;---@return boolean
	NetworkIsFriend=function(gamerHandle--[[@param gamerHandle any*]])return InvokeBool(0x1A24A179F9B31654,gamerHandle)end;---@return boolean
	--[=[This function is hard-coded to always return 0.]=]
	NetworkIsPendingFriend=function(p0--[[@param p0 any]])return InvokeBool(0x0BE73DA6984A6E33,p0)end;---@return boolean
	NetworkIsAddingFriend=function()return InvokeBool(0x6EA101606F6E4D81)end;---@return boolean
	NetworkAddFriend=function(gamerHandle--[[@param gamerHandle any*]],message--[[@param message string]])return InvokeBool(0x8E02D73914064223,gamerHandle,message)end;---@return boolean
	NetworkIsFriendIndexOnline=function(friendIndex--[[@param friendIndex integer]])return InvokeBool(0xBAD8F2A42B844821,friendIndex)end;---@return boolean
	NetworkSetPlayerIsPassive=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x1B857666604B1A74,toggle)end;
	NetworkGetPlayerOwnsWaypoint=function(player--[[@param player integer]])return InvokeBool(0x82377B65E943F72D,player)end;---@return boolean
	NetworkCanSetWaypoint=function()return InvokeBool(0xC927EC229934AF60)end;---@return boolean
	NetworkIgnoreRemoteWaypoints=function()return InvokeVoid(0x4C2A9FDC22377075)end;
	NetworkIsPlayerOnBlocklist=function(gamerHandle--[[@param gamerHandle any*]])return InvokeBool(0xAD4326FCA30D62F8,gamerHandle)end;---@return boolean
	NetworkSetScriptAutomuted=function(p0--[[@param p0 any]])return InvokeBool(0xB309EBEA797E001F,p0)end;---@return boolean
	NetworkHasAutomuteOverride=function()return InvokeBool(0x26F07DD83A5F7F98)end;---@return boolean
	NetworkHasHeadset=function()return InvokeBool(0xE870F9F1F7B4F1FA)end;---@return boolean
	NetworkSetLookAtTalkers=function(p0--[[@param p0 boolean]])return InvokeVoid(0x7D395EA61622E116,p0)end;
	NetworkIsPushToTalkActive=function()return InvokeBool(0xC0D2AF00BCC234CA)end;---@return boolean
	NetworkGamerHasHeadset=function(gamerHandle--[[@param gamerHandle any*]])return InvokeBool(0xF2FD55CB574BCC55,gamerHandle)end;---@return boolean
	NetworkIsGamerTalking=function(gamerHandle--[[@param gamerHandle any*]])return InvokeBool(0x71C33B22606CD88A,gamerHandle)end;---@return boolean
	NetworkPermissionsHasGamerRecord=function(gamerHandle--[[@param gamerHandle any*]])return InvokeBool(0x559EBF901A8C68E0,gamerHandle)end;---@return boolean
	NetworkCanCommunicateWithGamer=function(gamerHandle--[[@param gamerHandle any*]])return InvokeBool(0x8F5D1AD832AEB06C,gamerHandle)end;---@return boolean
	NetworkCanTextChatWithGamer=function(gamerHandle--[[@param gamerHandle any*]])return InvokeBool(0xA150A4F065806B1F,gamerHandle)end;---@return boolean
	NetworkIsGamerMutedByMe=function(gamerHandle--[[@param gamerHandle any*]])return InvokeBool(0xCE60DE011B6C7978,gamerHandle)end;---@return boolean
	NetworkAmIMutedByGamer=function(gamerHandle--[[@param gamerHandle any*]])return InvokeBool(0xDF02A2C93F1F26DA,gamerHandle)end;---@return boolean
	NetworkIsGamerBlockedByMe=function(gamerHandle--[[@param gamerHandle any*]])return InvokeBool(0xE944C4F5AF1B5883,gamerHandle)end;---@return boolean
	NetworkAmIBlockedByGamer=function(gamerHandle--[[@param gamerHandle any*]])return InvokeBool(0x15337C7C268A27B2,gamerHandle)end;---@return boolean
	NetworkCanViewGamerUserContent=function(gamerHandle--[[@param gamerHandle any*]])return InvokeBool(0xB57A49545BA53CE7,gamerHandle)end;---@return boolean
	NetworkHasViewGamerUserContentResult=function(gamerHandle--[[@param gamerHandle any*]])return InvokeBool(0xCCA4318E1AB03F1F,gamerHandle)end;---@return boolean
	NetworkCanPlayMultiplayerWithGamer=function(gamerHandle--[[@param gamerHandle any*]])return InvokeBool(0x07DD29D5E22763F1,gamerHandle)end;---@return boolean
	NetworkCanGamerPlayMultiplayerWithMe=function(gamerHandle--[[@param gamerHandle any*]])return InvokeBool(0x135F9B7B7ADD2185,gamerHandle)end;---@return boolean
	NetworkCanSendLocalInvite=function(gamerHandle--[[@param gamerHandle any*]])return InvokeBool(0x021ABCBD98EC4320,gamerHandle)end;---@return boolean
	NetworkCanReceiveLocalInvite=function(gamerHandle--[[@param gamerHandle any*]])return InvokeBool(0x421E34C55F125964,gamerHandle)end;---@return boolean
	--[=[returns true if someone is screaming or talking in a microphone]=]
	NetworkIsPlayerTalking=function(player--[[@param player integer]])return InvokeBool(0x031E11F3D447647E,player)end;---@return boolean
	NetworkPlayerHasHeadset=function(player--[[@param player integer]])return InvokeBool(0x3FB99A8B08D18FD6,player)end;---@return boolean
	NetworkIsPlayerMutedByMe=function(player--[[@param player integer]])return InvokeBool(0x8C71288AE68EDE39,player)end;---@return boolean
	NetworkAmIMutedByPlayer=function(player--[[@param player integer]])return InvokeBool(0x9D6981DFC91A8604,player)end;---@return boolean
	NetworkIsPlayerBlockedByMe=function(player--[[@param player integer]])return InvokeBool(0x57AF1F8E27483721,player)end;---@return boolean
	NetworkAmIBlockedByPlayer=function(player--[[@param player integer]])return InvokeBool(0x87F395D957D4353D,player)end;---@return boolean
	NetworkGetPlayerLoudness=function(player--[[@param player integer]])return InvokeFloat(0x21A1684A25C2867F,player)end;---@return number
	NetworkSetTalkerProximity=function(value--[[@param value number]])return InvokeVoid(0xCBF12D65F95AD686,value+.0)end;
	NetworkGetTalkerProximity=function()return InvokeFloat(0x84F0F13120B4E098)end;---@return number
	NetworkSetVoiceActive=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xBABEC9E69A91C57B,toggle)end;
	NetworkRemainInGameChat=function(p0--[[@param p0 boolean]])return InvokeVoid(0xCFEB46DCD7D8D5EB,p0)end;
	NetworkOverrideTransitionChat=function(p0--[[@param p0 boolean]])return InvokeVoid(0xAF66059A131AA269,p0)end;
	NetworkSetTeamOnlyChat=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xD5B4883AC32F24C3,toggle)end;
	NetworkSetScriptControllingTeams=function(p0--[[@param p0 any]])return InvokeVoid(0x265559DA40B3F327,p0)end;
	NetworkSetSameTeamAsLocalPlayer=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeBool(0x4348BFDA56023A2F,p0,p1)end;---@return boolean
	NetworkOverrideTeamRestrictions=function(team--[[@param team integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x6F697A66CE78674E,team,toggle)end;
	NetworkSetOverrideSpectatorMode=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x70DA3BF8DACD3210,toggle)end;
	NetworkSetOverrideTutorialSessionChat=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x3C5C1E2C2FF814B1,toggle)end;
	NetworkSetProximityAffectsTeam=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x9D7AFCBF21C51712,toggle)end;
	NetworkSetNoSpectatorChat=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xF46A1E03E8755980,toggle)end;
	NetworkSetIgnoreSpectatorChatLimitsSameTeam=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x6A5D89D7769A40D8,toggle)end;
	--[=[Could possibly bypass being muted or automatically muted]=]
	NetworkOverrideChatRestrictions=function(player--[[@param player integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x3039AE5AD2C9C0C4,player,toggle)end;
	--[=[This is used alongside the native,
'NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS'. Read its description for more info.]=]
	NetworkOverrideSendRestrictions=function(player--[[@param player integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x97DD4C5944CC2E6A,player,toggle)end;
	NetworkOverrideSendRestrictionsAll=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x57B192B4D4AD23D5,toggle)end;
	--[=[R* uses this to hear all player when spectating. 
It allows you to hear other online players when their chat is on none, crew and or friends]=]
	NetworkOverrideReceiveRestrictions=function(player--[[@param player integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xDDF73E2B1FEC5AB4,player,toggle)end;
	--[=[p0 is always false in scripts.]=]
	NetworkOverrideReceiveRestrictionsAll=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x0FF2862B61A58AF9,toggle)end;
	NetworkSetVoiceChannel=function(channel--[[@param channel integer]])return InvokeVoid(0xEF6212C2EFEF1A23,channel)end;
	NetworkClearVoiceChannel=function()return InvokeVoid(0xE036A705F989E049)end;
	NetworkApplyVoiceProximityOverride=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0xDBD2056652689917,x+.0,y+.0,z+.0)end;
	NetworkClearVoiceProximityOverride=function()return InvokeVoid(0xF03755696450470C)end;
	NetworkEnableVoiceBandwidthRestriction=function(player--[[@param player integer]])return InvokeVoid(0x5E3AA4CA2B6FB0EE,player)end;
	NetworkDisableVoiceBandwidthRestriction=function(player--[[@param player integer]])return InvokeVoid(0xCA575C391FEA25CC,player)end;
	--[=[NETWORK_GET_M[A-U]]=]
	NetworkGetMuteCountForPlayer=function(p0--[[@param p0 integer]],p1--[[@param p1 number*]],p2--[[@param p2 number*]])return InvokeVoid(0xADB57E5B663CCA8B,p0,p1,p2)end;
	NetworkSetSpectatorToNonSpectatorTextChat=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x8EF52ACAECC51D9C,toggle)end;
	--[=[Same as _IS_TEXT_CHAT_ACTIVE, except it does not check if the text chat HUD component is initialized, and therefore may crash.]=]
	NetworkTextChatIsTyping=function()return InvokeBool(0x5FCF4D7069B09026)end;---@return boolean
	--[=[Starts a new singleplayer game (at the prologue).]=]
	ShutdownAndLaunchSinglePlayerGame=function()return InvokeVoid(0x593850C16A36B692)end;
	--[=[In singleplayer this will re-load your game.

In FiveM / GTA:Online this disconnects you from the session, and starts loading single player, however you still remain connected to the server (only if you're the host, if you're not then you also (most likely) get disconnected from the server) and other players will not be able to join until you exit the game.

You might need to DoScreenFadeIn and ShutdownLoadingScreen otherwise you probably won't end up loading into SP at all.

Somewhat related note: opening the pause menu after loading into this 'singleplayer' mode crashes the game.]=]
	ShutdownAndLoadMostRecentSave=function()return InvokeBool(0x9ECA15ADFE141431)end;---@return boolean
	NetworkSetFriendlyFireOption=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xF808475FA571D823,toggle)end;
	--[=[This native does absolutely nothing, just a nullsub]=]
	NetworkSetRichPresence=function(p0--[[@param p0 integer]],p1--[[@param p1 integer]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x1DCCACDCFC569362,p0,p1,p2,p3)end;
	--[=[This native does absolutely nothing, just a nullsub]=]
	NetworkSetRichPresenceString=function(p0--[[@param p0 integer]],textLabel--[[@param textLabel string]])return InvokeVoid(0x3E200C2BCF4164EB,p0,textLabel)end;
	NetworkGetTimeoutTime=function()return InvokeInt(0x5ED0356A0CE3A34F)end;---@return integer
	--[=[p4 and p5 are always 0 in scripts]=]
	NetworkLeavePedBehindBeforeWarp=function(player--[[@param player integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],p4--[[@param p4 boolean]],p5--[[@param p5 boolean]])return InvokeVoid(0x9769F811D1785B03,player,x+.0,y+.0,z+.0,p4,p5)end;
	NetworkLeavePedBehindBeforeCutscene=function(player--[[@param player integer]],p1--[[@param p1 boolean]])return InvokeVoid(0xBF22E0F32968E967,player,p1)end;
	--[=[entity must be a valid entity; ped can be NULL]=]
	RemoveAllStickyBombsFromEntity=function(entity--[[@param entity integer]],ped--[[@param ped integer]])return InvokeVoid(0x715135F4B82AC90D,entity,ped)end;
	NetworkKeepEntityCollisionDisabledAfterAnimScene=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x17C9E241111A674D,p0,p1)end;
	NetworkIsAnyPlayerNear=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]],p5--[[@param p5 any]],p6--[[@param p6 any]])return InvokeBool(0x2E4C123D1C8A710E,p0,p1,p2,p3,p4,p5,p6)end;---@return boolean
	NetworkClanServiceIsValid=function()return InvokeBool(0x579CCED0265D4896)end;---@return boolean
	NetworkClanPlayerIsActive=function(gamerHandle--[[@param gamerHandle any*]])return InvokeBool(0xB124B57F571D8F18,gamerHandle)end;---@return boolean
	--[=[bufferSize is 35 in the scripts.

bufferSize is the elementCount of p0(desc), sizeof(p0) == 280 == p1*8 == 35 * 8, p2(netHandle) is obtained from NETWORK::NETWORK_HANDLE_FROM_PLAYER.  And no, I can't explain why 35 * sizeof(int) == 280 and not 140, but I'll get back to you on that.

the answer is: because p0 an int64_t* / int64_t[35].  and FYI p2 is an int64_t[13]

https://pastebin.com/cSZniHak]=]
	NetworkClanPlayerGetDesc=function(clanDesc--[[@param clanDesc any*]],bufferSize--[[@param bufferSize integer]],gamerHandle--[[@param gamerHandle any*]])return InvokeBool(0xEEE6EACBE8874FBA,clanDesc,bufferSize,gamerHandle)end;---@return boolean
	--[=[bufferSize is 35 in the scripts.]=]
	NetworkClanIsRockstarClan=function(clanDesc--[[@param clanDesc any*]],bufferSize--[[@param bufferSize integer]])return InvokeBool(0x7543BB439F63792B,clanDesc,bufferSize)end;---@return boolean
	--[=[bufferSize is 35 in the scripts.]=]
	NetworkClanGetUiFormattedTag=function(clanDesc--[[@param clanDesc any*]],bufferSize--[[@param bufferSize integer]],formattedTag--[[@param formattedTag integer*]])return InvokeVoid(0xF45352426FF3A4F0,clanDesc,bufferSize,formattedTag)end;
	NetworkClanGetLocalMembershipsCount=function()return InvokeInt(0x1F471B79ACC90BEF)end;---@return integer
	NetworkClanGetMembershipDesc=function(memberDesc--[[@param memberDesc any*]],p1--[[@param p1 integer]])return InvokeBool(0x48DE78AF2C8885B8,memberDesc,p1)end;---@return boolean
	NetworkClanDownloadMembership=function(gamerHandle--[[@param gamerHandle any*]])return InvokeBool(0xA989044E70010ABE,gamerHandle)end;---@return boolean
	NetworkClanDownloadMembershipPending=function(p0--[[@param p0 any*]])return InvokeBool(0x5B9E023DC6EBEDC0,p0)end;---@return boolean
	NetworkClanAnyDownloadMembershipPending=function()return InvokeBool(0xB3F64A6A91432477)end;---@return boolean
	NetworkClanRemoteMembershipsAreInCache=function(p0--[[@param p0 integer*]])return InvokeBool(0xBB6E6FEE99D866B2,p0)end;---@return boolean
	NetworkClanGetMembershipCount=function(p0--[[@param p0 integer*]])return InvokeInt(0xAAB11F6C4ADBC2C1,p0)end;---@return integer
	NetworkClanGetMembershipValid=function(p0--[[@param p0 integer*]],p1--[[@param p1 any]])return InvokeBool(0x48A59CF88D43DF0E,p0,p1)end;---@return boolean
	NetworkClanGetMembership=function(p0--[[@param p0 integer*]],clanMembership--[[@param clanMembership any*]],p2--[[@param p2 integer]])return InvokeBool(0xC8BC2011F67B3411,p0,clanMembership,p2)end;---@return boolean
	NetworkClanJoin=function(clanDesc--[[@param clanDesc integer]])return InvokeBool(0x9FAAA4F4FC71F87F,clanDesc)end;---@return boolean
	--[=[Only documented...

Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json]=]
	NetworkClanCrewinfoGetStringValue=function(animDict--[[@param animDict string]],animName--[[@param animName string]])return InvokeBool(0x729E3401F0430686,animDict,animName)end;---@return boolean
	NetworkClanCrewinfoGetCrewranktitle=function(p0--[[@param p0 integer]],p1--[[@param p1 string]])return InvokeBool(0x2B51EDBEFC301339,p0,p1)end;---@return boolean
	NetworkClanHasCrewinfoMetadataBeenReceived=function()return InvokeBool(0xC32EA7A2F6CA7557)end;---@return boolean
	NetworkClanGetEmblemTxdName=function(netHandle--[[@param netHandle any*]],txdName--[[@param txdName integer*]])return InvokeBool(0x5835D9CD92E83184,netHandle,txdName)end;---@return boolean
	NetworkClanRequestEmblem=function(p0--[[@param p0 any]])return InvokeBool(0x13518FF1C6B28938,p0)end;---@return boolean
	NetworkClanIsEmblemReady=function(p0--[[@param p0 any]],p1--[[@param p1 any*]])return InvokeBool(0xA134777FF7F33331,p0,p1)end;---@return boolean
	NetworkClanReleaseEmblem=function(p0--[[@param p0 any]])return InvokeVoid(0x113E6E3E50E286B0,p0)end;
	NetworkGetPrimaryClanDataClear=function()return InvokeBool(0x9AA46BADAD0E27ED)end;---@return boolean
	NetworkGetPrimaryClanDataCancel=function()return InvokeVoid(0x042E4B70B93E6054)end;
	NetworkGetPrimaryClanDataStart=function(p0--[[@param p0 any*]],p1--[[@param p1 any]])return InvokeBool(0xCE86D8191B762107,p0,p1)end;---@return boolean
	NetworkGetPrimaryClanDataPending=function()return InvokeBool(0xB5074DB804E28CE7)end;---@return boolean
	NetworkGetPrimaryClanDataSuccess=function()return InvokeBool(0x5B4F04F19376A0BA)end;---@return boolean
	NetworkGetPrimaryClanDataNew=function(p0--[[@param p0 any*]],p1--[[@param p1 any*]])return InvokeBool(0xC080FF658B2E41DA,p0,p1)end;---@return boolean
	--[=[Whether or not another player is allowed to take control of the entity]=]
	SetNetworkIdCanMigrate=function(netId--[[@param netId integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x299EEB23175895FC,netId,toggle)end;
	SetNetworkIdExistsOnAllMachines=function(netId--[[@param netId integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xE05E81A888FA63C8,netId,toggle)end;
	SetNetworkIdAlwaysExistsForPlayer=function(netId--[[@param netId integer]],player--[[@param player integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xA8A024587329F36A,netId,player,toggle)end;
	--[=["No Reassign" in CPhysicalScriptGameStateDataNode]=]
	SetNetworkIdCanBeReassigned=function(netId--[[@param netId integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x9D724B400A7E8FFC,netId,toggle)end;
	NetworkSetEntityCanBlend=function(entity--[[@param entity integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xD830567D88A1E873,entity,toggle)end;
	NetworkSetObjectCanBlendWhenFixed=function(object--[[@param object integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x0379DAF89BA09AA5,object,toggle)end;
	--[=[if set to true other network players can't see it
if set to false other network player can see it
=========================================
^^ I attempted this by grabbing an object with GET_ENTITY_PLAYER_IS_FREE_AIMING_AT and setting this naive no matter the toggle he could still see it.

pc or last gen?

^^ last-gen]=]
	NetworkSetEntityOnlyExistsForParticipants=function(entity--[[@param entity integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xF1CA12B18AEF5298,entity,toggle)end;
	SetNetworkIdVisibleInCutscene=function(netId--[[@param netId integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0xA6928482543022B4,netId,p1,p2)end;
	SetNetworkIdVisibleInCutsceneHack=function(netId--[[@param netId integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0x32EBD154CB6B8B99,netId,p1,p2)end;
	SetNetworkIdVisibleInCutsceneRemainHack=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x76B3F29D3F967692,p0,p1)end;
	SetNetworkCutsceneEntities=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xAAA553E7DD28A457,toggle)end;
	--[=[Getter for SET_NETWORK_CUTSCENE_ENTITIES.]=]
	AreCutsceneEntitiesNetworked=function()return InvokeBool(0x66D6A5E9C511214A)end;---@return boolean
	SetNetworkIdPassControlInTutorial=function(netId--[[@param netId integer]],state--[[@param state boolean]])return InvokeVoid(0x3FA36981311FA4FF,netId,state)end;
	IsNetworkIdOwnedByParticipant=function(netId--[[@param netId integer]])return InvokeBool(0xA1607996431332DF,netId)end;---@return boolean
	SetRemotePlayerVisibleInCutscene=function(player--[[@param player integer]],locallyVisible--[[@param locallyVisible boolean]])return InvokeVoid(0x96320E6549DAE7B4,player,locallyVisible)end;
	SetLocalPlayerVisibleInCutscene=function(p0--[[@param p0 boolean]],p1--[[@param p1 boolean]])return InvokeVoid(0xD1065D68947E7B6E,p0,p1)end;
	SetLocalPlayerInvisibleLocally=function(bIncludePlayersVehicle--[[@param bIncludePlayersVehicle boolean]])return InvokeVoid(0xE5F773C1A1D9D168,bIncludePlayersVehicle)end;
	SetLocalPlayerVisibleLocally=function(bIncludePlayersVehicle--[[@param bIncludePlayersVehicle boolean]])return InvokeVoid(0x7619364C82D3BF14,bIncludePlayersVehicle)end;
	SetPlayerInvisibleLocally=function(player--[[@param player integer]],bIncludePlayersVehicle--[[@param bIncludePlayersVehicle boolean]])return InvokeVoid(0x12B37D54667DB0B8,player,bIncludePlayersVehicle)end;
	SetPlayerVisibleLocally=function(player--[[@param player integer]],bIncludePlayersVehicle--[[@param bIncludePlayersVehicle boolean]])return InvokeVoid(0xFAA10F1FAFB11AF2,player,bIncludePlayersVehicle)end;
	--[=[Hardcoded to not work in SP.]=]
	FadeOutLocalPlayer=function(p0--[[@param p0 boolean]])return InvokeVoid(0x416DBD4CD6ED8DD2,p0)end;
	--[=[normal - transition like when your coming out of LSC
slow - transition like when you walk into a mission
 ]=]
	NetworkFadeOutEntity=function(entity--[[@param entity integer]],normal--[[@param normal boolean]],slow--[[@param slow boolean]])return InvokeVoid(0xDE564951F95E09ED,entity,normal,slow)end;
	--[=[state - 0 does 5 fades
state - 1 does 6 fades

p3: setting to 1 made vehicle fade in slower, probably "slow" as per NETWORK_FADE_OUT_ENTITY]=]
	NetworkFadeInEntity=function(entity--[[@param entity integer]],state--[[@param state boolean]],p2--[[@param p2 any]])return InvokeVoid(0x1F4ED342ACEFE62D,entity,state,p2)end;
	NetworkIsPlayerFading=function(player--[[@param player integer]])return InvokeBool(0x631DC5DFF4B110E3,player)end;---@return boolean
	NetworkIsEntityFading=function(entity--[[@param entity integer]])return InvokeBool(0x422F32CC7E56ABAD,entity)end;---@return boolean
	IsPlayerInCutscene=function(player--[[@param player integer]])return InvokeBool(0xE73092F4157CD126,player)end;---@return boolean
	SetEntityVisibleInCutscene=function(p0--[[@param p0 any]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0xE0031D3C8F36AB82,p0,p1,p2)end;
	--[=[Makes the provided entity visible for yourself for the current frame.]=]
	SetEntityLocallyInvisible=function(entity--[[@param entity integer]])return InvokeVoid(0xE135A9FF3F5D05D8,entity)end;
	SetEntityLocallyVisible=function(entity--[[@param entity integer]])return InvokeVoid(0x241E289B5C059EDC,entity)end;
	IsDamageTrackerActiveOnNetworkId=function(netID--[[@param netID integer]])return InvokeBool(0x6E192E33AD436366,netID)end;---@return boolean
	ActivateDamageTrackerOnNetworkId=function(netID--[[@param netID integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xD45B1FFCCD52FF19,netID,toggle)end;
	IsDamageTrackerActiveOnPlayer=function(player--[[@param player integer]])return InvokeBool(0xB2092A1EAA7FD45F,player)end;---@return boolean
	ActivateDamageTrackerOnPlayer=function(player--[[@param player integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xBEC0816FF5ACBCDA,player,toggle)end;
	IsSphereVisibleToAnotherMachine=function(p0--[[@param p0 number]],p1--[[@param p1 number]],p2--[[@param p2 number]],p3--[[@param p3 number]])return InvokeBool(0xD82CF8E64C8729D8,p0+.0,p1+.0,p2+.0,p3+.0)end;---@return boolean
	IsSphereVisibleToPlayer=function(p0--[[@param p0 any]],p1--[[@param p1 number]],p2--[[@param p2 number]],p3--[[@param p3 number]],p4--[[@param p4 number]])return InvokeBool(0xDC3A310219E5DA62,p0,p1+.0,p2+.0,p3+.0,p4+.0)end;---@return boolean
	ReserveNetworkMissionObjects=function(amount--[[@param amount integer]])return InvokeVoid(0x4E5C93BD0C32FBF8,amount)end;
	ReserveNetworkMissionPeds=function(amount--[[@param amount integer]])return InvokeVoid(0xB60FEBA45333D36F,amount)end;
	ReserveNetworkMissionVehicles=function(amount--[[@param amount integer]])return InvokeVoid(0x76B02E21ED27A469,amount)end;
	ReserveLocalNetworkMissionObjects=function(amount--[[@param amount integer]])return InvokeVoid(0x797F9C5E661D920E,amount)end;
	ReserveLocalNetworkMissionPeds=function(amount--[[@param amount integer]])return InvokeVoid(0x2C8DF5D129595281,amount)end;
	ReserveLocalNetworkMissionVehicles=function(amount--[[@param amount integer]])return InvokeVoid(0x42613035157E4208,amount)end;
	CanRegisterMissionObjects=function(amount--[[@param amount integer]])return InvokeBool(0x800DD4721A8B008B,amount)end;---@return boolean
	CanRegisterMissionPeds=function(amount--[[@param amount integer]])return InvokeBool(0xBCBF4FEF9FA5D781,amount)end;---@return boolean
	CanRegisterMissionVehicles=function(amount--[[@param amount integer]])return InvokeBool(0x7277F1F2E085EE74,amount)end;---@return boolean
	CanRegisterMissionPickups=function(amount--[[@param amount integer]])return InvokeBool(0x0A49D1CB6E34AF72,amount)end;---@return boolean
	CanRegisterMissionDoors=function(p0--[[@param p0 any]])return InvokeBool(0xE16AA70CE9BEEDC3,p0)end;---@return boolean
	CanRegisterMissionEntities=function(ped_amt--[[@param ped_amt integer]],vehicle_amt--[[@param vehicle_amt integer]],object_amt--[[@param object_amt integer]],pickup_amt--[[@param pickup_amt integer]])return InvokeBool(0x69778E7564BADE6D,ped_amt,vehicle_amt,object_amt,pickup_amt)end;---@return boolean
	--[=[p0 appears to be for MP]=]
	GetNumReservedMissionObjects=function(p0--[[@param p0 boolean]],p1--[[@param p1 any]])return InvokeInt(0xAA81B5F10BC43AC2,p0,p1)end;---@return integer
	--[=[p0 appears to be for MP]=]
	GetNumReservedMissionPeds=function(p0--[[@param p0 boolean]],p1--[[@param p1 any]])return InvokeInt(0x1F13D5AE5CB17E17,p0,p1)end;---@return integer
	--[=[p0 appears to be for MP]=]
	GetNumReservedMissionVehicles=function(p0--[[@param p0 boolean]],p1--[[@param p1 any]])return InvokeInt(0xCF3A965906452031,p0,p1)end;---@return integer
	GetNumCreatedMissionObjects=function(p0--[[@param p0 boolean]])return InvokeInt(0x12B6281B6C6706C0,p0)end;---@return integer
	GetNumCreatedMissionPeds=function(p0--[[@param p0 boolean]])return InvokeInt(0xCB215C4B56A7FAE7,p0)end;---@return integer
	GetNumCreatedMissionVehicles=function(p0--[[@param p0 boolean]])return InvokeInt(0x0CD9AB83489430EA,p0)end;---@return integer
	GetReservedMissionEntitiesInArea=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],p3--[[@param p3 any]],out1--[[@param out1 any*]],out2--[[@param out2 any*]],out3--[[@param out3 any*]])return InvokeVoid(0xE42D626EEC94E5D9,x+.0,y+.0,z+.0,p3,out1,out2,out3)end;
	GetMaxNumNetworkObjects=function()return InvokeInt(0xC7BE335216B5EC7C)end;---@return integer
	GetMaxNumNetworkPeds=function()return InvokeInt(0x0C1F7D49C39D2289)end;---@return integer
	GetMaxNumNetworkVehicles=function()return InvokeInt(0x0AFCE529F69B21FF)end;---@return integer
	GetMaxNumNetworkPickups=function()return InvokeInt(0xA72835064DD63E4C)end;---@return integer
	NetworkSetObjectScopeDistance=function(object--[[@param object integer]],range--[[@param range number]])return InvokeVoid(0xBA7F0B77D80A4EB7,object,range+.0)end;
	NetworkAllowCloningWhileInTutorial=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x0F1A4B45B7693B95,p0,p1)end;
	--[=[A value between 1.0 and 5.0

_NETWORK_SET_TASK_CUTSCENE_PROXIMITY_SCALE?]=]
	NetworkSetTaskCutsceneInscopeMultipler=function(p0--[[@param p0 any]])return InvokeVoid(0xC6FCEE21C6FCEE21,p0)end;
	GetNetworkTime=function()return InvokeInt(0x7A5487FE9FAA6B48)end;---@return integer
	--[=[Returns the same value as GET_NETWORK_TIME in freemode, but as opposed to `GET_NETWORK_TIME` it always gets the most recent time, instead of once per tick.
Could be used for benchmarking since it can return times in ticks.]=]
	GetNetworkTimeAccurate=function()return InvokeInt(0x89023FBBF9200E9F)end;---@return integer
	HasNetworkTimeStarted=function()return InvokeBool(0x46718ACEEDEAFC84)end;---@return boolean
	--[=[Adds the first argument to the second.]=]
	GetTimeOffset=function(timeA--[[@param timeA integer]],timeB--[[@param timeB integer]])return InvokeInt(0x017008CCDAD48503,timeA,timeB)end;---@return integer
	--[=[Subtracts the second argument from the first, then returns whether the result is negative.]=]
	IsTimeLessThan=function(timeA--[[@param timeA integer]],timeB--[[@param timeB integer]])return InvokeBool(0xCB2CF5148012C8D0,timeA,timeB)end;---@return boolean
	--[=[Subtracts the first argument from the second, then returns whether the result is negative.]=]
	IsTimeMoreThan=function(timeA--[[@param timeA integer]],timeB--[[@param timeB integer]])return InvokeBool(0xDE350F8651E4346C,timeA,timeB)end;---@return boolean
	--[=[Returns true if the two times are equal; otherwise returns false.]=]
	IsTimeEqualTo=function(timeA--[[@param timeA integer]],timeB--[[@param timeB integer]])return InvokeBool(0xF5BC95857BD6D512,timeA,timeB)end;---@return boolean
	--[=[Subtracts the second argument from the first.]=]
	GetTimeDifference=function(timeA--[[@param timeA integer]],timeB--[[@param timeB integer]])return InvokeInt(0xA2C6FC031D46FFF0,timeA,timeB)end;---@return integer
	GetTimeAsString=function(time--[[@param time integer]])return InvokeString(0x9E23B1777A927DAD,time)end;---@return string
	--[=[Same as GET_CLOUD_TIME_AS_INT but returns the value as a hex string (%I64X).]=]
	GetCloudTimeAsString=function()return InvokeString(0xF12E6CD06C73D69E)end;---@return string
	--[=[Returns POSIX timestamp, an int representing the cloud time.]=]
	GetCloudTimeAsInt=function()return InvokeInt(0x9A73240B49945C76)end;---@return integer
	--[=[Takes the specified time and writes it to the structure specified in the second argument.

struct date_time
{
    int year;
    int PADDING1;
    int month;
    int PADDING2;
    int day;
    int PADDING3;
    int hour;
    int PADDING4;
    int minute;
    int PADDING5;
    int second;
    int PADDING6;
};]=]
	ConvertPosixTime=function(posixTime--[[@param posixTime integer]],timeStructure--[[@param timeStructure any*]])return InvokeVoid(0xAC97AF97FA68E5D5,posixTime,timeStructure)end;
	NetworkSetInSpectatorMode=function(toggle--[[@param toggle boolean]],playerPed--[[@param playerPed integer]])return InvokeVoid(0x423DE3854BB50894,toggle,playerPed)end;
	NetworkSetInSpectatorModeExtended=function(toggle--[[@param toggle boolean]],playerPed--[[@param playerPed integer]],p2--[[@param p2 boolean]])return InvokeVoid(0x419594E137637120,toggle,playerPed,p2)end;
	NetworkSetInFreeCamMode=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xFC18DB55AE19E046,toggle)end;
	NetworkSetAntagonisticToPlayer=function(toggle--[[@param toggle boolean]],player--[[@param player integer]])return InvokeVoid(0x5C707A667DF8B9FA,toggle,player)end;
	NetworkIsInSpectatorMode=function()return InvokeBool(0x048746E388762E11)end;---@return boolean
	NetworkSetInMpCutscene=function(p0--[[@param p0 boolean]],p1--[[@param p1 boolean]])return InvokeVoid(0x9CA5DE655269FEC4,p0,p1)end;
	NetworkIsInMpCutscene=function()return InvokeBool(0x6CC27C9FA2040220)end;---@return boolean
	NetworkIsPlayerInMpCutscene=function(player--[[@param player integer]])return InvokeBool(0x63F9EE203C3619F2,player)end;---@return boolean
	NetworkHideProjectileInCutscene=function()return InvokeVoid(0xFAC18E7356BD3210)end;
	SetNetworkVehicleRespotTimer=function(netId--[[@param netId integer]],time--[[@param time integer]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0xEC51713AB6EC36E8,netId,time,p2,p3)end;
	IsNetworkVehicleRunningRespotTimer=function(networkID--[[@param networkID integer]])return InvokeBool(0xDD7CEF5B3A4DA8A6,networkID)end;---@return boolean
	SetNetworkVehicleAsGhost=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x6274C4712850841E,vehicle,toggle)end;
	--[=[rage::netBlenderLinInterp::GetPositionMaxForUpdateLevel]=]
	SetNetworkVehicleMaxPositionDeltaMultiplier=function(vehicle--[[@param vehicle integer]],multiplier--[[@param multiplier number]])return InvokeVoid(0xA2A707979FE754DC,vehicle,multiplier+.0)end;
	--[=[Enables a periodic ShapeTest within the NetBlender and invokes rage::netBlenderLinInterp::GoStraightToTarget (or some functional wrapper).]=]
	SetNetworkEnableHighSpeedEdgeFallDetection=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x838DA0936A24ED4D,vehicle,toggle)end;
	SetLocalPlayerAsGhost=function(toggle--[[@param toggle boolean]],p1--[[@param p1 boolean]])return InvokeVoid(0x5FFE9B4144F9712F,toggle,p1)end;
	IsEntityAGhost=function(entity--[[@param entity integer]])return InvokeBool(0x21D04D7BC538C146,entity)end;---@return boolean
	SetNonParticipantsOfThisScriptAsGhosts=function(p0--[[@param p0 boolean]])return InvokeVoid(0x13F1FCB111B820B0,p0)end;
	--[=[Enables ghosting between specific players]=]
	SetRemotePlayerAsGhost=function(player--[[@param player integer]],p1--[[@param p1 boolean]])return InvokeVoid(0xA7C511FA1C5BDA38,player,p1)end;
	--[=[Must be a value between 1 and 254]=]
	SetGhostAlpha=function(alpha--[[@param alpha integer]])return InvokeVoid(0x658500AE6D723A7E,alpha)end;
	--[=[Resets the entity ghost alpha to the default value (128)]=]
	ResetGhostAlpha=function()return InvokeVoid(0x17330EBF2F2124A8)end;
	SetEntityGhostedForGhostPlayers=function(entity--[[@param entity integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x4BA166079D658ED4,entity,toggle)end;
	SetInvertGhosting=function(p0--[[@param p0 boolean]])return InvokeVoid(0xD7B6C73CAD419BCF,p0)end;
	IsEntityInGhostCollision=function(entity--[[@param entity integer]])return InvokeBool(0x7EF7649B64D7FF10,entity)end;---@return boolean
	UsePlayerColourInsteadOfTeamColour=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x77758139EC9B66C7,toggle)end;
	NetworkCreateSynchronisedScene=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],xRot--[[@param xRot number]],yRot--[[@param yRot number]],zRot--[[@param zRot number]],rotationOrder--[[@param rotationOrder integer]],useOcclusionPortal--[[@param useOcclusionPortal boolean]],looped--[[@param looped boolean]],p9--[[@param p9 number]],animTime--[[@param animTime number]],p11--[[@param p11 number]])return InvokeInt(0x7CD6BC4C2BBDD526,x+.0,y+.0,z+.0,xRot+.0,yRot+.0,zRot+.0,rotationOrder,useOcclusionPortal,looped,p9+.0,animTime+.0,p11+.0)end;---@return integer
	NetworkAddPedToSynchronisedScene=function(ped--[[@param ped integer]],netScene--[[@param netScene integer]],animDict--[[@param animDict string]],animnName--[[@param animnName string]],speed--[[@param speed number]],speedMultiplier--[[@param speedMultiplier number]],duration--[[@param duration integer]],flag--[[@param flag integer]],playbackRate--[[@param playbackRate number]],p9--[[@param p9 any]])return InvokeVoid(0x742A637471BCECD9,ped,netScene,animDict,animnName,speed+.0,speedMultiplier+.0,duration,flag,playbackRate+.0,p9)end;
	NetworkAddPedToSynchronisedSceneWithIk=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]],p5--[[@param p5 any]],p6--[[@param p6 any]],p7--[[@param p7 any]],p8--[[@param p8 any]],p9--[[@param p9 any]])return InvokeVoid(0xA5EAFE473E45C442,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9)end;
	NetworkAddEntityToSynchronisedScene=function(entity--[[@param entity integer]],netScene--[[@param netScene integer]],animDict--[[@param animDict string]],animName--[[@param animName string]],speed--[[@param speed number]],speedMulitiplier--[[@param speedMulitiplier number]],flag--[[@param flag integer]])return InvokeVoid(0xF2404D68CBC855FA,entity,netScene,animDict,animName,speed+.0,speedMulitiplier+.0,flag)end;
	--[=[Similar structure as NETWORK_ADD_ENTITY_TO_SYNCHRONISED_SCENE but it includes this time a hash.
In casino_slots it is used one time in a synced scene involving a ped and the slot machine?]=]
	NetworkAddMapEntityToSynchronisedScene=function(netScene--[[@param netScene integer]],modelHash--[[@param modelHash integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],p5--[[@param p5 number]],p6--[[@param p6 string]],p7--[[@param p7 number]],p8--[[@param p8 number]],flags--[[@param flags integer]])return InvokeVoid(0x45F35C0EDC33B03B,netScene,modelHash,x+.0,y+.0,z+.0,p5+.0,p6,p7+.0,p8+.0,flags)end;
	NetworkAddSynchronisedSceneCamera=function(netScene--[[@param netScene integer]],animDict--[[@param animDict string]],animName--[[@param animName string]])return InvokeVoid(0xCF8BD3B0BD6D42D7,netScene,animDict,animName)end;
	NetworkAttachSynchronisedSceneToEntity=function(netScene--[[@param netScene integer]],entity--[[@param entity integer]],bone--[[@param bone integer]])return InvokeVoid(0x478DCBD2A98B705A,netScene,entity,bone)end;
	NetworkStartSynchronisedScene=function(netScene--[[@param netScene integer]])return InvokeVoid(0x9A1B3FCDB36C8697,netScene)end;
	NetworkStopSynchronisedScene=function(netScene--[[@param netScene integer]])return InvokeVoid(0xC254481A4574CB2F,netScene)end;
	NetworkGetLocalSceneFromNetworkId=function(netId--[[@param netId integer]])return InvokeInt(0x02C40BF885C567B6,netId)end;---@return integer
	NetworkForceLocalUseOfSyncedSceneCamera=function(netScene--[[@param netScene integer]])return InvokeVoid(0xC9B43A33D09CADA7,netScene)end;
	NetworkAllowRemoteSyncedSceneLocalPlayerRequests=function(p0--[[@param p0 any]])return InvokeVoid(0x144DA052257AE7D8,p0)end;
	--[=[p0 is always 0. p1 is pointing to a global.]=]
	NetworkFindLargestBunchOfPlayers=function(p0--[[@param p0 integer]],p1--[[@param p1 any]])return InvokeBool(0xFB1F9381E80FA13F,p0,p1)end;---@return boolean
	--[=[One of the first things it does is get the players ped.
Then it calls a function that is used in some tasks and ped based functions.
p5, p6, p7 is another coordinate (or zero), often related to `GET_BLIP_COORDS, in the decompiled scripts.]=]
	NetworkStartRespawnSearchForPlayer=function(player--[[@param player integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]],p5--[[@param p5 number]],p6--[[@param p6 number]],p7--[[@param p7 number]],flags--[[@param flags integer]])return InvokeBool(0x5A6FFA2433E2F14C,player,x+.0,y+.0,z+.0,radius+.0,p5+.0,p6+.0,p7+.0,flags)end;---@return boolean
	--[=[p8, p9, p10 is another coordinate, or zero, often related to `GET_BLIP_COORDS in the decompiled scripts.]=]
	NetworkStartRespawnSearchInAngledAreaForPlayer=function(player--[[@param player integer]],x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],width--[[@param width number]],p8--[[@param p8 number]],p9--[[@param p9 number]],p10--[[@param p10 number]],flags--[[@param flags integer]])return InvokeBool(0x4BA92A18502BCA61,player,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,width+.0,p8+.0,p9+.0,p10+.0,flags)end;---@return boolean
	NetworkQueryRespawnResults=function(p0--[[@param p0 any*]])return InvokeInt(0x3C891A251567DFCE,p0)end;---@return integer
	NetworkCancelRespawnSearch=function()return InvokeVoid(0xFB8F2A6F3DF08CBE)end;
	--[=[Based on scripts such as in freemode.c how they call their vars vVar and fVar the 2nd and 3rd param it a Vector3 and Float, but the first is based on get_random_int_in_range..]=]
	NetworkGetRespawnResult=function(randomInt--[[@param randomInt integer]],coordinates--[[@param coordinates V3*]],heading--[[@param heading number*]])return InvokeVoid(0x371EA43692861CF1,randomInt,coordinates,heading)end;
	NetworkGetRespawnResultFlags=function(p0--[[@param p0 integer]])return InvokeInt(0x6C34F1208B8923FD,p0)end;---@return integer
	NetworkStartSoloTutorialSession=function()return InvokeVoid(0x17E0198B3882C2CB)end;
	--[=[teamId must be < 3, instanceId must be < 64]=]
	NetworkAllowGangToJoinTutorialSession=function(teamId--[[@param teamId integer]],instanceId--[[@param instanceId integer]])return InvokeVoid(0xFB680D403909DC70,teamId,instanceId)end;
	NetworkEndTutorialSession=function()return InvokeVoid(0xD0AFAFF5A51D72F7)end;
	NetworkIsInTutorialSession=function()return InvokeBool(0xADA24309FE08DACF)end;---@return boolean
	NetworkWaitingPopClearTutorialSession=function()return InvokeBool(0xB37E4E6A2388CA7B)end;---@return boolean
	NetworkIsTutorialSessionChangePending=function()return InvokeBool(0x35F0B98A8387274D)end;---@return boolean
	NetworkGetPlayerTutorialSessionInstance=function(player--[[@param player integer]])return InvokeInt(0x3B39236746714134,player)end;---@return integer
	NetworkArePlayersInSameTutorialSession=function(player--[[@param player integer]],index--[[@param index integer]])return InvokeBool(0x9DE986FC9A87C474,player,index)end;---@return boolean
	NetworkBlockProxyMigrationBetweenTutorialSessions=function(p0--[[@param p0 any]])return InvokeVoid(0xFEA7A352DDB34D52,p0)end;
	NetworkConcealPlayer=function(player--[[@param player integer]],toggle--[[@param toggle boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0xBBDF066252829606,player,toggle,p2)end;
	NetworkIsPlayerConcealed=function(player--[[@param player integer]])return InvokeBool(0x919B3C98ED8292F9,player)end;---@return boolean
	NetworkConcealEntity=function(entity--[[@param entity integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x1632BE0AC1E62876,entity,toggle)end;
	--[=[Note: This only works for vehicles, which appears to be a bug (since the setter _does_ work for every entity type and the name is 99% correct).]=]
	NetworkIsEntityConcealed=function(entity--[[@param entity integer]])return InvokeBool(0x71302EC70689052A,entity)end;---@return boolean
	--[=[Works in Singleplayer too.
Passing wrong data (e.g. hours above 23) will cause the game to crash.]=]
	NetworkOverrideClockTime=function(hours--[[@param hours integer]],minutes--[[@param minutes integer]],seconds--[[@param seconds integer]])return InvokeVoid(0xE679E3E06E363892,hours,minutes,seconds)end;
	NetworkOverrideClockRate=function(ms--[[@param ms integer]])return InvokeVoid(0x42BF1D2E723B6D7E,ms)end;
	NetworkClearClockTimeOverride=function()return InvokeVoid(0xD972DF67326F966E)end;
	NetworkIsClockTimeOverridden=function()return InvokeBool(0xD7C95D322FF57522)end;---@return boolean
	NetworkAddEntityArea=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]])return InvokeInt(0x494C8FB299290269,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0)end;---@return integer
	--[=[To remove, see: NETWORK_REMOVE_ENTITY_AREA
See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.]=]
	NetworkAddEntityAngledArea=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],width--[[@param width number]])return InvokeInt(0x376C6375BA60293A,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,width+.0)end;---@return integer
	NetworkAddClientEntityArea=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]])return InvokeInt(0x25B99872D588A101,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0)end;---@return integer
	NetworkAddClientEntityAngledArea=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],radius--[[@param radius number]])return InvokeInt(0x2B1C623823DB0D9D,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,radius+.0)end;---@return integer
	NetworkRemoveEntityArea=function(areaHandle--[[@param areaHandle integer]])return InvokeBool(0x93CF869BAA0C4874,areaHandle)end;---@return boolean
	NetworkEntityAreaDoesExist=function(areaHandle--[[@param areaHandle integer]])return InvokeBool(0xE64A3CA08DFA37A9,areaHandle)end;---@return boolean
	NetworkEntityAreaHaveAllReplied=function(areaHandle--[[@param areaHandle integer]])return InvokeBool(0x4DF7CFFF471A7FB1,areaHandle)end;---@return boolean
	NetworkEntityAreaIsOccupied=function(areaHandle--[[@param areaHandle integer]])return InvokeBool(0x4A2D4E8BF4265B0F,areaHandle)end;---@return boolean
	NetworkUseHighPrecisionBlending=function(netID--[[@param netID integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x2B1813ABA29016C5,netID,toggle)end;
	NetworkSetCustomArenaBallParams=function(netId--[[@param netId integer]])return InvokeVoid(0xA6FCECCF4721D679,netId)end;
	NetworkEntityUseHighPrecisionRotation=function(netId--[[@param netId integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x95BAF97C82464629,netId,toggle)end;
	NetworkRequestCloudBackgroundScripts=function()return InvokeBool(0x924426BFFD82E915)end;---@return boolean
	NetworkIsCloudBackgroundScriptRequestPending=function()return InvokeBool(0x8132C0EB8B2B3293)end;---@return boolean
	NetworkRequestCloudTunables=function()return InvokeVoid(0x42FB3B532D526E6C)end;
	NetworkIsTunableCloudRequestPending=function()return InvokeBool(0x0467C11ED88B7D28)end;---@return boolean
	--[=[Actually returns the version (TUNABLE_VERSION)]=]
	NetworkGetTunableCloudCrc=function()return InvokeInt(0x10BD227A753B0D84)end;---@return integer
	NetworkDoesTunableExist=function(tunableContext--[[@param tunableContext string]],tunableName--[[@param tunableName string]])return InvokeBool(0x85E5F8B9B898B20A,tunableContext,tunableName)end;---@return boolean
	NetworkAccessTunableInt=function(tunableContext--[[@param tunableContext string]],tunableName--[[@param tunableName string]],value--[[@param value integer*]])return InvokeBool(0x8BE1146DFD5D4468,tunableContext,tunableName,value)end;---@return boolean
	NetworkAccessTunableFloat=function(tunableContext--[[@param tunableContext string]],tunableName--[[@param tunableName string]],value--[[@param value number*]])return InvokeBool(0xE5608CA7BC163A5F,tunableContext,tunableName,value)end;---@return boolean
	NetworkAccessTunableBool=function(tunableContext--[[@param tunableContext string]],tunableName--[[@param tunableName string]])return InvokeBool(0xAA6A47A573ABB75A,tunableContext,tunableName)end;---@return boolean
	NetworkDoesTunableExistHash=function(tunableContext--[[@param tunableContext integer]],tunableName--[[@param tunableName integer]])return InvokeBool(0xE4E53E1419D81127,tunableContext,tunableName)end;---@return boolean
	NetworkAccessTunableModificationDetectionClear=function()return InvokeBool(0xFAFC23AEE23868DB)end;---@return boolean
	NetworkAccessTunableIntHash=function(tunableContext--[[@param tunableContext integer]],tunableName--[[@param tunableName integer]],value--[[@param value integer*]])return InvokeBool(0x40FCE03E50E8DBE8,tunableContext,tunableName,value)end;---@return boolean
	NetworkAccessTunableIntModificationDetectionRegistrationHash=function(contextHash--[[@param contextHash integer]],nameHash--[[@param nameHash integer]],value--[[@param value integer*]])return InvokeBool(0x3A8B55FDA4C8DDEF,contextHash,nameHash,value)end;---@return boolean
	NetworkAccessTunableFloatHash=function(tunableContext--[[@param tunableContext integer]],tunableName--[[@param tunableName integer]],value--[[@param value number*]])return InvokeBool(0x972BC203BBC4C4D5,tunableContext,tunableName,value)end;---@return boolean
	NetworkAccessTunableFloatModificationDetectionRegistrationHash=function(contextHash--[[@param contextHash integer]],nameHash--[[@param nameHash integer]],value--[[@param value number*]])return InvokeBool(0x1950DAE9848A4739,contextHash,nameHash,value)end;---@return boolean
	NetworkAccessTunableBoolHash=function(tunableContext--[[@param tunableContext integer]],tunableName--[[@param tunableName integer]])return InvokeBool(0xEA16B69D93D71A45,tunableContext,tunableName)end;---@return boolean
	NetworkAccessTunableBoolModificationDetectionRegistrationHash=function(contextHash--[[@param contextHash integer]],nameHash--[[@param nameHash integer]],value--[[@param value boolean*]])return InvokeBool(0x697F508861875B42,contextHash,nameHash,value)end;---@return boolean
	--[=[Returns defaultValue if the tunable doesn't exist.]=]
	NetworkTryAccessTunableBoolHash=function(tunableContext--[[@param tunableContext integer]],tunableName--[[@param tunableName integer]],defaultValue--[[@param defaultValue boolean]])return InvokeBool(0xC7420099936CE286,tunableContext,tunableName,defaultValue)end;---@return boolean
	--[=[Return the content modifier id (the tunables context if you want) of a specific content.

It takes the content hash (which is the mission id hash), and return the content modifier id, used as the tunables context.

The mission id can be found on the Social club, for example, 'socialclub.rockstargames.com/games/gtav/jobs/job/A8M6Bz8MLEC5xngvDCzGwA'

'A8M6Bz8MLEC5xngvDCzGwA' is the mission id, so the game hash this and use it as the parameter for this native.
]=]
	NetworkGetContentModifierListId=function(contentHash--[[@param contentHash integer]])return InvokeInt(0x187382F8A3E0A6C3,contentHash)end;---@return integer
	NetworkGetBoneIdOfFatalHit=function()return InvokeInt(0x7DB53B37A2F211A0)end;---@return integer
	NetworkResetBodyTracker=function()return InvokeVoid(0x72433699B4E6DD64)end;
	NetworkGetNumberBodyTrackerHits=function()return InvokeInt(0xD38C4A6D047C019D)end;---@return integer
	NetworkHasBoneBeenHitByKiller=function(boneIndex--[[@param boneIndex integer]])return InvokeBool(0x2E0BF682CC778D49,boneIndex)end;---@return boolean
	NetworkSetAttributeDamageToPlayer=function(ped--[[@param ped integer]],player--[[@param player integer]])return InvokeBool(0x0EDE326D47CD0F3E,ped,player)end;---@return boolean
	--[=[Allows vehicle wheels to be destructible even when the vehicle entity is invincible.]=]
	NetworkTriggerDamageEventForZeroDamage=function(entity--[[@param entity integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x890E2C5ABED7236D,entity,toggle)end;
	NetworkTriggerDamageEventForZeroWeaponHash=function(entity--[[@param entity integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x38B7C51AB1EDC7D8,entity,toggle)end;
	NetworkSetNoLongerNeeded=function(entity--[[@param entity integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x3FC795691834481D,entity,toggle)end;
	--[=[In the console script dumps, this is only referenced once. 
NETWORK::NETWORK_EXPLODE_VEHICLE(vehicle, 1, 0, 0);

^^^^^ That must be PC script dumps? In X360 Script Dumps it is reference a few times with 2 differences in the parameters.
Which as you see below is 1, 0, 0 + 1, 1, 0 + 1, 0, and a *param?

am_plane_takedown.c 
network_explode_vehicle(net_to_veh(Local_40.imm_2), 1, 1, 0);

armenian2.c 
network_explode_vehicle(Local_80[6 <2>], 1, 0, 0);

fm_horde_controler.c
network_explode_vehicle(net_to_veh(*uParam0), 1, 0, *uParam0);

fm_mission_controller.c, has 6 hits so not going to list them.

Side note, setting the first parameter to 0 seems to mute sound or so?

Seems it's like ADD_EXPLOSION, etc. the first 2 params. The 3rd atm no need to worry since it always seems to be 0.
]=]
	NetworkExplodeVehicle=function(vehicle--[[@param vehicle integer]],isAudible--[[@param isAudible boolean]],isInvisible--[[@param isInvisible boolean]],netId--[[@param netId integer]])return InvokeBool(0x301A42153C9AD707,vehicle,isAudible,isInvisible,netId)end;---@return boolean
	NetworkExplodeHeli=function(vehicle--[[@param vehicle integer]],isAudible--[[@param isAudible boolean]],isInvisible--[[@param isInvisible boolean]],netId--[[@param netId integer]])return InvokeVoid(0x2A5E0621DD815A9A,vehicle,isAudible,isInvisible,netId)end;
	NetworkUseLogarithmicBlendingThisFrame=function(entity--[[@param entity integer]])return InvokeVoid(0xCD71A4ECAB22709E,entity)end;
	NetworkOverrideCoordsAndHeading=function(entity--[[@param entity integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],heading--[[@param heading number]])return InvokeVoid(0xA7E30DE9272B6D49,entity,x+.0,y+.0,z+.0,heading+.0)end;
	NetworkEnableExtraVehicleOrientationBlendChecks=function(netId--[[@param netId integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xE6717E652B8C8D8A,netId,toggle)end;
	NetworkDisableProximityMigration=function(netID--[[@param netID integer]])return InvokeVoid(0x407091CF6037118E,netID)end;
	--[=[value must be < 255]=]
	NetworkSetPropertyId=function(id--[[@param id integer]])return InvokeVoid(0x1775961C2FBBCB5C,id)end;
	NetworkClearPropertyId=function()return InvokeVoid(0xC2B82527CA77053E)end;
	--[=[p0 in the decompiled scripts is always the stat mesh_texblend * 0.07 to int]=]
	NetworkSetPlayerMentalState=function(p0--[[@param p0 integer]])return InvokeVoid(0x367EF5E2F439B4C6,p0)end;
	NetworkSetMinimumRankForMission=function(p0--[[@param p0 boolean]])return InvokeVoid(0x94538037EE44F5CF,p0)end;
	NetworkCacheLocalPlayerHeadBlendData=function()return InvokeVoid(0xBD0BE0BFC927EAC1)end;
	NetworkHasCachedPlayerHeadBlendData=function(player--[[@param player integer]])return InvokeBool(0x237D5336A9A54108,player)end;---@return boolean
	NetworkApplyCachedPlayerHeadBlendData=function(ped--[[@param ped integer]],player--[[@param player integer]])return InvokeBool(0x99B72C7ABDE5C910,ped,player)end;---@return boolean
	GetNumCommerceItems=function()return InvokeInt(0xF2EAC213D5EA0623)end;---@return integer
	IsCommerceDataValid=function()return InvokeBool(0xEA14EEF5B7CD2C30)end;---@return boolean
	--[=[Does nothing (it's a nullsub).]=]
	TriggerCommerceDataFetch=function(p0--[[@param p0 any]])return InvokeVoid(0xB606E6CC59664972,p0)end;
	IsCommerceDataFetchInProgress=function()return InvokeBool(0x1D4DC17C38FEAFF0)end;---@return boolean
	GetCommerceItemId=function(index--[[@param index integer]])return InvokeString(0x662635855957C411,index)end;---@return string
	GetCommerceItemName=function(index--[[@param index integer]])return InvokeString(0xB4271092CA7EDF48,index)end;---@return string
	GetCommerceProductPrice=function(index--[[@param index integer]])return InvokeString(0xCA94551B50B4932C,index)end;---@return string
	GetCommerceItemNumCats=function(index--[[@param index integer]])return InvokeInt(0x2A7776C709904AB0,index)end;---@return integer
	--[=[index2 is unused]=]
	GetCommerceItemCat=function(index--[[@param index integer]],index2--[[@param index2 integer]])return InvokeString(0x6F44CBF56D79FAC0,index,index2)end;---@return string
	OpenCommerceStore=function(p0--[[@param p0 string]],p1--[[@param p1 string]],p2--[[@param p2 integer]])return InvokeVoid(0x58C21165F6545892,p0,p1,p2)end;
	IsCommerceStoreOpen=function()return InvokeBool(0x2EAC52B4019E2782)end;---@return boolean
	--[=[Access to the store for shark cards etc...]=]
	SetStoreEnabled=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x9641A9FF718E9C5E,toggle)end;
	RequestCommerceItemImage=function(index--[[@param index integer]])return InvokeBool(0xA2F952104FC6DD4B,index)end;---@return boolean
	ReleaseAllCommerceItemImages=function()return InvokeVoid(0x72D0706CD6CCDB58)end;
	GetCommerceItemTexturename=function(index--[[@param index integer]])return InvokeString(0x722F5D28B61C5EA8,index)end;---@return string
	IsStoreAvailableToUser=function()return InvokeBool(0x883D79C4071E18B3)end;---@return boolean
	DelayMpStoreOpen=function()return InvokeVoid(0x265635150FB0D82E)end;
	ResetStoreNetworkGameTracking=function()return InvokeVoid(0x444C4525ECE0A4B9)end;
	IsUserOldEnoughToAccessStore=function()return InvokeBool(0x59328EB08C5CEB2B)end;---@return boolean
	SetLastViewedShopItem=function(p0--[[@param p0 integer]],p1--[[@param p1 integer]],p2--[[@param p2 integer]])return InvokeVoid(0xFAE628F1E9ADB239,p0,p1,p2)end;
	--[=[Checks some commerce stuff]=]
	GetUserPremiumAccess=function()return InvokeInt(0x754615490A029508)end;---@return integer
	--[=[Checks some commerce stuff]=]
	GetUserStarterAccess=function()return InvokeInt(0x155467ACA0F55705)end;---@return integer
	CloudDeleteMemberFile=function(p0--[[@param p0 string]])return InvokeInt(0xC64DED7EF0D2FE37,p0)end;---@return integer
	CloudHasRequestCompleted=function(requestId--[[@param requestId integer]])return InvokeBool(0x4C61B39930D045DA,requestId)end;---@return boolean
	CloudDidRequestSucceed=function(requestId--[[@param requestId integer]])return InvokeBool(0x3A3D5568AF297CD5,requestId)end;---@return boolean
	--[=[Downloads prod.cloud.rockstargames.com/titles/gta5/[platform]/check.json]=]
	CloudCheckAvailability=function()return InvokeVoid(0x4F18196C8D38768D)end;
	CloudIsCheckingAvailability=function()return InvokeBool(0xC7ABAC5DE675EE3B)end;---@return boolean
	CloudGetAvailabilityCheckResult=function()return InvokeBool(0x0B0CC10720653F3B)end;---@return boolean
	--[=[This function is hard-coded to always return 0.]=]
	GetContentToLoadType=function()return InvokeInt(0x8B0C2964BA471961)end;---@return integer
	--[=[This function is hard-coded to always return 0.]=]
	GetIsLaunchFromLiveArea=function()return InvokeBool(0x88B588B41FF7868E)end;---@return boolean
	--[=[This function is hard-coded to always return 0.]=]
	GetIsLiveAreaLaunchWithContent=function()return InvokeBool(0x67FC09BC554A75E5)end;---@return boolean
	--[=[This native does absolutely nothing, just a nullsub]=]
	ClearServiceEventArguments=function()return InvokeVoid(0x966DD84FB6A46017)end;
	UgcCopyContent=function(p0--[[@param p0 any*]],p1--[[@param p1 any*]])return InvokeBool(0x152D90E4C1B4738A,p0,p1)end;---@return boolean
	UgcIsCreating=function()return InvokeBool(0x9FEDF86898F100E9)end;---@return boolean
	UgcHasCreateFinished=function()return InvokeBool(0x5E24341A7F92A74B)end;---@return boolean
	UgcDidCreateSucceed=function()return InvokeBool(0x24E4E51FC16305F9)end;---@return boolean
	UgcGetCreateResult=function()return InvokeInt(0xFBC5E768C7A77A6A)end;---@return integer
	UgcGetCreateContentId=function()return InvokeString(0xC55A0B40FFB1ED23)end;---@return string
	UgcClearCreateResult=function()return InvokeVoid(0x17440AA15D1D3739)end;
	UgcQueryMyContent=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any*]],p3--[[@param p3 any]],p4--[[@param p4 any]],p5--[[@param p5 any]])return InvokeBool(0x9BF438815F5D96EA,p0,p1,p2,p3,p4,p5)end;---@return boolean
	UgcQueryByCategory=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 string]],p4--[[@param p4 any]],p5--[[@param p5 boolean]])return InvokeBool(0x692D58DF40657E8C,p0,p1,p2,p3,p4,p5)end;---@return boolean
	UgcQueryByContentId=function(contentId--[[@param contentId string]],latestVersion--[[@param latestVersion boolean]],contentTypeName--[[@param contentTypeName string]])return InvokeBool(0x158EC424F35EC469,contentId,latestVersion,contentTypeName)end;---@return boolean
	UgcQueryByContentIds=function(data--[[@param data any*]],count--[[@param count integer]],latestVersion--[[@param latestVersion boolean]],contentTypeName--[[@param contentTypeName string]])return InvokeBool(0xC7397A83F7A2A462,data,count,latestVersion,contentTypeName)end;---@return boolean
	UgcQueryMostRecentlyCreatedContent=function(offset--[[@param offset integer]],count--[[@param count integer]],contentTypeName--[[@param contentTypeName string]],p3--[[@param p3 integer]])return InvokeBool(0x6D4CB481FAC835E8,offset,count,contentTypeName,p3)end;---@return boolean
	UgcGetBookmarkedContent=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 string]],p3--[[@param p3 any*]])return InvokeBool(0xD5A4B59980401588,p0,p1,p2,p3)end;---@return boolean
	UgcGetMyContent=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 string]],p3--[[@param p3 any*]])return InvokeBool(0x3195F8DD0D531052,p0,p1,p2,p3)end;---@return boolean
	UgcGetFriendContent=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 string]],p3--[[@param p3 any*]])return InvokeBool(0xF9E1CCAE8BA4C281,p0,p1,p2,p3)end;---@return boolean
	UgcGetCrewContent=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 string]],p4--[[@param p4 any*]])return InvokeBool(0x9F6E2821885CAEE2,p0,p1,p2,p3,p4)end;---@return boolean
	UgcGetGetByCategory=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 string]],p4--[[@param p4 any*]])return InvokeBool(0x678BB03C1A3BD51E,p0,p1,p2,p3,p4)end;---@return boolean
	UgcGetGetByContentId=function(contentId--[[@param contentId string]],contentTypeName--[[@param contentTypeName string]])return InvokeBool(0x815E5E3073DA1D67,contentId,contentTypeName)end;---@return boolean
	UgcGetGetByContentIds=function(data--[[@param data any*]],dataCount--[[@param dataCount integer]],contentTypeName--[[@param contentTypeName string]])return InvokeBool(0xB8322EEB38BE7C26,data,dataCount,contentTypeName)end;---@return boolean
	UgcGetMostRecentlyCreatedContent=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any*]],p3--[[@param p3 any*]])return InvokeBool(0xA7862BC5ED1DFD7E,p0,p1,p2,p3)end;---@return boolean
	UgcGetMostRecentlyPlayedContent=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any*]],p3--[[@param p3 any*]])return InvokeBool(0x97A770BEEF227E2B,p0,p1,p2,p3)end;---@return boolean
	UgcGetTopRatedContent=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any*]],p3--[[@param p3 any*]])return InvokeBool(0x5324A0E3E4CE3570,p0,p1,p2,p3)end;---@return boolean
	UgcCancelQuery=function()return InvokeVoid(0xE9B99B6853181409)end;
	UgcIsGetting=function()return InvokeBool(0xD53ACDBEF24A46E8)end;---@return boolean
	UgcHasGetFinished=function()return InvokeBool(0x02ADA21EA2F6918F)end;---@return boolean
	UgcDidGetSucceed=function()return InvokeBool(0x941E5306BCD7C2C7)end;---@return boolean
	UgcWasQueryForceCancelled=function()return InvokeBool(0xC87E740D9F3872CC)end;---@return boolean
	UgcGetQueryResult=function()return InvokeInt(0xEDF7F927136C224B)end;---@return integer
	UgcGetContentNum=function()return InvokeInt(0xE0A6138401BCB837)end;---@return integer
	UgcGetContentTotal=function()return InvokeInt(0x769951E2455E2EB5)end;---@return integer
	UgcGetContentHash=function()return InvokeInt(0x3A17A27D75C74887)end;---@return integer
	UgcClearQueryResults=function()return InvokeVoid(0xBA96394A0EECFA65)end;
	UgcGetContentUserId=function(p0--[[@param p0 integer]])return InvokeString(0xCD67AD041A394C9C,p0)end;---@return string
	UgcGetContentCreatorGamerHandle=function(p0--[[@param p0 integer]],p1--[[@param p1 any*]])return InvokeBool(0x584770794D758C18,p0,p1)end;---@return boolean
	UgcGetContentCreatedByLocalPlayer=function(p0--[[@param p0 any]])return InvokeBool(0x8C8D2739BA44AF0F,p0)end;---@return boolean
	UgcGetContentUserName=function(p0--[[@param p0 any]])return InvokeString(0x703F12425ECA8BF5,p0)end;---@return string
	UgcGetContentIsUsingScNickname=function(p0--[[@param p0 any]])return InvokeBool(0xAEAB987727C5A8A4,p0)end;---@return boolean
	UgcGetContentCategory=function(p0--[[@param p0 integer]])return InvokeInt(0xA7BAB11E7C9C6C5A,p0)end;---@return integer
	--[=[Return the mission id of a job.]=]
	UgcGetContentId=function(p0--[[@param p0 integer]])return InvokeString(0x55AA95F481D694D2,p0)end;---@return string
	--[=[Return the root content id of a job.]=]
	UgcGetRootContentId=function(p0--[[@param p0 integer]])return InvokeString(0xC0173D6BFF4E0348,p0)end;---@return string
	UgcGetContentName=function(p0--[[@param p0 any]])return InvokeString(0xBF09786A7FCAB582,p0)end;---@return string
	UgcGetContentDescriptionHash=function(p0--[[@param p0 any]])return InvokeInt(0x7CF0448787B23758,p0)end;---@return integer
	UgcGetContentPath=function(p0--[[@param p0 integer]],p1--[[@param p1 integer]])return InvokeString(0xBAF6BABF9E7CCC13,p0,p1)end;---@return string
	UgcGetContentUpdatedDate=function(p0--[[@param p0 any]],p1--[[@param p1 any*]])return InvokeVoid(0xCFD115B373C0DF63,p0,p1)end;
	UgcGetContentFileVersion=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeInt(0x37025B27D9B658B1,p0,p1)end;---@return integer
	UgcGetContentHasLoResPhoto=function(p0--[[@param p0 integer]])return InvokeBool(0x1D610EB0FEA716D9,p0)end;---@return boolean
	UgcGetContentHasHiResPhoto=function(p0--[[@param p0 integer]])return InvokeBool(0x7FCC39C46C3C03BD,p0)end;---@return boolean
	UgcGetContentLanguage=function(p0--[[@param p0 any]])return InvokeInt(0x32DD916F3F7C9672,p0)end;---@return integer
	UgcGetContentIsPublished=function(p0--[[@param p0 any]])return InvokeBool(0x3054F114121C21EA,p0)end;---@return boolean
	UgcGetContentIsVerified=function(p0--[[@param p0 any]])return InvokeBool(0xA9240A96C74CCA13,p0)end;---@return boolean
	UgcGetContentRating=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeFloat(0x1ACCFBA3D8DAB2EE,p0,p1)end;---@return number
	UgcGetContentRatingCount=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeInt(0x759299C5BB31D2A9,p0,p1)end;---@return integer
	UgcGetContentRatingPositiveCount=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeInt(0x87E5C46C187FE0AE,p0,p1)end;---@return integer
	UgcGetContentRatingNegativeCount=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeInt(0x4E548C0D7AE39FF9,p0,p1)end;---@return integer
	UgcGetContentHasPlayerRecord=function(p0--[[@param p0 any]])return InvokeBool(0x70EA8DA57840F9BE,p0)end;---@return boolean
	UgcGetContentHasPlayerBookmarked=function(p0--[[@param p0 any]])return InvokeBool(0x993CBE59D350D225,p0)end;---@return boolean
	UgcRequestContentDataFromIndex=function(p0--[[@param p0 integer]],p1--[[@param p1 integer]])return InvokeInt(0x171DF6A0C07FB3DC,p0,p1)end;---@return integer
	UgcRequestContentDataFromParams=function(contentTypeName--[[@param contentTypeName string]],contentId--[[@param contentId string]],p2--[[@param p2 integer]],p3--[[@param p3 integer]],p4--[[@param p4 integer]])return InvokeInt(0x7FD2990AF016795E,contentTypeName,contentId,p2,p3,p4)end;---@return integer
	UgcRequestCachedDescription=function(p0--[[@param p0 integer]])return InvokeInt(0x5E0165278F6339EE,p0)end;---@return integer
	UgcIsDescriptionRequestInProgress=function(p0--[[@param p0 any]])return InvokeBool(0x2D5DC831176D0114,p0)end;---@return boolean
	UgcHasDescriptionRequestFinished=function(p0--[[@param p0 any]])return InvokeBool(0xEBFA8D50ADDC54C4,p0)end;---@return boolean
	UgcDidDescriptionRequestSucceed=function(p0--[[@param p0 any]])return InvokeBool(0x162C23CA83ED0A62,p0)end;---@return boolean
	UgcGetCachedDescription=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeString(0x40F7E66472DF3E5C,p0,p1)end;---@return string
	UgcReleaseCachedDescription=function(p0--[[@param p0 any]])return InvokeBool(0x5A34CD9C3C5BEC44,p0)end;---@return boolean
	UgcReleaseAllCachedDescriptions=function()return InvokeVoid(0x68103E2247887242)end;
	UgcPublish=function(contentId--[[@param contentId string]],baseContentId--[[@param baseContentId string]],contentTypeName--[[@param contentTypeName string]])return InvokeBool(0x1DE0F5F50D723CAA,contentId,baseContentId,contentTypeName)end;---@return boolean
	UgcSetBookmarked=function(contentId--[[@param contentId string]],bookmarked--[[@param bookmarked boolean]],contentTypeName--[[@param contentTypeName string]])return InvokeBool(0x274A1519DFC1094F,contentId,bookmarked,contentTypeName)end;---@return boolean
	UgcSetDeleted=function(p0--[[@param p0 any*]],p1--[[@param p1 boolean]],p2--[[@param p2 string]])return InvokeBool(0xD05D1A6C74DA3498,p0,p1,p2)end;---@return boolean
	UgcIsModifying=function()return InvokeBool(0x45E816772E93A9DB)end;---@return boolean
	UgcHasModifyFinished=function()return InvokeBool(0x299EF3C576773506)end;---@return boolean
	UgcDidModifySucceed=function()return InvokeBool(0x793FF272D5B365F4)end;---@return boolean
	UgcGetModifyResult=function()return InvokeInt(0x5A0A3D1A186A5508)end;---@return integer
	UgcClearModifyResult=function()return InvokeVoid(0xA1E5E0204A6FCC70)end;
	UgcGetCreatorsByUserId=function(p0--[[@param p0 any*]],p1--[[@param p1 any*]])return InvokeBool(0xB746D20B17F2A229,p0,p1)end;---@return boolean
	UgcHasQueryCreatorsFinished=function()return InvokeBool(0x63B406D7884BFA95)end;---@return boolean
	UgcDidQueryCreatorsSucceed=function()return InvokeBool(0x4D02279C83BE69FE)end;---@return boolean
	UgcGetCreatorNum=function()return InvokeInt(0x597F8DBA9B206FC7)end;---@return integer
	UgcLoadOfflineQuery=function(p0--[[@param p0 any]])return InvokeBool(0x5CAE833B0EE0C500,p0)end;---@return boolean
	UgcClearOfflineQuery=function()return InvokeVoid(0x61A885D3F7CFEE9A)end;
	UgcSetQueryDataFromOffline=function(p0--[[@param p0 boolean]])return InvokeVoid(0xF98DDE0A8ED09323,p0)end;
	UgcSetUsingOfflineContent=function(p0--[[@param p0 boolean]])return InvokeVoid(0xFD75DABC0957BF33,p0)end;
	UgcIsLanguageSupported=function(p0--[[@param p0 any]])return InvokeBool(0xF53E48461B71EECB,p0)end;---@return boolean
	FacebookPostCompletedHeist=function(heistName--[[@param heistName string]],cashEarned--[[@param cashEarned integer]],xpEarned--[[@param xpEarned integer]])return InvokeBool(0x098AB65B9ED9A9EC,heistName,cashEarned,xpEarned)end;---@return boolean
	FacebookPostCreateCharacter=function()return InvokeBool(0xDC48473142545431)end;---@return boolean
	FacebookPostCompletedMilestone=function(milestoneId--[[@param milestoneId integer]])return InvokeBool(0x0AE1F1653B554AB9,milestoneId)end;---@return boolean
	FacebookHasPostCompleted=function()return InvokeBool(0x62B9FEC9A11F10EF)end;---@return boolean
	FacebookDidPostSucceed=function()return InvokeBool(0xA75E2B6733DA5142)end;---@return boolean
	FacebookCanPostToFacebook=function()return InvokeBool(0x43865688AE10F0D7)end;---@return boolean
	TextureDownloadRequest=function(gamerHandle--[[@param gamerHandle any*]],filePath--[[@param filePath string]],name--[[@param name string]],p3--[[@param p3 boolean]])return InvokeInt(0x16160DA74A8E74A2,gamerHandle,filePath,name,p3)end;---@return integer
	TitleTextureDownloadRequest=function(filePath--[[@param filePath string]],name--[[@param name string]],p2--[[@param p2 boolean]])return InvokeInt(0x0B203B4AFDE53A4F,filePath,name,p2)end;---@return integer
	UgcTextureDownloadRequest=function(p0--[[@param p0 string]],p1--[[@param p1 integer]],p2--[[@param p2 integer]],p3--[[@param p3 integer]],p4--[[@param p4 string]],p5--[[@param p5 boolean]])return InvokeInt(0x308F96458B7087CC,p0,p1,p2,p3,p4,p5)end;---@return integer
	TextureDownloadRelease=function(p0--[[@param p0 integer]])return InvokeVoid(0x487EB90B98E9FB19,p0)end;
	TextureDownloadHasFailed=function(p0--[[@param p0 integer]])return InvokeBool(0x5776ED562C134687,p0)end;---@return boolean
	TextureDownloadGetName=function(p0--[[@param p0 integer]])return InvokeString(0x3448505B6E35262D,p0)end;---@return string
	--[=[0 = succeeded
1 = pending
2 = failed]=]
	GetStatusOfTextureDownload=function(p0--[[@param p0 integer]])return InvokeInt(0x8BD6C6DEA20E82C6,p0)end;---@return integer
	--[=[Returns true if profile setting 901 is set to true and sets it to false.]=]
	NetworkCheckRosLinkWentdownNotNet=function()return InvokeBool(0x60EDD13EB3AC1FF3)end;---@return boolean
	--[=[Returns true if the NAT type is Strict (3) and a certain number of connections have failed.]=]
	NetworkShouldShowStrictNatWarning=function()return InvokeBool(0x82A2B386716608F1)end;---@return boolean
	NetworkIsCableConnected=function()return InvokeBool(0xEFFB25453D8600F9)end;---@return boolean
	NetworkHaveScsPrivateMsgPriv=function()return InvokeBool(0x66B59CFFD78467AF)end;---@return boolean
	NetworkHaveRosSocialClubPriv=function()return InvokeBool(0x606E4D3E3CCCF3EB)end;---@return boolean
	NetworkHaveRosBannedPriv=function()return InvokeBool(0x8020A73847E0CA7D)end;---@return boolean
	NetworkHaveRosCreateTicketPriv=function()return InvokeBool(0xA0AD7E2AF5349F61)end;---@return boolean
	NetworkHaveRosMultiplayerPriv=function()return InvokeBool(0x5F91D5D0B36AA310)end;---@return boolean
	NetworkHaveRosLeaderboardWritePriv=function()return InvokeBool(0x422D396F80A96547)end;---@return boolean
	--[=[index is always 18 in scripts]=]
	NetworkHasRosPrivilege=function(index--[[@param index integer]])return InvokeBool(0xA699957E60D80214,index)end;---@return boolean
	NetworkHasRosPrivilegeEndDate=function(privilege--[[@param privilege integer]],banType--[[@param banType integer*]],timeData--[[@param timeData any*]])return InvokeBool(0xC22912B1D85F26B1,privilege,banType,timeData)end;---@return boolean
	NetworkHasRosPrivilegePlayedLastGen=function()return InvokeBool(0x593570C289A77688)end;---@return boolean
	NetworkHasRosPrivilegeSpecialEditionContent=function()return InvokeBool(0x91B87C55093DE351)end;---@return boolean
	NetworkStartCommunicationPermissionsCheck=function(p0--[[@param p0 any]])return InvokeInt(0x36391F397731595D,p0)end;---@return integer
	--[=[Always returns -1. Seems to be XB1 specific.]=]
	NetworkStartUserContentPermissionsCheck=function(netHandle--[[@param netHandle any*]])return InvokeInt(0xDEB2B99A1AF1A2A6,netHandle)end;---@return integer
	NetworkSkipRadioResetNextClose=function()return InvokeVoid(0x9465E683B12D3F6B)end;
	NetworkSkipRadioResetNextOpen=function()return InvokeVoid(0xCA59CCAE5D01E4CE)end;
	--[=[Returns true if dinput8.dll is present in the game directory.
You will get following error message if that is true: "You are attempting to access GTA Online servers with an altered version of the game."]=]
	NetworkSkipRadioWarning=function()return InvokeBool(0x659CF2EF7F550C4F)end;---@return boolean
	--[=[NETWORK_F[I-O]]=]
	NetworkForceLocalPlayerScarSync=function()return InvokeVoid(0xB7C7F6AD6424304B)end;
	NetworkDisableLeaveRemotePedBehind=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xC505036A35AFD01B,toggle)end;
	NetworkAllowRemoteAttachmentModification=function(entity--[[@param entity integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x267C78C60E806B9A,entity,toggle)end;
	--[=[Does nothing (it's a nullsub).]=]
	NetworkShowChatRestrictionMsc=function(player--[[@param player integer]])return InvokeVoid(0x6BFF5F84102DF80A,player)end;
	--[=[This native does absolutely nothing, just a nullsub]=]
	NetworkShowPsnUgcRestriction=function()return InvokeVoid(0x5C497525F803486B)end;
	--[=[This function is hard-coded to always return 0.]=]
	NetworkIsTitleUpdateRequired=function()return InvokeBool(0x6FB7BB3607D27FA2)end;---@return boolean
	NetworkQuitMpToDesktop=function()return InvokeVoid(0x45A83257ED02D9BC)end;
	NetworkIsConnectedViaRelay=function(player--[[@param player integer]])return InvokeBool(0x16D3D49902F697BB,player)end;---@return boolean
	NetworkGetAverageLatency=function(player--[[@param player integer]])return InvokeFloat(0xD414BE129BB81B32,player)end;---@return number
	--[=[Same as NETWORK_GET_AVERAGE_LATENCY]=]
	NetworkGetAveragePing=function(player--[[@param player integer]])return InvokeFloat(0x0E3A041ED6AC2B45,player)end;---@return number
	NetworkGetAveragePacketLoss=function(player--[[@param player integer]])return InvokeFloat(0x350C23949E43686C,player)end;---@return number
	NetworkGetNumUnackedReliables=function(player--[[@param player integer]])return InvokeInt(0xFF8FCF9FFC458A1C,player)end;---@return integer
	NetworkGetUnreliableResendCount=function(player--[[@param player integer]])return InvokeInt(0x3765C3A3E8192E10,player)end;---@return integer
	NetworkGetHighestReliableResendCount=function(player--[[@param player integer]])return InvokeInt(0x52C1EADAF7B10302,player)end;---@return integer
	NetworkReportCodeTamper=function()return InvokeVoid(0x5626D9D6810730D5)end;
	NetworkGetLastEntityPosReceivedOverNetwork=function(entity--[[@param entity integer]])return InvokeV3(0x64D779659BC37B19,entity)end;---@return V3
	--[=[Returns the coordinates of another player.
Does not work if you enter your own player id as p0 (will return `(0.0, 0.0, 0.0)` in that case).]=]
	NetworkGetLastPlayerPosReceivedOverNetwork=function(player--[[@param player integer]])return InvokeV3(0x125E6D638B8605D4,player)end;---@return V3
	--[=[Used by NetBlender]=]
	NetworkGetLastVelReceivedOverNetwork=function(entity--[[@param entity integer]])return InvokeV3(0x33DE49EDF4DDE77A,entity)end;---@return V3
	NetworkGetPredictedVelocity=function(entity--[[@param entity integer]],maxSpeedToPredict--[[@param maxSpeedToPredict number]])return InvokeV3(0xAA5FAFCD2C5F5E47,entity,maxSpeedToPredict+.0)end;---@return V3
	--[=[Does nothing (it's a nullsub).]=]
	NetworkDumpNetIfConfig=function()return InvokeVoid(0xAEDF1BC1C133D6E3)end;
	--[=[Does nothing (it's a nullsub).]=]
	NetworkGetSignallingInfo=function(p0--[[@param p0 any*]])return InvokeVoid(0x2555CF7DA5473794,p0)end;
	--[=[Does nothing (it's a nullsub).]=]
	NetworkGetNetStatisticsInfo=function(p0--[[@param p0 any*]])return InvokeVoid(0x6FD992C4A1C1B986,p0)end;
	NetworkGetPlayerAccountId=function(player--[[@param player integer]])return InvokeInt(0xDB663CC9FF3407A9,player)end;---@return integer
	NetworkUgcNav=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0xC1447451DDB512F0,p0,p1)end;
}
_G.Object={
	--[=[List of object models that can be created without any additional effort like making sure ytyp is loaded etc: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ObjectList.ini]=]
	CreateObject=function(modelHash--[[@param modelHash integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],isNetwork--[[@param isNetwork boolean]],bScriptHostObj--[[@param bScriptHostObj boolean]],dynamic--[[@param dynamic boolean]])return InvokeInt(0x509D5878EB39E842,modelHash,x+.0,y+.0,z+.0,isNetwork,bScriptHostObj,dynamic)end;---@return integer
	--[=[List of object models that can be created without any additional effort like making sure ytyp is loaded etc: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ObjectList.ini]=]
	CreateObjectNoOffset=function(modelHash--[[@param modelHash integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],isNetwork--[[@param isNetwork boolean]],bScriptHostObj--[[@param bScriptHostObj boolean]],dynamic--[[@param dynamic boolean]])return InvokeInt(0x9A294B2138ABB884,modelHash,x+.0,y+.0,z+.0,isNetwork,bScriptHostObj,dynamic)end;---@return integer
	--[=[Deletes the specified object, then sets the handle pointed to by the pointer to NULL.]=]
	DeleteObject=function(object--[[@param object integer*]])return InvokeVoid(0x539E0AE3E6634B9F,object)end;
	PlaceObjectOnGroundProperly=function(object--[[@param object integer]])return InvokeBool(0x58A850EAEE20FAA3,object)end;---@return boolean
	PlaceObjectOnGroundOrObjectProperly=function(object--[[@param object integer]])return InvokeBool(0xD76EEEF746057FD6,object)end;---@return boolean
	RotateObject=function(object--[[@param object integer]],p1--[[@param p1 number]],p2--[[@param p2 number]],p3--[[@param p3 boolean]])return InvokeBool(0xAFE24E4D29249E4A,object,p1+.0,p2+.0,p3)end;---@return boolean
	--[=[Returns true if the object has finished moving.

If false, moves the object towards the specified X, Y and Z coordinates with the specified X, Y and Z speed.

See also: https://gtagmodding.com/opcode-database/opcode/034E/
Has to be looped until it returns true.]=]
	SlideObject=function(object--[[@param object integer]],toX--[[@param toX number]],toY--[[@param toY number]],toZ--[[@param toZ number]],speedX--[[@param speedX number]],speedY--[[@param speedY number]],speedZ--[[@param speedZ number]],collision--[[@param collision boolean]])return InvokeBool(0x2FDFF4107B8C1147,object,toX+.0,toY+.0,toZ+.0,speedX+.0,speedY+.0,speedZ+.0,collision)end;---@return boolean
	SetObjectTargettable=function(object--[[@param object integer]],targettable--[[@param targettable boolean]])return InvokeVoid(0x8A7391690F5AFD81,object,targettable)end;
	--[=[Overrides a flag on the object which determines if the object should be avoided by a vehicle in task CTaskVehicleGoToPointWithAvoidanceAutomobile.]=]
	SetObjectForceVehiclesToAvoid=function(object--[[@param object integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x77F33F2CCF64B3AA,object,toggle)end;
	--[=[Has 8 params in the latest patches.

isMission - if true doesn't return mission objects]=]
	GetClosestObjectOfType=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]],modelHash--[[@param modelHash integer]],isMission--[[@param isMission boolean]],p6--[[@param p6 boolean]],p7--[[@param p7 boolean]])return InvokeInt(0xE143FA2249364369,x+.0,y+.0,z+.0,radius+.0,modelHash,isMission,p6,p7)end;---@return integer
	HasObjectBeenBroken=function(object--[[@param object integer]],p1--[[@param p1 any]])return InvokeBool(0x8ABFB70C49CC43E2,object,p1)end;---@return boolean
	HasClosestObjectOfTypeBeenBroken=function(p0--[[@param p0 number]],p1--[[@param p1 number]],p2--[[@param p2 number]],p3--[[@param p3 number]],modelHash--[[@param modelHash integer]],p5--[[@param p5 any]])return InvokeBool(0x761B0E69AC4D007E,p0+.0,p1+.0,p2+.0,p3+.0,modelHash,p5)end;---@return boolean
	HasClosestObjectOfTypeBeenCompletelyDestroyed=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]],modelHash--[[@param modelHash integer]],p5--[[@param p5 boolean]])return InvokeBool(0x46494A2475701343,x+.0,y+.0,z+.0,radius+.0,modelHash,p5)end;---@return boolean
	GetHasObjectBeenCompletelyDestroyed=function(p0--[[@param p0 any]])return InvokeBool(0x2542269291C6AC84,p0)end;---@return boolean
	GetOffsetFromCoordAndHeadingInWorldCoords=function(xPos--[[@param xPos number]],yPos--[[@param yPos number]],zPos--[[@param zPos number]],heading--[[@param heading number]],xOffset--[[@param xOffset number]],yOffset--[[@param yOffset number]],zOffset--[[@param zOffset number]])return InvokeV3(0x163E252DE035A133,xPos+.0,yPos+.0,zPos+.0,heading+.0,xOffset+.0,yOffset+.0,zOffset+.0)end;---@return V3
	GetCoordsAndRotationOfClosestObjectOfType=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]],modelHash--[[@param modelHash integer]],outPosition--[[@param outPosition V3*]],outRotation--[[@param outRotation V3*]],rotationOrder--[[@param rotationOrder integer]])return InvokeBool(0x163F8B586BC95F2A,x+.0,y+.0,z+.0,radius+.0,modelHash,outPosition,outRotation,rotationOrder)end;---@return boolean
	--[=[Hardcoded to not work in multiplayer.


Used to lock/unlock doors to interior areas of the game.

(Possible) Door Types:

https://pastebin.com/9S2m3qA4

Heading is either 1, 0 or -1 in the scripts. Means default closed(0) or opened either into(1) or out(-1) of the interior.
Locked means that the heading is locked.  
p6 is always 0. 

225 door types, model names and coords found in stripclub.c4:
https://pastebin.com/gywnbzsH

get door info: https://pastebin.com/i14rbekD]=]
	SetStateOfClosestDoorOfType=function(type--[[@param type integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],locked--[[@param locked boolean]],heading--[[@param heading number]],p6--[[@param p6 boolean]])return InvokeVoid(0xF82D8F1926A02C3D,type,x+.0,y+.0,z+.0,locked,heading+.0,p6)end;
	--[=[locked is 0 if no door is found
locked is 0 if door is unlocked
locked is 1 if door is found and unlocked.

-------------
the locked bool is either 0(unlocked)(false) or 1(locked)(true)]=]
	GetStateOfClosestDoorOfType=function(type--[[@param type integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],locked--[[@param locked boolean*]],heading--[[@param heading number*]])return InvokeVoid(0xEDC1A5B84AEF33FF,type,x+.0,y+.0,z+.0,locked,heading)end;
	--[=[Hardcoded not to work in multiplayer environments.
When you set locked to 0 the door open and to 1 the door close
OBJECT::SET_LOCKED_UNSTREAMED_IN_DOOR_OF_TYPE(${prop_gate_prison_01}, 1845.0, 2605.0, 45.0, 0, 0.0, 50.0, 0);  //door open

OBJECT::SET_LOCKED_UNSTREAMED_IN_DOOR_OF_TYPE(${prop_gate_prison_01}, 1845.0, 2605.0, 45.0, 1, 0.0, 50.0, 0);  //door close]=]
	SetLockedUnstreamedInDoorOfType=function(modelHash--[[@param modelHash integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],locked--[[@param locked boolean]],xRotMult--[[@param xRotMult number]],yRotMult--[[@param yRotMult number]],zRotMult--[[@param zRotMult number]])return InvokeVoid(0x9B12F9A24FABEDB0,modelHash,x+.0,y+.0,z+.0,locked,xRotMult+.0,yRotMult+.0,zRotMult+.0)end;
	PlayObjectAutoStartAnim=function(p0--[[@param p0 any]])return InvokeVoid(0x006E4B040ED37EC3,p0)end;
	--[=[doorHash has to be unique. scriptDoor false; relies upon getNetworkGameScriptHandler. isLocal On true disables the creation CRequestDoorEvent's in DOOR_SYSTEM_SET_DOOR_STATE.
p5 only set to true in single player native scripts.
If scriptDoor is true, register the door on the script handler host (note: there's a hardcap on the number of script IDs that can be added to the system at a given time). If scriptDoor and isLocal are both false, the door is considered to be in a "Persists w/o netobj" state.

door hashes normally look like PROP_[int]_DOOR_[int] for interior doors and PROP_BUILDING_[int]_DOOR_[int] exterior doors but you can just make up your own hash if you want
All doors need to be registered with ADD_DOOR_TO_SYSTEM before they can be manipulated with the door natives and the easiest way to get door models is just find the door in codewalker.

Example: AddDoorToSystem("PROP_43_DOOR_0", "hei_v_ilev_fh_heistdoor2", -1456.818, -520.5037, 69.67043, 0, 0, 0)]=]
	AddDoorToSystem=function(doorHash--[[@param doorHash integer]],modelHash--[[@param modelHash integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],p5--[[@param p5 boolean]],scriptDoor--[[@param scriptDoor boolean]],isLocal--[[@param isLocal boolean]])return InvokeVoid(0x6F8838D03D1DC226,doorHash,modelHash,x+.0,y+.0,z+.0,p5,scriptDoor,isLocal)end;
	--[=[CDoor and CDoorSystemData still internally allocated (and their associations between doorHash, modelHash, and coordinates).
Only its NetObj removed and flag ``*(v2 + 192) |= 8u`` (1604 retail) toggled.]=]
	RemoveDoorFromSystem=function(doorHash--[[@param doorHash integer]],p1--[[@param p1 any]])return InvokeVoid(0x464D8E1427156FE4,doorHash,p1)end;
	--[=[Lockstates not applied and CNetObjDoor's not created until DOOR_SYSTEM_GET_IS_PHYSICS_LOADED returns true.
`requestDoor` on true, and when door system is configured to, i.e., "persists w/o netobj", generate a CRequestDoorEvent.
`forceUpdate` on true, forces an update on the door system (same path as netObjDoor_applyDoorStuff)
Door lock states:
0: UNLOCKED
1: LOCKED
2: DOORSTATE_FORCE_LOCKED_UNTIL_OUT_OF_AREA
3: DOORSTATE_FORCE_UNLOCKED_THIS_FRAME
4: DOORSTATE_FORCE_LOCKED_THIS_FRAME
5: DOORSTATE_FORCE_OPEN_THIS_FRAME
6: DOORSTATE_FORCE_CLOSED_THIS_FRAME]=]
	DoorSystemSetDoorState=function(doorHash--[[@param doorHash integer]],state--[[@param state integer]],requestDoor--[[@param requestDoor boolean]],forceUpdate--[[@param forceUpdate boolean]])return InvokeVoid(0x6BAB9442830C7F53,doorHash,state,requestDoor,forceUpdate)end;
	DoorSystemGetDoorState=function(doorHash--[[@param doorHash integer]])return InvokeInt(0x160AA1B32F6139B8,doorHash)end;---@return integer
	DoorSystemGetDoorPendingState=function(doorHash--[[@param doorHash integer]])return InvokeInt(0x4BC2854478F3A749,doorHash)end;---@return integer
	--[=[Includes networking check: ownership vs. or the door itself **isn't** networked.
`forceUpdate` on true invokes DOOR_SYSTEM_SET_DOOR_STATE otherwise requestDoor is unused.]=]
	DoorSystemSetAutomaticRate=function(doorHash--[[@param doorHash integer]],rate--[[@param rate number]],requestDoor--[[@param requestDoor boolean]],forceUpdate--[[@param forceUpdate boolean]])return InvokeVoid(0x03C27E13B42A0E82,doorHash,rate+.0,requestDoor,forceUpdate)end;
	--[=[`forceUpdate` on true invokes DOOR_SYSTEM_SET_DOOR_STATE otherwise requestDoor is unused.]=]
	DoorSystemSetAutomaticDistance=function(doorHash--[[@param doorHash integer]],distance--[[@param distance number]],requestDoor--[[@param requestDoor boolean]],forceUpdate--[[@param forceUpdate boolean]])return InvokeVoid(0x9BA001CB45CBF627,doorHash,distance+.0,requestDoor,forceUpdate)end;
	--[=[Sets the ajar angle of a door.
Ranges from -1.0 to 1.0, and 0.0 is closed / default.
`forceUpdate` on true invokes DOOR_SYSTEM_SET_DOOR_STATE otherwise requestDoor is unused.]=]
	DoorSystemSetOpenRatio=function(doorHash--[[@param doorHash integer]],ajar--[[@param ajar number]],requestDoor--[[@param requestDoor boolean]],forceUpdate--[[@param forceUpdate boolean]])return InvokeVoid(0xB6E6FBA95C7324AC,doorHash,ajar+.0,requestDoor,forceUpdate)end;
	DoorSystemGetAutomaticDistance=function(doorHash--[[@param doorHash integer]])return InvokeFloat(0xE851471AEFC3374F,doorHash)end;---@return number
	DoorSystemGetOpenRatio=function(doorHash--[[@param doorHash integer]])return InvokeFloat(0x65499865FCA6E5EC,doorHash)end;---@return number
	--[=[Includes networking check: ownership vs. or the door itself **isn't** networked.
`forceUpdate` on true invokes DOOR_SYSTEM_SET_DOOR_STATE otherwise requestDoor is unused.]=]
	DoorSystemSetSpringRemoved=function(doorHash--[[@param doorHash integer]],removed--[[@param removed boolean]],requestDoor--[[@param requestDoor boolean]],forceUpdate--[[@param forceUpdate boolean]])return InvokeVoid(0xC485E07E4F0B7958,doorHash,removed,requestDoor,forceUpdate)end;
	--[=[Includes networking check: ownership vs. or the door itself **isn't** networked.]=]
	DoorSystemSetHoldOpen=function(doorHash--[[@param doorHash integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xD9B71952F78A2640,doorHash,toggle)end;
	--[=[Some property related to gates. Native name between ``DOOR_SYSTEM_SET_AUTOMATIC_RATE`` and ``DOOR_SYSTEM_SET_DOOR_STATE``.]=]
	DoorSystemSetDoorOpenForRaces=function(doorHash--[[@param doorHash integer]],p1--[[@param p1 boolean]])return InvokeVoid(0xA85A21582451E951,doorHash,p1)end;
	--[=[if (OBJECT::IS_DOOR_REGISTERED_WITH_SYSTEM(doorHash)) 
{
    OBJECT::REMOVE_DOOR_FROM_SYSTEM(doorHash);
}]=]
	IsDoorRegisteredWithSystem=function(doorHash--[[@param doorHash integer]])return InvokeBool(0xC153C43EA202C8C1,doorHash)end;---@return boolean
	IsDoorClosed=function(doorHash--[[@param doorHash integer]])return InvokeBool(0xC531EE8A1145A149,doorHash)end;---@return boolean
	OpenAllBarriersForRace=function(p0--[[@param p0 boolean]])return InvokeVoid(0xC7F29CA00F46350E,p0)end;
	--[=[Clears the fields sets by 0xC7F29CA00F46350E (1604 retail: 0x1424A7A10, 0x1424A7A11) and iterates over the global CDoor's bucket-list.
Related to its "Pre-networked state"?]=]
	CloseAllBarriersForRace=function()return InvokeVoid(0x701FDA1E82076BA4)end;
	DoorSystemGetIsPhysicsLoaded=function(p0--[[@param p0 any]])return InvokeBool(0xDF97CDD4FC08FD34,p0)end;---@return boolean
	--[=[Search radius: 0.5]=]
	DoorSystemFindExistingDoor=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],modelHash--[[@param modelHash integer]],outDoorHash--[[@param outDoorHash integer*]])return InvokeBool(0x589F80B325CC82C5,x+.0,y+.0,z+.0,modelHash,outDoorHash)end;---@return boolean
	IsGarageEmpty=function(garageHash--[[@param garageHash integer]],p1--[[@param p1 boolean]],p2--[[@param p2 integer]])return InvokeBool(0x90E47239EA1980B8,garageHash,p1,p2)end;---@return boolean
	IsPlayerEntirelyInsideGarage=function(garageHash--[[@param garageHash integer]],player--[[@param player integer]],p2--[[@param p2 number]],p3--[[@param p3 integer]])return InvokeBool(0x024A60DEB0EA69F0,garageHash,player,p2+.0,p3)end;---@return boolean
	IsPlayerPartiallyInsideGarage=function(garageHash--[[@param garageHash integer]],player--[[@param player integer]],p2--[[@param p2 integer]])return InvokeBool(0x1761DC5D8471CBAA,garageHash,player,p2)end;---@return boolean
	AreEntitiesEntirelyInsideGarage=function(garageHash--[[@param garageHash integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],p3--[[@param p3 boolean]],p4--[[@param p4 any]])return InvokeBool(0x85B6C850546FDDE2,garageHash,p1,p2,p3,p4)end;---@return boolean
	IsAnyEntityEntirelyInsideGarage=function(garageHash--[[@param garageHash integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],p3--[[@param p3 boolean]],p4--[[@param p4 any]])return InvokeBool(0x673ED815D6E323B7,garageHash,p1,p2,p3,p4)end;---@return boolean
	--[=[Despite the name, it does work for any entity type.]=]
	IsObjectEntirelyInsideGarage=function(garageHash--[[@param garageHash integer]],entity--[[@param entity integer]],p2--[[@param p2 number]],p3--[[@param p3 integer]])return InvokeBool(0x372EF6699146A1E4,garageHash,entity,p2+.0,p3)end;---@return boolean
	--[=[Despite the name, it does work for any entity type.]=]
	IsObjectPartiallyInsideGarage=function(garageHash--[[@param garageHash integer]],entity--[[@param entity integer]],p2--[[@param p2 integer]])return InvokeBool(0xF0EED5A6BC7B237A,garageHash,entity,p2)end;---@return boolean
	ClearGarage=function(garageHash--[[@param garageHash integer]],isNetwork--[[@param isNetwork boolean]])return InvokeVoid(0xDA05194260CDCDF9,garageHash,isNetwork)end;
	ClearObjectsInsideGarage=function(garageHash--[[@param garageHash integer]],vehicles--[[@param vehicles boolean]],peds--[[@param peds boolean]],objects--[[@param objects boolean]],isNetwork--[[@param isNetwork boolean]])return InvokeVoid(0x190428512B240692,garageHash,vehicles,peds,objects,isNetwork)end;
	--[=[Sets a flag. A valid id is 0x157DC10D]=]
	DisableTidyingUpInGarage=function(id--[[@param id integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x659F9D71F52843F8,id,toggle)end;
	EnableSavingInGarage=function(garageHash--[[@param garageHash integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xF2E1A7133DD356A6,garageHash,toggle)end;
	CloseSafehouseGarages=function()return InvokeVoid(0x66A49D021870FE88)end;
	--[=[p5 is usually 0.]=]
	DoesObjectOfTypeExistAtCoords=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]],hash--[[@param hash integer]],p5--[[@param p5 boolean]])return InvokeBool(0xBFA48E2FF417213F,x+.0,y+.0,z+.0,radius+.0,hash,p5)end;---@return boolean
	--[=[An angled area is an X-Z oriented rectangle with three parameters:
1. origin: the mid-point along a base edge of the rectangle;
2. extent: the mid-point of opposite base edge on the other Z;
3. width: the length of the base edge; (named derived from logging strings ``CNetworkRoadNodeWorldStateData``).

The oriented rectangle can then be derived from the direction of the two points (``norm(origin - extent)``), its orthonormal, and the width, e.g:
1. golf_mp https://i.imgur.com/JhsQAK9.png
2. am_taxi https://i.imgur.com/TJWCZaT.jpg]=]
	IsPointInAngledArea=function(xPos--[[@param xPos number]],yPos--[[@param yPos number]],zPos--[[@param zPos number]],x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],width--[[@param width number]],debug--[[@param debug boolean]],includeZ--[[@param includeZ boolean]])return InvokeBool(0x2A70BAE8883E4C81,xPos+.0,yPos+.0,zPos+.0,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,width+.0,debug,includeZ)end;---@return boolean
	--[=[Overrides the climbing/blocking flags of the object, used in the native scripts mostly for "prop_dock_bouy_*"]=]
	SetObjectAllowLowLodBuoyancy=function(object--[[@param object integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x4D89D607CB3DD1D2,object,toggle)end;
	--[=[Adjust the physics parameters of a prop, or otherwise known as "object". This is useful for simulated gravity.

Other parameters seem to be unknown.

p2: seems to be weight and gravity related. Higher value makes the obj fall faster. Very sensitive?
p3: seems similar to p2
p4: makes obj fall slower the higher the value
p5: similar to p4]=]
	SetObjectPhysicsParams=function(object--[[@param object integer]],weight--[[@param weight number]],p2--[[@param p2 number]],p3--[[@param p3 number]],p4--[[@param p4 number]],p5--[[@param p5 number]],gravity--[[@param gravity number]],p7--[[@param p7 number]],p8--[[@param p8 number]],p9--[[@param p9 number]],p10--[[@param p10 number]],buoyancy--[[@param buoyancy number]])return InvokeVoid(0xF6DF6E90DE7DF90F,object,weight+.0,p2+.0,p3+.0,p4+.0,p5+.0,gravity+.0,p7+.0,p8+.0,p9+.0,p10+.0,buoyancy+.0)end;
	GetObjectFragmentDamageHealth=function(p0--[[@param p0 any]],p1--[[@param p1 boolean]])return InvokeFloat(0xB6FBFD079B8D0596,p0,p1)end;---@return number
	SetActivateObjectPhysicsAsSoonAsItIsUnfrozen=function(object--[[@param object integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x406137F8EF90EAF5,object,toggle)end;
	IsAnyObjectNearPoint=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],range--[[@param range number]],p4--[[@param p4 boolean]])return InvokeBool(0x397DC58FF00298D1,x+.0,y+.0,z+.0,range+.0,p4)end;---@return boolean
	IsObjectNearPoint=function(objectHash--[[@param objectHash integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],range--[[@param range number]])return InvokeBool(0x8C90FE4B381BA60A,objectHash,x+.0,y+.0,z+.0,range+.0)end;---@return boolean
	RemoveObjectHighDetailModel=function(object--[[@param object integer]])return InvokeVoid(0x4A39DB43E47CF3AA,object)end;
	BreakObjectFragmentChild=function(p0--[[@param p0 integer]],p1--[[@param p1 any]],p2--[[@param p2 boolean]])return InvokeVoid(0xE7E4C198B0185900,p0,p1,p2)end;
	DamageObjectFragmentChild=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0xE05F6AEEFEB0BB02,p0,p1,p2)end;
	FixObjectFragment=function(object--[[@param object integer]])return InvokeVoid(0xF9C1681347C8BD15,object)end;
	TrackObjectVisibility=function(object--[[@param object integer]])return InvokeVoid(0xB252BC036B525623,object)end;
	IsObjectVisible=function(object--[[@param object integer]])return InvokeBool(0x8B32ACE6326A7546,object)end;---@return boolean
	SetObjectIsSpecialGolfball=function(object--[[@param object integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xC6033D32241F6FB5,object,toggle)end;
	SetObjectTakesDamageFromCollidingWithBuildings=function(p0--[[@param p0 any]],p1--[[@param p1 boolean]])return InvokeVoid(0xEB6F1A9B5510A5D2,p0,p1)end;
	AllowDamageEventsForNonNetworkedObjects=function(value--[[@param value boolean]])return InvokeVoid(0xABDABF4E1EDECBFA,value)end;
	--[=[Requires a component_at_*_flsh to be attached to the weapon object]=]
	SetCutscenesWeaponFlashlightOnThisFrame=function(object--[[@param object integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xBCE595371A5FBAAF,object,toggle)end;
	--[=[Example:
OBJECT::GET_RAYFIRE_MAP_OBJECT(-809.9619750976562, 170.919, 75.7406997680664, 3.0, "des_tvsmash");]=]
	GetRayfireMapObject=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]],name--[[@param name string]])return InvokeInt(0xB48FCED898292E52,x+.0,y+.0,z+.0,radius+.0,name)end;---@return integer
	--[=[Defines the state of a destructible object.
Use the GET_RAYFIRE_MAP_OBJECT native to find an object's handle with its name / coords.
State 2 == object just spawned
State 4 == Beginning of the animation
State 6 == Start animation
State 9 == End of the animation]=]
	SetStateOfRayfireMapObject=function(object--[[@param object integer]],state--[[@param state integer]])return InvokeVoid(0x5C29F698D404C5E1,object,state)end;
	--[=[Get a destructible object's state.
Substract 1 to get the real state.
See SET_STATE_OF_RAYFIRE_MAP_OBJECT to see the different states
For example, if the object just spawned (state 2), the native will return 3.]=]
	GetStateOfRayfireMapObject=function(object--[[@param object integer]])return InvokeInt(0x899BA936634A322E,object)end;---@return integer
	--[=[Returns true if a destructible object with this handle exists, false otherwise.  ]=]
	DoesRayfireMapObjectExist=function(object--[[@param object integer]])return InvokeBool(0x52AF537A0C5B8AAD,object)end;---@return boolean
	--[=[`object`: The des-object handle to get the animation progress from.
Return value is a float between 0.0 and 1.0, 0.0 is the beginning of the animation, 1.0 is the end. Value resets to 0.0 instantly after reaching 1.0.]=]
	GetRayfireMapObjectAnimPhase=function(object--[[@param object integer]])return InvokeFloat(0x260EE4FDBDF4DB01,object)end;---@return number
	--[=[Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json]=]
	CreatePickup=function(pickupHash--[[@param pickupHash integer]],posX--[[@param posX number]],posY--[[@param posY number]],posZ--[[@param posZ number]],p4--[[@param p4 integer]],value--[[@param value integer]],p6--[[@param p6 boolean]],modelHash--[[@param modelHash integer]])return InvokeInt(0xFBA08C503DD5FA58,pickupHash,posX+.0,posY+.0,posZ+.0,p4,value,p6,modelHash)end;---@return integer
	--[=[flags:
8 (1 << 3): place on ground
512 (1 << 9): spin around

Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json]=]
	CreatePickupRotate=function(pickupHash--[[@param pickupHash integer]],posX--[[@param posX number]],posY--[[@param posY number]],posZ--[[@param posZ number]],rotX--[[@param rotX number]],rotY--[[@param rotY number]],rotZ--[[@param rotZ number]],flag--[[@param flag integer]],amount--[[@param amount integer]],p9--[[@param p9 any]],p10--[[@param p10 boolean]],modelHash--[[@param modelHash integer]])return InvokeInt(0x891804727E0A98B7,pickupHash,posX+.0,posY+.0,posZ+.0,rotX+.0,rotY+.0,rotZ+.0,flag,amount,p9,p10,modelHash)end;---@return integer
	ForcePickupRotateFaceUp=function()return InvokeVoid(0x394CD08E31313C28)end;
	SetCustomPickupWeaponHash=function(pickupHash--[[@param pickupHash integer]],pickup--[[@param pickup integer]])return InvokeVoid(0x826D1EE4D1CAFC78,pickupHash,pickup)end;
	--[=[Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json]=]
	CreateAmbientPickup=function(pickupHash--[[@param pickupHash integer]],posX--[[@param posX number]],posY--[[@param posY number]],posZ--[[@param posZ number]],flags--[[@param flags integer]],value--[[@param value integer]],modelHash--[[@param modelHash integer]],p7--[[@param p7 boolean]],p8--[[@param p8 boolean]])return InvokeInt(0x673966A0C0FD7171,pickupHash,posX+.0,posY+.0,posZ+.0,flags,value,modelHash,p7,p8)end;---@return integer
	CreateNonNetworkedAmbientPickup=function(pickupHash--[[@param pickupHash integer]],posX--[[@param posX number]],posY--[[@param posY number]],posZ--[[@param posZ number]],flags--[[@param flags integer]],value--[[@param value integer]],modelHash--[[@param modelHash integer]],p7--[[@param p7 boolean]],p8--[[@param p8 boolean]])return InvokeInt(0x9C93764223E29C50,pickupHash,posX+.0,posY+.0,posZ+.0,flags,value,modelHash,p7,p8)end;---@return integer
	BlockPlayersForAmbientPickup=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x1E3F1B1B891A2AAA,p0,p1)end;
	--[=[Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json]=]
	CreatePortablePickup=function(pickupHash--[[@param pickupHash integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],placeOnGround--[[@param placeOnGround boolean]],modelHash--[[@param modelHash integer]])return InvokeInt(0x2EAF1FDB2FB55698,pickupHash,x+.0,y+.0,z+.0,placeOnGround,modelHash)end;---@return integer
	--[=[Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json]=]
	CreateNonNetworkedPortablePickup=function(pickupHash--[[@param pickupHash integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],placeOnGround--[[@param placeOnGround boolean]],modelHash--[[@param modelHash integer]])return InvokeInt(0x125494B98A21AAF7,pickupHash,x+.0,y+.0,z+.0,placeOnGround,modelHash)end;---@return integer
	AttachPortablePickupToPed=function(pickupObject--[[@param pickupObject integer]],ped--[[@param ped integer]])return InvokeVoid(0x8DC39368BDD57755,pickupObject,ped)end;
	DetachPortablePickupFromPed=function(pickupObject--[[@param pickupObject integer]])return InvokeVoid(0xCF463D1E9A0AECB1,pickupObject)end;
	ForcePortablePickupLastAccessiblePositionSetting=function(object--[[@param object integer]])return InvokeVoid(0x5CE2E45A5CE2E45A,object)end;
	HidePortablePickupWhenDetached=function(pickupObject--[[@param pickupObject integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x867458251D47CCB2,pickupObject,toggle)end;
	SetMaxNumPortablePickupsCarriedByPlayer=function(modelHash--[[@param modelHash integer]],number--[[@param number integer]])return InvokeVoid(0x0BF3B3BD47D79C08,modelHash,number)end;
	SetLocalPlayerCanCollectPortablePickups=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x78857FC65CADB909,toggle)end;
	GetSafePickupCoords=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],p3--[[@param p3 number]],p4--[[@param p4 number]])return InvokeV3(0x6E16BC2503FF1FF0,x+.0,y+.0,z+.0,p3+.0,p4+.0)end;---@return V3
	--[=[Adds an area that seems to be related to pickup physics behavior.
Max amount of areas is 10. Only works in multiplayer.]=]
	AddExtendedPickupProbeArea=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]])return InvokeVoid(0xD4A7A435B3710D05,x+.0,y+.0,z+.0,radius+.0)end;
	--[=[Clears all areas created by ADD_EXTENDED_PICKUP_PROBE_AREA]=]
	ClearExtendedPickupProbeAreas=function()return InvokeVoid(0xB7C6D80FB371659A)end;
	GetPickupCoords=function(pickup--[[@param pickup integer]])return InvokeV3(0x225B8B35C88029B3,pickup)end;---@return V3
	SuppressPickupSoundForPickup=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x8DCA505A5C196F05,p0,p1)end;
	--[=[Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json]=]
	RemoveAllPickupsOfType=function(pickupHash--[[@param pickupHash integer]])return InvokeVoid(0x27F9D613092159CF,pickupHash)end;
	HasPickupBeenCollected=function(pickup--[[@param pickup integer]])return InvokeBool(0x80EC48E6679313F9,pickup)end;---@return boolean
	RemovePickup=function(pickup--[[@param pickup integer]])return InvokeVoid(0x3288D8ACAECD2AB2,pickup)end;
	--[=[Spawns one or more money pickups.

x: The X-component of the world position to spawn the money pickups at.
y: The Y-component of the world position to spawn the money pickups at.
z: The Z-component of the world position to spawn the money pickups at.
value: The combined value of the pickups (in dollars).
amount: The number of pickups to spawn.
model: The model to use, or 0 for default money model.

Example:
CREATE_MONEY_PICKUPS(x, y, z, 1000, 3, 0x684a97ae);

Spawns 3 spray cans that'll collectively give $1000 when picked up. (Three spray cans, each giving $334, $334, $332 = $1000).

==============================================

Max is 2000 in MP. So if you put the amount to 20, but the value to $400,000 eg. They will only be able to pickup 20 - $2,000 bags. So, $40,000]=]
	CreateMoneyPickups=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],value--[[@param value integer]],amount--[[@param amount integer]],model--[[@param model integer]])return InvokeVoid(0x0589B5E791CE9B2B,x+.0,y+.0,z+.0,value,amount,model)end;
	DoesPickupExist=function(pickup--[[@param pickup integer]])return InvokeBool(0xAFC1CA75AD4074D1,pickup)end;---@return boolean
	DoesPickupObjectExist=function(pickupObject--[[@param pickupObject integer]])return InvokeBool(0xD9EFB6DBF7DAAEA3,pickupObject)end;---@return boolean
	GetPickupObject=function(pickup--[[@param pickup integer]])return InvokeInt(0x5099BC55630B25AE,pickup)end;---@return integer
	IsObjectAPickup=function(object--[[@param object integer]])return InvokeBool(0xFC481C641EBBD27D,object)end;---@return boolean
	IsObjectAPortablePickup=function(object--[[@param object integer]])return InvokeBool(0x0378C08504160D0D,object)end;---@return boolean
	--[=[Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json]=]
	DoesPickupOfTypeExistInArea=function(pickupHash--[[@param pickupHash integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]])return InvokeBool(0xF9C36251F6E48E33,pickupHash,x+.0,y+.0,z+.0,radius+.0)end;---@return boolean
	SetPickupRegenerationTime=function(pickup--[[@param pickup integer]],duration--[[@param duration integer]])return InvokeVoid(0x78015C9B4B3ECC9D,pickup,duration)end;
	ForcePickupRegenerate=function(p0--[[@param p0 any]])return InvokeVoid(0x758A5C1B3B1E1990,p0)end;
	--[=[Disabling/enabling a player from getting pickups. From the scripts:

OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);
OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);
OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 1);
OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);
OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_armour_standard}, 0);
OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_armour_standard}, 1);

Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json]=]
	SetPlayerPermittedToCollectPickupsOfType=function(player--[[@param player integer]],pickupHash--[[@param pickupHash integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x616093EC6B139DD9,player,pickupHash,toggle)end;
	--[=[Maximum amount of pickup models that can be disallowed is 30.]=]
	SetLocalPlayerPermittedToCollectPickupsWithModel=function(modelHash--[[@param modelHash integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x88EAEC617CD26926,modelHash,toggle)end;
	--[=[Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json]=]
	AllowAllPlayersToCollectPickupsOfType=function(pickupHash--[[@param pickupHash integer]])return InvokeVoid(0xFDC07C58E8AAB715,pickupHash)end;
	SetTeamPickupObject=function(object--[[@param object integer]],p1--[[@param p1 any]],p2--[[@param p2 boolean]])return InvokeVoid(0x53E0DF1A2A3CF0CA,object,p1,p2)end;
	PreventCollectionOfPortablePickup=function(object--[[@param object integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0x92AEFB5F6E294023,object,p1,p2)end;
	SetPickupObjectGlowWhenUncollectable=function(pickup--[[@param pickup integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x27F248C3FEBFAAD3,pickup,toggle)end;
	--[=[p1 is always 0.51. This native is called before SET_PICKUP_REGENERATION_TIME in all occurances.]=]
	SetPickupGlowOffset=function(pickup--[[@param pickup integer]],p1--[[@param p1 number]])return InvokeVoid(0x0596843B34B95CE5,pickup,p1+.0)end;
	--[=[p1 is always -0.2 in scripts and p2 is always true in scripts.]=]
	SetPickupObjectGlowOffset=function(pickup--[[@param pickup integer]],p1--[[@param p1 number]],p2--[[@param p2 boolean]])return InvokeVoid(0xA08FE5E49BDC39DD,pickup,p1+.0,p2)end;
	SetObjectGlowInSameTeam=function(pickup--[[@param pickup integer]])return InvokeVoid(0x62454A641B41F3C5,pickup)end;
	SetPickupObjectArrowMarker=function(pickup--[[@param pickup integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x39A5FB7EAF150840,pickup,toggle)end;
	AllowPickupArrowMarkerWhenUncollectable=function(pickup--[[@param pickup integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x834344A414C7C85D,pickup,toggle)end;
	GetDefaultAmmoForWeaponPickup=function(pickupHash--[[@param pickupHash integer]])return InvokeInt(0xDB41D07A45A6D4B7,pickupHash)end;---@return integer
	SetPickupGenerationRangeMultiplier=function(multiplier--[[@param multiplier number]])return InvokeVoid(0x318516E02DE3ECE2,multiplier+.0)end;
	GetPickupGenerationRangeMultiplier=function()return InvokeFloat(0xB3ECA65C7317F174)end;---@return number
	SetOnlyAllowAmmoCollectionWhenLow=function(p0--[[@param p0 boolean]])return InvokeVoid(0x31F924B53EADDF65,p0)end;
	SetPickupUncollectable=function(pickup--[[@param pickup integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x1C1B69FAE509BA97,pickup,toggle)end;
	SetPickupTransparentWhenUncollectable=function(pickup--[[@param pickup integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x858EC9FD25DE04AA,pickup,toggle)end;
	SetPickupHiddenWhenUncollectable=function(pickup--[[@param pickup integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x3ED2B83AB2E82799,pickup,toggle)end;
	SetPickupObjectTransparentWhenUncollectable=function(pickup--[[@param pickup integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x8881C98A31117998,pickup,toggle)end;
	--[=[p0 is either 0 or 50 in scripts.]=]
	SetPickupObjectAlphaWhenTransparent=function(p0--[[@param p0 integer]])return InvokeVoid(0x8CFF648FBD7330F1,p0)end;
	SetPortablePickupPersist=function(pickup--[[@param pickup integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x46F3ADD1E2D5BAF2,pickup,toggle)end;
	AllowPortablePickupToMigrateToNonParticipants=function(pickup--[[@param pickup integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x641F272B52E2F0F8,pickup,toggle)end;
	ForceActivatePhysicsOnUnfixedPickup=function(pickup--[[@param pickup integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x4C134B4DF76025D0,pickup,toggle)end;
	AllowPickupByNoneParticipant=function(pickup--[[@param pickup integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xAA059C615DE9DD03,pickup,toggle)end;
	--[=[enum ePickupRewardType
{
    PICKUP_REWARD_TYPE_AMMO = (1 << 0),
    PICKUP_REWARD_TYPE_BULLET_MP = (1 << 1),
    PICKUP_REWARD_TYPE_MISSILE_MP = (1 << 2),
    PICKUP_REWARD_TYPE_GRENADE_LAUNCHER_MP = (1 << 3),
    PICKUP_REWARD_TYPE_ARMOUR = (1 << 4),
    PICKUP_REWARD_TYPE_HEALTH = (1 << 5),
    PICKUP_REWARD_TYPE_HEALTH_VARIABLE = PICKUP_REWARD_TYPE_HEALTH,
    PICKUP_REWARD_TYPE_MONEY_FIXED = (1 << 6),
    PICKUP_REWARD_TYPE_MONEY_VARIABLE = PICKUP_REWARD_TYPE_MONEY_FIXED,
    PICKUP_REWARD_TYPE_WEAPON = (1 << 7),
    PICKUP_REWARD_TYPE_STAT = (1 << 8),
    PICKUP_REWARD_TYPE_STAT_VARIABLE = PICKUP_REWARD_TYPE_STAT,
    PICKUP_REWARD_TYPE_VEHICLE_FIX = (1 << 9),
    PICKUP_REWARD_TYPE_FIREWORK_MP = (1 << 10),
};]=]
	SuppressPickupRewardType=function(rewardType--[[@param rewardType integer]],suppress--[[@param suppress boolean]])return InvokeVoid(0xF92099527DB8E2A7,rewardType,suppress)end;
	ClearAllPickupRewardTypeSuppression=function()return InvokeVoid(0xA2C1F5E92AFE49ED)end;
	ClearPickupRewardTypeSuppression=function(rewardType--[[@param rewardType integer]])return InvokeVoid(0x762DB2D380B48D04,rewardType)end;
	--[=[draws circular marker at pos
-1 = none
0 = red
1 = green
2 = blue
3 = green larger
4 = nothing
5 = green small]=]
	RenderFakePickupGlow=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],colorIndex--[[@param colorIndex integer]])return InvokeVoid(0x3430676B11CDF21D,x+.0,y+.0,z+.0,colorIndex)end;
	SetPickupObjectCollectableInVehicle=function(pickup--[[@param pickup integer]])return InvokeVoid(0x7813E8B8C4AE4799,pickup)end;
	SetPickupTrackDamageEvents=function(pickup--[[@param pickup integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xBFFE53AE7E67FCDC,pickup,toggle)end;
	--[=[Sets entity+38 to C (when false) or 0xFF3f (when true)]=]
	SetEntityFlagSuppressShadow=function(entity--[[@param entity integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xD05A3241B9A86F19,entity,toggle)end;
	SetEntityFlagRenderSmallShadow=function(object--[[@param object integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xB2D0BDE54F0E8E5A,object,toggle)end;
	--[=[Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json]=]
	GetWeaponTypeFromPickupType=function(pickupHash--[[@param pickupHash integer]])return InvokeInt(0x08F96CA6C551AD51,pickupHash)end;---@return integer
	--[=[Returns the pickup hash for the given weapon hash]=]
	GetPickupTypeFromWeaponHash=function(weaponHash--[[@param weaponHash integer]])return InvokeInt(0xD6429A016084F1A5,weaponHash)end;---@return integer
	IsPickupWeaponObjectValid=function(object--[[@param object integer]])return InvokeBool(0x11D1E53A726891FE,object)end;---@return boolean
	GetObjectTintIndex=function(object--[[@param object integer]])return InvokeInt(0xE84EB93729C5F36A,object)end;---@return integer
	--[=[enum ObjectPaintVariants
{
 Pacific = 0,
  Azure = 1,
    Nautical = 2,
 Continental = 3,
  Battleship = 4,
   Intrepid = 5,
 Uniform = 6,
  Classico = 7,
 Mediterranean = 8,
    Command = 9,
  Mariner = 10,
 Ruby = 11,
    Vintage = 12,
 Pristine = 13,
    Merchant = 14,
    Voyager = 15
};]=]
	SetObjectTintIndex=function(object--[[@param object integer]],textureVariation--[[@param textureVariation integer]])return InvokeVoid(0x971DA0055324D033,object,textureVariation)end;
	SetTintIndexClosestBuildingOfType=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]],modelHash--[[@param modelHash integer]],textureVariation--[[@param textureVariation integer]])return InvokeBool(0xF12E33034D887F66,x+.0,y+.0,z+.0,radius+.0,modelHash,textureVariation)end;---@return boolean
	SetPropTintIndex=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x31574B1B41268673,p0,p1)end;
	SetPropLightColor=function(object--[[@param object integer]],p1--[[@param p1 boolean]],r--[[@param r integer]],g--[[@param g integer]],b--[[@param b integer]])return InvokeBool(0x5F048334B4A4E774,object,p1,r,g,b)end;---@return boolean
	IsPropLightOverriden=function(object--[[@param object integer]])return InvokeBool(0xADF084FB8F075D06,object)end;---@return boolean
	SetObjectIsVisibleInMirrors=function(object--[[@param object integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x3B2FD68DB5F8331C,object,toggle)end;
	SetObjectSpeedBoostAmount=function(object--[[@param object integer]],p1--[[@param p1 any]])return InvokeVoid(0x96EE0EBA0163DF80,object,p1)end;
	SetObjectSpeedBoostDuration=function(object--[[@param object integer]],duration--[[@param duration number]])return InvokeVoid(0xDF6CA0330F2E737B,object,duration+.0)end;
	--[=[returns pickup hash.

Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json]=]
	ConvertOldPickupTypeToNew=function(pickupHash--[[@param pickupHash integer]])return InvokeInt(0x5EAAD83F8CFB4575,pickupHash)end;---@return integer
	SetForceObjectThisFrame=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],p3--[[@param p3 number]])return InvokeVoid(0xF538081986E49E9D,x+.0,y+.0,z+.0,p3+.0)end;
	--[=[is this like setting is as no longer needed?]=]
	OnlyCleanUpObjectWhenOutOfRange=function(object--[[@param object integer]])return InvokeVoid(0xADBE4809F19F927A,object)end;
	SetDisableCollisionsBetweenCarsAndCarParachute=function(p0--[[@param p0 any]])return InvokeVoid(0x8CAAB2BD3EA58BD4,p0)end;
	SetProjectilesShouldExplodeOnContact=function(entity--[[@param entity integer]],p1--[[@param p1 any]])return InvokeVoid(0x63ECF581BC70E363,entity,p1)end;
	--[=[Activate the physics to: "xs_prop_arena_{flipper,wall,bollard,turntable,pit}"]=]
	SetDriveArticulatedJoint=function(object--[[@param object integer]],toggle--[[@param toggle boolean]],p2--[[@param p2 integer]])return InvokeVoid(0x911024442F4898F0,object,toggle,p2)end;
	SetDriveArticulatedJointWithInflictor=function(object--[[@param object integer]],toggle--[[@param toggle boolean]],p2--[[@param p2 integer]],ped--[[@param ped integer]])return InvokeVoid(0xB20834A7DD3D8896,object,toggle,p2,ped)end;
	SetObjectIsAPressurePlate=function(object--[[@param object integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x734E1714D077DA9A,object,toggle)end;
	SetWeaponImpactsApplyGreaterForce=function(object--[[@param object integer]],p1--[[@param p1 boolean]])return InvokeVoid(0x1A6CBB06E2D0D79D,object,p1)end;
	GetIsArticulatedJointAtMinAngle=function(object--[[@param object integer]],p1--[[@param p1 any]])return InvokeBool(0x43C677F1E1158005,object,p1)end;---@return boolean
	GetIsArticulatedJointAtMaxAngle=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeBool(0x3BD770D281982DB5,p0,p1)end;---@return boolean
	SetIsObjectArticulated=function(object--[[@param object integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x1C57C94A6446492A,object,toggle)end;
	SetIsObjectBall=function(object--[[@param object integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xB5B7742424BD4445,object,toggle)end;
}
_G.Pad={
	--[=[control: 0: PLAYER_CONTROL, 1: CAMERA_CONTROL, 2: FRONTEND_CONTROL
For more info, see https://docs.fivem.net/docs/game-references/controls/]=]
	IsControlEnabled=function(control--[[@param control integer]],action--[[@param action integer]])return InvokeBool(0x1CEA6BFDF248E5D9,control,action)end;---@return boolean
	--[=[Returns whether a control is currently pressed.
control: see IS_CONTROL_ENABLED]=]
	IsControlPressed=function(control--[[@param control integer]],action--[[@param action integer]])return InvokeBool(0xF3A21BCD95725A4A,control,action)end;---@return boolean
	--[=[Returns whether a control is currently _not_ pressed.
control: see IS_CONTROL_ENABLED]=]
	IsControlReleased=function(control--[[@param control integer]],action--[[@param action integer]])return InvokeBool(0x648EE3E7F38877DD,control,action)end;---@return boolean
	--[=[Returns whether a control was newly pressed since the last check.
control: see IS_CONTROL_ENABLED]=]
	IsControlJustPressed=function(control--[[@param control integer]],action--[[@param action integer]])return InvokeBool(0x580417101DDB492F,control,action)end;---@return boolean
	--[=[Returns whether a control was newly released since the last check.
control: see IS_CONTROL_ENABLED]=]
	IsControlJustReleased=function(control--[[@param control integer]],action--[[@param action integer]])return InvokeBool(0x50F940259D3841E6,control,action)end;---@return boolean
	--[=[control: see IS_CONTROL_ENABLED]=]
	GetControlValue=function(control--[[@param control integer]],action--[[@param action integer]])return InvokeInt(0xD95E79E8686D2C27,control,action)end;---@return integer
	--[=[Returns the value of GET_CONTROL_VALUE normalized (i.e. a real number value between -1 and 1)

control: see IS_CONTROL_ENABLED]=]
	GetControlNormal=function(control--[[@param control integer]],action--[[@param action integer]])return InvokeFloat(0xEC3C9B8D5327B563,control,action)end;---@return number
	SetUseAdjustedMouseCoords=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x5B73C77D9EB66E24,toggle)end;
	--[=[Seems to return values between -1 and 1 for controls like gas and steering.

control: see IS_CONTROL_ENABLED]=]
	GetControlUnboundNormal=function(control--[[@param control integer]],action--[[@param action integer]])return InvokeFloat(0x5B84D09CEC5209C5,control,action)end;---@return number
	--[=[This is for simulating player input.
value is a float value from 0 - 1

control: see IS_CONTROL_ENABLED]=]
	SetControlValueNextFrame=function(control--[[@param control integer]],action--[[@param action integer]],value--[[@param value number]])return InvokeBool(0xE8A25867FBA3B05E,control,action,value+.0)end;---@return boolean
	--[=[control: see IS_CONTROL_ENABLED]=]
	IsDisabledControlPressed=function(control--[[@param control integer]],action--[[@param action integer]])return InvokeBool(0xE2587F8CBBD87B1D,control,action)end;---@return boolean
	--[=[control: see IS_CONTROL_ENABLED]=]
	IsDisabledControlReleased=function(control--[[@param control integer]],action--[[@param action integer]])return InvokeBool(0xFB6C4072E9A32E92,control,action)end;---@return boolean
	--[=[control: see IS_CONTROL_ENABLED]=]
	IsDisabledControlJustPressed=function(control--[[@param control integer]],action--[[@param action integer]])return InvokeBool(0x91AEF906BCA88877,control,action)end;---@return boolean
	--[=[control: see IS_CONTROL_ENABLED]=]
	IsDisabledControlJustReleased=function(control--[[@param control integer]],action--[[@param action integer]])return InvokeBool(0x305C8DCD79DA8B0F,control,action)end;---@return boolean
	--[=[control: see IS_CONTROL_ENABLED]=]
	GetDisabledControlNormal=function(control--[[@param control integer]],action--[[@param action integer]])return InvokeFloat(0x11E65974A982637C,control,action)end;---@return number
	--[=[The "disabled" variant of GET_CONTROL_UNBOUND_NORMAL.

control: see IS_CONTROL_ENABLED]=]
	GetDisabledControlUnboundNormal=function(control--[[@param control integer]],action--[[@param action integer]])return InvokeFloat(0x4F8A26A890FD62FB,control,action)end;---@return number
	--[=[Returns time in ms since last input.

control: see IS_CONTROL_ENABLED]=]
	GetControlHowLongAgo=function(control--[[@param control integer]])return InvokeInt(0xD7D22F5592AED8BA,control)end;---@return integer
	--[=[control: unused parameter]=]
	IsUsingKeyboardAndMouse=function(control--[[@param control integer]])return InvokeBool(0xA571D46727E2B718,control)end;---@return boolean
	--[=[control: see IS_CONTROL_ENABLED]=]
	IsUsingCursor=function(control--[[@param control integer]])return InvokeBool(0x13337B38DB572509,control)end;---@return boolean
	SetCursorPosition=function(x--[[@param x number]],y--[[@param y number]])return InvokeBool(0xFC695459D4D0E219,x+.0,y+.0)end;---@return boolean
	--[=[control: see IS_CONTROL_ENABLED

Hardcoded to return false.]=]
	IsUsingRemotePlay=function(control--[[@param control integer]])return InvokeBool(0x23F09EADC01449D6,control)end;---@return boolean
	--[=[control: unused parameter]=]
	HaveControlsChanged=function(control--[[@param control integer]])return InvokeBool(0x6CD79468A1E595C6,control)end;---@return boolean
	--[=[allowXOSwap appears to always be true.

EG:
GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 201, 1) /*INPUT_FRONTEND_ACCEPT (e.g. Enter button)*/
GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 202, 1) /*INPUT_FRONTEND_CANCEL (e.g. ESC button)*/
GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 51, 1) /*INPUT_CONTEXT (e.g. E button)*/

gtaforums.com/topic/819070-c-draw-instructional-buttons-scaleform-movie/#entry1068197378

control: unused parameter]=]
	GetControlInstructionalButtonsString=function(control--[[@param control integer]],action--[[@param action integer]],allowXOSwap--[[@param allowXOSwap boolean]])return InvokeString(0x0499D7B09FC9B407,control,action,allowXOSwap)end;---@return string
	--[=[control: unused parameter]=]
	GetControlGroupInstructionalButtonsString=function(control--[[@param control integer]],controlGroup--[[@param controlGroup integer]],allowXOSwap--[[@param allowXOSwap boolean]])return InvokeString(0x80C2FD58D720C801,control,controlGroup,allowXOSwap)end;---@return string
	--[=[control: see IS_CONTROL_ENABLED]=]
	SetControlLightEffectColor=function(control--[[@param control integer]],red--[[@param red integer]],green--[[@param green integer]],blue--[[@param blue integer]])return InvokeVoid(0x8290252FFF36ACB5,control,red,green,blue)end;
	--[=[control: see IS_CONTROL_ENABLED]=]
	ClearControlLightEffect=function(control--[[@param control integer]])return InvokeVoid(0xCB0360EFEFB2580D,control)end;
	--[=[control: see IS_CONTROL_ENABLED
duration in milliseconds 
frequency should range from about 10 (slow vibration) to 255 (very fast)

example:
SET_CONTROL_SHAKE(PLAYER_CONTROL, 100, 200);]=]
	SetControlShake=function(control--[[@param control integer]],duration--[[@param duration integer]],frequency--[[@param frequency integer]])return InvokeVoid(0x48B3886C1358D0D5,control,duration,frequency)end;
	--[=[Does nothing (it's a nullsub).]=]
	SetControlTriggerShake=function(control--[[@param control integer]],leftDuration--[[@param leftDuration integer]],leftFrequency--[[@param leftFrequency integer]],rightDuration--[[@param rightDuration integer]],rightFrequency--[[@param rightFrequency integer]])return InvokeVoid(0x14D29BB12D47F68C,control,leftDuration,leftFrequency,rightDuration,rightFrequency)end;
	--[=[control: see IS_CONTROL_ENABLED]=]
	StopControlShake=function(control--[[@param control integer]])return InvokeVoid(0x38C16A305E8CDC8D,control)end;
	--[=[control: see IS_CONTROL_ENABLED]=]
	SetControlShakeSuppressedId=function(control--[[@param control integer]],uniqueId--[[@param uniqueId integer]])return InvokeVoid(0xF239400E16C23E08,control,uniqueId)end;
	--[=[control: see IS_CONTROL_ENABLED]=]
	ClearControlShakeSuppressedId=function(control--[[@param control integer]])return InvokeVoid(0xA0CEFCEA390AAB9B,control)end;
	IsLookInverted=function()return InvokeBool(0x77B612531280010D)end;---@return boolean
	--[=[Used with IS_LOOK_INVERTED() and negates its affect.

--

Not sure how the person above got that description, but here's an actual example:

if (PAD::IS_USING_KEYBOARD_AND_MOUSE(2)) {
    if (a_5) {
        if (PAD::IS_LOOK_INVERTED()) {
            a_3 *= -1;
        }
        if (PAD::IS_MOUSE_LOOK_INVERTED()) {
            a_3 *= -1;
        }
    }
}]=]
	IsMouseLookInverted=function()return InvokeBool(0xE1615EC03B3BB4FD)end;---@return boolean
	--[=[Hard-coded to return 3 if using KBM, otherwise same behavior as GET_LOCAL_PLAYER_GAMEPAD_AIM_STATE.]=]
	GetLocalPlayerAimState=function()return InvokeInt(0xBB41AFBBBC0A0287)end;---@return integer
	--[=[Returns the local player's targeting mode. See PLAYER::SET_PLAYER_TARGETING_MODE.]=]
	GetLocalPlayerGamepadAimState=function()return InvokeInt(0x59B9A7AF4C95133C)end;---@return integer
	GetIsUsingAlternateHandbrake=function()return InvokeBool(0x25AAA32BDC98F2A3)end;---@return boolean
	--[=[Returns profile setting 225.]=]
	GetIsUsingAlternateDriveby=function()return InvokeBool(0x0F70731BACCFBB96)end;---@return boolean
	--[=[Returns profile setting 17.]=]
	GetAllowMovementWhileZoomed=function()return InvokeBool(0xFC859E2374407556)end;---@return boolean
	SetPlayerpadShakesWhenControllerDisabled=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x798FDEB5B1575088,toggle)end;
	--[=[control: see IS_CONTROL_ENABLED]=]
	SetInputExclusive=function(control--[[@param control integer]],action--[[@param action integer]])return InvokeVoid(0xEDE476E5EE29EDB1,control,action)end;
	--[=[control: see IS_CONTROL_ENABLED]=]
	DisableControlAction=function(control--[[@param control integer]],action--[[@param action integer]],disableRelatedActions--[[@param disableRelatedActions boolean]])return InvokeVoid(0xFE99B66D079CF6BC,control,action,disableRelatedActions)end;
	--[=[control: see IS_CONTROL_ENABLED]=]
	EnableControlAction=function(control--[[@param control integer]],action--[[@param action integer]],enableRelatedActions--[[@param enableRelatedActions boolean]])return InvokeVoid(0x351220255D64C155,control,action,enableRelatedActions)end;
	--[=[control: see IS_CONTROL_ENABLED]=]
	DisableAllControlActions=function(control--[[@param control integer]])return InvokeVoid(0x5F4B6931816E599B,control)end;
	--[=[control: see IS_CONTROL_ENABLED]=]
	EnableAllControlActions=function(control--[[@param control integer]])return InvokeVoid(0xA5FFE9B05F199DE7,control)end;
	--[=[Used in carsteal3 script with schemeName = "Carsteal4_spycar".]=]
	InitPcScriptedControls=function(schemeName--[[@param schemeName string]])return InvokeBool(0x3D42B92563939375,schemeName)end;---@return boolean
	--[=[Same as INIT_PC_SCRIPTED_CONTROLS]=]
	SwitchPcScriptedControls=function(schemeName--[[@param schemeName string]])return InvokeBool(0x4683149ED1DDE7A1,schemeName)end;---@return boolean
	ShutdownPcScriptedControls=function()return InvokeVoid(0x643ED62D5EA3BEBD)end;
	--[=[control: see IS_CONTROL_ENABLED]=]
	AllowAlternativeScriptControlsLayout=function(control--[[@param control integer]])return InvokeVoid(0x7F4724035FDCA1DD,control)end;
}
_G.Pathfind={
	--[=[When nodeEnabled is set to false, all nodes in the area get disabled.
`GET_VEHICLE_NODE_IS_SWITCHED_OFF` returns true afterwards.
If it's true, `GET_VEHICLE_NODE_IS_SWITCHED_OFF` returns false.]=]
	SetRoadsInArea=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],nodeEnabled--[[@param nodeEnabled boolean]],unknown2--[[@param unknown2 boolean]])return InvokeVoid(0xBF1A602B5BA52FEE,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,nodeEnabled,unknown2)end;
	--[=[unknown3 is related to `SEND_SCRIPT_WORLD_STATE_EVENT > CNetworkRoadNodeWorldStateData` in networked environments.
See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.]=]
	SetRoadsInAngledArea=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],width--[[@param width number]],unknown1--[[@param unknown1 boolean]],unknown2--[[@param unknown2 boolean]],unknown3--[[@param unknown3 boolean]])return InvokeVoid(0x1A5AA1208AF5DB59,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,width+.0,unknown1,unknown2,unknown3)end;
	SetPedPathsInArea=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],p6--[[@param p6 boolean]],p7--[[@param p7 any]])return InvokeVoid(0x34F060F4BF92E018,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,p6,p7)end;
	--[=[Flags are:
1 = 1 = B02_IsFootpath
2 = 4 = !B15_InteractionUnk
4 = 0x20 = !B14_IsInterior
8 = 0x40 = !B07_IsWater
16 = 0x200 = B17_IsFlatGround
When onGround == true outPosition is a position located on the nearest pavement.

When a safe coord could not be found the result of a function is false and outPosition == Vector3.Zero.

In the scripts these flags are used: 0, 14, 12, 16, 20, 21, 28. 0 is most commonly used, then 16. 

16 works for me, 0 crashed the script.]=]
	GetSafeCoordForPed=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],onGround--[[@param onGround boolean]],outPosition--[[@param outPosition V3*]],flags--[[@param flags integer]])return InvokeBool(0xB61C8E878A4199CA,x+.0,y+.0,z+.0,onGround,outPosition,flags)end;---@return boolean
	--[=[https://gtaforums.com/topic/843561-pathfind-node-types]=]
	GetClosestVehicleNode=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],outPosition--[[@param outPosition V3*]],nodeFlags--[[@param nodeFlags integer]],p5--[[@param p5 number]],p6--[[@param p6 number]])return InvokeBool(0x240A18690AE96513,x+.0,y+.0,z+.0,outPosition,nodeFlags,p5+.0,p6+.0)end;---@return boolean
	--[=[Get the closest vehicle node to a given position.]=]
	GetClosestMajorVehicleNode=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],outPosition--[[@param outPosition V3*]],unknown1--[[@param unknown1 number]],unknown2--[[@param unknown2 number]])return InvokeBool(0x2EABE3B06F58C1BE,x+.0,y+.0,z+.0,outPosition,unknown1+.0,unknown2+.0)end;---@return boolean
	--[=[p5, p6 and p7 seems to be about the same as p4, p5 and p6 for GET_CLOSEST_VEHICLE_NODE. p6 and/or p7 has something to do with finding a node on the same path/road and same direction(at least for this native, something to do with the heading maybe). Edit this when you find out more.

nodeType: 0 = main roads, 1 = any dry path, 3 = water
p6 is always 3.0
p7 is always 0

gtaforums.com/topic/843561-pathfind-node-types

Example of usage, moving vehicle to closest path/road:
Vector3 coords = ENTITY::GET_ENTITY_COORDS(playerVeh, true);
Vector3 closestVehicleNodeCoords; 
float roadHeading; 
PATHFIND::GET_CLOSEST_VEHICLE_NODE_WITH_HEADING(coords.x, coords.y, coords.z, &closestVehicleNodeCoords, &roadHeading, 1, 3, 0); 
ENTITY::SET_ENTITY_HEADING(playerVeh, roadHeading);
ENTITY::SET_ENTITY_COORDS(playerVeh, closestVehicleNodeCoords.x, closestVehicleNodeCoords.y, closestVehicleNodeCoords.z, 1, 0, 0, 1);
VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(playerVeh);

------------------------------------------------------------------
C# Example (ins1de) : https://pastebin.com/fxtMWAHD]=]
	GetClosestVehicleNodeWithHeading=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],outPosition--[[@param outPosition V3*]],outHeading--[[@param outHeading number*]],nodeType--[[@param nodeType integer]],p6--[[@param p6 number]],p7--[[@param p7 number]])return InvokeBool(0xFF071FB798B803B0,x+.0,y+.0,z+.0,outPosition,outHeading,nodeType,p6+.0,p7+.0)end;---@return boolean
	GetNthClosestVehicleNode=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],nthClosest--[[@param nthClosest integer]],outPosition--[[@param outPosition V3*]],nodeFlags--[[@param nodeFlags integer]],unknown1--[[@param unknown1 number]],unknown2--[[@param unknown2 number]])return InvokeBool(0xE50E52416CCF948B,x+.0,y+.0,z+.0,nthClosest,outPosition,nodeFlags,unknown1+.0,unknown2+.0)end;---@return boolean
	--[=[Returns the id.]=]
	GetNthClosestVehicleNodeId=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],nth--[[@param nth integer]],nodeFlags--[[@param nodeFlags integer]],p5--[[@param p5 number]],p6--[[@param p6 number]])return InvokeInt(0x22D7275A79FE8215,x+.0,y+.0,z+.0,nth,nodeFlags,p5+.0,p6+.0)end;---@return integer
	--[=[Get the nth closest vehicle node and its heading.]=]
	GetNthClosestVehicleNodeWithHeading=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],nthClosest--[[@param nthClosest integer]],outPosition--[[@param outPosition V3*]],outHeading--[[@param outHeading number*]],outNumLanes--[[@param outNumLanes integer*]],nodeFlags--[[@param nodeFlags integer]],unknown3--[[@param unknown3 number]],unknown4--[[@param unknown4 number]])return InvokeBool(0x80CA6A8B6C094CC4,x+.0,y+.0,z+.0,nthClosest,outPosition,outHeading,outNumLanes,nodeFlags,unknown3+.0,unknown4+.0)end;---@return boolean
	GetNthClosestVehicleNodeIdWithHeading=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],nthClosest--[[@param nthClosest integer]],outPosition--[[@param outPosition V3*]],outHeading--[[@param outHeading number*]],nodeFlags--[[@param nodeFlags integer]],p7--[[@param p7 number]],p8--[[@param p8 number]])return InvokeInt(0x6448050E9C2A7207,x+.0,y+.0,z+.0,nthClosest,outPosition,outHeading,nodeFlags,p7+.0,p8+.0)end;---@return integer
	--[=[See gtaforums.com/topic/843561-pathfind-node-types for node type info. 0 = paved road only, 1 = any road, 3 = water

p10 always equals 3.0
p11 always equals 0]=]
	GetNthClosestVehicleNodeFavourDirection=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],desiredX--[[@param desiredX number]],desiredY--[[@param desiredY number]],desiredZ--[[@param desiredZ number]],nthClosest--[[@param nthClosest integer]],outPosition--[[@param outPosition V3*]],outHeading--[[@param outHeading number*]],nodeFlags--[[@param nodeFlags integer]],p10--[[@param p10 number]],p11--[[@param p11 number]])return InvokeBool(0x45905BE8654AE067,x+.0,y+.0,z+.0,desiredX+.0,desiredY+.0,desiredZ+.0,nthClosest,outPosition,outHeading,nodeFlags,p10+.0,p11+.0)end;---@return boolean
	--[=[Gets the density and flags of the closest node to the specified position.
Density is a value between 0 and 15, indicating how busy the road is.
Flags is a bit field.]=]
	GetVehicleNodeProperties=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],density--[[@param density integer*]],flags--[[@param flags integer*]])return InvokeBool(0x0568566ACBB5DEDC,x+.0,y+.0,z+.0,density,flags)end;---@return boolean
	--[=[Returns true if the id is non zero.]=]
	IsVehicleNodeIdValid=function(vehicleNodeId--[[@param vehicleNodeId integer]])return InvokeBool(0x1EAF30FCFBF5AF74,vehicleNodeId)end;---@return boolean
	--[=[Calling this with an invalid node id, will crash the game.
Note that IS_VEHICLE_NODE_ID_VALID simply checks if nodeId is not zero. It does not actually ensure that the id is valid.
Eg. IS_VEHICLE_NODE_ID_VALID(1) will return true, but will crash when calling GET_VEHICLE_NODE_POSITION().]=]
	GetVehicleNodePosition=function(nodeId--[[@param nodeId integer]],outPosition--[[@param outPosition V3*]])return InvokeVoid(0x703123E5E7D429C2,nodeId,outPosition)end;
	--[=[Returns false for nodes that aren't used for GPS routes.
Example:
Nodes in Fort Zancudo and LSIA are false]=]
	GetVehicleNodeIsGpsAllowed=function(nodeID--[[@param nodeID integer]])return InvokeBool(0xA2AE5C478B96E3B6,nodeID)end;---@return boolean
	--[=[Returns true when the node is Offroad. Alleys, some dirt roads, and carparks return true.
Normal roads where plenty of Peds spawn will return false]=]
	GetVehicleNodeIsSwitchedOff=function(nodeID--[[@param nodeID integer]])return InvokeBool(0x4F5070AA58F69279,nodeID)end;---@return boolean
	--[=[p1 seems to be always 1.0f in the scripts]=]
	GetClosestRoad=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],p3--[[@param p3 number]],p4--[[@param p4 integer]],p5--[[@param p5 V3*]],p6--[[@param p6 V3*]],p7--[[@param p7 any*]],p8--[[@param p8 any*]],p9--[[@param p9 number*]],p10--[[@param p10 boolean]])return InvokeBool(0x132F52BBA570FE92,x+.0,y+.0,z+.0,p3+.0,p4,p5,p6,p7,p8,p9,p10)end;---@return boolean
	LoadAllPathNodes=function(set--[[@param set boolean]])return InvokeBool(0xC2AB6BFE34E92F8B,set)end;---@return boolean
	SetAllowStreamPrologueNodes=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x228E5C6AD4D74BFD,toggle)end;
	--[=[Activates Cayo Perico path nodes if passed `1`. GPS navigation will start working, maybe more stuff will change, not sure. It seems if you try to unload (pass `0`) when close to the island, your game might crash.]=]
	SetAllowStreamHeistIslandNodes=function(type--[[@param type integer]])return InvokeVoid(0xF74B1FFA4A15FBEA,type)end;
	AreNodesLoadedForArea=function(x1--[[@param x1 number]],y1--[[@param y1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]])return InvokeBool(0xF7B79A50B905A30D,x1+.0,y1+.0,x2+.0,y2+.0)end;---@return boolean
	--[=[Used internally for long range tasks]=]
	RequestPathNodesInAreaThisFrame=function(x1--[[@param x1 number]],y1--[[@param y1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]])return InvokeBool(0x07FB139B592FA687,x1+.0,y1+.0,x2+.0,y2+.0)end;---@return boolean
	SetRoadsBackToOriginal=function(p0--[[@param p0 number]],p1--[[@param p1 number]],p2--[[@param p2 number]],p3--[[@param p3 number]],p4--[[@param p4 number]],p5--[[@param p5 number]],p6--[[@param p6 any]])return InvokeVoid(0x1EE7063B80FFC77C,p0+.0,p1+.0,p2+.0,p3+.0,p4+.0,p5+.0,p6)end;
	--[=[See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
bool p7 - always 1]=]
	SetRoadsBackToOriginalInAngledArea=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],width--[[@param width number]],p7--[[@param p7 any]])return InvokeVoid(0x0027501B9F3B407E,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,width+.0,p7)end;
	SetAmbientPedRangeMultiplierThisFrame=function(multiplier--[[@param multiplier number]])return InvokeVoid(0x0B919E1FB47CC4E0,multiplier+.0)end;
	AdjustAmbientPedSpawnDensitiesThisFrame=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]],p5--[[@param p5 any]],p6--[[@param p6 any]])return InvokeVoid(0xAA76052DDA9BFC3E,p0,p1,p2,p3,p4,p5,p6)end;
	--[=[p6 is always 0]=]
	SetPedPathsBackToOriginal=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],p6--[[@param p6 any]])return InvokeVoid(0xE04B48F2CC926253,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,p6)end;
	GetRandomVehicleNode=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]],p4--[[@param p4 boolean]],p5--[[@param p5 boolean]],p6--[[@param p6 boolean]],outPosition--[[@param outPosition V3*]],nodeId--[[@param nodeId integer*]])return InvokeBool(0x93E0DB8440B73A7D,x+.0,y+.0,z+.0,radius+.0,p4,p5,p6,outPosition,nodeId)end;---@return boolean
	GetSpawnCoordsForVehicleNode=function(nodeAddress--[[@param nodeAddress integer]],towardsCoorsX--[[@param towardsCoorsX number]],towardsCoorsY--[[@param towardsCoorsY number]],towardsCoorsZ--[[@param towardsCoorsZ number]],centrePoint--[[@param centrePoint V3*]],heading--[[@param heading number*]])return InvokeV3(0x809549AFC7AEC597,nodeAddress,towardsCoorsX+.0,towardsCoorsY+.0,towardsCoorsZ+.0,centrePoint,heading)end;---@return V3
	--[=[Determines the name of the street which is the closest to the given coordinates.

x,y,z - the coordinates of the street
streetName - returns a hash to the name of the street the coords are on
crossingRoad - if the coordinates are on an intersection, a hash to the name of the crossing road

Note: the names are returned as hashes, the strings can be returned using the function HUD::GET_STREET_NAME_FROM_HASH_KEY.]=]
	GetStreetNameAtCoord=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],streetName--[[@param streetName integer*]],crossingRoad--[[@param crossingRoad integer*]])return InvokeVoid(0x2EB41072B4C1E4C0,x+.0,y+.0,z+.0,streetName,crossingRoad)end;
	--[=[p3 is 0 in the only game script occurrence (trevor3) but 1 doesn't seem to make a difference

distToNxJunction seems to be the distance in metres * 10.0f

direction:
0 = This happens randomly during the drive for seemingly no reason but if you consider that this native is only used in trevor3, it seems to mean "Next frame, stop whatever's being said and tell the player the direction."
1 = Route is being calculated or the player is going in the wrong direction
2 = Please Proceed the Highlighted Route
3 = In (distToNxJunction) Turn Left
4 = In (distToNxJunction) Turn Right
5 = In (distToNxJunction) Keep Straight
6 = In (distToNxJunction) Turn Sharply To The Left
7 = In (distToNxJunction) Turn Sharply To The Right
8 = Route is being recalculated or the navmesh is confusing. This happens randomly during the drive but consistently at {2044.0358, 2996.6116, 44.9717} if you face towards the bar and the route needs you to turn right. In that particular case, it could be a bug with how the turn appears to be 270 deg. CCW instead of "right." Either way, this seems to be the engine saying "I don't know the route right now."

return value set to 0 always]=]
	GenerateDirectionsToCoord=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],p3--[[@param p3 boolean]],direction--[[@param direction integer*]],p5--[[@param p5 number*]],distToNxJunction--[[@param distToNxJunction number*]])return InvokeInt(0xF90125F1F79ECDF8,x+.0,y+.0,z+.0,p3,direction,p5,distToNxJunction)end;---@return integer
	SetIgnoreNoGpsFlag=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x72751156E7678833,toggle)end;
	--[=[See: SET_BLIP_ROUTE]=]
	SetIgnoreNoGpsFlagUntilFirstNormalNode=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x1FC289A0C3FF470F,toggle)end;
	SetGpsDisabledZone=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z3--[[@param z3 number]])return InvokeVoid(0xDC20483CD3DD5201,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z3+.0)end;
	GetGpsBlipRouteLength=function()return InvokeInt(0xBBB45C3CF5C8AA85)end;---@return integer
	--[=[p3 can be 0, 1 or 2.]=]
	GetPosAlongGpsTypeRoute=function(result--[[@param result V3*]],p1--[[@param p1 boolean]],p2--[[@param p2 number]],p3--[[@param p3 integer]])return InvokeBool(0xF3162836C28F9DA5,result,p1,p2+.0,p3)end;---@return boolean
	GetGpsBlipRouteFound=function()return InvokeBool(0x869DAACBBE9FA006)end;---@return boolean
	GetRoadBoundaryUsingHeading=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],heading--[[@param heading number]],outPosition--[[@param outPosition V3*]])return InvokeBool(0xA0F8A7517A273C05,x+.0,y+.0,z+.0,heading+.0,outPosition)end;---@return boolean
	GetPositionBySideOfRoad=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],p3--[[@param p3 integer]],outPosition--[[@param outPosition V3*]])return InvokeBool(0x16F46FB18C8009E4,x+.0,y+.0,z+.0,p3,outPosition)end;---@return boolean
	--[=[Gets a value indicating whether the specified position is on a road.
The vehicle parameter is not implemented (ignored).]=]
	IsPointOnRoad=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],vehicle--[[@param vehicle integer]])return InvokeBool(0x125BF4ABFC536B09,x+.0,y+.0,z+.0,vehicle)end;---@return boolean
	--[=[Gets the next zone that has been disabled using SET_GPS_DISABLED_ZONE_AT_INDEX.]=]
	GetNextGpsDisabledZoneIndex=function()return InvokeInt(0xD3A6A0EF48823A8C)end;---@return integer
	--[=[Disables the GPS route displayed on the minimap while within a certain zone (area). When in a disabled zone and creating a waypoint, the GPS route is not shown on the minimap until you are outside of the zone. When disabled, the direct distance is shown on minimap opposed to distance to travel. Seems to only work before setting a waypoint.
You can clear the disabled zone with CLEAR_GPS_DISABLED_ZONE_AT_INDEX.

**Setting a waypoint at the same coordinate:**
Disabled Zone: https://i.imgur.com/P9VUuxM.png
Enabled Zone (normal): https://i.imgur.com/BPi24aw.png]=]
	SetGpsDisabledZoneAtIndex=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],index--[[@param index integer]])return InvokeVoid(0xD0BC1C6FB18EE154,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,index)end;
	--[=[Clears a disabled GPS route area from a certain index previously set using `SET_GPS_DISABLED_ZONE_AT_INDEX`.]=]
	ClearGpsDisabledZoneAtIndex=function(index--[[@param index integer]])return InvokeVoid(0x2801D0012266DF07,index)end;
	AddNavmeshRequiredRegion=function(x--[[@param x number]],y--[[@param y number]],radius--[[@param radius number]])return InvokeVoid(0x387EAD7EE42F6685,x+.0,y+.0,radius+.0)end;
	RemoveNavmeshRequiredRegions=function()return InvokeVoid(0x916F0A3CDEC3445E)end;
	IsNavmeshRequiredRegionInUse=function()return InvokeBool(0x705A844002B39DC0)end;---@return boolean
	--[=[Set toggle true to disable navmesh.
Set toggle false to enable navmesh.]=]
	DisableNavmeshInArea=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],toggle--[[@param toggle boolean]])return InvokeVoid(0x4C8872D8CDBE1B8B,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,toggle)end;
	AreAllNavmeshRegionsLoaded=function()return InvokeBool(0x8415D95B194A3AEA)end;---@return boolean
	--[=[Returns whether navmesh for the region is loaded. The region is a rectangular prism defined by it's top left deepest corner to it's bottom right shallowest corner.

If you can re-word this so it makes more sense, please do. I'm horrible with words sometimes...]=]
	IsNavmeshLoadedInArea=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]])return InvokeBool(0xF813C7E63F9062A5,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0)end;---@return boolean
	GetNumNavmeshesExistingInArea=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]])return InvokeInt(0x01708E8DD3FF8C65,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0)end;---@return integer
	AddNavmeshBlockingObject=function(p0--[[@param p0 number]],p1--[[@param p1 number]],p2--[[@param p2 number]],p3--[[@param p3 number]],p4--[[@param p4 number]],p5--[[@param p5 number]],p6--[[@param p6 number]],p7--[[@param p7 boolean]],p8--[[@param p8 any]])return InvokeInt(0xFCD5C8E06E502F5A,p0+.0,p1+.0,p2+.0,p3+.0,p4+.0,p5+.0,p6+.0,p7,p8)end;---@return integer
	UpdateNavmeshBlockingObject=function(p0--[[@param p0 any]],p1--[[@param p1 number]],p2--[[@param p2 number]],p3--[[@param p3 number]],p4--[[@param p4 number]],p5--[[@param p5 number]],p6--[[@param p6 number]],p7--[[@param p7 number]],p8--[[@param p8 any]])return InvokeVoid(0x109E99373F290687,p0,p1+.0,p2+.0,p3+.0,p4+.0,p5+.0,p6+.0,p7+.0,p8)end;
	RemoveNavmeshBlockingObject=function(p0--[[@param p0 any]])return InvokeVoid(0x46399A7895957C0E,p0)end;
	DoesNavmeshBlockingObjectExist=function(p0--[[@param p0 any]])return InvokeBool(0x0EAEB0DB4B132399,p0)end;---@return boolean
	--[=[Returns CGameWorldHeightMap's maximum Z value at specified point (grid node).]=]
	GetApproxHeightForPoint=function(x--[[@param x number]],y--[[@param y number]])return InvokeFloat(0x29C24BFBED8AB8FB,x+.0,y+.0)end;---@return number
	--[=[Returns CGameWorldHeightMap's maximum Z among all grid nodes that intersect with the specified rectangle.]=]
	GetApproxHeightForArea=function(x1--[[@param x1 number]],y1--[[@param y1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]])return InvokeFloat(0x8ABE8608576D9CE3,x1+.0,y1+.0,x2+.0,y2+.0)end;---@return number
	--[=[Returns CGameWorldHeightMap's minimum Z value at specified point (grid node).]=]
	GetApproxFloorForPoint=function(x--[[@param x number]],y--[[@param y number]])return InvokeFloat(0x336511A34F2E5185,x+.0,y+.0)end;---@return number
	--[=[Returns CGameWorldHeightMap's minimum Z among all grid nodes that intersect with the specified rectangle.]=]
	GetApproxFloorForArea=function(x1--[[@param x1 number]],y1--[[@param y1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]])return InvokeFloat(0x3599D741C9AC6310,x1+.0,y1+.0,x2+.0,y2+.0)end;---@return number
	--[=[Calculates the travel distance between a set of points.

Doesn't seem to correlate with distance on gps sometimes.
This function returns the value 100000.0 over long distances, seems to be a failure mode result, potentially occurring when not all path nodes are loaded into pathfind.]=]
	CalculateTravelDistanceBetweenPoints=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]])return InvokeFloat(0xADD95C7005C4A197,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0)end;---@return number
}
_G.Ped={
	--[=[https://alloc8or.re/gta5/doc/enums/ePedType.txt

Full list of peds by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/peds.json]=]
	CreatePed=function(pedType--[[@param pedType integer]],modelHash--[[@param modelHash integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],heading--[[@param heading number]],isNetwork--[[@param isNetwork boolean]],bScriptHostPed--[[@param bScriptHostPed boolean]])return InvokeInt(0xD49F9B0955C367DE,pedType,modelHash,x+.0,y+.0,z+.0,heading+.0,isNetwork,bScriptHostPed)end;---@return integer
	--[=[Deletes the specified ped, then sets the handle pointed to by the pointer to NULL.]=]
	DeletePed=function(ped--[[@param ped integer*]])return InvokeVoid(0x9614299DCB53E54B,ped)end;
	ClonePed=function(ped--[[@param ped integer]],isNetwork--[[@param isNetwork boolean]],bScriptHostPed--[[@param bScriptHostPed boolean]],copyHeadBlendFlag--[[@param copyHeadBlendFlag boolean]])return InvokeInt(0xEF29A16337FACADB,ped,isNetwork,bScriptHostPed,copyHeadBlendFlag)end;---@return integer
	ClonePedAlt=function(ped--[[@param ped integer]],isNetwork--[[@param isNetwork boolean]],bScriptHostPed--[[@param bScriptHostPed boolean]],copyHeadBlendFlag--[[@param copyHeadBlendFlag boolean]],p4--[[@param p4 boolean]])return InvokeInt(0x668FD40BCBA5DE48,ped,isNetwork,bScriptHostPed,copyHeadBlendFlag,p4)end;---@return integer
	--[=[Copies ped's components and props to targetPed.]=]
	ClonePedToTarget=function(ped--[[@param ped integer]],targetPed--[[@param targetPed integer]])return InvokeVoid(0xE952D6431689AD9A,ped,targetPed)end;
	ClonePedToTargetAlt=function(ped--[[@param ped integer]],targetPed--[[@param targetPed integer]],p2--[[@param p2 boolean]])return InvokeVoid(0x148B08C2D2ACB884,ped,targetPed,p2)end;
	--[=[Gets a value indicating whether the specified ped is in the specified vehicle.

If 'atGetIn' is false, the function will not return true until the ped is sitting in the vehicle and is about to close the door. If it's true, the function returns true the moment the ped starts to get onto the seat (after opening the door). Eg. if false, and the ped is getting into a submersible, the function will not return true until the ped has descended down into the submersible and gotten into the seat, while if it's true, it'll return true the moment the hatch has been opened and the ped is about to descend into the submersible.]=]
	IsPedInVehicle=function(ped--[[@param ped integer]],vehicle--[[@param vehicle integer]],atGetIn--[[@param atGetIn boolean]])return InvokeBool(0xA3EE4A07279BB9DB,ped,vehicle,atGetIn)end;---@return boolean
	IsPedInModel=function(ped--[[@param ped integer]],modelHash--[[@param modelHash integer]])return InvokeBool(0x796D90EFB19AA332,ped,modelHash)end;---@return boolean
	--[=[Gets a value indicating whether the specified ped is in any vehicle.

If 'atGetIn' is false, the function will not return true until the ped is sitting in the vehicle and is about to close the door. If it's true, the function returns true the moment the ped starts to get onto the seat (after opening the door). Eg. if false, and the ped is getting into a submersible, the function will not return true until the ped has descended down into the submersible and gotten into the seat, while if it's true, it'll return true the moment the hatch has been opened and the ped is about to descend into the submersible.]=]
	IsPedInAnyVehicle=function(ped--[[@param ped integer]],atGetIn--[[@param atGetIn boolean]])return InvokeBool(0x997ABD671D25CA0B,ped,atGetIn)end;---@return boolean
	--[=[xyz - relative to the world origin.]=]
	IsCopPedInArea3d=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]])return InvokeBool(0x16EC4839969F9F5E,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0)end;---@return boolean
	--[=[Gets a value indicating whether this ped's health is below its injured threshold.

The default threshold is 100.]=]
	IsPedInjured=function(ped--[[@param ped integer]])return InvokeBool(0x84A2DD9AC37C35C1,ped)end;---@return boolean
	--[=[Returns whether the specified ped is hurt.]=]
	IsPedHurt=function(ped--[[@param ped integer]])return InvokeBool(0x5983BB449D7FDB12,ped)end;---@return boolean
	--[=[Gets a value indicating whether this ped's health is below its fatally injured threshold. The default threshold is 100.
If the handle is invalid, the function returns true.]=]
	IsPedFatallyInjured=function(ped--[[@param ped integer]])return InvokeBool(0xD839450756ED5A80,ped)end;---@return boolean
	--[=[Seems to consistently return true if the ped is dead.

p1 is always passed 1 in the scripts.

I suggest to remove "OR_DYING" part, because it does not detect dying phase.

That's what the devs call it, cry about it.

lol]=]
	IsPedDeadOrDying=function(ped--[[@param ped integer]],p1--[[@param p1 boolean]])return InvokeBool(0x3317DEDB88C95038,ped,p1)end;---@return boolean
	IsConversationPedDead=function(ped--[[@param ped integer]])return InvokeBool(0xE0A0AEC214B1FABA,ped)end;---@return boolean
	IsPedAimingFromCover=function(ped--[[@param ped integer]])return InvokeBool(0x3998B1276A3300E5,ped)end;---@return boolean
	--[=[Returns whether the specified ped is reloading.]=]
	IsPedReloading=function(ped--[[@param ped integer]])return InvokeBool(0x24B100C68C645951,ped)end;---@return boolean
	--[=[Returns true if the given ped has a valid pointer to CPlayerInfo in its CPed class. That's all.]=]
	IsPedAPlayer=function(ped--[[@param ped integer]])return InvokeBool(0x12534C348C6CB68B,ped)end;---@return boolean
	--[=[pedType: see CREATE_PED

Full list of peds by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/peds.json]=]
	CreatePedInsideVehicle=function(vehicle--[[@param vehicle integer]],pedType--[[@param pedType integer]],modelHash--[[@param modelHash integer]],seat--[[@param seat integer]],isNetwork--[[@param isNetwork boolean]],bScriptHostPed--[[@param bScriptHostPed boolean]])return InvokeInt(0x7DD959874C1FD534,vehicle,pedType,modelHash,seat,isNetwork,bScriptHostPed)end;---@return integer
	SetPedDesiredHeading=function(ped--[[@param ped integer]],heading--[[@param heading number]])return InvokeVoid(0xAA5A7ECE2AA8FE70,ped,heading+.0)end;
	ForceAllHeadingValuesToAlign=function(ped--[[@param ped integer]])return InvokeVoid(0xFF287323B0E2C69A,ped)end;
	--[=[angle is ped's view cone]=]
	IsPedFacingPed=function(ped--[[@param ped integer]],otherPed--[[@param otherPed integer]],angle--[[@param angle number]])return InvokeBool(0xD71649DB0A545AA3,ped,otherPed,angle+.0)end;---@return boolean
	--[=[Notes: The function only returns true while the ped is: 
A.) Swinging a random melee attack (including pistol-whipping)

B.) Reacting to being hit by a melee attack (including pistol-whipping)

C.) Is locked-on to an enemy (arms up, strafing/skipping in the default fighting-stance, ready to dodge+counter). 

You don't have to be holding the melee-targetting button to be in this stance; you stay in it by default for a few seconds after swinging at someone. If you do a sprinting punch, it returns true for the duration of the punch animation and then returns false again, even if you've punched and made-angry many peds]=]
	IsPedInMeleeCombat=function(ped--[[@param ped integer]])return InvokeBool(0x4E209B2C1EAD5159,ped)end;---@return boolean
	--[=[Returns true if the ped doesn't do any movement. If the ped is being pushed forwards by using APPLY_FORCE_TO_ENTITY for example, the function returns false.]=]
	IsPedStopped=function(ped--[[@param ped integer]])return InvokeBool(0x530944F6F4B8A214,ped)end;---@return boolean
	IsPedShootingInArea=function(ped--[[@param ped integer]],x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],p7--[[@param p7 boolean]],p8--[[@param p8 boolean]])return InvokeBool(0x7E9DFE24AC1E58EF,ped,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,p7,p8)end;---@return boolean
	IsAnyPedShootingInArea=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],p6--[[@param p6 boolean]],p7--[[@param p7 boolean]])return InvokeBool(0xA0D3D71EA1086C55,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,p6,p7)end;---@return boolean
	--[=[Returns whether the specified ped is shooting.]=]
	IsPedShooting=function(ped--[[@param ped integer]])return InvokeBool(0x34616828CD07F1A1,ped)end;---@return boolean
	--[=[accuracy = 0-100, 100 being perfectly accurate]=]
	SetPedAccuracy=function(ped--[[@param ped integer]],accuracy--[[@param accuracy integer]])return InvokeVoid(0x7AEFB85C1D49DEB6,ped,accuracy)end;
	GetPedAccuracy=function(ped--[[@param ped integer]])return InvokeInt(0x37F4AD56ECBC0CD6,ped)end;---@return integer
	SetAmbientLawPedAccuracyModifier=function(multiplier--[[@param multiplier number]])return InvokeVoid(0x87DDEB611B329A9C,multiplier+.0)end;
	IsPedModel=function(ped--[[@param ped integer]],modelHash--[[@param modelHash integer]])return InvokeBool(0xC9D55B1A358A5BF7,ped,modelHash)end;---@return boolean
	--[=[Forces the ped to fall back and kills it.

It doesn't really explode the ped's head but it kills the ped]=]
	ExplodePedHead=function(ped--[[@param ped integer]],weaponHash--[[@param weaponHash integer]])return InvokeVoid(0x2D05CED3A38D0F3A,ped,weaponHash)end;
	--[=[Judging purely from a quick disassembly, if the ped is in a vehicle, the ped will be deleted immediately. If not, it'll be marked as no longer needed. - very elegant..]=]
	RemovePedElegantly=function(ped--[[@param ped integer*]])return InvokeVoid(0xAC6D445B994DF95E,ped)end;
	--[=[Same as SET_PED_ARMOUR, but ADDS 'amount' to the armor the Ped already has.]=]
	AddArmourToPed=function(ped--[[@param ped integer]],amount--[[@param amount integer]])return InvokeVoid(0x5BA652A0CD14DF2F,ped,amount)end;
	--[=[Sets the armor of the specified ped.

ped: The Ped to set the armor of.
amount: A value between 0 and 100 indicating the value to set the Ped's armor to.]=]
	SetPedArmour=function(ped--[[@param ped integer]],amount--[[@param amount integer]])return InvokeVoid(0xCEA04D83135264CC,ped,amount)end;
	--[=[Ped: The ped to warp.
vehicle: The vehicle to warp the ped into.
Seat_Index: [-1 is driver seat, -2 first free passenger seat]

Moreinfo of Seat Index
DriverSeat = -1
Passenger = 0
Left Rear = 1
RightRear = 2]=]
	SetPedIntoVehicle=function(ped--[[@param ped integer]],vehicle--[[@param vehicle integer]],seatIndex--[[@param seatIndex integer]])return InvokeVoid(0xF75B0D629E1C063D,ped,vehicle,seatIndex)end;
	SetPedAllowVehiclesOverride=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x3C028C636A414ED9,ped,toggle)end;
	CanCreateRandomPed=function(p0--[[@param p0 boolean]])return InvokeBool(0x3E8349C08E4B82E4,p0)end;---@return boolean
	--[=[vb.net
Dim ped_handle As Integer
                    With Game.Player.Character
                        Dim pos As Vector3 = .Position + .ForwardVector * 3
                        ped_handle = Native.Function.Call(Of Integer)(Hash.CREATE_RANDOM_PED, pos.X, pos.Y, pos.Z)
                    End With

Creates a Ped at the specified location, returns the Ped Handle.  
Ped will not act until SET_PED_AS_NO_LONGER_NEEDED is called.]=]
	CreateRandomPed=function(posX--[[@param posX number]],posY--[[@param posY number]],posZ--[[@param posZ number]])return InvokeInt(0xB4AC7D0CF06BFE8F,posX+.0,posY+.0,posZ+.0)end;---@return integer
	CreateRandomPedAsDriver=function(vehicle--[[@param vehicle integer]],returnHandle--[[@param returnHandle boolean]])return InvokeInt(0x9B62392B474F44A0,vehicle,returnHandle)end;---@return integer
	CanCreateRandomDriver=function()return InvokeBool(0xB8EB95E5B4E56978)end;---@return boolean
	CanCreateRandomBikeRider=function()return InvokeBool(0xEACEEDA81751915C)end;---@return boolean
	SetPedMoveAnimsBlendOut=function(ped--[[@param ped integer]])return InvokeVoid(0x9E8C908F41584ECD,ped)end;
	SetPedCanBeDraggedOut=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xC1670E958EEE24E5,ped,toggle)end;
	--[=[ntoggle was always false except in one instance (b678).

The one time this is set to true seems to do with when you fail the mission.]=]
	SetPedAllowHurtCombatForAllMissionPeds=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xF2BEBCDFAFDAA19E,toggle)end;
	--[=[Returns true/false if the ped is/isn't male.]=]
	IsPedMale=function(ped--[[@param ped integer]])return InvokeBool(0x6D9F5FAA7488BA46,ped)end;---@return boolean
	--[=[Returns true/false if the ped is/isn't humanoid.]=]
	IsPedHuman=function(ped--[[@param ped integer]])return InvokeBool(0xB980061DA992779D,ped)end;---@return boolean
	--[=[Gets the vehicle the specified Ped is in. Returns 0 if the ped is/was not in a vehicle.]=]
	GetVehiclePedIsIn=function(ped--[[@param ped integer]],includeEntering--[[@param includeEntering boolean]])return InvokeInt(0x9A9112A0FE9A4713,ped,includeEntering)end;---@return integer
	--[=[Resets the value for the last vehicle driven by the Ped.]=]
	ResetPedLastVehicle=function(ped--[[@param ped integer]])return InvokeVoid(0xBB8DE8CF6A8DD8BB,ped)end;
	SetPedDensityMultiplierThisFrame=function(multiplier--[[@param multiplier number]])return InvokeVoid(0x95E3D6257B166CF2,multiplier+.0)end;
	SetScenarioPedDensityMultiplierThisFrame=function(p0--[[@param p0 number]],p1--[[@param p1 number]])return InvokeVoid(0x7A556143A1C03898,p0+.0,p1+.0)end;
	SuppressAmbientPedAggressiveCleanupThisFrame=function()return InvokeVoid(0x5A7F62FDA59759BD)end;
	SetScriptedConversionCoordThisFrame=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0x5086C7843552CF85,x+.0,y+.0,z+.0)end;
	--[=[The distance between these points, is the diagonal of a box (remember it's 3D).]=]
	SetPedNonCreationArea=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]])return InvokeVoid(0xEE01041D559983EA,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0)end;
	ClearPedNonCreationArea=function()return InvokeVoid(0x2E05208086BA0651)end;
	InstantlyFillPedPopulation=function()return InvokeVoid(0x4759CC730F947C81)end;
	--[=[Same function call as PED::GET_MOUNT, aka just returns 0]=]
	IsPedOnMount=function(ped--[[@param ped integer]])return InvokeBool(0x460BC76A0E10655E,ped)end;---@return boolean
	--[=[
Function just returns 0
void __fastcall ped__get_mount(NativeContext *a1)
{
  NativeContext *v1; // rbx@1

  v1 = a1;
  GetAddressOfPedFromScriptHandle(a1->Args->Arg1);
  v1->Returns->Item1= 0;
}]=]
	GetMount=function(ped--[[@param ped integer]])return InvokeInt(0xE7E11B8DCBED1058,ped)end;---@return integer
	--[=[Gets a value indicating whether the specified ped is on top of any vehicle.

Return 1 when ped is on vehicle.
Return 0 when ped is not on a vehicle.
]=]
	IsPedOnVehicle=function(ped--[[@param ped integer]])return InvokeBool(0x67722AEB798E5FAB,ped)end;---@return boolean
	IsPedOnSpecificVehicle=function(ped--[[@param ped integer]],vehicle--[[@param vehicle integer]])return InvokeBool(0xEC5F66E459AF3BB2,ped,vehicle)end;---@return boolean
	--[=[Maximum possible amount of money on MP is 2000. ~JX

-----------------------------------------------------------------------------

Maximum amount that a ped can theoretically have is 65535 (0xFFFF) since the amount is stored as an unsigned short (uint16_t) value.]=]
	SetPedMoney=function(ped--[[@param ped integer]],amount--[[@param amount integer]])return InvokeVoid(0xA9C8960E8684C1B5,ped,amount)end;
	GetPedMoney=function(ped--[[@param ped integer]])return InvokeInt(0x3F69145BBA87BAE7,ped)end;---@return integer
	--[=[Related to Peds dropping pickup_health_snack; p0 is a value between [0.0, 1.0] that corresponds to drop rate]=]
	SetHealthSnacksCarriedByAllNewPeds=function(p0--[[@param p0 number]],p1--[[@param p1 any]])return InvokeVoid(0xFF4803BC019852D9,p0+.0,p1)end;
	SetAmbientPedsDropMoney=function(p0--[[@param p0 boolean]])return InvokeVoid(0x6B0E6172C9A4D902,p0)end;
	SetBlockingOfNonTemporaryEventsForAmbientPedsThisFrame=function(p0--[[@param p0 boolean]])return InvokeVoid(0x9911F4A24485F653,p0)end;
	--[=[Ped no longer takes critical damage modifiers if set to FALSE.
Example: Headshotting a player no longer one shots them. Instead they will take the same damage as a torso shot.]=]
	SetPedSuffersCriticalHits=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xEBD76F2359F190AC,ped,toggle)end;
	SetPedUpperBodyDamageOnly=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xAFC976FD0580C7B3,ped,toggle)end;
	--[=[Detect if ped is sitting in the specified vehicle
[True/False]]=]
	IsPedSittingInVehicle=function(ped--[[@param ped integer]],vehicle--[[@param vehicle integer]])return InvokeBool(0xA808AA1D79230FC2,ped,vehicle)end;---@return boolean
	--[=[Detect if ped is in any vehicle
[True/False]]=]
	IsPedSittingInAnyVehicle=function(ped--[[@param ped integer]])return InvokeBool(0x826AA586EDB9FEF8,ped)end;---@return boolean
	IsPedOnFoot=function(ped--[[@param ped integer]])return InvokeBool(0x01FEE67DB37F59B2,ped)end;---@return boolean
	IsPedOnAnyBike=function(ped--[[@param ped integer]])return InvokeBool(0x94495889E22C6479,ped)end;---@return boolean
	IsPedPlantingBomb=function(ped--[[@param ped integer]])return InvokeBool(0xC70B5FAE151982D8,ped)end;---@return boolean
	GetDeadPedPickupCoords=function(ped--[[@param ped integer]],p1--[[@param p1 number]],p2--[[@param p2 number]])return InvokeV3(0xCD5003B097200F36,ped,p1+.0,p2+.0)end;---@return V3
	IsPedInAnyBoat=function(ped--[[@param ped integer]])return InvokeBool(0x2E0E1C2B4F6CB339,ped)end;---@return boolean
	IsPedInAnySub=function(ped--[[@param ped integer]])return InvokeBool(0xFBFC01CCFB35D99E,ped)end;---@return boolean
	IsPedInAnyHeli=function(ped--[[@param ped integer]])return InvokeBool(0x298B91AE825E5705,ped)end;---@return boolean
	IsPedInAnyPlane=function(ped--[[@param ped integer]])return InvokeBool(0x5FFF4CFC74D8FB80,ped)end;---@return boolean
	IsPedInFlyingVehicle=function(ped--[[@param ped integer]])return InvokeBool(0x9134873537FA419C,ped)end;---@return boolean
	SetPedDiesInWater=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x56CEF0AC79073BDE,ped,toggle)end;
	GetPedDiesInWater=function(ped--[[@param ped integer]])return InvokeBool(0x65671A4FB8218930,ped)end;---@return boolean
	SetPedDiesInSinkingVehicle=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xD718A22995E2B4BC,ped,toggle)end;
	GetPedArmour=function(ped--[[@param ped integer]])return InvokeInt(0x9483AF821605B1D8,ped)end;---@return integer
	SetPedStayInVehicleWhenJacked=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xEDF4079F9D54C9A1,ped,toggle)end;
	SetPedCanBeShotInVehicle=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xC7EF1BA83230BA07,ped,toggle)end;
	GetPedLastDamageBone=function(ped--[[@param ped integer]],outBone--[[@param outBone integer*]])return InvokeBool(0xD75960F6BD9EA49C,ped,outBone)end;---@return boolean
	ClearPedLastDamageBone=function(ped--[[@param ped integer]])return InvokeVoid(0x8EF6B7AC68E2F01B,ped)end;
	SetAiWeaponDamageModifier=function(value--[[@param value number]])return InvokeVoid(0x1B1E2A40A65B8521,value+.0)end;
	ResetAiWeaponDamageModifier=function()return InvokeVoid(0xEA16670E7BA4743C)end;
	SetAiMeleeWeaponDamageModifier=function(modifier--[[@param modifier number]])return InvokeVoid(0x66460DEDDD417254,modifier+.0)end;
	ResetAiMeleeWeaponDamageModifier=function()return InvokeVoid(0x46E56A7CD1D63C3F)end;
	SetTreatAsAmbientPedForDriverLockon=function(ped--[[@param ped integer]],p1--[[@param p1 boolean]])return InvokeVoid(0x2F3C3D9F50681DE4,ped,p1)end;
	SetPedCanBeTargetted=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x63F58F7C80513AAD,ped,toggle)end;
	SetPedCanBeTargettedByTeam=function(ped--[[@param ped integer]],team--[[@param team integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xBF1CA77833E58F2C,ped,team,toggle)end;
	SetPedCanBeTargettedByPlayer=function(ped--[[@param ped integer]],player--[[@param player integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x66B57B72E0836A76,ped,player,toggle)end;
	SetAllowLockonToPedIfFriendly=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x061CB768363D6424,ped,toggle)end;
	SetUseCameraHeadingForDesiredDirectionLockOnTest=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xFD325494792302D7,ped,toggle)end;
	IsPedInAnyPoliceVehicle=function(ped--[[@param ped integer]])return InvokeBool(0x0BD04E29640C9C12,ped)end;---@return boolean
	ForcePedToOpenParachute=function(ped--[[@param ped integer]])return InvokeVoid(0x16E42E800B472221,ped)end;
	IsPedInParachuteFreeFall=function(ped--[[@param ped integer]])return InvokeBool(0x7DCE8BDA0F1C1200,ped)end;---@return boolean
	IsPedFalling=function(ped--[[@param ped integer]])return InvokeBool(0xFB92A102F1C4DFA3,ped)end;---@return boolean
	IsPedJumping=function(ped--[[@param ped integer]])return InvokeBool(0xCEDABC5900A0BF97,ped)end;---@return boolean
	IsPedLanding=function(p0--[[@param p0 any]])return InvokeBool(0x412F1364FA066CFB,p0)end;---@return boolean
	IsPedDoingABeastJump=function(p0--[[@param p0 any]])return InvokeBool(0x451D05012CCEC234,p0)end;---@return boolean
	IsPedClimbing=function(ped--[[@param ped integer]])return InvokeBool(0x53E8CB4F48BFE623,ped)end;---@return boolean
	IsPedVaulting=function(ped--[[@param ped integer]])return InvokeBool(0x117C70D1F5730B5E,ped)end;---@return boolean
	IsPedDiving=function(ped--[[@param ped integer]])return InvokeBool(0x5527B8246FEF9B11,ped)end;---@return boolean
	IsPedJumpingOutOfVehicle=function(ped--[[@param ped integer]])return InvokeBool(0x433DDFFE2044B636,ped)end;---@return boolean
	--[=[Returns true if the ped is currently opening a door (CTaskOpenDoor).]=]
	IsPedOpeningDoor=function(ped--[[@param ped integer]])return InvokeBool(0x26AF0E8E30BD2A2C,ped)end;---@return boolean
	--[=[Returns:

-1: Normal
0: Wearing parachute on back
1: Parachute opening
2: Parachute open
3: Falling to doom (e.g. after exiting parachute)

Normal means no parachute?]=]
	GetPedParachuteState=function(ped--[[@param ped integer]])return InvokeInt(0x79CFD9827CC979B6,ped)end;---@return integer
	--[=[-1: no landing
0: landing on both feet
1: stumbling
2: rolling
3: ragdoll]=]
	GetPedParachuteLandingType=function(ped--[[@param ped integer]])return InvokeInt(0x8B9F1FC6AE8166C0,ped)end;---@return integer
	SetPedParachuteTintIndex=function(ped--[[@param ped integer]],tintIndex--[[@param tintIndex integer]])return InvokeVoid(0x333FC8DB079B7186,ped,tintIndex)end;
	GetPedParachuteTintIndex=function(ped--[[@param ped integer]],outTintIndex--[[@param outTintIndex integer*]])return InvokeVoid(0xEAF5F7E5AE7C6C9D,ped,outTintIndex)end;
	SetPedReserveParachuteTintIndex=function(ped--[[@param ped integer]],p1--[[@param p1 any]])return InvokeVoid(0xE88DA0751C22A2AD,ped,p1)end;
	CreateParachuteBagObject=function(ped--[[@param ped integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeInt(0x8C4F3BF23B6237DB,ped,p1,p2)end;---@return integer
	--[=[This is the SET_CHAR_DUCKING from GTA IV, that makes Peds duck. This function does nothing in GTA V. It cannot set the ped as ducking in vehicles, and IS_PED_DUCKING will always return false.]=]
	SetPedDucking=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x030983CA930B692D,ped,toggle)end;
	IsPedDucking=function(ped--[[@param ped integer]])return InvokeBool(0xD125AE748725C6BC,ped)end;---@return boolean
	IsPedInAnyTaxi=function(ped--[[@param ped integer]])return InvokeBool(0x6E575D6A898AB852,ped)end;---@return boolean
	SetPedIdRange=function(ped--[[@param ped integer]],value--[[@param value number]])return InvokeVoid(0xF107E836A70DCE05,ped,value+.0)end;
	SetPedHighlyPerceptive=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x52D59AB61DDC05DD,ped,toggle)end;
	SetCopPerceptionOverrides=function(seeingRange--[[@param seeingRange number]],seeingRangePeripheral--[[@param seeingRangePeripheral number]],hearingRange--[[@param hearingRange number]],visualFieldMinAzimuthAngle--[[@param visualFieldMinAzimuthAngle number]],visualFieldMaxAzimuthAngle--[[@param visualFieldMaxAzimuthAngle number]],fieldOfGazeMaxAngle--[[@param fieldOfGazeMaxAngle number]],p6--[[@param p6 number]])return InvokeVoid(0x2F074C904D85129E,seeingRange+.0,seeingRangePeripheral+.0,hearingRange+.0,visualFieldMinAzimuthAngle+.0,visualFieldMaxAzimuthAngle+.0,fieldOfGazeMaxAngle+.0,p6+.0)end;
	SetPedInjuredOnGroundBehaviour=function(ped--[[@param ped integer]],p1--[[@param p1 number]])return InvokeVoid(0xEC4B4B3B9908052A,ped,p1+.0)end;
	DisablePedInjuredOnGroundBehaviour=function(ped--[[@param ped integer]])return InvokeVoid(0x733C87D4CE22BEA2,ped)end;
	SetPedSeeingRange=function(ped--[[@param ped integer]],value--[[@param value number]])return InvokeVoid(0xF29CF591C4BF6CEE,ped,value+.0)end;
	SetPedHearingRange=function(ped--[[@param ped integer]],value--[[@param value number]])return InvokeVoid(0x33A8F7F7D5F7F33C,ped,value+.0)end;
	SetPedVisualFieldMinAngle=function(ped--[[@param ped integer]],value--[[@param value number]])return InvokeVoid(0x2DB492222FB21E26,ped,value+.0)end;
	SetPedVisualFieldMaxAngle=function(ped--[[@param ped integer]],value--[[@param value number]])return InvokeVoid(0x70793BDCA1E854D4,ped,value+.0)end;
	--[=[This native refers to the field of vision the ped has below them, starting at 0 degrees. The angle value should be negative.
-90f should let the ped see 90 degrees below them, for example.]=]
	SetPedVisualFieldMinElevationAngle=function(ped--[[@param ped integer]],angle--[[@param angle number]])return InvokeVoid(0x7A276EB2C224D70F,ped,angle+.0)end;
	--[=[This native refers to the field of vision the ped has above them, starting at 0 degrees. 90f would let the ped see enemies directly above of them.]=]
	SetPedVisualFieldMaxElevationAngle=function(ped--[[@param ped integer]],angle--[[@param angle number]])return InvokeVoid(0x78D0B67629D75856,ped,angle+.0)end;
	SetPedVisualFieldPeripheralRange=function(ped--[[@param ped integer]],range--[[@param range number]])return InvokeVoid(0x9C74B0BC831B753A,ped,range+.0)end;
	SetPedVisualFieldCenterAngle=function(ped--[[@param ped integer]],angle--[[@param angle number]])return InvokeVoid(0x3B6405E8AB34A907,ped,angle+.0)end;
	GetPedVisualFieldCenterAngle=function(ped--[[@param ped integer]])return InvokeFloat(0xEF2C71A32CAD5FBD,ped)end;---@return number
	--[=[p1 is usually 0 in the scripts. action is either 0 or a pointer to "DEFAULT_ACTION".]=]
	SetPedStealthMovement=function(ped--[[@param ped integer]],p1--[[@param p1 boolean]],action--[[@param action string]])return InvokeVoid(0x88CBB5CEB96B7BD2,ped,p1,action)end;
	--[=[Returns whether the entity is in stealth mode]=]
	GetPedStealthMovement=function(ped--[[@param ped integer]])return InvokeBool(0x7C2AC9CA66575FBF,ped)end;---@return boolean
	--[=[Creates a new ped group.
Groups can contain up to 8 peds.

The parameter is unused.

Returns a handle to the created group, or 0 if a group couldn't be created.]=]
	CreateGroup=function(unused--[[@param unused integer]])return InvokeInt(0x90370EBE0FEE1A3D,unused)end;---@return integer
	SetPedAsGroupLeader=function(ped--[[@param ped integer]],groupId--[[@param groupId integer]])return InvokeVoid(0x2A7819605465FBCE,ped,groupId)end;
	SetPedAsGroupMember=function(ped--[[@param ped integer]],groupId--[[@param groupId integer]])return InvokeVoid(0x9F3480FE65DB31B5,ped,groupId)end;
	--[=[This only will teleport the ped to the group leader if the group leader teleports (sets coords).

Only works in singleplayer]=]
	SetPedCanTeleportToGroupLeader=function(pedHandle--[[@param pedHandle integer]],groupHandle--[[@param groupHandle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x2E2F4240B3F24647,pedHandle,groupHandle,toggle)end;
	RemoveGroup=function(groupId--[[@param groupId integer]])return InvokeVoid(0x8EB2F69076AF7053,groupId)end;
	RemovePedFromGroup=function(ped--[[@param ped integer]])return InvokeVoid(0xED74007FFB146BC2,ped)end;
	IsPedGroupMember=function(ped--[[@param ped integer]],groupId--[[@param groupId integer]])return InvokeBool(0x9BB01E3834671191,ped,groupId)end;---@return boolean
	IsPedHangingOnToVehicle=function(ped--[[@param ped integer]])return InvokeBool(0x1C86D8AEF8254B78,ped)end;---@return boolean
	--[=[Sets the range at which members will automatically leave the group.]=]
	SetGroupSeparationRange=function(groupHandle--[[@param groupHandle integer]],separationRange--[[@param separationRange number]])return InvokeVoid(0x4102C7858CFEE4E4,groupHandle,separationRange+.0)end;
	--[=[Ped will stay on the ground after being stunned for at lest ms time. (in milliseconds)]=]
	SetPedMinGroundTimeForStungun=function(ped--[[@param ped integer]],ms--[[@param ms integer]])return InvokeVoid(0xFA0675AB151073FA,ped,ms)end;
	IsPedProne=function(ped--[[@param ped integer]])return InvokeBool(0xD6A86331A537A7B9,ped)end;---@return boolean
	--[=[Checks to see if ped and target are in combat with eachother. Only goes one-way: if target is engaged in combat with ped but ped has not yet reacted, the function will return false until ped starts fighting back.

p1 is usually 0 in the scripts because it gets the ped id during the task sequence. For instance: PED::IS_PED_IN_COMBAT(l_42E[4/*14*/], PLAYER::PLAYER_PED_ID()) // armenian2.ct4: 43794]=]
	IsPedInCombat=function(ped--[[@param ped integer]],target--[[@param target integer]])return InvokeBool(0x4859F1FC66A6278E,ped,target)end;---@return boolean
	GetPedTargetFromCombatPed=function(ped--[[@param ped integer]],p1--[[@param p1 any]])return InvokeInt(0x32C27A11307B01CC,ped,p1)end;---@return integer
	CanPedInCombatSeeTarget=function(ped--[[@param ped integer]],target--[[@param target integer]])return InvokeBool(0xEAD42DE3610D0721,ped,target)end;---@return boolean
	IsPedDoingDriveby=function(ped--[[@param ped integer]])return InvokeBool(0xB2C086CC1BF8F2BF,ped)end;---@return boolean
	IsPedJacking=function(ped--[[@param ped integer]])return InvokeBool(0x4AE4FF911DFB61DA,ped)end;---@return boolean
	IsPedBeingJacked=function(ped--[[@param ped integer]])return InvokeBool(0x9A497FE2DF198913,ped)end;---@return boolean
	--[=[p1 is always 0]=]
	IsPedBeingStunned=function(ped--[[@param ped integer]],p1--[[@param p1 integer]])return InvokeBool(0x4FBACCE3B4138EE8,ped,p1)end;---@return boolean
	GetPedsJacker=function(ped--[[@param ped integer]])return InvokeInt(0x9B128DC36C1E04CF,ped)end;---@return integer
	GetJackTarget=function(ped--[[@param ped integer]])return InvokeInt(0x5486A79D9FBD342D,ped)end;---@return integer
	IsPedFleeing=function(ped--[[@param ped integer]])return InvokeBool(0xBBCCE00B381F8482,ped)end;---@return boolean
	--[=[p1 is nearly always 0 in the scripts. ]=]
	IsPedInCover=function(ped--[[@param ped integer]],exceptUseWeapon--[[@param exceptUseWeapon boolean]])return InvokeBool(0x60DFD0691A170B88,ped,exceptUseWeapon)end;---@return boolean
	IsPedInCoverFacingLeft=function(ped--[[@param ped integer]])return InvokeBool(0x845333B3150583AB,ped)end;---@return boolean
	IsPedInHighCover=function(ped--[[@param ped integer]])return InvokeBool(0x6A03BF943D767C93,ped)end;---@return boolean
	IsPedGoingIntoCover=function(ped--[[@param ped integer]])return InvokeBool(0x9F65DBC537E59AD5,ped)end;---@return boolean
	--[=[i could be time. Only example in the decompiled scripts uses it as -1.]=]
	SetPedPinnedDown=function(ped--[[@param ped integer]],pinned--[[@param pinned boolean]],i--[[@param i integer]])return InvokeBool(0xAAD6D1ACF08F4612,ped,pinned,i)end;---@return boolean
	GetSeatPedIsTryingToEnter=function(ped--[[@param ped integer]])return InvokeInt(0x6F4C85ACD641BCD2,ped)end;---@return integer
	GetVehiclePedIsTryingToEnter=function(ped--[[@param ped integer]])return InvokeInt(0x814FA8BE5449445D,ped)end;---@return integer
	--[=[Returns the Entity (Ped, Vehicle, or ?Object?) that killed the 'ped'

Is best to check if the Ped is dead before asking for its killer.]=]
	GetPedSourceOfDeath=function(ped--[[@param ped integer]])return InvokeInt(0x93C8B64DEB84728C,ped)end;---@return integer
	--[=[Returns the hash of the weapon/model/object that killed the ped.]=]
	GetPedCauseOfDeath=function(ped--[[@param ped integer]])return InvokeInt(0x16FFE42AB2D2DC59,ped)end;---@return integer
	GetPedTimeOfDeath=function(ped--[[@param ped integer]])return InvokeInt(0x1E98817B311AE98A,ped)end;---@return integer
	CountPedsInCombatWithTarget=function(ped--[[@param ped integer]])return InvokeInt(0x5407B7288D0478B7,ped)end;---@return integer
	CountPedsInCombatWithTargetWithinRadius=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]])return InvokeInt(0x336B3D200AB007CB,ped,x+.0,y+.0,z+.0,radius+.0)end;---@return integer
	SetPedRelationshipGroupDefaultHash=function(ped--[[@param ped integer]],hash--[[@param hash integer]])return InvokeVoid(0xADB3F206518799E8,ped,hash)end;
	SetPedRelationshipGroupHash=function(ped--[[@param ped integer]],hash--[[@param hash integer]])return InvokeVoid(0xC80A74AC829DDD92,ped,hash)end;
	--[=[Sets the relationship between two groups. This should be called twice (once for each group).

Relationship types:
0 = Companion
1 = Respect
2 = Like
3 = Neutral
4 = Dislike
5 = Hate
255 = Pedestrians

Example:
PED::SET_RELATIONSHIP_BETWEEN_GROUPS(2, l_1017, 0xA49E591C);
PED::SET_RELATIONSHIP_BETWEEN_GROUPS(2, 0xA49E591C, l_1017);]=]
	SetRelationshipBetweenGroups=function(relationship--[[@param relationship integer]],group1--[[@param group1 integer]],group2--[[@param group2 integer]])return InvokeVoid(0xBF25EB89375A37AD,relationship,group1,group2)end;
	--[=[Clears the relationship between two groups. This should be called twice (once for each group).

Relationship types:
0 = Companion
1 = Respect
2 = Like
3 = Neutral
4 = Dislike
5 = Hate
255 = Pedestrians
(Credits: Inco)

Example:
PED::CLEAR_RELATIONSHIP_BETWEEN_GROUPS(2, l_1017, 0xA49E591C);
PED::CLEAR_RELATIONSHIP_BETWEEN_GROUPS(2, 0xA49E591C, l_1017);]=]
	ClearRelationshipBetweenGroups=function(relationship--[[@param relationship integer]],group1--[[@param group1 integer]],group2--[[@param group2 integer]])return InvokeVoid(0x5E29243FB56FC6D4,relationship,group1,group2)end;
	--[=[Can't select void. This function returns nothing. The hash of the created relationship group is output in the second parameter.]=]
	AddRelationshipGroup=function(name--[[@param name string]],groupHash--[[@param groupHash integer*]])return InvokeBool(0xF372BC22FCB88606,name,groupHash)end;---@return boolean
	RemoveRelationshipGroup=function(groupHash--[[@param groupHash integer]])return InvokeVoid(0xB6BA2444AB393DA2,groupHash)end;
	DoesRelationshipGroupExist=function(groupHash--[[@param groupHash integer]])return InvokeBool(0xCC6E3B6BB69501F1,groupHash)end;---@return boolean
	--[=[Gets the relationship between two peds. This should be called twice (once for each ped).

Relationship types:
0 = Companion
1 = Respect
2 = Like
3 = Neutral
4 = Dislike
5 = Hate
255 = Pedestrians
(Credits: Inco)

Example:
PED::GET_RELATIONSHIP_BETWEEN_PEDS(2, l_1017, 0xA49E591C);
PED::GET_RELATIONSHIP_BETWEEN_PEDS(2, 0xA49E591C, l_1017);]=]
	GetRelationshipBetweenPeds=function(ped1--[[@param ped1 integer]],ped2--[[@param ped2 integer]])return InvokeInt(0xEBA5AD3A0EAF7121,ped1,ped2)end;---@return integer
	GetPedRelationshipGroupDefaultHash=function(ped--[[@param ped integer]])return InvokeInt(0x42FDD0F017B1E38E,ped)end;---@return integer
	GetPedRelationshipGroupHash=function(ped--[[@param ped integer]])return InvokeInt(0x7DBDD04862D95F04,ped)end;---@return integer
	--[=[Gets the relationship between two groups. This should be called twice (once for each group).

Relationship types:
0 = Companion
1 = Respect
2 = Like
3 = Neutral
4 = Dislike
5 = Hate
255 = Pedestrians

Example:
PED::GET_RELATIONSHIP_BETWEEN_GROUPS(l_1017, 0xA49E591C);
PED::GET_RELATIONSHIP_BETWEEN_GROUPS(0xA49E591C, l_1017);]=]
	GetRelationshipBetweenGroups=function(group1--[[@param group1 integer]],group2--[[@param group2 integer]])return InvokeInt(0x9E6B70061662AE5C,group1,group2)end;---@return integer
	SetRelationshipGroupAffectsWantedLevel=function(group--[[@param group integer]],p1--[[@param p1 boolean]])return InvokeVoid(0x5615E0C5EB2BC6E2,group,p1)end;
	TellGroupPedsInAreaToAttack=function(ped--[[@param ped integer]],p1--[[@param p1 any]],p2--[[@param p2 number]],hash--[[@param hash integer]],p4--[[@param p4 any]],p5--[[@param p5 any]])return InvokeVoid(0xAD27D957598E49E9,ped,p1,p2+.0,hash,p4,p5)end;
	SetPedCanBeTargetedWithoutLos=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x4328652AE5769C71,ped,toggle)end;
	SetPedToInformRespectedFriends=function(ped--[[@param ped integer]],radius--[[@param radius number]],maxFriends--[[@param maxFriends integer]])return InvokeVoid(0x112942C6E708F70B,ped,radius+.0,maxFriends)end;
	IsPedRespondingToEvent=function(ped--[[@param ped integer]],event--[[@param event any]])return InvokeBool(0x625B774D75C87068,ped,event)end;---@return boolean
	GetPosFromFiredEvent=function(ped--[[@param ped integer]],eventType--[[@param eventType integer]],outData--[[@param outData any*]])return InvokeBool(0xBA656A3BB01BDEA3,ped,eventType,outData)end;---@return boolean
	--[=[FIRING_PATTERN_BURST_FIRE = 0xD6FF6D61 ( 1073727030 )
FIRING_PATTERN_BURST_FIRE_IN_COVER = 0x026321F1 ( 40051185 )
FIRING_PATTERN_BURST_FIRE_DRIVEBY = 0xD31265F2 ( -753768974 )
FIRING_PATTERN_FROM_GROUND = 0x2264E5D6 ( 577037782 )
FIRING_PATTERN_DELAY_FIRE_BY_ONE_SEC = 0x7A845691 ( 2055493265 )
FIRING_PATTERN_FULL_AUTO = 0xC6EE6B4C ( -957453492 )
FIRING_PATTERN_SINGLE_SHOT = 0x5D60E4E0 ( 1566631136 )
FIRING_PATTERN_BURST_FIRE_PISTOL = 0xA018DB8A ( -1608983670 )
FIRING_PATTERN_BURST_FIRE_SMG = 0xD10DADEE ( 1863348768 )
FIRING_PATTERN_BURST_FIRE_RIFLE = 0x9C74B406 ( -1670073338 )
FIRING_PATTERN_BURST_FIRE_MG = 0xB573C5B4 ( -1250703948 )
FIRING_PATTERN_BURST_FIRE_PUMPSHOTGUN = 0x00BAC39B ( 12239771 )
FIRING_PATTERN_BURST_FIRE_HELI = 0x914E786F ( -1857128337 )
FIRING_PATTERN_BURST_FIRE_MICRO = 0x42EF03FD ( 1122960381 )
FIRING_PATTERN_SHORT_BURSTS = 0x1A92D7DF ( 445831135 )
FIRING_PATTERN_SLOW_FIRE_TANK = 0xE2CA3A71 ( -490063247 )

Firing pattern info: https://pastebin.com/Px036isB]=]
	SetPedFiringPattern=function(ped--[[@param ped integer]],patternHash--[[@param patternHash integer]])return InvokeVoid(0x9AC577F5A12AD8A9,ped,patternHash)end;
	--[=[shootRate 0-1000]=]
	SetPedShootRate=function(ped--[[@param ped integer]],shootRate--[[@param shootRate integer]])return InvokeVoid(0x614DA022990752DC,ped,shootRate)end;
	--[=[combatType can be between 0-14. See GET_COMBAT_FLOAT below for a list of possible parameters.]=]
	SetCombatFloat=function(ped--[[@param ped integer]],combatType--[[@param combatType integer]],p2--[[@param p2 number]])return InvokeVoid(0xFF41B4B141ED981C,ped,combatType,p2+.0)end;
	--[=[p0: Ped Handle
p1: int i | 0 <= i <= 27

p1 probably refers to the attributes configured in combatbehavior.meta. There are 13. Example:

<BlindFireChance value="0.1"/>
<WeaponShootRateModifier value="1.0"/>
<TimeBetweenBurstsInCover value="1.25"/>
<BurstDurationInCover value="2.0"/>
<TimeBetweenPeeks value="10.0"/>
<WeaponAccuracy value="0.18"/>
<FightProficiency value="0.8"/>
<StrafeWhenMovingChance value="1.0"/>
<WalkWhenStrafingChance value="0.0"/>
<AttackWindowDistanceForCover value="55.0"/>
<TimeToInvalidateInjuredTarget value="9.0"/>
<TriggerChargeTime_Near value="4.0"/>
<TriggerChargeTime_Far value="10.0"/>

-------------Confirmed by editing combatbehavior.meta:
p1:
0=BlindFireChance
1=BurstDurationInCover
3=TimeBetweenBurstsInCover
4=TimeBetweenPeeks
5=StrafeWhenMovingChance
8=WalkWhenStrafingChance
11=AttackWindowDistanceForCover
12=TimeToInvalidateInjuredTarget
16=OptimalCoverDistance
]=]
	GetCombatFloat=function(ped--[[@param ped integer]],p1--[[@param p1 integer]])return InvokeFloat(0x52DFF8A10508090A,ped,p1)end;---@return number
	--[=[p1 may be a BOOL representing whether or not the group even exists]=]
	GetGroupSize=function(groupID--[[@param groupID integer]],p1--[[@param p1 any*]],sizeInMembers--[[@param sizeInMembers integer*]])return InvokeVoid(0x8DE69FE35CA09A45,groupID,p1,sizeInMembers)end;
	DoesGroupExist=function(groupId--[[@param groupId integer]])return InvokeBool(0x7C6B0C22F9F40BBE,groupId)end;---@return boolean
	--[=[Returns the group id of which the specified ped is a member of.]=]
	GetPedGroupIndex=function(ped--[[@param ped integer]])return InvokeInt(0xF162E133B4E7A675,ped)end;---@return integer
	IsPedInGroup=function(ped--[[@param ped integer]])return InvokeBool(0x5891CAC5D4ACFF74,ped)end;---@return boolean
	GetPlayerPedIsFollowing=function(ped--[[@param ped integer]])return InvokeInt(0x6A3975DEA89F9A17,ped)end;---@return integer
	--[=[0: Default
1: Circle Around Leader
2: Alternative Circle Around Leader
3: Line, with Leader at center]=]
	SetGroupFormation=function(groupId--[[@param groupId integer]],formationType--[[@param formationType integer]])return InvokeVoid(0xCE2F5FC3AF7E8C1E,groupId,formationType)end;
	SetGroupFormationSpacing=function(groupId--[[@param groupId integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0x1D9D45004C28C916,groupId,x+.0,y+.0,z+.0)end;
	ResetGroupFormationDefaultSpacing=function(groupHandle--[[@param groupHandle integer]])return InvokeVoid(0x63DAB4CCB3273205,groupHandle)end;
	--[=[Gets ID of vehicle player using. It means it can get ID at any interaction with vehicle. Enter\exit for example. And that means it is faster than GET_VEHICLE_PED_IS_IN but less safe.]=]
	GetVehiclePedIsUsing=function(ped--[[@param ped integer]])return InvokeInt(0x6094AD011A2EA87D,ped)end;---@return integer
	GetVehiclePedIsEntering=function(ped--[[@param ped integer]])return InvokeInt(0xF92691AED837A5FC,ped)end;---@return integer
	--[=[enable or disable the gravity of a ped

Examples:
PED::SET_PED_GRAVITY(PLAYER::PLAYER_PED_ID(), 0x00000001);
PED::SET_PED_GRAVITY(Local_289[iVar0 /*20*/], 0x00000001);]=]
	SetPedGravity=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x9FF447B6B6AD960A,ped,toggle)end;
	--[=[damages a ped with the given amount]=]
	ApplyDamageToPed=function(ped--[[@param ped integer]],damageAmount--[[@param damageAmount integer]],p2--[[@param p2 boolean]],p3--[[@param p3 any]])return InvokeVoid(0x697157CED63F18D4,ped,damageAmount,p2,p3)end;
	GetTimePedDamagedByWeapon=function(ped--[[@param ped integer]],weaponHash--[[@param weaponHash integer]])return InvokeInt(0x36B77BB84687C318,ped,weaponHash)end;---@return integer
	SetPedAllowedToDuck=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xDA1F1B7BE1A8766F,ped,toggle)end;
	SetPedNeverLeavesGroup=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x3DBFC55D5C9BB447,ped,toggle)end;
	--[=[https://alloc8or.re/gta5/doc/enums/ePedType.txt]=]
	GetPedType=function(ped--[[@param ped integer]])return InvokeInt(0xFF059E1E4C01E63C,ped)end;---@return integer
	--[=[Turns the desired ped into a cop. If you use this on the player ped, you will become almost invisible to cops dispatched for you. You will also report your own crimes, get a generic cop voice, get a cop-vision-cone on the radar, and you will be unable to shoot at other cops. SWAT and Army will still shoot at you. Toggling ped as "false" has no effect; you must change p0's ped model to disable the effect.]=]
	SetPedAsCop=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xBB03C38DD3FB7FFD,ped,toggle)end;
	SetPedHealthPendingLastDamageEventOverrideFlag=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xB3352E018D6F89DF,toggle)end;
	--[=[Sets the maximum health of a ped.]=]
	SetPedMaxHealth=function(ped--[[@param ped integer]],value--[[@param value integer]])return InvokeVoid(0xF5F6378C4F3419D3,ped,value)end;
	GetPedMaxHealth=function(ped--[[@param ped integer]])return InvokeInt(0x4700A416E8324EF3,ped)end;---@return integer
	SetPedMaxTimeInWater=function(ped--[[@param ped integer]],value--[[@param value number]])return InvokeVoid(0x43C851690662113D,ped,value+.0)end;
	SetPedMaxTimeUnderwater=function(ped--[[@param ped integer]],value--[[@param value number]])return InvokeVoid(0x6BA428C528D9E522,ped,value+.0)end;
	SetCorpseRagdollFriction=function(ped--[[@param ped integer]],p1--[[@param p1 number]])return InvokeVoid(0x2735233A786B1BEF,ped,p1+.0)end;
	--[=[seatIndex must be <= 2]=]
	SetPedVehicleForcedSeatUsage=function(ped--[[@param ped integer]],vehicle--[[@param vehicle integer]],seatIndex--[[@param seatIndex integer]],flags--[[@param flags integer]],p4--[[@param p4 any]])return InvokeVoid(0x952F06BEECD775CC,ped,vehicle,seatIndex,flags,p4)end;
	ClearAllPedVehicleForcedSeatUsage=function(ped--[[@param ped integer]])return InvokeVoid(0xE6CA85E7259CE16B,ped)end;
	--[=[This native does absolutely nothing, just a nullsub]=]
	SetPedCanBeKnockedOffBike=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0xB282749D5E028163,p0,p1)end;
	--[=[state: https://alloc8or.re/gta5/doc/enums/eKnockOffVehicle.txt]=]
	SetPedCanBeKnockedOffVehicle=function(ped--[[@param ped integer]],state--[[@param state integer]])return InvokeVoid(0x7A6535691B477C48,ped,state)end;
	CanKnockPedOffVehicle=function(ped--[[@param ped integer]])return InvokeBool(0x51AC07A44D4F5B8A,ped)end;---@return boolean
	KnockPedOffVehicle=function(ped--[[@param ped integer]])return InvokeVoid(0x45BBCBA77C29A841,ped)end;
	SetPedCoordsNoGang=function(ped--[[@param ped integer]],posX--[[@param posX number]],posY--[[@param posY number]],posZ--[[@param posZ number]])return InvokeVoid(0x87052FE446E07247,ped,posX+.0,posY+.0,posZ+.0)end;
	--[=[from fm_mission_controller.c4 (variable names changed for clarity):

int groupID = PLAYER::GET_PLAYER_GROUP(PLAYER::PLAYER_ID());
PED::GET_GROUP_SIZE(group, &unused, &groupSize);
if (groupSize >= 1) {
. . . . for (int memberNumber = 0; memberNumber < groupSize; memberNumber++) {
. . . . . . . . Ped ped1 = PED::GET_PED_AS_GROUP_MEMBER(groupID, memberNumber);
. . . . . . . . //and so on]=]
	GetPedAsGroupMember=function(groupID--[[@param groupID integer]],memberNumber--[[@param memberNumber integer]])return InvokeInt(0x51455483CF23ED97,groupID,memberNumber)end;---@return integer
	GetPedAsGroupLeader=function(groupID--[[@param groupID integer]])return InvokeInt(0x5CCE68DBD5FE93EC,groupID)end;---@return integer
	SetPedKeepTask=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x971D38760FBC02EF,ped,toggle)end;
	SetPedAllowMinorReactionsAsMissionPed=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x49E50BDB8BA4DAB2,ped,toggle)end;
	IsPedSwimming=function(ped--[[@param ped integer]])return InvokeBool(0x9DE327631295B4C2,ped)end;---@return boolean
	IsPedSwimmingUnderWater=function(ped--[[@param ped integer]])return InvokeBool(0xC024869A53992F34,ped)end;---@return boolean
	--[=[teleports ped to coords along with the vehicle ped is in]=]
	SetPedCoordsKeepVehicle=function(ped--[[@param ped integer]],posX--[[@param posX number]],posY--[[@param posY number]],posZ--[[@param posZ number]])return InvokeVoid(0x9AFEFF481A85AB2E,ped,posX+.0,posY+.0,posZ+.0)end;
	SetPedDiesInVehicle=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x2A30922C90C9B42C,ped,toggle)end;
	SetCreateRandomCops=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x102E68B2024D536D,toggle)end;
	SetCreateRandomCopsNotOnScenarios=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x8A4986851C4EF6E7,toggle)end;
	SetCreateRandomCopsOnScenarios=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x444CB7D7DBE6973D,toggle)end;
	CanCreateRandomCops=function()return InvokeBool(0x5EE2CAFF7F17770D)end;---@return boolean
	SetPedAsEnemy=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x02A0C9720B854BFA,ped,toggle)end;
	SetPedCanSmashGlass=function(ped--[[@param ped integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0x1CCE141467FF42A2,ped,p1,p2)end;
	IsPedInAnyTrain=function(ped--[[@param ped integer]])return InvokeBool(0x6F972C1AB75A1ED0,ped)end;---@return boolean
	IsPedGettingIntoAVehicle=function(ped--[[@param ped integer]])return InvokeBool(0xBB062B2B5722478E,ped)end;---@return boolean
	IsPedTryingToEnterALockedVehicle=function(ped--[[@param ped integer]])return InvokeBool(0x44D28D5DDFE5F68C,ped)end;---@return boolean
	--[=[ped can not pull out a weapon when true]=]
	SetEnableHandcuffs=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xDF1AF8B5D56542FA,ped,toggle)end;
	--[=[Used with SET_ENABLE_HANDCUFFS in decompiled scripts. From my observations, I have noticed that while being ragdolled you are not able to get up but you can still run. Your legs can also bend.]=]
	SetEnableBoundAnkles=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xC52E0F855C58FC2E,ped,toggle)end;
	--[=[Enables diving motion when underwater.]=]
	SetEnableScuba=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xF99F62004024D506,ped,toggle)end;
	--[=[Setting ped to true allows the ped to shoot "friendlies".

p2 set to true when toggle is also true seams to make peds permanently unable to aim at, even if you set p2 back to false.

p1 = false & p2 = false for unable to aim at.
p1 = true & p2 = false for able to aim at. ]=]
	SetCanAttackFriendly=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0xB3B1CB349FF9C75D,ped,toggle,p2)end;
	--[=[Returns the ped's alertness (0-3).

Values : 

0 : Neutral
1 : Heard something (gun shot, hit, etc)
2 : Knows (the origin of the event)
3 : Fully alerted (is facing the event?)

If the Ped does not exist, returns -1.]=]
	GetPedAlertness=function(ped--[[@param ped integer]])return InvokeInt(0xF6AA118530443FD2,ped)end;---@return integer
	--[=[value ranges from 0 to 3.]=]
	SetPedAlertness=function(ped--[[@param ped integer]],value--[[@param value integer]])return InvokeVoid(0xDBA71115ED9941A6,ped,value)end;
	SetPedGetOutUpsideDownVehicle=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xBC0ED94165A48BC2,ped,toggle)end;
	--[=[transitionSpeed is the time in seconds it takes to transition from one movement clipset to another.	ransitionSpeed is usually 1.0f

List of movement clipsets:
Thanks to elsewhat for list.

 "ANIM_GROUP_MOVE_BALLISTIC"
 "ANIM_GROUP_MOVE_LEMAR_ALLEY"
 "clipset@move@trash_fast_turn"
 "FEMALE_FAST_RUNNER"
 "missfbi4prepp1_garbageman"
 "move_characters@franklin@fire"
 "move_characters@Jimmy@slow@"
 "move_characters@michael@fire"
 "move_f@flee@a"
 "move_f@scared"
 "move_f@sexy@a"
 "move_heist_lester"
 "move_injured_generic"
 "move_lester_CaneUp"
 "move_m@bag"
 "MOVE_M@BAIL_BOND_NOT_TAZERED"
 "MOVE_M@BAIL_BOND_TAZERED"
 "move_m@brave"
 "move_m@casual@d"
 "move_m@drunk@moderatedrunk"
 "MOVE_M@DRUNK@MODERATEDRUNK"
 "MOVE_M@DRUNK@MODERATEDRUNK_HEAD_UP"
 "MOVE_M@DRUNK@SLIGHTLYDRUNK"
 "MOVE_M@DRUNK@VERYDRUNK"
 "move_m@fire"
 "move_m@gangster@var_e"
 "move_m@gangster@var_f"
 "move_m@gangster@var_i"
 "move_m@JOG@"
 "MOVE_M@PRISON_GAURD"
 "MOVE_P_M_ONE"
 "MOVE_P_M_ONE_BRIEFCASE"
 "move_p_m_zero_janitor"
 "move_p_m_zero_slow"
 "move_ped_bucket"
 "move_ped_crouched"
 "move_ped_mop"
 "MOVE_M@FEMME@"
 "MOVE_F@FEMME@"
 "MOVE_M@GANGSTER@NG"
 "MOVE_F@GANGSTER@NG"
 "MOVE_M@POSH@"
 "MOVE_F@POSH@"
 "MOVE_M@TOUGH_GUY@"
 "MOVE_F@TOUGH_GUY@"

~ NotCrunchyTaco

Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json]=]
	SetPedMovementClipset=function(ped--[[@param ped integer]],clipSet--[[@param clipSet string]],transitionSpeed--[[@param transitionSpeed number]])return InvokeVoid(0xAF8A94EDE7712BEF,ped,clipSet,transitionSpeed+.0)end;
	--[=[If p1 is 0.0, I believe you are back to normal. 
If p1 is 1.0, it looks like you can only rotate the ped, not walk.

Using the following code to reset back to normal
PED::RESET_PED_MOVEMENT_CLIPSET(PLAYER::PLAYER_PED_ID(), 0.0);]=]
	ResetPedMovementClipset=function(ped--[[@param ped integer]],p1--[[@param p1 number]])return InvokeVoid(0xAA74EC0CB0AAEA2C,ped,p1+.0)end;
	--[=[Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json]=]
	SetPedStrafeClipset=function(ped--[[@param ped integer]],clipSet--[[@param clipSet string]])return InvokeVoid(0x29A28F3F8CF6D854,ped,clipSet)end;
	ResetPedStrafeClipset=function(ped--[[@param ped integer]])return InvokeVoid(0x20510814175EA477,ped)end;
	SetPedWeaponMovementClipset=function(ped--[[@param ped integer]],clipSet--[[@param clipSet string]])return InvokeVoid(0x2622E35B77D3ACA2,ped,clipSet)end;
	ResetPedWeaponMovementClipset=function(ped--[[@param ped integer]])return InvokeVoid(0x97B0DB5B4AA74E77,ped)end;
	SetPedDriveByClipsetOverride=function(ped--[[@param ped integer]],clipset--[[@param clipset string]])return InvokeVoid(0xED34AB6C5CB36520,ped,clipset)end;
	ClearPedDriveByClipsetOverride=function(ped--[[@param ped integer]])return InvokeVoid(0x4AFE3690D7E0B5AC,ped)end;
	--[=[Found in the b617d scripts:
PED::SET_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE(v_7, "trevor_heist_cover_2h");]=]
	SetPedMotionInCoverClipsetOverride=function(ped--[[@param ped integer]],p1--[[@param p1 string]])return InvokeVoid(0x9DBA107B4937F809,ped,p1)end;
	ClearPedMotionInCoverClipsetOverride=function(ped--[[@param ped integer]])return InvokeVoid(0xC79196DCB36F6121,ped)end;
	ClearPedFallUpperBodyClipsetOverride=function(ped--[[@param ped integer]])return InvokeVoid(0x80054D7FCC70EEC6,ped)end;
	--[=[PED::SET_PED_IN_VEHICLE_CONTEXT(l_128, MISC::GET_HASH_KEY("MINI_PROSTITUTE_LOW_PASSENGER"));
PED::SET_PED_IN_VEHICLE_CONTEXT(l_128, MISC::GET_HASH_KEY("MINI_PROSTITUTE_LOW_RESTRICTED_PASSENGER"));
PED::SET_PED_IN_VEHICLE_CONTEXT(l_3212, MISC::GET_HASH_KEY("MISS_FAMILY1_JIMMY_SIT"));
PED::SET_PED_IN_VEHICLE_CONTEXT(l_3212, MISC::GET_HASH_KEY("MISS_FAMILY1_JIMMY_SIT_REAR"));
PED::SET_PED_IN_VEHICLE_CONTEXT(l_95, MISC::GET_HASH_KEY("MISS_FAMILY2_JIMMY_BICYCLE"));
PED::SET_PED_IN_VEHICLE_CONTEXT(num3, MISC::GET_HASH_KEY("MISSFBI2_MICHAEL_DRIVEBY"));
PED::SET_PED_IN_VEHICLE_CONTEXT(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("MISS_ARMENIAN3_FRANKLIN_TENSE"));
PED::SET_PED_IN_VEHICLE_CONTEXT(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("MISSFBI5_TREVOR_DRIVING"));]=]
	SetPedInVehicleContext=function(ped--[[@param ped integer]],context--[[@param context integer]])return InvokeVoid(0x530071295899A8C6,ped,context)end;
	ResetPedInVehicleContext=function(ped--[[@param ped integer]])return InvokeVoid(0x22EF8FF8778030EB,ped)end;
	--[=[Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json]=]
	IsScriptedScenarioPedUsingConditionalAnim=function(ped--[[@param ped integer]],animDict--[[@param animDict string]],anim--[[@param anim string]])return InvokeBool(0x6EC47A344923E1ED,ped,animDict,anim)end;---@return boolean
	--[=[Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json

Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json]=]
	SetPedAlternateWalkAnim=function(ped--[[@param ped integer]],animDict--[[@param animDict string]],animName--[[@param animName string]],p3--[[@param p3 number]],p4--[[@param p4 boolean]])return InvokeVoid(0x6C60394CB4F75E9A,ped,animDict,animName,p3+.0,p4)end;
	ClearPedAlternateWalkAnim=function(ped--[[@param ped integer]],p1--[[@param p1 number]])return InvokeVoid(0x8844BBFCE30AA9E9,ped,p1+.0)end;
	--[=[stance:
0 = idle
1 = walk
2 = running

p5 = usually set to true

Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json

Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json]=]
	SetPedAlternateMovementAnim=function(ped--[[@param ped integer]],stance--[[@param stance integer]],animDictionary--[[@param animDictionary string]],animationName--[[@param animationName string]],p4--[[@param p4 number]],p5--[[@param p5 boolean]])return InvokeVoid(0x90A43CC281FFAB46,ped,stance,animDictionary,animationName,p4+.0,p5)end;
	ClearPedAlternateMovementAnim=function(ped--[[@param ped integer]],stance--[[@param stance integer]],p2--[[@param p2 number]])return InvokeVoid(0xD8D19675ED5FBDCE,ped,stance,p2+.0)end;
	--[=[From the scripts:
PED::SET_PED_GESTURE_GROUP(PLAYER::PLAYER_PED_ID(),
"ANIM_GROUP_GESTURE_MISS_FRA0");
PED::SET_PED_GESTURE_GROUP(PLAYER::PLAYER_PED_ID(),
"ANIM_GROUP_GESTURE_MISS_DocksSetup1");]=]
	SetPedGestureGroup=function(ped--[[@param ped integer]],animGroupGesture--[[@param animGroupGesture string]])return InvokeVoid(0xDDF803377F94AAA8,ped,animGroupGesture)end;
	--[=[Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json]=]
	GetAnimInitialOffsetPosition=function(animDict--[[@param animDict string]],animName--[[@param animName string]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],xRot--[[@param xRot number]],yRot--[[@param yRot number]],zRot--[[@param zRot number]],p8--[[@param p8 number]],p9--[[@param p9 integer]])return InvokeV3(0xBE22B26DD764C040,animDict,animName,x+.0,y+.0,z+.0,xRot+.0,yRot+.0,zRot+.0,p8+.0,p9)end;---@return V3
	--[=[Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json]=]
	GetAnimInitialOffsetRotation=function(animDict--[[@param animDict string]],animName--[[@param animName string]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],xRot--[[@param xRot number]],yRot--[[@param yRot number]],zRot--[[@param zRot number]],p8--[[@param p8 number]],p9--[[@param p9 integer]])return InvokeV3(0x4B805E6046EE9E47,animDict,animName,x+.0,y+.0,z+.0,xRot+.0,yRot+.0,zRot+.0,p8+.0,p9)end;---@return V3
	--[=[Ids
0 - Head
1 - Beard
2 - Hair
3 - Torso
4 - Legs
5 - Hands
6 - Foot
7 - ------
8 - Accessories 1
9 - Accessories 2
10- Decals
11 - Auxiliary parts for torso]=]
	GetPedDrawableVariation=function(ped--[[@param ped integer]],componentId--[[@param componentId integer]])return InvokeInt(0x67F3780DD425D4FC,ped,componentId)end;---@return integer
	--[=[List of component/props ID
gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html]=]
	GetNumberOfPedDrawableVariations=function(ped--[[@param ped integer]],componentId--[[@param componentId integer]])return InvokeInt(0x27561561732A7842,ped,componentId)end;---@return integer
	--[=[List of component/props ID
gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html]=]
	GetPedTextureVariation=function(ped--[[@param ped integer]],componentId--[[@param componentId integer]])return InvokeInt(0x04A355E041E004E6,ped,componentId)end;---@return integer
	--[=[List of component/props ID
gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html]=]
	GetNumberOfPedTextureVariations=function(ped--[[@param ped integer]],componentId--[[@param componentId integer]],drawableId--[[@param drawableId integer]])return InvokeInt(0x8F7156A3142A6BAD,ped,componentId,drawableId)end;---@return integer
	--[=[List of component/props ID
gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html]=]
	GetNumberOfPedPropDrawableVariations=function(ped--[[@param ped integer]],propId--[[@param propId integer]])return InvokeInt(0x5FAF9754E789FB47,ped,propId)end;---@return integer
	--[=[Need to check behavior when drawableId = -1

- Doofy.Ass
Why this function doesn't work and return nill value?
GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(PLAYER.PLAYER_PED_ID(), 0, 5)

tick: scripts/addins/menu_execute.lua:51: attempt to call field 'GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS' (a nil value)


List of component/props ID
gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html]=]
	GetNumberOfPedPropTextureVariations=function(ped--[[@param ped integer]],propId--[[@param propId integer]],drawableId--[[@param drawableId integer]])return InvokeInt(0xA6E7F1CEB523E171,ped,propId,drawableId)end;---@return integer
	--[=[List of component/props ID
gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html]=]
	GetPedPaletteVariation=function(ped--[[@param ped integer]],componentId--[[@param componentId integer]])return InvokeInt(0xE3DD5F2A84B42281,ped,componentId)end;---@return integer
	GetMpOutfitDataFromMetadata=function(p0--[[@param p0 any*]],p1--[[@param p1 any*]])return InvokeBool(0x9E30E91FB03A2CAF,p0,p1)end;---@return boolean
	GetFmMaleShopPedApparelItemIndex=function(p0--[[@param p0 integer]])return InvokeInt(0x1E77FA7A62EE6C4C,p0)end;---@return integer
	GetFmFemaleShopPedApparelItemIndex=function(p0--[[@param p0 integer]])return InvokeInt(0xF033419D1B81FAE8,p0)end;---@return integer
	--[=[Checks if the component variation is valid, this works great for randomizing components using loops.

List of component/props ID
gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html

Full list of ped components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedComponentVariations.json]=]
	IsPedComponentVariationValid=function(ped--[[@param ped integer]],componentId--[[@param componentId integer]],drawableId--[[@param drawableId integer]],textureId--[[@param textureId integer]])return InvokeBool(0xE825F6B6CEA7671D,ped,componentId,drawableId,textureId)end;---@return boolean
	--[=[paletteId: 0 to 3.

componentId:
enum ePedVarComp
{
	PV_COMP_INVALID = -1,
	PV_COMP_HEAD,
	PV_COMP_BERD,
	PV_COMP_HAIR,
	PV_COMP_UPPR,
	PV_COMP_LOWR,
	PV_COMP_HAND,
	PV_COMP_FEET,
	PV_COMP_TEEF,
	PV_COMP_ACCS,
	PV_COMP_TASK,
	PV_COMP_DECL,
	PV_COMP_JBIB,
	PV_COMP_MAX
};

Examples: https://gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html

Full list of ped components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedComponentVariations.json]=]
	SetPedComponentVariation=function(ped--[[@param ped integer]],componentId--[[@param componentId integer]],drawableId--[[@param drawableId integer]],textureId--[[@param textureId integer]],paletteId--[[@param paletteId integer]])return InvokeVoid(0x262B14F48D29DE80,ped,componentId,drawableId,textureId,paletteId)end;
	--[=[p1 is always 0 in R* scripts.

List of component/props ID
gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html]=]
	SetPedRandomComponentVariation=function(ped--[[@param ped integer]],p1--[[@param p1 integer]])return InvokeVoid(0xC8A9481A01E63C28,ped,p1)end;
	--[=[List of component/props ID
gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html]=]
	SetPedRandomProps=function(ped--[[@param ped integer]])return InvokeVoid(0xC44AA05345C992C6,ped)end;
	--[=[Sets Ped Default Clothes]=]
	SetPedDefaultComponentVariation=function(ped--[[@param ped integer]])return InvokeVoid(0x45EEE61580806D63,ped)end;
	SetPedBlendFromParents=function(ped--[[@param ped integer]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 number]],p4--[[@param p4 number]])return InvokeVoid(0x137BBD05230DB22D,ped,p1,p2,p3+.0,p4+.0)end;
	--[=[The "shape" parameters control the shape of the ped's face. The "skin" parameters control the skin tone. ShapeMix and skinMix control how much the first and second IDs contribute,(typically mother and father.) ThirdMix overrides the others in favor of the third IDs. IsParent is set for "children" of the player character's grandparents during old-gen character creation. It has unknown effect otherwise.

The IDs start at zero and go Male Non-DLC, Female Non-DLC, Male DLC, and Female DLC.

!!!Can someone add working example for this???

try this:
       headBlendData headData;
       GET_PED_HEAD_BLEND_DATA(PLAYER_PED_ID(), &headData);

       SET_PED_HEAD_BLEND_DATA(PLAYER_PED_ID(), headData.shapeFirst, headData.shapeSecond, headData.shapeThird, headData.skinFirst, headData.skinSecond
          , headData.skinThird, headData.shapeMix, headData.skinMix, headData.skinThird, 0);


For more info please refer to this topic. 
gtaforums.com/topic/858970-all-gtao-face-ids-pedset-ped-head-blend-data-explained]=]
	SetPedHeadBlendData=function(ped--[[@param ped integer]],shapeFirstID--[[@param shapeFirstID integer]],shapeSecondID--[[@param shapeSecondID integer]],shapeThirdID--[[@param shapeThirdID integer]],skinFirstID--[[@param skinFirstID integer]],skinSecondID--[[@param skinSecondID integer]],skinThirdID--[[@param skinThirdID integer]],shapeMix--[[@param shapeMix number]],skinMix--[[@param skinMix number]],thirdMix--[[@param thirdMix number]],isParent--[[@param isParent boolean]])return InvokeVoid(0x9414E18B9434C2FE,ped,shapeFirstID,shapeSecondID,shapeThirdID,skinFirstID,skinSecondID,skinThirdID,shapeMix+.0,skinMix+.0,thirdMix+.0,isParent)end;
	--[=[The pointer is to a padded struct that matches the arguments to SET_PED_HEAD_BLEND_DATA(...). There are 4 bytes of padding after each field.
pass this struct in the second parameter 
struct headBlendData
{
    int shapeFirst;
    int padding1;
    int shapeSecond;
    int padding2;
    int shapeThird;
    int padding3;
    int skinFirst;
    int padding4;
    int skinSecond;
    int padding5;
    int skinThird;
    int padding6;
    float shapeMix;
    int padding7;
    float skinMix;
    int padding8;
    float thirdMix;
    int padding9;
    bool isParent;
};]=]
	GetPedHeadBlendData=function(ped--[[@param ped integer]],headBlendData--[[@param headBlendData any*]])return InvokeBool(0x2746BD9D88C5C5D0,ped,headBlendData)end;---@return boolean
	--[=[See SET_PED_HEAD_BLEND_DATA().]=]
	UpdatePedHeadBlendData=function(ped--[[@param ped integer]],shapeMix--[[@param shapeMix number]],skinMix--[[@param skinMix number]],thirdMix--[[@param thirdMix number]])return InvokeVoid(0x723538F61C647C5A,ped,shapeMix+.0,skinMix+.0,thirdMix+.0)end;
	--[=[Used for freemode (online) characters.

For some reason, the scripts use a rounded float for the index.
Indexes:
1. black
2. very light blue/green
3. dark blue
4. brown
5. darker brown
6. light brown
7. blue
8. light blue
9. pink
10. yellow
11. purple
12. black
13. dark green
14. light brown
15. yellow/black pattern
16. light colored spiral pattern
17. shiny red
18. shiny half blue/half red
19. half black/half light blue
20. white/red perimter
21. green snake
22. red snake
23. dark blue snake
24. dark yellow
25. bright yellow
26. all black
28. red small pupil
29. devil blue/black
30. white small pupil
31. glossed over]=]
	SetHeadBlendEyeColor=function(ped--[[@param ped integer]],index--[[@param index integer]])return InvokeVoid(0x50B56988B170AFDF,ped,index)end;
	--[=[A getter for _SET_PED_EYE_COLOR. Returns -1 if fails to get.]=]
	GetHeadBlendEyeColor=function(ped--[[@param ped integer]])return InvokeInt(0x76BBA2CEE66D47E9,ped)end;---@return integer
	--[=[OverlayID ranges from 0 to 12, index from 0 to _GET_NUM_OVERLAY_VALUES(overlayID)-1, and opacity from 0.0 to 1.0. 

overlayID       Part                  Index, to disable
0               Blemishes             0 - 23, 255
1               Facial Hair           0 - 28, 255
2               Eyebrows              0 - 33, 255
3               Ageing                0 - 14, 255
4               Makeup                0 - 74, 255
5               Blush                 0 - 6, 255
6               Complexion            0 - 11, 255
7               Sun Damage            0 - 10, 255
8               Lipstick              0 - 9, 255
9               Moles/Freckles        0 - 17, 255
10              Chest Hair            0 - 16, 255
11              Body Blemishes        0 - 11, 255
12              Add Body Blemishes    0 - 1, 255]=]
	SetPedHeadOverlay=function(ped--[[@param ped integer]],overlayID--[[@param overlayID integer]],index--[[@param index integer]],opacity--[[@param opacity number]])return InvokeVoid(0x48F44967FA05CC1E,ped,overlayID,index,opacity+.0)end;
	--[=[Likely a char, if that overlay is not set, e.i. "None" option, returns 255;

This might be the once removed native GET_PED_HEAD_OVERLAY.]=]
	GetPedHeadOverlay=function(ped--[[@param ped integer]],overlayID--[[@param overlayID integer]])return InvokeInt(0xA60EF3B6461A4D43,ped,overlayID)end;---@return integer
	GetPedHeadOverlayNum=function(overlayID--[[@param overlayID integer]])return InvokeInt(0xCF1CE768BB43480E,overlayID)end;---@return integer
	--[=[

ColorType is 1 for eyebrows, beards, and chest hair; 2 for blush and lipstick; and 0 otherwise, though not called in those cases.

Called after SET_PED_HEAD_OVERLAY().]=]
	SetPedHeadOverlayTint=function(ped--[[@param ped integer]],overlayID--[[@param overlayID integer]],colorType--[[@param colorType integer]],colorID--[[@param colorID integer]],secondColorID--[[@param secondColorID integer]])return InvokeVoid(0x497BF74A7B9CB952,ped,overlayID,colorType,colorID,secondColorID)end;
	SetPedHairTint=function(ped--[[@param ped integer]],colorID--[[@param colorID integer]],highlightColorID--[[@param highlightColorID integer]])return InvokeVoid(0x4CFFC65454C93A49,ped,colorID,highlightColorID)end;
	GetNumPedHairTints=function()return InvokeInt(0xE5C0CF872C2AD150)end;---@return integer
	GetNumPedMakeupTints=function()return InvokeInt(0xD1F7CA1535D22818)end;---@return integer
	--[=[Input: Haircolor index, value between 0 and 63 (inclusive).
Output: RGB values for the haircolor specified in the input.

This is used with the hair color swatches scaleform.
Use `GET_PED_MAKEUP_TINT_COLOR` to get the makeup colors.]=]
	GetPedHairTintColor=function(hairColorIndex--[[@param hairColorIndex integer]],outR--[[@param outR integer*]],outG--[[@param outG integer*]],outB--[[@param outB integer*]])return InvokeVoid(0x4852FC386E2E1BB5,hairColorIndex,outR,outG,outB)end;
	--[=[Input: Makeup color index, value between 0 and 63 (inclusive).
Output: RGB values for the makeup color specified in the input.

This is used with the makeup color swatches scaleform.
Use `GET_PED_HAIR_TINT_COLOR` to get the hair colors.]=]
	GetPedMakeupTintColor=function(makeupColorIndex--[[@param makeupColorIndex integer]],outR--[[@param outR integer*]],outG--[[@param outG integer*]],outB--[[@param outB integer*]])return InvokeVoid(0x013E5CFC38CD5387,makeupColorIndex,outR,outG,outB)end;
	IsPedHairTintForCreator=function(colorId--[[@param colorId integer]])return InvokeBool(0xED6D8E27A43B8CDE,colorId)end;---@return boolean
	GetDefaultSecondaryTintForCreator=function(colorId--[[@param colorId integer]])return InvokeInt(0xEA9960D07DADCF10,colorId)end;---@return integer
	IsPedLipstickTintForCreator=function(colorId--[[@param colorId integer]])return InvokeBool(0x3E802F11FBE27674,colorId)end;---@return boolean
	IsPedBlushTintForCreator=function(colorId--[[@param colorId integer]])return InvokeBool(0xF41B5D290C99A3D6,colorId)end;---@return boolean
	IsPedHairTintForBarber=function(colorID--[[@param colorID integer]])return InvokeBool(0xE0D36E5D9E99CC21,colorID)end;---@return boolean
	GetDefaultSecondaryTintForBarber=function(colorID--[[@param colorID integer]])return InvokeInt(0xAAA6A3698A69E048,colorID)end;---@return integer
	IsPedLipstickTintForBarber=function(colorID--[[@param colorID integer]])return InvokeBool(0x0525A2C2562F3CD4,colorID)end;---@return boolean
	IsPedBlushTintForBarber=function(colorID--[[@param colorID integer]])return InvokeBool(0x604E810189EE3A59,colorID)end;---@return boolean
	IsPedBlushFacepaintTintForBarber=function(colorId--[[@param colorId integer]])return InvokeBool(0x09E7ECA981D9B210,colorId)end;---@return boolean
	GetTintIndexForLastGenHairTexture=function(modelHash--[[@param modelHash integer]],drawableId--[[@param drawableId integer]],textureId--[[@param textureId integer]])return InvokeInt(0xC56FBF2F228E1DAC,modelHash,drawableId,textureId)end;---@return integer
	--[=[Sets the various freemode face features, e.g. nose length, chin shape. Scale ranges from -1.0 to 1.0.



0 - Nose Width (Thin/Wide)

1 - Nose Peak (Up/Down)

2 - Nose Length (Long/Short)

3 - Nose Bone Curveness (Crooked/Curved)

4 - Nose Tip (Up/Down)

5 - Nose Bone Twist (Left/Right)

6 - Eyebrow (Up/Down)

7 - Eyebrow (In/Out)

8 - Cheek Bones (Up/Down)

9 - Cheek Sideways Bone Size (In/Out)

10 - Cheek Bones Width (Puffed/Gaunt)

11 - Eye Opening (Both) (Wide/Squinted)

12 - Lip Thickness (Both) (Fat/Thin)

13 - Jaw Bone Width (Narrow/Wide)

14 - Jaw Bone Shape (Round/Square)

15 - Chin Bone (Up/Down)

16 - Chin Bone Length (In/Out or Backward/Forward)

17 - Chin Bone Shape (Pointed/Square)

18 - Chin Hole (Chin Bum)

19 - Neck Thickness (Thin/Thick)]=]
	SetPedMicroMorph=function(ped--[[@param ped integer]],index--[[@param index integer]],scale--[[@param scale number]])return InvokeVoid(0x71A5C1DBA060049E,ped,index,scale+.0)end;
	HasPedHeadBlendFinished=function(ped--[[@param ped integer]])return InvokeBool(0x654CD0A825161131,ped)end;---@return boolean
	FinalizeHeadBlend=function(ped--[[@param ped integer]])return InvokeVoid(0x4668D80430D6C299,ped)end;
	--[=[p4 seems to vary from 0 to 3.
Preview: https://gfycat.com/MaleRareAmazonparrot]=]
	SetHeadBlendPaletteColor=function(ped--[[@param ped integer]],r--[[@param r integer]],g--[[@param g integer]],b--[[@param b integer]],id--[[@param id integer]])return InvokeVoid(0xCC9682B8951C5229,ped,r,g,b,id)end;
	DisableHeadBlendPaletteColor=function(ped--[[@param ped integer]])return InvokeVoid(0xA21C118553BBDF02,ped)end;
	--[=[Type equals 0 for male non-dlc, 1 for female non-dlc, 2 for male dlc, and 3 for female dlc.

Used when calling SET_PED_HEAD_BLEND_DATA.]=]
	GetPedHeadBlendFirstIndex=function(type--[[@param type integer]])return InvokeInt(0x68D353AB88B97E0C,type)end;---@return integer
	--[=[Type equals 0 for male non-dlc, 1 for female non-dlc, 2 for male dlc, and 3 for female dlc.]=]
	GetPedHeadBlendNumHeads=function(type--[[@param type integer]])return InvokeInt(0x5EF37013A6539C9D,type)end;---@return integer
	--[=[from extreme3.c4
PED::SET_PED_PRELOAD_VARIATION_DATA(PLAYER::PLAYER_PED_ID(), 8, PED::GET_PED_DRAWABLE_VARIATION(PLAYER::PLAYER_PED_ID(), 8), PED::GET_PED_TEXTURE_VARIATION(PLAYER::PLAYER_PED_ID(), 8));

p1 is probably componentId]=]
	SetPedPreloadVariationData=function(ped--[[@param ped integer]],slot--[[@param slot integer]],drawableId--[[@param drawableId integer]],textureId--[[@param textureId integer]])return InvokeInt(0x39D55A620FCB6A3A,ped,slot,drawableId,textureId)end;---@return integer
	HasPedPreloadVariationDataFinished=function(ped--[[@param ped integer]])return InvokeBool(0x66680A92700F43DF,ped)end;---@return boolean
	ReleasePedPreloadVariationData=function(ped--[[@param ped integer]])return InvokeVoid(0x5AAB586FFEC0FD96,ped)end;
	--[=[List of component/props ID
gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html]=]
	SetPedPreloadPropData=function(ped--[[@param ped integer]],componentId--[[@param componentId integer]],drawableId--[[@param drawableId integer]],TextureId--[[@param TextureId integer]])return InvokeInt(0x2B16A3BFF1FBCE49,ped,componentId,drawableId,TextureId)end;---@return integer
	HasPedPreloadPropDataFinished=function(ped--[[@param ped integer]])return InvokeBool(0x784002A632822099,ped)end;---@return boolean
	ReleasePedPreloadPropData=function(ped--[[@param ped integer]])return InvokeVoid(0xF79F9DEF0AADE61A,ped)end;
	--[=[List of component/props ID
gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html]=]
	GetPedPropIndex=function(ped--[[@param ped integer]],componentId--[[@param componentId integer]],p2--[[@param p2 any]])return InvokeInt(0x898CC20EA75BACD8,ped,componentId,p2)end;---@return integer
	--[=[ComponentId can be set to various things based on what category you're wanting to set
enum PedPropsData
{
    PED_PROP_HATS = 0,
    PED_PROP_GLASSES = 1,
 PED_PROP_EARS = 2,
    PED_PROP_WATCHES = 3,
};
Usage: SET_PED_PROP_INDEX(playerPed, PED_PROP_HATS, GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS(playerPed, PED_PROP_HATS), GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(playerPed, PED_PROP_HATS, 0), TRUE);

List of component/props ID
gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html]=]
	SetPedPropIndex=function(ped--[[@param ped integer]],componentId--[[@param componentId integer]],drawableId--[[@param drawableId integer]],TextureId--[[@param TextureId integer]],attach--[[@param attach boolean]],p5--[[@param p5 any]])return InvokeVoid(0x93376B65A266EB5F,ped,componentId,drawableId,TextureId,attach,p5)end;
	--[=[List of component/props ID
gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html]=]
	KnockOffPedProp=function(ped--[[@param ped integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],p3--[[@param p3 boolean]],p4--[[@param p4 boolean]])return InvokeVoid(0x6FD7816A36615F48,ped,p1,p2,p3,p4)end;
	--[=[List of component/props ID
gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html]=]
	ClearPedProp=function(ped--[[@param ped integer]],propId--[[@param propId integer]],p2--[[@param p2 any]])return InvokeVoid(0x0943E5B8E078E76E,ped,propId,p2)end;
	--[=[List of component/props ID
gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html]=]
	ClearAllPedProps=function(ped--[[@param ped integer]],p1--[[@param p1 any]])return InvokeVoid(0xCD8A7537A9B52F06,ped,p1)end;
	DropAmbientProp=function(ped--[[@param ped integer]])return InvokeVoid(0xAFF4710E2A0A6C12,ped)end;
	--[=[List of component/props ID
gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html]=]
	GetPedPropTextureIndex=function(ped--[[@param ped integer]],componentId--[[@param componentId integer]])return InvokeInt(0xE131A28626F81AB2,ped,componentId)end;---@return integer
	ClearPedParachutePackVariation=function(ped--[[@param ped integer]])return InvokeVoid(0x1280804F7CFD2D6C,ped)end;
	--[=[This native sets a scuba mask for freemode models and an oxygen bottle for player_* models. It works on freemode and player_* models.]=]
	SetPedScubaGearVariation=function(ped--[[@param ped integer]])return InvokeVoid(0x36C6984C3ED0C911,ped)end;
	--[=[Removes the scubagear (for mp male: component id: 8, drawableId: 123, textureId: any) from peds. Does not play the 'remove scuba gear' animation, but instantly removes it.]=]
	ClearPedScubaGearVariation=function(ped--[[@param ped integer]])return InvokeVoid(0xB50EB4CCB29704AC,ped)end;
	IsUsingPedScubaGearVariation=function(p0--[[@param p0 any]])return InvokeBool(0xFEC9A3B1820F3331,p0)end;---@return boolean
	--[=[works with TASK::TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS to make a ped completely oblivious to all events going on around him]=]
	SetBlockingOfNonTemporaryEvents=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x9F8AA94D6D97DBF4,ped,toggle)end;
	SetPedBoundsOrientation=function(ped--[[@param ped integer]],p1--[[@param p1 number]],p2--[[@param p2 number]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0x4F5F651ACCC9C4CF,ped,p1+.0,p2+.0,x+.0,y+.0,z+.0)end;
	--[=[PED::REGISTER_TARGET(l_216, PLAYER::PLAYER_PED_ID()); from re_prisonbreak.txt.

l_216 = RECSBRobber1]=]
	RegisterTarget=function(ped--[[@param ped integer]],target--[[@param target integer]])return InvokeVoid(0x2F25D9AEFA34FBA2,ped,target)end;
	--[=[Based on TASK_COMBAT_HATED_TARGETS_AROUND_PED, the parameters are likely similar (PedHandle, and area to attack in).]=]
	RegisterHatedTargetsAroundPed=function(ped--[[@param ped integer]],radius--[[@param radius number]])return InvokeVoid(0x9222F300BF8354FE,ped,radius+.0)end;
	--[=[Gets a random ped in the x/y/zRadius near the x/y/z coordinates passed. 

Ped Types:
Any = -1
Player = 1
Male = 4 
Female = 5 
Cop = 6
Human = 26
SWAT = 27 
Animal = 28
Army = 29]=]
	GetRandomPedAtCoord=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],xRadius--[[@param xRadius number]],yRadius--[[@param yRadius number]],zRadius--[[@param zRadius number]],pedType--[[@param pedType integer]])return InvokeInt(0x876046A8E3A4B71C,x+.0,y+.0,z+.0,xRadius+.0,yRadius+.0,zRadius+.0,pedType)end;---@return integer
	--[=[Gets the closest ped in a radius.

Ped Types:
Any ped = -1
Player = 1
Male = 4 
Female = 5 
Cop = 6
Human = 26
SWAT = 27 
Animal = 28
Army = 29

------------------
P4 P5 P7 P8
1  0  x  x  = return nearest walking Ped
1  x  0  x  = return nearest walking Ped
x  1  1  x  = return Ped you are using
0  0  x  x  = no effect
0  x  0  x  = no effect

x = can be 1 or 0. Does not have any obvious changes.

This function does not return ped who is:
1. Standing still
2. Driving
3. Fleeing
4. Attacking

This function only work if the ped is:
1. walking normally.
2. waiting to cross a road.

Note: PED::GET_PED_NEARBY_PEDS works for more peds.]=]
	GetClosestPed=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]],p4--[[@param p4 boolean]],p5--[[@param p5 boolean]],outPed--[[@param outPed integer*]],p7--[[@param p7 boolean]],p8--[[@param p8 boolean]],pedType--[[@param pedType integer]])return InvokeBool(0xC33AB876A77F8164,x+.0,y+.0,z+.0,radius+.0,p4,p5,outPed,p7,p8,pedType)end;---@return boolean
	--[=[Sets a value indicating whether scenario peds should be returned by the next call to a command that returns peds. Eg. GET_CLOSEST_PED.]=]
	SetScenarioPedsToBeReturnedByNextCommand=function(value--[[@param value boolean]])return InvokeVoid(0x14F19A8782C8071E,value)end;
	GetCanPedBeGrabbedByScript=function(ped--[[@param ped integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],p3--[[@param p3 boolean]],p4--[[@param p4 boolean]],p5--[[@param p5 boolean]],p6--[[@param p6 boolean]],p7--[[@param p7 boolean]],p8--[[@param p8 any]])return InvokeBool(0x03EA03AF85A85CB7,ped,p1,p2,p3,p4,p5,p6,p7,p8)end;---@return boolean
	--[=[Scripts use 0.2, 0.5 and 1.0. Value must be >= 0.0 && <= 1.0]=]
	SetDriverRacingModifier=function(driver--[[@param driver integer]],modifier--[[@param modifier number]])return InvokeVoid(0xDED5AF5A0EA4B297,driver,modifier+.0)end;
	--[=[The function specifically verifies the value is equal to, or less than 1.0f. If it is greater than 1.0f, the function does nothing at all.]=]
	SetDriverAbility=function(driver--[[@param driver integer]],ability--[[@param ability number]])return InvokeVoid(0xB195FFA8042FC5C3,driver,ability+.0)end;
	--[=[range 0.0f - 1.0f]=]
	SetDriverAggressiveness=function(driver--[[@param driver integer]],aggressiveness--[[@param aggressiveness number]])return InvokeVoid(0xA731F608CA104E3C,driver,aggressiveness+.0)end;
	--[=[Prevents the ped from going limp.

[Example: Can prevent peds from falling when standing on moving vehicles.]]=]
	CanPedRagdoll=function(ped--[[@param ped integer]])return InvokeBool(0x128F79EDCECE4FD5,ped)end;---@return boolean
	--[=[p4/p5: Unused in TU27
Ragdoll Types:
**0**: CTaskNMRelax
**1**: CTaskNMScriptControl: Hardcoded not to work in networked environments.
**Else**: CTaskNMBalance
time1- Time(ms) Ped is in ragdoll mode; only applies to ragdoll types 0 and not 1.

time2- Unknown time, in milliseconds

ragdollType-
0 : Normal ragdoll
1 : Falls with stiff legs/body
2 : Narrow leg stumble(may not fall)
3 : Wide leg stumble(may not fall)

p4, p5, p6- No idea. In R*'s scripts they are usually either "true, true, false" or "false, false, false".




EDIT 3/11/16: unclear what 'mircoseconds' mean-- a microsecond is 1000x a ms, so time2 must be 1000x time1?  more testing needed.  -sob

Edit Mar 21, 2017: removed part about time2 being the microseconds version of time1. this just isn't correct. time2 is in milliseconds, and time1 and time2 don't seem to be connected in any way.]=]
	SetPedToRagdoll=function(ped--[[@param ped integer]],time1--[[@param time1 integer]],time2--[[@param time2 integer]],ragdollType--[[@param ragdollType integer]],p4--[[@param p4 boolean]],p5--[[@param p5 boolean]],p6--[[@param p6 boolean]])return InvokeBool(0xAE99FB955581844A,ped,time1,time2,ragdollType,p4,p5,p6)end;---@return boolean
	--[=[Return variable is never used in R*'s scripts.

Not sure what p2 does. It seems like it would be a time judging by it's usage in R*'s scripts, but didn't seem to affect anything in my testings.

enum eRagdollType
{
 RD_MALE=0,
 RD_FEMALE = 1,
 RD_MALE_LARGE = 2,
 RD_CUSTOM = 3,
}

x, y, and z are coordinates, most likely to where the ped will fall.

p8 to p13 are always 0f in R*'s scripts.

(Simplified) Example of the usage of the function from R*'s scripts:
ped::set_ped_to_ragdoll_with_fall(ped, 1500, 2000, 1, -entity::get_entity_forward_vector(ped), 1f, 0f, 0f, 0f, 0f, 0f, 0f);
]=]
	SetPedToRagdollWithFall=function(ped--[[@param ped integer]],time--[[@param time integer]],p2--[[@param p2 integer]],ragdollType--[[@param ragdollType integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],velocity--[[@param velocity number]],p8--[[@param p8 number]],p9--[[@param p9 number]],p10--[[@param p10 number]],p11--[[@param p11 number]],p12--[[@param p12 number]],p13--[[@param p13 number]])return InvokeBool(0xD76632D99E4966C8,ped,time,p2,ragdollType,x+.0,y+.0,z+.0,velocity+.0,p8+.0,p9+.0,p10+.0,p11+.0,p12+.0,p13+.0)end;---@return boolean
	--[=[Causes Ped to ragdoll on collision with any object (e.g Running into trashcan). If applied to player you will sometimes trip on the sidewalk.]=]
	SetPedRagdollOnCollision=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xF0A4F1BBF4FA7497,ped,toggle)end;
	--[=[If the ped handle passed through the parenthesis is in a ragdoll state this will return true.]=]
	IsPedRagdoll=function(ped--[[@param ped integer]])return InvokeBool(0x47E4E977581C5B55,ped)end;---@return boolean
	IsPedRunningRagdollTask=function(ped--[[@param ped integer]])return InvokeBool(0xE3B6097CC25AA69E,ped)end;---@return boolean
	SetPedRagdollForceFall=function(ped--[[@param ped integer]])return InvokeVoid(0x01F6594B923B9251,ped)end;
	ResetPedRagdollTimer=function(ped--[[@param ped integer]])return InvokeVoid(0x9FA4664CF62E47E8,ped)end;
	SetPedCanRagdoll=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xB128377056A54E2A,ped,toggle)end;
	IsPedRunningMeleeTask=function(ped--[[@param ped integer]])return InvokeBool(0xD1871251F3B5ACD7,ped)end;---@return boolean
	IsPedRunningMobilePhoneTask=function(ped--[[@param ped integer]])return InvokeBool(0x2AFE52F782F25775,ped)end;---@return boolean
	IsMobilePhoneToPedEar=function(ped--[[@param ped integer]])return InvokeBool(0xA3F3564A5B3646C0,ped)end;---@return boolean
	--[=[Works for both player and peds,

enum eRagdollBlockingFlags
{
 RBF_BULLET_IMPACT = 0,
 RBF_VEHICLE_IMPACT = 1,
 RBF_FIRE = 2,
 RBF_ELECTROCUTION = 3,
 RBF_PLAYER_IMPACT = 4,
 RBF_EXPLOSION = 5,0
 RBF_IMPACT_OBJECT = 6,
 RBF_MELEE = 7,
 RBF_RUBBER_BULLET = 8,
 RBF_FALLING = 9,
 RBF_WATER_JET = 10,
 RBF_DROWNING = 11,
 _0x9F52E2C4 = 12,
 RBF_PLAYER_BUMP = 13,
 RBF_PLAYER_RAGDOLL_BUMP = 14,
 RBF_PED_RAGDOLL_BUMP = 15,
 RBF_VEHICLE_GRAB = 16,
 RBF_SMOKE_GRENADE = 17,
};

]=]
	SetRagdollBlockingFlags=function(ped--[[@param ped integer]],blockingFlag--[[@param blockingFlag integer]])return InvokeVoid(0x26695EC767728D84,ped,blockingFlag)end;
	--[=[See SET_RAGDOLL_BLOCKING_FLAGS for flags]=]
	ClearRagdollBlockingFlags=function(ped--[[@param ped integer]],blockingFlag--[[@param blockingFlag integer]])return InvokeVoid(0xD86D101FCFD00A4B,ped,blockingFlag)end;
	SetPedAngledDefensiveArea=function(ped--[[@param ped integer]],p1--[[@param p1 number]],p2--[[@param p2 number]],p3--[[@param p3 number]],p4--[[@param p4 number]],p5--[[@param p5 number]],p6--[[@param p6 number]],p7--[[@param p7 number]],p8--[[@param p8 boolean]],p9--[[@param p9 boolean]])return InvokeVoid(0xC7F76DF27A5045A1,ped,p1+.0,p2+.0,p3+.0,p4+.0,p5+.0,p6+.0,p7+.0,p8,p9)end;
	SetPedSphereDefensiveArea=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]],p5--[[@param p5 boolean]],p6--[[@param p6 boolean]])return InvokeVoid(0x9D3151A373974804,ped,x+.0,y+.0,z+.0,radius+.0,p5,p6)end;
	SetPedDefensiveSphereAttachedToPed=function(ped--[[@param ped integer]],target--[[@param target integer]],xOffset--[[@param xOffset number]],yOffset--[[@param yOffset number]],zOffset--[[@param zOffset number]],radius--[[@param radius number]],p6--[[@param p6 boolean]])return InvokeVoid(0xF9B8F91AAD3B953E,ped,target,xOffset+.0,yOffset+.0,zOffset+.0,radius+.0,p6)end;
	SetPedDefensiveSphereAttachedToVehicle=function(ped--[[@param ped integer]],target--[[@param target integer]],xOffset--[[@param xOffset number]],yOffset--[[@param yOffset number]],zOffset--[[@param zOffset number]],radius--[[@param radius number]],p6--[[@param p6 boolean]])return InvokeVoid(0xE4723DB6E736CCFF,ped,target,xOffset+.0,yOffset+.0,zOffset+.0,radius+.0,p6)end;
	SetPedDefensiveAreaAttachedToPed=function(ped--[[@param ped integer]],attachPed--[[@param attachPed integer]],p2--[[@param p2 number]],p3--[[@param p3 number]],p4--[[@param p4 number]],p5--[[@param p5 number]],p6--[[@param p6 number]],p7--[[@param p7 number]],p8--[[@param p8 number]],p9--[[@param p9 boolean]],p10--[[@param p10 boolean]])return InvokeVoid(0x4EF47FE21698A8B6,ped,attachPed,p2+.0,p3+.0,p4+.0,p5+.0,p6+.0,p7+.0,p8+.0,p9,p10)end;
	SetPedDefensiveAreaDirection=function(ped--[[@param ped integer]],p1--[[@param p1 number]],p2--[[@param p2 number]],p3--[[@param p3 number]],p4--[[@param p4 boolean]])return InvokeVoid(0x413C6C763A4AFFAD,ped,p1+.0,p2+.0,p3+.0,p4)end;
	--[=[Ped will no longer get angry when you stay near him.]=]
	RemovePedDefensiveArea=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x74D4E028107450A9,ped,toggle)end;
	GetPedDefensiveAreaPosition=function(ped--[[@param ped integer]],p1--[[@param p1 boolean]])return InvokeV3(0x3C06B8786DD94CD1,ped,p1)end;---@return V3
	IsPedDefensiveAreaActive=function(ped--[[@param ped integer]],p1--[[@param p1 boolean]])return InvokeBool(0xBA63D9FE45412247,ped,p1)end;---@return boolean
	SetPedPreferredCoverSet=function(ped--[[@param ped integer]],itemSet--[[@param itemSet any]])return InvokeVoid(0x8421EB4DA7E391B9,ped,itemSet)end;
	RemovePedPreferredCoverSet=function(ped--[[@param ped integer]])return InvokeVoid(0xFDDB234CF74073D9,ped)end;
	--[=[It will revive/cure the injured ped. The condition is ped must not be dead.

Upon setting and converting the health int, found, if health falls below 5, the ped will lay on the ground in pain(Maximum default health is 100).

This function is well suited there.]=]
	ReviveInjuredPed=function(ped--[[@param ped integer]])return InvokeVoid(0x8D8ACD8388CD99CE,ped)end;
	--[=[This function will simply bring the dead person back to life.

Try not to use it alone, since using this function alone, will make peds fall through ground in hell(well for the most of the times).

Instead, before calling this function, you may want to declare the position, where your Resurrected ped to be spawn at.(For instance, Around 2 floats of Player's current position.) 

Also, disabling any assigned task immediately helped in the number of scenarios, where If you want peds to perform certain decided tasks.]=]
	ResurrectPed=function(ped--[[@param ped integer]])return InvokeVoid(0x71BC8E838B9C6035,ped)end;
	--[=[NOTE: Debugging functions are not present in the retail version of the game.

*untested but char *name could also be a hash for a localized string]=]
	SetPedNameDebug=function(ped--[[@param ped integer]],name--[[@param name string]])return InvokeVoid(0x98EFA132A4117BE1,ped,name)end;
	--[=[Gets the offset the specified ped has moved since the previous tick.

If worldSpace is false, the returned offset is relative to the ped. That is, if the ped has moved 1 meter right and 5 meters forward, it'll return 1,5,0.

If worldSpace is true, the returned offset is relative to the world. That is, if the ped has moved 1 meter on the X axis and 5 meters on the Y axis, it'll return 1,5,0.]=]
	GetPedExtractedDisplacement=function(ped--[[@param ped integer]],worldSpace--[[@param worldSpace boolean]])return InvokeV3(0xE0AF41401ADF87E3,ped,worldSpace)end;---@return V3
	SetPedDiesWhenInjured=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x5BA7919BED300023,ped,toggle)end;
	SetPedEnableWeaponBlocking=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x97A790315D3831FD,ped,toggle)end;
	--[=[p1 was always 1 (true).

Kicks the ped from the current vehicle and keeps the rendering-focus on this ped (also disables its collision). If doing this for your player ped, you'll still be able to drive the vehicle.]=]
	SpecialFunctionDoNotUse=function(ped--[[@param ped integer]],p1--[[@param p1 boolean]])return InvokeVoid(0xF9ACF4A08098EA25,ped,p1)end;
	ResetPedVisibleDamage=function(ped--[[@param ped integer]])return InvokeVoid(0x3AC1F7B898F30C05,ped)end;
	ApplyPedBloodDamageByZone=function(ped--[[@param ped integer]],p1--[[@param p1 any]],p2--[[@param p2 number]],p3--[[@param p3 number]],p4--[[@param p4 any]])return InvokeVoid(0x816F6981C60BF53B,ped,p1,p2+.0,p3+.0,p4)end;
	--[=[woundTypes:
- soak_splat
- wound_sheet
- BulletSmall
- BulletLarge
- ShotgunSmall
- ShotgunSmallMonolithic
- ShotgunLarge
- ShotgunLargeMonolithic
- NonFatalHeadshot
- stab
- BasicSlash
- Scripted_Ped_Splash_Back
- BackSplash]=]
	ApplyPedBlood=function(ped--[[@param ped integer]],boneIndex--[[@param boneIndex integer]],xRot--[[@param xRot number]],yRot--[[@param yRot number]],zRot--[[@param zRot number]],woundType--[[@param woundType string]])return InvokeVoid(0x83F7E01C7B769A26,ped,boneIndex,xRot+.0,yRot+.0,zRot+.0,woundType)end;
	ApplyPedBloodByZone=function(ped--[[@param ped integer]],p1--[[@param p1 integer]],p2--[[@param p2 number]],p3--[[@param p3 number]],p4--[[@param p4 string]])return InvokeVoid(0x3311E47B91EDCBBC,ped,p1,p2+.0,p3+.0,p4)end;
	ApplyPedBloodSpecific=function(ped--[[@param ped integer]],p1--[[@param p1 integer]],p2--[[@param p2 number]],p3--[[@param p3 number]],p4--[[@param p4 number]],p5--[[@param p5 number]],p6--[[@param p6 integer]],p7--[[@param p7 number]],p8--[[@param p8 string]])return InvokeVoid(0xEF0D582CBF2D9B0F,ped,p1,p2+.0,p3+.0,p4+.0,p5+.0,p6,p7+.0,p8)end;
	--[=[enum eDamageZone
{
	DZ_Torso = 0,
	DZ_Head,
	DZ_LeftArm,
	DZ_RightArm,
	DZ_LeftLeg,
	DZ_RightLeg,
};

Decal Names:
scar
blushing
cs_flush_anger
cs_flush_anger_face
bruise
bruise_large
herpes
ArmorBullet
basic_dirt_cloth
basic_dirt_skin
cs_trev1_dirt

APPLY_PED_DAMAGE_DECAL(ped, 1, 0.5f, 0.513f, 0f, 1f, unk, 0, 0, "blushing");]=]
	ApplyPedDamageDecal=function(ped--[[@param ped integer]],damageZone--[[@param damageZone integer]],xOffset--[[@param xOffset number]],yOffset--[[@param yOffset number]],heading--[[@param heading number]],scale--[[@param scale number]],alpha--[[@param alpha number]],variation--[[@param variation integer]],fadeIn--[[@param fadeIn boolean]],decalName--[[@param decalName string]])return InvokeVoid(0x397C38AA7B4A5F83,ped,damageZone,xOffset+.0,yOffset+.0,heading+.0,scale+.0,alpha+.0,variation,fadeIn,decalName)end;
	--[=[Damage Packs:

"SCR_TrevorTreeBang"
"HOSPITAL_0"
"HOSPITAL_1"
"HOSPITAL_2"
"HOSPITAL_3"
"HOSPITAL_4"
"HOSPITAL_5"
"HOSPITAL_6"
"HOSPITAL_7"
"HOSPITAL_8"
"HOSPITAL_9"
"SCR_Dumpster"
"BigHitByVehicle"
"SCR_Finale_Michael_Face"
"SCR_Franklin_finb"
"SCR_Finale_Michael"
"SCR_Franklin_finb2"
"Explosion_Med"
"SCR_Torture"
"SCR_TracySplash"
"Skin_Melee_0"

Additional damage packs:

gist.github.com/alexguirre/f3f47f75ddcf617f416f3c8a55ae2227
Full list of ped damage packs by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedDamagePacks.json]=]
	ApplyPedDamagePack=function(ped--[[@param ped integer]],damagePack--[[@param damagePack string]],damage--[[@param damage number]],mult--[[@param mult number]])return InvokeVoid(0x46DF918788CB093F,ped,damagePack,damage+.0,mult+.0)end;
	ClearPedBloodDamage=function(ped--[[@param ped integer]])return InvokeVoid(0x8FE22675A5A45817,ped)end;
	--[=[Somehow related to changing ped's clothes.]=]
	ClearPedBloodDamageByZone=function(ped--[[@param ped integer]],p1--[[@param p1 integer]])return InvokeVoid(0x56E3B78C5408D9F4,ped,p1)end;
	HidePedBloodDamageByZone=function(ped--[[@param ped integer]],p1--[[@param p1 any]],p2--[[@param p2 boolean]])return InvokeVoid(0x62AB793144DE75DC,ped,p1,p2)end;
	--[=[p1: from 0 to 5 in the b617d scripts.
p2: "blushing" and "ALL" found in the b617d scripts.]=]
	ClearPedDamageDecalByZone=function(ped--[[@param ped integer]],p1--[[@param p1 integer]],p2--[[@param p2 string]])return InvokeVoid(0x523C79AEEFCC4A2A,ped,p1,p2)end;
	GetPedDecorationsState=function(ped--[[@param ped integer]])return InvokeInt(0x71EAB450D86954A1,ped)end;---@return integer
	MarkPedDecorationsAsClonedFromLocalPlayer=function(ped--[[@param ped integer]],p1--[[@param p1 boolean]])return InvokeVoid(0x2B694AFCF64E6994,ped,p1)end;
	--[=[It clears the wetness of the selected Ped/Player. Clothes have to be wet to notice the difference.]=]
	ClearPedWetness=function(ped--[[@param ped integer]])return InvokeVoid(0x9C720776DAA43E7E,ped)end;
	--[=[It adds the wetness level to the player clothing/outfit. As if player just got out from water surface.

]=]
	SetPedWetnessHeight=function(ped--[[@param ped integer]],height--[[@param height number]])return InvokeVoid(0x44CB6447D2571AA0,ped,height+.0)end;
	--[=[combined with PED::SET_PED_WETNESS_HEIGHT(), this native makes the ped drenched in water up to the height specified in the other function]=]
	SetPedWetnessEnabledThisFrame=function(ped--[[@param ped integer]])return InvokeVoid(0xB5485E4907B53019,ped)end;
	SetPedWetness=function(ped--[[@param ped integer]],wetLevel--[[@param wetLevel number]])return InvokeVoid(0xAC0BB4D87777CAE2,ped,wetLevel+.0)end;
	ClearPedEnvDirt=function(ped--[[@param ped integer]])return InvokeVoid(0x6585D955A68452A5,ped)end;
	--[=[Sweat is set to 100.0 or 0.0 in the decompiled scripts.]=]
	SetPedSweat=function(ped--[[@param ped integer]],sweat--[[@param sweat number]])return InvokeVoid(0x27B0405F59637D1F,ped,sweat+.0)end;
	--[=[Applies an Item from a PedDecorationCollection to a ped. These include tattoos and shirt decals.

collection - PedDecorationCollection filename hash
overlay - Item name hash

Example:
Entry inside "mpbeach_overlays.xml" -
<Item>
  <uvPos x="0.500000" y="0.500000" />
  <scale x="0.600000" y="0.500000" />
  <rotation value="0.000000" />
  <nameHash>FM_Hair_Fuzz</nameHash>
  <txdHash>mp_hair_fuzz</txdHash>
  <txtHash>mp_hair_fuzz</txtHash>
  <zone>ZONE_HEAD</zone>
  <type>TYPE_TATTOO</type>
  <faction>FM</faction>
  <garment>All</garment>
  <gender>GENDER_DONTCARE</gender>
  <award />
  <awardLevel />
</Item>

Code:
PED::ADD_PED_DECORATION_FROM_HASHES(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("mpbeach_overlays"), MISC::GET_HASH_KEY("fm_hair_fuzz"))

Full list of ped overlays / decorations by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedOverlayCollections.json]=]
	AddPedDecorationFromHashes=function(ped--[[@param ped integer]],collection--[[@param collection integer]],overlay--[[@param overlay integer]])return InvokeVoid(0x5F5D1665E352A839,ped,collection,overlay)end;
	--[=[Full list of ped overlays / decorations by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedOverlayCollections.json]=]
	AddPedDecorationFromHashesInCorona=function(ped--[[@param ped integer]],collection--[[@param collection integer]],overlay--[[@param overlay integer]])return InvokeVoid(0x5619BFA07CFD7833,ped,collection,overlay)end;
	--[=[Returns the zoneID for the overlay if it is a member of collection.
enum ePedDecorationZone
{
	ZONE_TORSO = 0,
	ZONE_HEAD = 1,
	ZONE_LEFT_ARM = 2,
	ZONE_RIGHT_ARM = 3,
	ZONE_LEFT_LEG = 4,
	ZONE_RIGHT_LEG = 5,
	ZONE_MEDALS = 6,
	ZONE_INVALID = 7
};

Full list of ped overlays / decorations by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedOverlayCollections.json]=]
	GetPedDecorationZoneFromHashes=function(collection--[[@param collection integer]],overlay--[[@param overlay integer]])return InvokeInt(0x9FD452BFBE7A7A8B,collection,overlay)end;---@return integer
	ClearPedDecorations=function(ped--[[@param ped integer]])return InvokeVoid(0x0E5173C163976E38,ped)end;
	ClearPedDecorationsLeaveScars=function(ped--[[@param ped integer]])return InvokeVoid(0xE3B27E70CEAB9F0C,ped)end;
	--[=[Despite this function's name, it simply returns whether the specified handle is a Ped.]=]
	WasPedSkeletonUpdated=function(ped--[[@param ped integer]])return InvokeBool(0x11B499C1E0FF8559,ped)end;---@return boolean
	--[=[Gets the position of the specified bone of the specified ped.

ped: The ped to get the position of a bone from.
boneId: The ID of the bone to get the position from. This is NOT the index.
offsetX: The X-component of the offset to add to the position relative to the bone's rotation.
offsetY: The Y-component of the offset to add to the position relative to the bone's rotation.
offsetZ: The Z-component of the offset to add to the position relative to the bone's rotation.]=]
	GetPedBoneCoords=function(ped--[[@param ped integer]],boneId--[[@param boneId integer]],offsetX--[[@param offsetX number]],offsetY--[[@param offsetY number]],offsetZ--[[@param offsetZ number]])return InvokeV3(0x17C07FC640E86B4E,ped,boneId,offsetX+.0,offsetY+.0,offsetZ+.0)end;---@return V3
	--[=[Creates a new NaturalMotion message.

startImmediately: If set to true, the character will perform the message the moment it receives it by GIVE_PED_NM_MESSAGE. If false, the Ped will get the message but won't perform it yet. While it's a boolean value, if negative, the message will not be initialized.
messageId: The ID of the NaturalMotion message.

If a message already exists, this function does nothing. A message exists until the point it has been successfully dispatched by GIVE_PED_NM_MESSAGE.]=]
	CreateNmMessage=function(startImmediately--[[@param startImmediately boolean]],messageId--[[@param messageId integer]])return InvokeVoid(0x418EF2A1BCE56685,startImmediately,messageId)end;
	--[=[Sends the message that was created by a call to CREATE_NM_MESSAGE to the specified Ped.

If a message hasn't been created already, this function does nothing.
If the Ped is not ragdolled with Euphoria enabled, this function does nothing.
The following call can be used to ragdoll the Ped with Euphoria enabled: SET_PED_TO_RAGDOLL(ped, 4000, 5000, 1, 1, 1, 0);

Call order:
SET_PED_TO_RAGDOLL
CREATE_NM_MESSAGE
GIVE_PED_NM_MESSAGE

Multiple messages can be chained. Eg. to make the ped stagger and swing his arms around, the following calls can be made:
SET_PED_TO_RAGDOLL(ped, 4000, 5000, 1, 1, 1, 0);
CREATE_NM_MESSAGE(true, 0); // stopAllBehaviours - Stop all other behaviours, in case the Ped is already doing some Euphoria stuff.
GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.
CREATE_NM_MESSAGE(true, 1151); // staggerFall - Attempt to walk while falling.
GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.
CREATE_NM_MESSAGE(true, 372); // armsWindmill - Swing arms around.
GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.]=]
	GivePedNmMessage=function(ped--[[@param ped integer]])return InvokeVoid(0xB158DFCCC56E5C5B,ped)end;
	AddScenarioBlockingArea=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],p6--[[@param p6 boolean]],p7--[[@param p7 boolean]],p8--[[@param p8 boolean]],p9--[[@param p9 boolean]])return InvokeInt(0x1B5C85C612E5256E,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,p6,p7,p8,p9)end;---@return integer
	RemoveScenarioBlockingAreas=function()return InvokeVoid(0xD37401D78A929A49)end;
	RemoveScenarioBlockingArea=function(p0--[[@param p0 any]],p1--[[@param p1 boolean]])return InvokeVoid(0x31D16B74C6E29D66,p0,p1)end;
	SetScenarioPedsSpawnInSphereArea=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],range--[[@param range number]],p4--[[@param p4 integer]])return InvokeVoid(0x28157D43CF600981,x+.0,y+.0,z+.0,range+.0,p4)end;
	DoesScenarioBlockingAreaExists=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]])return InvokeBool(0x8A24B067D175A7BD,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0)end;---@return boolean
	--[=[Full list of ped scenarios by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json]=]
	IsPedUsingScenario=function(ped--[[@param ped integer]],scenario--[[@param scenario string]])return InvokeBool(0x1BF094736DD62C2E,ped,scenario)end;---@return boolean
	IsPedUsingAnyScenario=function(ped--[[@param ped integer]])return InvokeBool(0x57AB4A3080F85143,ped)end;---@return boolean
	SetPedPanicExitScenario=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeBool(0xFE07FF6495D52E2A,p0,p1,p2,p3)end;---@return boolean
	ToggleScenarioPedCowerInPlace=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x9A77DFD295E29B09,ped,toggle)end;
	TriggerPedScenarioPanicexittoflee=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeBool(0x25361A96E0F7E419,p0,p1,p2,p3)end;---@return boolean
	SetPedShouldPlayDirectedNormalScenarioExit=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeBool(0xEC6935EBE0847B90,p0,p1,p2,p3)end;---@return boolean
	SetPedShouldPlayNormalScenarioExit=function(ped--[[@param ped integer]])return InvokeVoid(0xA3A9299C4F2ADB98,ped)end;
	SetPedShouldPlayImmediateScenarioExit=function(ped--[[@param ped integer]])return InvokeVoid(0xF1C03A5352243A30,ped)end;
	SetPedShouldPlayFleeScenarioExit=function(ped--[[@param ped integer]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeBool(0xEEED8FAFEC331A70,ped,p1,p2,p3)end;---@return boolean
	SetPedShouldIgnoreScenarioExitCollisionChecks=function(ped--[[@param ped integer]],p1--[[@param p1 boolean]])return InvokeVoid(0x425AECF167663F48,ped,p1)end;
	SetPedShouldIgnoreScenarioNavChecks=function(p0--[[@param p0 any]],p1--[[@param p1 boolean]])return InvokeVoid(0x5B6010B3CBC29095,p0,p1)end;
	SetPedShouldProbeForScenarioExitsInOneFrame=function(p0--[[@param p0 any]],p1--[[@param p1 boolean]])return InvokeVoid(0xCEDA60A74219D064,p0,p1)end;
	IsPedGesturing=function(p0--[[@param p0 any]])return InvokeBool(0xC30BDAEE47256C13,p0)end;---@return boolean
	ResetFacialIdleAnim=function(ped--[[@param ped integer]])return InvokeVoid(0x007FDE5A7897E426,ped)end;
	--[=[Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json]=]
	PlayFacialAnim=function(ped--[[@param ped integer]],animName--[[@param animName string]],animDict--[[@param animDict string]])return InvokeVoid(0xE1E65CA8AC9C00ED,ped,animName,animDict)end;
	--[=[Clipsets:
facials@gen_female@base
facials@gen_male@base
facials@p_m_zero@base

Typically followed with SET_FACIAL_IDLE_ANIM_OVERRIDE:
mood_drunk_1
mood_stressed_1
mood_happy_1
mood_talking_1
]=]
	SetFacialClipset=function(ped--[[@param ped integer]],animDict--[[@param animDict string]])return InvokeVoid(0x5687C7F05B39E401,ped,animDict)end;
	--[=[Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json]=]
	SetFacialIdleAnimOverride=function(ped--[[@param ped integer]],animName--[[@param animName string]],animDict--[[@param animDict string]])return InvokeVoid(0xFFC24B988B938B38,ped,animName,animDict)end;
	ClearFacialIdleAnimOverride=function(ped--[[@param ped integer]])return InvokeVoid(0x726256CC1EEB182F,ped)end;
	SetPedCanPlayGestureAnims=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xBAF20C5432058024,ped,toggle)end;
	--[=[p2 usually 0]=]
	SetPedCanPlayVisemeAnims=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0xF833DDBA3B104D43,ped,toggle,p2)end;
	SetPedIsIgnoredByAutoOpenDoors=function(ped--[[@param ped integer]],p1--[[@param p1 boolean]])return InvokeVoid(0x33A60D8BDD6E508C,ped,p1)end;
	SetPedCanPlayAmbientAnims=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x6373D1349925A70E,ped,toggle)end;
	SetPedCanPlayAmbientBaseAnims=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x0EB0585D15254740,ped,toggle)end;
	TriggerIdleAnimationOnPed=function(ped--[[@param ped integer]])return InvokeVoid(0xC2EE020F5FB4DB53,ped)end;
	SetPedCanArmIk=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x6C3B4D6D13B4C841,ped,toggle)end;
	SetPedCanHeadIk=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xC11C18092C5530DC,ped,toggle)end;
	SetPedCanLegIk=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x73518ECE2485412B,ped,toggle)end;
	SetPedCanTorsoIk=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xF2B7106D37947CE0,ped,toggle)end;
	SetPedCanTorsoReactIk=function(ped--[[@param ped integer]],p1--[[@param p1 boolean]])return InvokeVoid(0xF5846EDB26A98A24,ped,p1)end;
	SetPedCanTorsoVehicleIk=function(ped--[[@param ped integer]],p1--[[@param p1 boolean]])return InvokeVoid(0x6647C5F6F5792496,ped,p1)end;
	SetPedCanUseAutoConversationLookat=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xEC4686EC06434678,ped,toggle)end;
	IsPedHeadtrackingPed=function(ped1--[[@param ped1 integer]],ped2--[[@param ped2 integer]])return InvokeBool(0x5CD3CB88A7F8850D,ped1,ped2)end;---@return boolean
	IsPedHeadtrackingEntity=function(ped--[[@param ped integer]],entity--[[@param entity integer]])return InvokeBool(0x813A0A7C9D2E831F,ped,entity)end;---@return boolean
	--[=[This is only called once in the scripts.

sub_1CD9(&l_49, 0, getElem(3, &l_34, 4), "MICHAEL", 0, 1);
                    sub_1CA8("WORLD_HUMAN_SMOKING", 2);
                    PED::SET_PED_PRIMARY_LOOKAT(getElem(3, &l_34, 4), PLAYER::PLAYER_PED_ID());]=]
	SetPedPrimaryLookat=function(ped--[[@param ped integer]],lookAt--[[@param lookAt integer]])return InvokeVoid(0xCD17B554996A8D9E,ped,lookAt)end;
	SetPedClothPinFrames=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x78C4E9961DB3EB5B,p0,p1)end;
	SetPedClothPackageIndex=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x82A3D6D9CC2CB8E3,p0,p1)end;
	SetPedClothProne=function(p0--[[@param p0 any]],p1--[[@param p1 boolean]])return InvokeVoid(0xA660FAF550EB37E5,p0,p1)end;
	--[=[enum ePedConfigFlags
{
	_CPED_CONFIG_FLAG_0xC63DE95E = 1,
	CPED_CONFIG_FLAG_NoCriticalHits = 2,
	CPED_CONFIG_FLAG_DrownsInWater = 3,
	CPED_CONFIG_FLAG_DisableReticuleFixedLockon = 4,
	_CPED_CONFIG_FLAG_0x37D196F4 = 5,
	_CPED_CONFIG_FLAG_0xE2462399 = 6,
	CPED_CONFIG_FLAG_UpperBodyDamageAnimsOnly = 7,
	_CPED_CONFIG_FLAG_0xEDDEB838 = 8,
	_CPED_CONFIG_FLAG_0xB398B6FD = 9,
	_CPED_CONFIG_FLAG_0xF6664E68 = 10,
	_CPED_CONFIG_FLAG_0xA05E7CA3 = 11,
	_CPED_CONFIG_FLAG_0xCE394045 = 12,
	CPED_CONFIG_FLAG_NeverLeavesGroup = 13,
	_CPED_CONFIG_FLAG_0xCD8D1411 = 14,
	_CPED_CONFIG_FLAG_0xB031F1A9 = 15,
	_CPED_CONFIG_FLAG_0xFE65BEE3 = 16,
	CPED_CONFIG_FLAG_BlockNonTemporaryEvents = 17,
	_CPED_CONFIG_FLAG_0x380165BD = 18,
	_CPED_CONFIG_FLAG_0x07C045C7 = 19,
	_CPED_CONFIG_FLAG_0x583B5E2D = 20,
	_CPED_CONFIG_FLAG_0x475EDA58 = 21,
	_CPED_CONFIG_FLAG_0x8629D05B = 22,
	_CPED_CONFIG_FLAG_0x1522968B = 23,
	CPED_CONFIG_FLAG_IgnoreSeenMelee = 24,
	_CPED_CONFIG_FLAG_0x4CC09C4B = 25,
	_CPED_CONFIG_FLAG_0x034F3053 = 26,
	_CPED_CONFIG_FLAG_0xD91BA7CC = 27,
	_CPED_CONFIG_FLAG_0x5C8DC66E = 28,
	CPED_CONFIG_FLAG_GetOutUndriveableVehicle = 29,
	_CPED_CONFIG_FLAG_0x6580B9D2 = 30,
	_CPED_CONFIG_FLAG_0x0EF7A297 = 31,
	CPED_CONFIG_FLAG_WillFlyThruWindscreen = 32,
	CPED_CONFIG_FLAG_DieWhenRagdoll = 33,
	CPED_CONFIG_FLAG_HasHelmet = 34,
	CPED_CONFIG_FLAG_UseHelmet = 35,
	CPED_CONFIG_FLAG_DontTakeOffHelmet = 36,
	_CPED_CONFIG_FLAG_0xB130D17B = 37,
	_CPED_CONFIG_FLAG_0x5F071200 = 38,
	CPED_CONFIG_FLAG_DisableEvasiveDives = 39,
	_CPED_CONFIG_FLAG_0xC287AAFF = 40,
	_CPED_CONFIG_FLAG_0x203328CC = 41,
	CPED_CONFIG_FLAG_DontInfluenceWantedLevel = 42,
	CPED_CONFIG_FLAG_DisablePlayerLockon = 43,
	CPED_CONFIG_FLAG_DisableLockonToRandomPeds = 44,
	CPED_CONFIG_FLAG_AllowLockonToFriendlyPlayers = 45,
	_CPED_CONFIG_FLAG_0xDB115BFA = 46,
	CPED_CONFIG_FLAG_PedBeingDeleted = 47,
	CPED_CONFIG_FLAG_BlockWeaponSwitching = 48,
	_CPED_CONFIG_FLAG_0xF8E99565 = 49,
	_CPED_CONFIG_FLAG_0xDD17FEE6 = 50,
	_CPED_CONFIG_FLAG_0x7ED9B2C9 = 51,
	_CPED_CONFIG_FLAG_NoCollison = 52,
	_CPED_CONFIG_FLAG_0x5A6C1F6E = 53,
	_CPED_CONFIG_FLAG_0xD749FC41 = 54,
	_CPED_CONFIG_FLAG_0x357F63F3 = 55,
	_CPED_CONFIG_FLAG_0xC5E60961 = 56,
	_CPED_CONFIG_FLAG_0x29275C3E = 57,
	CPED_CONFIG_FLAG_IsFiring = 58,
	CPED_CONFIG_FLAG_WasFiring = 59,
	CPED_CONFIG_FLAG_IsStanding = 60,
	CPED_CONFIG_FLAG_WasStanding = 61,
	CPED_CONFIG_FLAG_InVehicle = 62,
	CPED_CONFIG_FLAG_OnMount = 63,
	CPED_CONFIG_FLAG_AttachedToVehicle = 64,
	CPED_CONFIG_FLAG_IsSwimming = 65,
	CPED_CONFIG_FLAG_WasSwimming = 66,
	CPED_CONFIG_FLAG_IsSkiing = 67,
	CPED_CONFIG_FLAG_IsSitting = 68,
	CPED_CONFIG_FLAG_KilledByStealth = 69,
	CPED_CONFIG_FLAG_KilledByTakedown = 70,
	CPED_CONFIG_FLAG_Knockedout = 71,
	_CPED_CONFIG_FLAG_0x3E3C4560 = 72,
	_CPED_CONFIG_FLAG_0x2994C7B7 = 73,
	_CPED_CONFIG_FLAG_0x6D59D275 = 74,
	CPED_CONFIG_FLAG_UsingCoverPoint = 75,
	CPED_CONFIG_FLAG_IsInTheAir = 76,
	_CPED_CONFIG_FLAG_0x2D493FB7 = 77,
	CPED_CONFIG_FLAG_IsAimingGun = 78,
	_CPED_CONFIG_FLAG_0x14D69875 = 79,
	_CPED_CONFIG_FLAG_0x40B05311 = 80,
	_CPED_CONFIG_FLAG_0x8B230BC5 = 81,
	_CPED_CONFIG_FLAG_0xC74E5842 = 82,
	_CPED_CONFIG_FLAG_0x9EA86147 = 83,
	_CPED_CONFIG_FLAG_0x674C746C = 84,
	_CPED_CONFIG_FLAG_0x3E56A8C2 = 85,
	_CPED_CONFIG_FLAG_0xC144A1EF = 86,
	_CPED_CONFIG_FLAG_0x0548512D = 87,
	_CPED_CONFIG_FLAG_0x31C93909 = 88,
	_CPED_CONFIG_FLAG_0xA0269315 = 89,
	_CPED_CONFIG_FLAG_0xD4D59D4D = 90,
	_CPED_CONFIG_FLAG_0x411D4420 = 91,
	_CPED_CONFIG_FLAG_0xDF4AEF0D = 92,
	CPED_CONFIG_FLAG_ForcePedLoadCover = 93,
	_CPED_CONFIG_FLAG_0x300E4CD3 = 94,
	_CPED_CONFIG_FLAG_0xF1C5BF04 = 95,
	_CPED_CONFIG_FLAG_0x89C2EF13 = 96,
	CPED_CONFIG_FLAG_VaultFromCover = 97,
	_CPED_CONFIG_FLAG_0x02A852C8 = 98,
	_CPED_CONFIG_FLAG_0x3D9407F1 = 99,
	_CPED_CONFIG_FLAG_IsDrunk = 100, // 0x319B4558
	CPED_CONFIG_FLAG_ForcedAim = 101,
	_CPED_CONFIG_FLAG_0xB942D71A = 102,
	_CPED_CONFIG_FLAG_0xD26C55A8 = 103,
	CPED_CONFIG_FLAG_OpenDoorArmIK = 104,
	CPED_CONFIG_FLAG_ForceReload = 105,
	CPED_CONFIG_FLAG_DontActivateRagdollFromVehicleImpact = 106,
	CPED_CONFIG_FLAG_DontActivateRagdollFromBulletImpact = 107,
	CPED_CONFIG_FLAG_DontActivateRagdollFromExplosions = 108,
	CPED_CONFIG_FLAG_DontActivateRagdollFromFire = 109,
	CPED_CONFIG_FLAG_DontActivateRagdollFromElectrocution = 110,
	_CPED_CONFIG_FLAG_0x83C0A4BF = 111,
	_CPED_CONFIG_FLAG_0x0E0FAF8C = 112,
	CPED_CONFIG_FLAG_KeepWeaponHolsteredUnlessFired = 113,
	_CPED_CONFIG_FLAG_0x43B80B79 = 114,
	_CPED_CONFIG_FLAG_0x0D2A9309 = 115,
	CPED_CONFIG_FLAG_GetOutBurningVehicle = 116,
	CPED_CONFIG_FLAG_BumpedByPlayer = 117,
	CPED_CONFIG_FLAG_RunFromFiresAndExplosions = 118,
	CPED_CONFIG_FLAG_TreatAsPlayerDuringTargeting = 119,
	CPED_CONFIG_FLAG_IsHandCuffed = 120,
	CPED_CONFIG_FLAG_IsAnkleCuffed = 121,
	CPED_CONFIG_FLAG_DisableMelee = 122,
	CPED_CONFIG_FLAG_DisableUnarmedDrivebys = 123,
	CPED_CONFIG_FLAG_JustGetsPulledOutWhenElectrocuted = 124,
	_CPED_CONFIG_FLAG_0x5FED6BFD = 125,
	CPED_CONFIG_FLAG_WillNotHotwireLawEnforcementVehicle = 126,
	CPED_CONFIG_FLAG_WillCommandeerRatherThanJack = 127,
	CPED_CONFIG_FLAG_CanBeAgitated = 128,
	CPED_CONFIG_FLAG_ForcePedToFaceLeftInCover = 129,
	CPED_CONFIG_FLAG_ForcePedToFaceRightInCover = 130,
	CPED_CONFIG_FLAG_BlockPedFromTurningInCover = 131,
	CPED_CONFIG_FLAG_KeepRelationshipGroupAfterCleanUp = 132,
	CPED_CONFIG_FLAG_ForcePedToBeDragged = 133,
	CPED_CONFIG_FLAG_PreventPedFromReactingToBeingJacked = 134,
	CPED_CONFIG_FLAG_IsScuba = 135,
	CPED_CONFIG_FLAG_WillArrestRatherThanJack = 136,
	CPED_CONFIG_FLAG_RemoveDeadExtraFarAway = 137,
	CPED_CONFIG_FLAG_RidingTrain = 138,
	CPED_CONFIG_FLAG_ArrestResult = 139,
	CPED_CONFIG_FLAG_CanAttackFriendly = 140,
	CPED_CONFIG_FLAG_WillJackAnyPlayer = 141,
	_CPED_CONFIG_FLAG_0x6901E731 = 142,
	_CPED_CONFIG_FLAG_0x9EC9BF6C = 143,
	CPED_CONFIG_FLAG_WillJackWantedPlayersRatherThanStealCar = 144,
	CPED_CONFIG_FLAG_ShootingAnimFlag = 145,
	CPED_CONFIG_FLAG_DisableLadderClimbing = 146,
	CPED_CONFIG_FLAG_StairsDetected = 147,
	CPED_CONFIG_FLAG_SlopeDetected = 148,
	_CPED_CONFIG_FLAG_0x1A15670B = 149,
	CPED_CONFIG_FLAG_CowerInsteadOfFlee = 150,
	CPED_CONFIG_FLAG_CanActivateRagdollWhenVehicleUpsideDown = 151,
	CPED_CONFIG_FLAG_AlwaysRespondToCriesForHelp = 152,
	CPED_CONFIG_FLAG_DisableBloodPoolCreation = 153,
	CPED_CONFIG_FLAG_ShouldFixIfNoCollision = 154,
	CPED_CONFIG_FLAG_CanPerformArrest = 155,
	CPED_CONFIG_FLAG_CanPerformUncuff = 156,
	CPED_CONFIG_FLAG_CanBeArrested = 157,
	_CPED_CONFIG_FLAG_0xF7960FF5 = 158,
	CPED_CONFIG_FLAG_PlayerPreferFrontSeatMP = 159,
	_CPED_CONFIG_FLAG_0x0C6C3099 = 160,
	_CPED_CONFIG_FLAG_0x645F927A = 161,
	_CPED_CONFIG_FLAG_0xA86549B9 = 162,
	_CPED_CONFIG_FLAG_0x8AAF337A = 163,
	_CPED_CONFIG_FLAG_0x13BAA6E7 = 164,
	_CPED_CONFIG_FLAG_0x5FB9D1F5 = 165,
	CPED_CONFIG_FLAG_IsInjured = 166,
	CPED_CONFIG_FLAG_DontEnterVehiclesInPlayersGroup = 167,
	_CPED_CONFIG_FLAG_0xD8072639 = 168,
	CPED_CONFIG_FLAG_PreventAllMeleeTaunts = 169,
	CPED_CONFIG_FLAG_ForceDirectEntry = 170,
	CPED_CONFIG_FLAG_AlwaysSeeApproachingVehicles = 171,
	CPED_CONFIG_FLAG_CanDiveAwayFromApproachingVehicles = 172,
	CPED_CONFIG_FLAG_AllowPlayerToInterruptVehicleEntryExit = 173,
	CPED_CONFIG_FLAG_OnlyAttackLawIfPlayerIsWanted = 174,
	_CPED_CONFIG_FLAG_0x90008BFA = 175,
	_CPED_CONFIG_FLAG_0x07C7A910 = 176,
	CPED_CONFIG_FLAG_PedsJackingMeDontGetIn = 177,
	_CPED_CONFIG_FLAG_0xCE4E8BE2 = 178,
	CPED_CONFIG_FLAG_PedIgnoresAnimInterruptEvents = 179,
	CPED_CONFIG_FLAG_IsInCustody = 180,
	CPED_CONFIG_FLAG_ForceStandardBumpReactionThresholds = 181,
	CPED_CONFIG_FLAG_LawWillOnlyAttackIfPlayerIsWanted = 182,
	CPED_CONFIG_FLAG_IsAgitated = 183,
	CPED_CONFIG_FLAG_PreventAutoShuffleToDriversSeat = 184,
	CPED_CONFIG_FLAG_UseKinematicModeWhenStationary = 185,
	CPED_CONFIG_FLAG_EnableWeaponBlocking = 186,
	CPED_CONFIG_FLAG_HasHurtStarted = 187,
	CPED_CONFIG_FLAG_DisableHurt = 188,
	CPED_CONFIG_FLAG_PlayerIsWeird = 189,
	_CPED_CONFIG_FLAG_0x32FC208B = 190,
	_CPED_CONFIG_FLAG_0x0C296E5A = 191,
	_CPED_CONFIG_FLAG_0xE63B73EC = 192,
	CPED_CONFIG_FLAG_DoNothingWhenOnFootByDefault = 193,
	CPED_CONFIG_FLAG_UsingScenario = 194,
	CPED_CONFIG_FLAG_VisibleOnScreen = 195,
	_CPED_CONFIG_FLAG_0xD88C58A1 = 196,
	_CPED_CONFIG_FLAG_0x5A3DCF43 = 197,
	_CPED_CONFIG_FLAG_0xEA02B420 = 198,
	CPED_CONFIG_FLAG_DontActivateRagdollOnVehicleCollisionWhenDead = 199,
	CPED_CONFIG_FLAG_HasBeenInArmedCombat = 200,
	_CPED_CONFIG_FLAG_0x5E6466F6 = 201,
	CPED_CONFIG_FLAG_Avoidance_Ignore_All = 202,
	CPED_CONFIG_FLAG_Avoidance_Ignored_by_All = 203,
	CPED_CONFIG_FLAG_Avoidance_Ignore_Group1 = 204,
	CPED_CONFIG_FLAG_Avoidance_Member_of_Group1 = 205,
	CPED_CONFIG_FLAG_ForcedToUseSpecificGroupSeatIndex = 206,
	_CPED_CONFIG_FLAG_0x415B26B9 = 207,
	CPED_CONFIG_FLAG_DisableExplosionReactions = 208,
	CPED_CONFIG_FLAG_DodgedPlayer = 209,
	CPED_CONFIG_FLAG_WaitingForPlayerControlInterrupt = 210,
	CPED_CONFIG_FLAG_ForcedToStayInCover = 211,
	CPED_CONFIG_FLAG_GeneratesSoundEvents = 212,
	CPED_CONFIG_FLAG_ListensToSoundEvents = 213,
	CPED_CONFIG_FLAG_AllowToBeTargetedInAVehicle = 214,
	CPED_CONFIG_FLAG_WaitForDirectEntryPointToBeFreeWhenExiting = 215,
	CPED_CONFIG_FLAG_OnlyRequireOnePressToExitVehicle = 216,
	CPED_CONFIG_FLAG_ForceExitToSkyDive = 217,
	_CPED_CONFIG_FLAG_0x3C7DF9DF = 218,
	_CPED_CONFIG_FLAG_0x848FFEF2 = 219,
	CPED_CONFIG_FLAG_DontEnterLeadersVehicle = 220,
	CPED_CONFIG_FLAG_DisableExitToSkyDive = 221,
	_CPED_CONFIG_FLAG_0x84F722FA = 222,
	_CPED_CONFIG_FLAG_Shrink = 223, // 0xD1B87B1F
	_CPED_CONFIG_FLAG_0x728AA918 = 224,
	CPED_CONFIG_FLAG_DisablePotentialToBeWalkedIntoResponse = 225,
	CPED_CONFIG_FLAG_DisablePedAvoidance = 226,
	CPED_CONFIG_FLAG_ForceRagdollUponDeath = 227,
	_CPED_CONFIG_FLAG_0x1EA7225F = 228,
	CPED_CONFIG_FLAG_DisablePanicInVehicle = 229,
	CPED_CONFIG_FLAG_AllowedToDetachTrailer = 230,
	_CPED_CONFIG_FLAG_0xFC3E572D = 231,
	_CPED_CONFIG_FLAG_0x08E9F9CF = 232,
	_CPED_CONFIG_FLAG_0x2D3BA52D = 233,
	_CPED_CONFIG_FLAG_0xFD2F53EA = 234,
	_CPED_CONFIG_FLAG_0x31A1B03B = 235,
	CPED_CONFIG_FLAG_IsHoldingProp = 236,
	CPED_CONFIG_FLAG_BlocksPathingWhenDead = 237,
	_CPED_CONFIG_FLAG_0xCE57C9A3 = 238,
	_CPED_CONFIG_FLAG_0x26149198 = 239,
	CPED_CONFIG_FLAG_ForceSkinCharacterCloth = 240,
	CPED_CONFIG_FLAG_LeaveEngineOnWhenExitingVehicles = 241,
	CPED_CONFIG_FLAG_PhoneDisableTextingAnimations = 242,
	CPED_CONFIG_FLAG_PhoneDisableTalkingAnimations = 243,
	CPED_CONFIG_FLAG_PhoneDisableCameraAnimations = 244,
	CPED_CONFIG_FLAG_DisableBlindFiringInShotReactions = 245,
	CPED_CONFIG_FLAG_AllowNearbyCoverUsage = 246,
	_CPED_CONFIG_FLAG_0x0C754ACA = 247,
	CPED_CONFIG_FLAG_CanPlayInCarIdles = 248,
	CPED_CONFIG_FLAG_CanAttackNonWantedPlayerAsLaw = 249,
	CPED_CONFIG_FLAG_WillTakeDamageWhenVehicleCrashes = 250,
	CPED_CONFIG_FLAG_AICanDrivePlayerAsRearPassenger = 251,
	CPED_CONFIG_FLAG_PlayerCanJackFriendlyPlayers = 252,
	CPED_CONFIG_FLAG_OnStairs = 253,
	_CPED_CONFIG_FLAG_0xE1A2F73F = 254,
	CPED_CONFIG_FLAG_AIDriverAllowFriendlyPassengerSeatEntry = 255,
	_CPED_CONFIG_FLAG_0xF1EB20A9 = 256,
	CPED_CONFIG_FLAG_AllowMissionPedToUseInjuredMovement = 257,
	_CPED_CONFIG_FLAG_0x329DCF1A = 258,
	_CPED_CONFIG_FLAG_0x8D90DD1B = 259,
	_CPED_CONFIG_FLAG_0xB8A292B7 = 260,
	CPED_CONFIG_FLAG_PreventUsingLowerPrioritySeats = 261,
	_CPED_CONFIG_FLAG_0x2AF558F0 = 262,
	_CPED_CONFIG_FLAG_0x82251455 = 263,
	_CPED_CONFIG_FLAG_0x30CF498B = 264,
	_CPED_CONFIG_FLAG_0xE1CD50AF = 265,
	_CPED_CONFIG_FLAG_0x72E4AE48 = 266,
	_CPED_CONFIG_FLAG_0xC2657EA1 = 267,
	CPED_CONFIG_FLAG_TeleportToLeaderVehicle = 268,
	CPED_CONFIG_FLAG_Avoidance_Ignore_WeirdPedBuffer = 269,
	CPED_CONFIG_FLAG_OnStairSlope = 270,
	_CPED_CONFIG_FLAG_0xA0897933 = 271,
	CPED_CONFIG_FLAG_DontBlipCop = 272,
	CPED_CONFIG_FLAG_ClimbedShiftedFence = 273,
	_CPED_CONFIG_FLAG_0xF7823618 = 274,
	CPED_CONFIG_FLAG_KillWhenTrapped = 275,
	CPED_CONFIG_FLAG_EdgeDetected = 276,
	_CPED_CONFIG_FLAG_0x92B67896 = 277,
	_CPED_CONFIG_FLAG_0xCAD677C9 = 278,
	CPED_CONFIG_FLAG_AvoidTearGas = 279,
	_CPED_CONFIG_FLAG_0x5276AC7B = 280,
	CPED_CONFIG_FLAG_DisableGoToWritheWhenInjured = 281,
	CPED_CONFIG_FLAG_OnlyUseForcedSeatWhenEnteringHeliInGroup = 282,
	_CPED_CONFIG_FLAG_0x9139724D = 283,
	_CPED_CONFIG_FLAG_0xA1457461 = 284,
	CPED_CONFIG_FLAG_DisableWeirdPedEvents = 285,
	CPED_CONFIG_FLAG_ShouldChargeNow = 286,
	CPED_CONFIG_FLAG_RagdollingOnBoat = 287,
	CPED_CONFIG_FLAG_HasBrandishedWeapon = 288,
	_CPED_CONFIG_FLAG_0x1B9EE8A1 = 289,
	_CPED_CONFIG_FLAG_0xF3F5758C = 290,
	_CPED_CONFIG_FLAG_0x2A9307F1 = 291,
	_CPED_CONFIG_FLAG_FreezePosition = 292, // 0x7403D216
	_CPED_CONFIG_FLAG_0xA06A3C6C = 293,
	CPED_CONFIG_FLAG_DisableShockingEvents = 294,
	_CPED_CONFIG_FLAG_0xF8DA25A5 = 295,
	CPED_CONFIG_FLAG_NeverReactToPedOnRoof = 296,
	_CPED_CONFIG_FLAG_0xB31F1187 = 297,
	_CPED_CONFIG_FLAG_0x84315402 = 298,
	CPED_CONFIG_FLAG_DisableShockingDrivingOnPavementEvents = 299,
	_CPED_CONFIG_FLAG_0xC7829B67 = 300,
	CPED_CONFIG_FLAG_DisablePedConstraints = 301,
	CPED_CONFIG_FLAG_ForceInitialPeekInCover = 302,
	_CPED_CONFIG_FLAG_0x2ADA871B = 303,
	_CPED_CONFIG_FLAG_0x47BC8A58 = 304,
	CPED_CONFIG_FLAG_DisableJumpingFromVehiclesAfterLeader = 305,
	_CPED_CONFIG_FLAG_0x4A133C50 = 306,
	_CPED_CONFIG_FLAG_0xC58099C3 = 307,
	_CPED_CONFIG_FLAG_0xF3D76D41 = 308,
	_CPED_CONFIG_FLAG_0xB0EEE9F2 = 309,
	CPED_CONFIG_FLAG_IsInCluster = 310,
	CPED_CONFIG_FLAG_ShoutToGroupOnPlayerMelee = 311,
	CPED_CONFIG_FLAG_IgnoredByAutoOpenDoors = 312,
	_CPED_CONFIG_FLAG_0xD4136C22 = 313,
	CPED_CONFIG_FLAG_ForceIgnoreMeleeActiveCombatant = 314,
	CPED_CONFIG_FLAG_CheckLoSForSoundEvents = 315,
	_CPED_CONFIG_FLAG_0xD5C98277 = 316,
	CPED_CONFIG_FLAG_CanSayFollowedByPlayerAudio = 317,
	CPED_CONFIG_FLAG_ActivateRagdollFromMinorPlayerContact = 318,
	_CPED_CONFIG_FLAG_0xD8BE1D54 = 319,
	CPED_CONFIG_FLAG_ForcePoseCharacterCloth = 320,
	CPED_CONFIG_FLAG_HasClothCollisionBounds = 321,
	CPED_CONFIG_FLAG_HasHighHeels = 322,
	_CPED_CONFIG_FLAG_0x86B01E54 = 323,
	CPED_CONFIG_FLAG_DontBehaveLikeLaw = 324,
	_CPED_CONFIG_FLAG_0xC03B736C = 325, // SpawnedAtScenario?
	CPED_CONFIG_FLAG_DisablePoliceInvestigatingBody = 326,
	CPED_CONFIG_FLAG_DisableWritheShootFromGround = 327,
	CPED_CONFIG_FLAG_LowerPriorityOfWarpSeats = 328,
	CPED_CONFIG_FLAG_DisableTalkTo = 329,
	CPED_CONFIG_FLAG_DontBlip = 330,
	CPED_CONFIG_FLAG_IsSwitchingWeapon = 331,
	CPED_CONFIG_FLAG_IgnoreLegIkRestrictions = 332,
	_CPED_CONFIG_FLAG_0x150468FD = 333,
	_CPED_CONFIG_FLAG_0x914EBD6B = 334,
	_CPED_CONFIG_FLAG_0x79AF3B6D = 335,
	_CPED_CONFIG_FLAG_0x75C7A632 = 336,
	_CPED_CONFIG_FLAG_0x52D530E2 = 337,
	_CPED_CONFIG_FLAG_0xDB2A90E0 = 338,
	CPED_CONFIG_FLAG_AllowTaskDoNothingTimeslicing = 339,
	_CPED_CONFIG_FLAG_0x12ADB567 = 340,
	_CPED_CONFIG_FLAG_0x105C8518 = 341,
	CPED_CONFIG_FLAG_NotAllowedToJackAnyPlayers = 342,
	_CPED_CONFIG_FLAG_0xED152C3E = 343,
	_CPED_CONFIG_FLAG_0xA0EFE6A8 = 344,
	CPED_CONFIG_FLAG_AlwaysLeaveTrainUponArrival = 345,
	_CPED_CONFIG_FLAG_0xCDDFE830 = 346,
	CPED_CONFIG_FLAG_OnlyWritheFromWeaponDamage = 347,
	CPED_CONFIG_FLAG_UseSloMoBloodVfx = 348,
	CPED_CONFIG_FLAG_EquipJetpack = 349,
	CPED_CONFIG_FLAG_PreventDraggedOutOfCarThreatResponse = 350,
	_CPED_CONFIG_FLAG_0xE13D1F7C = 351,
	_CPED_CONFIG_FLAG_0x40E25FB9 = 352,
	_CPED_CONFIG_FLAG_0x930629D9 = 353,
	_CPED_CONFIG_FLAG_0xECCF0C7F = 354,
	_CPED_CONFIG_FLAG_0xB6E9613B = 355,
	CPED_CONFIG_FLAG_ForceDeepSurfaceCheck = 356,
	CPED_CONFIG_FLAG_DisableDeepSurfaceAnims = 357,
	CPED_CONFIG_FLAG_DontBlipNotSynced = 358,
	CPED_CONFIG_FLAG_IsDuckingInVehicle = 359,
	CPED_CONFIG_FLAG_PreventAutoShuffleToTurretSeat = 360,
	CPED_CONFIG_FLAG_DisableEventInteriorStatusCheck = 361,
	CPED_CONFIG_FLAG_HasReserveParachute = 362,
	CPED_CONFIG_FLAG_UseReserveParachute = 363,
	CPED_CONFIG_FLAG_TreatDislikeAsHateWhenInCombat = 364,
	CPED_CONFIG_FLAG_OnlyUpdateTargetWantedIfSeen = 365,
	CPED_CONFIG_FLAG_AllowAutoShuffleToDriversSeat = 366,
	_CPED_CONFIG_FLAG_0xD7E07D37 = 367,
	_CPED_CONFIG_FLAG_0x03C4FD24 = 368,
	_CPED_CONFIG_FLAG_0x7675789A = 369,
	_CPED_CONFIG_FLAG_0xB7288A88 = 370,
	_CPED_CONFIG_FLAG_0xC06B6291 = 371,
	CPED_CONFIG_FLAG_PreventReactingToSilencedCloneBullets = 372,
	CPED_CONFIG_FLAG_DisableInjuredCryForHelpEvents = 373,
	CPED_CONFIG_FLAG_NeverLeaveTrain = 374,
	CPED_CONFIG_FLAG_DontDropJetpackOnDeath = 375,
	_CPED_CONFIG_FLAG_0x147F1FFB = 376,
	_CPED_CONFIG_FLAG_0x4376DD79 = 377,
	_CPED_CONFIG_FLAG_0xCD3DB518 = 378,
	_CPED_CONFIG_FLAG_0xFE4BA4B6 = 379,
	CPED_CONFIG_FLAG_DisableAutoEquipHelmetsInBikes = 380,
	_CPED_CONFIG_FLAG_0xBCD816CD = 381,
	_CPED_CONFIG_FLAG_0xCF02DD69 = 382,
	_CPED_CONFIG_FLAG_0xF73AFA2E = 383,
	_CPED_CONFIG_FLAG_0x80B9A9D0 = 384,
	_CPED_CONFIG_FLAG_0xF601F7EE = 385,
	_CPED_CONFIG_FLAG_0xA91350FC = 386,
	_CPED_CONFIG_FLAG_0x3AB23B96 = 387,
	CPED_CONFIG_FLAG_IsClimbingLadder = 388,
	CPED_CONFIG_FLAG_HasBareFeet = 389,
	CPED_CONFIG_FLAG_UNUSED_REPLACE_ME_2 = 390,
	CPED_CONFIG_FLAG_GoOnWithoutVehicleIfItIsUnableToGetBackToRoad = 391,
	CPED_CONFIG_FLAG_BlockDroppingHealthSnacksOnDeath = 392,
	_CPED_CONFIG_FLAG_0xC11D3E8F = 393,
	CPED_CONFIG_FLAG_ForceThreatResponseToNonFriendToFriendMeleeActions = 394,
	CPED_CONFIG_FLAG_DontRespondToRandomPedsDamage = 395,
	CPED_CONFIG_FLAG_AllowContinuousThreatResponseWantedLevelUpdates = 396,
	CPED_CONFIG_FLAG_KeepTargetLossResponseOnCleanup = 397,
	CPED_CONFIG_FLAG_PlayersDontDragMeOutOfCar = 398,
	CPED_CONFIG_FLAG_BroadcastRepondedToThreatWhenGoingToPointShooting = 399,
	CPED_CONFIG_FLAG_IgnorePedTypeForIsFriendlyWith = 400,
	CPED_CONFIG_FLAG_TreatNonFriendlyAsHateWhenInCombat = 401,
	CPED_CONFIG_FLAG_DontLeaveVehicleIfLeaderNotInVehicle = 402,
	_CPED_CONFIG_FLAG_0x5E5B9591 = 403,
	CPED_CONFIG_FLAG_AllowMeleeReactionIfMeleeProofIsOn = 404,
	_CPED_CONFIG_FLAG_0x77840177 = 405,
	_CPED_CONFIG_FLAG_0x1C7ACAC4 = 406,
	CPED_CONFIG_FLAG_UseNormalExplosionDamageWhenBlownUpInVehicle = 407,
	CPED_CONFIG_FLAG_DisableHomingMissileLockForVehiclePedInside = 408,
	CPED_CONFIG_FLAG_DisableTakeOffScubaGear = 409,
	CPED_CONFIG_FLAG_IgnoreMeleeFistWeaponDamageMult = 410,
	CPED_CONFIG_FLAG_LawPedsCanFleeFromNonWantedPlayer = 411,
	CPED_CONFIG_FLAG_ForceBlipSecurityPedsIfPlayerIsWanted = 412,
	CPED_CONFIG_FLAG_IsHolsteringWeapon = 413,
	CPED_CONFIG_FLAG_UseGoToPointForScenarioNavigation = 414,
	CPED_CONFIG_FLAG_DontClearLocalPassengersWantedLevel = 415,
	CPED_CONFIG_FLAG_BlockAutoSwapOnWeaponPickups = 416,
	CPED_CONFIG_FLAG_ThisPedIsATargetPriorityForAI = 417,
	CPED_CONFIG_FLAG_IsSwitchingHelmetVisor = 418,
	CPED_CONFIG_FLAG_ForceHelmetVisorSwitch = 419,
	_CPED_CONFIG_FLAG_0xCFF5F6DE = 420,
	CPED_CONFIG_FLAG_UseOverrideFootstepPtFx = 421,
	CPED_CONFIG_FLAG_DisableVehicleCombat = 422,
	_CPED_CONFIG_FLAG_0xFE401D26 = 423,
	CPED_CONFIG_FLAG_FallsLikeAircraft = 424,
	_CPED_CONFIG_FLAG_0x2B42AE82 = 425,
	CPED_CONFIG_FLAG_UseLockpickVehicleEntryAnimations = 426,
	CPED_CONFIG_FLAG_IgnoreInteriorCheckForSprinting = 427,
	CPED_CONFIG_FLAG_SwatHeliSpawnWithinLastSpottedLocation = 428,
	CPED_CONFIG_FLAG_DisableStartEngine = 429,
	CPED_CONFIG_FLAG_IgnoreBeingOnFire = 430,
	CPED_CONFIG_FLAG_DisableTurretOrRearSeatPreference = 431,
	CPED_CONFIG_FLAG_DisableWantedHelicopterSpawning = 432,
	CPED_CONFIG_FLAG_UseTargetPerceptionForCreatingAimedAtEvents = 433,
	CPED_CONFIG_FLAG_DisableHomingMissileLockon = 434,
	CPED_CONFIG_FLAG_ForceIgnoreMaxMeleeActiveSupportCombatants = 435,
	CPED_CONFIG_FLAG_StayInDefensiveAreaWhenInVehicle = 436,
	CPED_CONFIG_FLAG_DontShoutTargetPosition = 437,
	CPED_CONFIG_FLAG_DisableHelmetArmor = 438,
	_CPED_CONFIG_FLAG_0xCB7F3A1E = 439,
	_CPED_CONFIG_FLAG_0x50178878 = 440,
	CPED_CONFIG_FLAG_PreventVehExitDueToInvalidWeapon = 441,
	CPED_CONFIG_FLAG_IgnoreNetSessionFriendlyFireCheckForAllowDamage = 442,
	CPED_CONFIG_FLAG_DontLeaveCombatIfTargetPlayerIsAttackedByPolice = 443,
	CPED_CONFIG_FLAG_CheckLockedBeforeWarp = 444,
	CPED_CONFIG_FLAG_DontShuffleInVehicleToMakeRoom = 445,
	CPED_CONFIG_FLAG_GiveWeaponOnGetup = 446,
	CPED_CONFIG_FLAG_DontHitVehicleWithProjectiles = 447,
	CPED_CONFIG_FLAG_DisableForcedEntryForOpenVehiclesFromTryLockedDoor = 448,
	CPED_CONFIG_FLAG_FiresDummyRockets = 449,
	CPED_CONFIG_FLAG_PedIsArresting = 450,
	CPED_CONFIG_FLAG_IsDecoyPed = 451,
	CPED_CONFIG_FLAG_HasEstablishedDecoy = 452,
	CPED_CONFIG_FLAG_BlockDispatchedHelicoptersFromLanding = 453,
	CPED_CONFIG_FLAG_DontCryForHelpOnStun = 454,
	_CPED_CONFIG_FLAG_0xB68D3EAB = 455,
	CPED_CONFIG_FLAG_CanBeIncapacitated = 456,
	_CPED_CONFIG_FLAG_0x4BD5EBAD = 457,
	CPED_CONFIG_FLAG_DontChangeTargetFromMelee = 458,
};]=]
	SetPedConfigFlag=function(ped--[[@param ped integer]],flagId--[[@param flagId integer]],value--[[@param value boolean]])return InvokeVoid(0x1913FE4CBF41C463,ped,flagId,value)end;
	--[=[PED::SET_PED_RESET_FLAG(PLAYER::PLAYER_PED_ID(), 240, 1);
Known values:
PRF_PreventGoingIntoStillInVehicleState = 236 *(fanatic2.c)*]=]
	SetPedResetFlag=function(ped--[[@param ped integer]],flagId--[[@param flagId integer]],doReset--[[@param doReset boolean]])return InvokeVoid(0xC1E8A365BF3B29F2,ped,flagId,doReset)end;
	--[=[See SET_PED_CONFIG_FLAG]=]
	GetPedConfigFlag=function(ped--[[@param ped integer]],flagId--[[@param flagId integer]],p2--[[@param p2 boolean]])return InvokeBool(0x7EE53118C892B513,ped,flagId,p2)end;---@return boolean
	GetPedResetFlag=function(ped--[[@param ped integer]],flagId--[[@param flagId integer]])return InvokeBool(0xAF9E59B1B1FBF2A0,ped,flagId)end;---@return boolean
	SetPedGroupMemberPassengerIndex=function(ped--[[@param ped integer]],index--[[@param index integer]])return InvokeVoid(0x0BDDB8D9EC6BCF3C,ped,index)end;
	SetPedCanEvasiveDive=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x6B7A646C242A7059,ped,toggle)end;
	--[=[Presumably returns the Entity that the Ped is currently diving out of the way of.

var num3;
    if (PED::IS_PED_EVASIVE_DIVING(A_0, &num3) != 0)
        if (ENTITY::IS_ENTITY_A_VEHICLE(num3) != 0)]=]
	IsPedEvasiveDiving=function(ped--[[@param ped integer]],evadingEntity--[[@param evadingEntity integer*]])return InvokeBool(0x414641C26E105898,ped,evadingEntity)end;---@return boolean
	SetPedShootsAtCoord=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],toggle--[[@param toggle boolean]])return InvokeVoid(0x96A05E4FB321B1BA,ped,x+.0,y+.0,z+.0,toggle)end;
	--[=[Full list of peds by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/peds.json]=]
	SetPedModelIsSuppressed=function(modelHash--[[@param modelHash integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xE163A4BCE4DE6F11,modelHash,toggle)end;
	StopAnyPedModelBeingSuppressed=function()return InvokeVoid(0xB47BD05FA66B40CF)end;
	SetPedCanBeTargetedWhenInjured=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x638C03B0F9878F57,ped,toggle)end;
	SetPedGeneratesDeadBodyEvents=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x7FB17BA2E7DECA5B,ped,toggle)end;
	BlockPedFromGeneratingDeadBodyEventsWhenDead=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xE43A13C9E4CCCBCF,ped,toggle)end;
	SetPedWillOnlyAttackWantedPlayer=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x3E9679C1DFCF422C,p0,p1)end;
	SetPedCanRagdollFromPlayerImpact=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xDF993EE5E90ABA25,ped,toggle)end;
	--[=[PoliceMotorcycleHelmet   1024    
RegularMotorcycleHelmet   4096    
FiremanHelmet 16384   
PilotHeadset  32768   
PilotHelmet   65536
--
p2 is generally 4096 or 16384 in the scripts. p1 varies between 1 and 0.]=]
	GivePedHelmet=function(ped--[[@param ped integer]],cannotRemove--[[@param cannotRemove boolean]],helmetFlag--[[@param helmetFlag integer]],textureIndex--[[@param textureIndex integer]])return InvokeVoid(0x54C7C4A94367717E,ped,cannotRemove,helmetFlag,textureIndex)end;
	RemovePedHelmet=function(ped--[[@param ped integer]],instantly--[[@param instantly boolean]])return InvokeVoid(0xA7B2458D0AD6DED8,ped,instantly)end;
	IsPedTakingOffHelmet=function(ped--[[@param ped integer]])return InvokeBool(0x14590DDBEDB1EC85,ped)end;---@return boolean
	SetPedHelmet=function(ped--[[@param ped integer]],canWearHelmet--[[@param canWearHelmet boolean]])return InvokeVoid(0x560A43136EB58105,ped,canWearHelmet)end;
	SetPedHelmetFlag=function(ped--[[@param ped integer]],helmetFlag--[[@param helmetFlag integer]])return InvokeVoid(0xC0E78D5C2CE3EB25,ped,helmetFlag)end;
	--[=[List of component/props ID
gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html]=]
	SetPedHelmetPropIndex=function(ped--[[@param ped integer]],propIndex--[[@param propIndex integer]],p2--[[@param p2 boolean]])return InvokeVoid(0x26D83693ED99291C,ped,propIndex,p2)end;
	SetPedHelmetVisorPropIndices=function(ped--[[@param ped integer]],p1--[[@param p1 boolean]],p2--[[@param p2 integer]],p3--[[@param p3 integer]])return InvokeVoid(0x3F7325574E41B44D,ped,p1,p2,p3)end;
	IsPedHelmetVisorUp=function(ped--[[@param ped integer]])return InvokeBool(0xB9496CE47546DB2C,ped)end;---@return boolean
	SetPedHelmetTextureIndex=function(ped--[[@param ped integer]],textureIndex--[[@param textureIndex integer]])return InvokeVoid(0xF1550C4BD22582E2,ped,textureIndex)end;
	--[=[Returns true if the ped passed through the parenthesis is wearing a helmet.]=]
	IsPedWearingHelmet=function(ped--[[@param ped integer]])return InvokeBool(0xF33BDFE19B309B19,ped)end;---@return boolean
	ClearPedStoredHatProp=function(ped--[[@param ped integer]])return InvokeVoid(0x687C0B594907D2E8,ped)end;
	GetPedHelmetStoredHatPropIndex=function(ped--[[@param ped integer]])return InvokeInt(0x451294E859ECC018,ped)end;---@return integer
	GetPedHelmetStoredHatTexIndex=function(ped--[[@param ped integer]])return InvokeInt(0x9D728C1E12BF5518,ped)end;---@return integer
	IsCurrentHeadPropAHelmet=function(p0--[[@param p0 any]])return InvokeBool(0xF2385935BFFD4D92,p0)end;---@return boolean
	SetPedToLoadCover=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x332B562EEDA62399,ped,toggle)end;
	--[=[It simply makes the said ped to cower behind cover object(wall, desk, car)

Peds flee attributes must be set to not to flee, first. Else, most of the peds, will just flee from gunshot sounds or any other panic situations.]=]
	SetPedCanCowerInCover=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xCB7553CDCEF4A735,ped,toggle)end;
	SetPedCanPeekInCover=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xC514825C507E3736,ped,toggle)end;
	--[=[This native does absolutely nothing, just a nullsub]=]
	SetPedPlaysHeadOnHornAnimWhenDiesInVehicle=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x94D94BF1A75AED3D,ped,toggle)end;
	--[=["IK" stands for "Inverse kinematics." I assume this has something to do with how the ped uses his legs to balance. In the scripts, the second parameter is always an int with a value of 2, 0, or sometimes 1]=]
	SetPedLegIkMode=function(ped--[[@param ped integer]],mode--[[@param mode integer]])return InvokeVoid(0xC396F5B86FF9FEBD,ped,mode)end;
	SetPedMotionBlur=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x0A986918B102B448,ped,toggle)end;
	SetPedCanSwitchWeapon=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xED7F7EFE9FABF340,ped,toggle)end;
	SetPedDiesInstantlyInWater=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xEEB64139BA29A7CF,ped,toggle)end;
	--[=[Only appears in lamar1 script.]=]
	SetLadderClimbInputState=function(ped--[[@param ped integer]],p1--[[@param p1 integer]])return InvokeVoid(0x1A330D297AAC6BC1,ped,p1)end;
	StopPedWeaponFiringWhenDropped=function(ped--[[@param ped integer]])return InvokeVoid(0xC158D28142A34608,ped)end;
	SetScriptedAnimSeatOffset=function(ped--[[@param ped integer]],p1--[[@param p1 number]])return InvokeVoid(0x5917BBA32D06C230,ped,p1+.0)end;
	--[=[enum eCombatMovement // 0x4F456B61
{
	CM_Stationary,
	CM_Defensive,
	CM_WillAdvance,
	CM_WillRetreat
};]=]
	SetPedCombatMovement=function(ped--[[@param ped integer]],combatMovement--[[@param combatMovement integer]])return InvokeVoid(0x4D9CA1009AFBD057,ped,combatMovement)end;
	--[=[See SET_PED_COMBAT_MOVEMENT]=]
	GetPedCombatMovement=function(ped--[[@param ped integer]])return InvokeInt(0xDEA92412FCAEB3F5,ped)end;---@return integer
	--[=[enum eCombatAbility // 0xE793438C
{
	CA_Poor,
	CA_Average,
	CA_Professional,
	CA_NumTypes
};]=]
	SetPedCombatAbility=function(ped--[[@param ped integer]],abilityLevel--[[@param abilityLevel integer]])return InvokeVoid(0xC7622C0D36B2FDA8,ped,abilityLevel)end;
	--[=[enum eCombatRange // 0xB69160F5
{
	CR_Near,
	CR_Medium,
	CR_Far,
	CR_VeryFar,
	CR_NumRanges
};]=]
	SetPedCombatRange=function(ped--[[@param ped integer]],combatRange--[[@param combatRange integer]])return InvokeVoid(0x3C606747B23E497B,ped,combatRange)end;
	--[=[See SET_PED_COMBAT_RANGE]=]
	GetPedCombatRange=function(ped--[[@param ped integer]])return InvokeInt(0xF9D9F7F2DB8E2FA0,ped)end;---@return integer
	--[=[enum eCombatAttributes // 0x0E8E7201
{
	BF_CanUseCover = 0,
	BF_CanUseVehicles = 1,
	BF_CanDoDrivebys = 2,
	BF_CanLeaveVehicle = 3,
	BF_CanUseDynamicStrafeDecisions = 4,
	BF_AlwaysFight = 5,
	BF_0x66BB9FCC = 6,
	BF_0x6837DA41 = 7,
	BF_0xB4A13A5A = 8,
	BF_0xEE326AAD = 9,
	BF_0x7DF2CCFA = 10,
	BF_0x0036D422 = 11,
	BF_BlindFireWhenInCover = 12,
	BF_Aggressive = 13,
	BF_CanInvestigate = 14,
	BF_HasRadio = 15,
	BF_0x6BDE28D1 = 16,
	BF_AlwaysFlee = 17,
	BF_0x7852797D = 18,
	BF_0x33497B95 = 19,
	BF_CanTauntInVehicle = 20,
	BF_CanChaseTargetOnFoot = 21,
	BF_WillDragInjuredPedsToSafety = 22,
	BF_0xCD7168B8 = 23,
	BF_UseProximityFiringRate = 24,
	BF_0x48F914F8 = 25,
	BF_0x2EA543D0 = 26,
	BF_PerfectAccuracy = 27,
	BF_CanUseFrustratedAdvance = 28,
	BF_0x3D131AC1 = 29,
	BF_0x3AD95F27 = 30,
	BF_MaintainMinDistanceToTarget = 31,
	BF_0xEAD68AD2 = 32,
	BF_0xA206C2E0 = 33,
	BF_CanUsePeekingVariations = 34,
	BF_0xA5715184 = 35,
	BF_0xD5265533 = 36,
	BF_0x2B84C2BF = 37,
	BF_DisableBulletReactions = 38,
	BF_CanBust = 39,
	BF_0xAA525726 = 40,
	BF_CanCommandeerVehicles = 41,
	BF_CanFlank = 42,
	BF_SwitchToAdvanceIfCantFindCover = 43,
	BF_SwitchToDefensiveIfInCover = 44,
	BF_0xEB4786A0 = 45,
	BF_CanFightArmedPedsWhenNotArmed = 46,
	BF_0xA08E9402 = 47,
	BF_0x952EAD7D = 48,
	BF_UseEnemyAccuracyScaling = 49,
	BF_CanCharge = 50,
	BF_0xDA8C2BD3 = 51,
	BF_0x6562F017 = 52,
	BF_0xA2C3D53B = 53,
	BF_AlwaysEquipBestWeapon = 54,
	BF_CanSeeUnderwaterPeds = 55,
	BF_0xF619486B = 56,
	BF_0x61EB63A3 = 57,
	BF_DisableFleeFromCombat = 58,
	BF_0x8976D12B = 59,
	BF_CanThrowSmokeGrenade = 60,
	BF_NonMissionPedsFleeFromThisPedUnlessArmed = 61,
	BF_0x5452A10C = 62,
	BF_FleesFromInvincibleOpponents = 63,
	BF_DisableBlockFromPursueDuringVehicleChase = 64,
	BF_DisableSpinOutDuringVehicleChase = 65,
	BF_DisableCruiseInFrontDuringBlockDuringVehicleChase = 66,
	BF_0x0B404731 = 67,
	BF_DisableReactToBuddyShot = 68,
	BF_0x7FFD6AEB = 69,
	BF_0x51F4AEF8 = 70,
	BF_PermitChargeBeyondDefensiveArea = 71,
	BF_0x63E0A8E2 = 72,
	BF_0xDF974436 = 73,
	BF_0x556C080B = 74,
	BF_0xA4D50035 = 75,
	BF_SetDisableShoutTargetPositionOnCombatStart = 76,
	BF_DisableRespondedToThreatBroadcast = 77,
	BF_0xCBB01765 = 78,
	BF_0x4F862ED4 = 79,
	BF_0xEF9C7C40 = 80,
	BF_0xE51B494F = 81,
	BF_0x054D0199 = 82,
	BF_0xD36BCE94 = 83,
	BF_0xFB11F690 = 84,
	BF_0xD208A9AD = 85,
	BF_AllowDogFighting = 86,
	BF_0x07A6E531 = 87,
	BF_0x34F9317B = 88,
	BF_0x4240F5A9 = 89,
	BF_0xEE129DBD = 90,
	BF_0x053AEAD9 = 91
};]=]
	SetPedCombatAttributes=function(ped--[[@param ped integer]],attributeId--[[@param attributeId integer]],enabled--[[@param enabled boolean]])return InvokeVoid(0x9F7794730795E019,ped,attributeId,enabled)end;
	--[=[enum eTargetLossResponseType
{
	TLR_ExitTask,
	TLR_NeverLoseTarget,
	TLR_SearchForTarget
};]=]
	SetPedTargetLossResponse=function(ped--[[@param ped integer]],responseType--[[@param responseType integer]])return InvokeVoid(0x0703B9079823DA4A,ped,responseType)end;
	IsPedPerformingMeleeAction=function(ped--[[@param ped integer]])return InvokeBool(0xDCCA191DF9980FD7,ped)end;---@return boolean
	IsPedPerformingStealthKill=function(ped--[[@param ped integer]])return InvokeBool(0xFD4CCDBCC59941B7,ped)end;---@return boolean
	IsPedPerformingACounterAttack=function(ped--[[@param ped integer]])return InvokeBool(0xEBD0EDBA5BE957CF,ped)end;---@return boolean
	IsPedBeingStealthKilled=function(ped--[[@param ped integer]])return InvokeBool(0x863B23EFDE9C5DF2,ped)end;---@return boolean
	GetMeleeTargetForPed=function(ped--[[@param ped integer]])return InvokeInt(0x18A3E9EE1297FD39,ped)end;---@return integer
	WasPedKilledByStealth=function(ped--[[@param ped integer]])return InvokeBool(0xF9800AA1A771B000,ped)end;---@return boolean
	WasPedKilledByTakedown=function(ped--[[@param ped integer]])return InvokeBool(0x7F08E26039C7347C,ped)end;---@return boolean
	WasPedKnockedOut=function(ped--[[@param ped integer]])return InvokeBool(0x61767F73EACEED21,ped)end;---@return boolean
	--[=[bit 1 (0x2) = use vehicle
bit 15 (0x8000) = force cower]=]
	SetPedFleeAttributes=function(ped--[[@param ped integer]],attributeFlags--[[@param attributeFlags integer]],enable--[[@param enable boolean]])return InvokeVoid(0x70A2D1137C8ED7C9,ped,attributeFlags,enable)end;
	--[=[p1: Only "CODE_HUMAN_STAND_COWER" found in the b617d scripts.]=]
	SetPedCowerHash=function(ped--[[@param ped integer]],p1--[[@param p1 string]])return InvokeVoid(0xA549131166868ED3,ped,p1)end;
	SetPedSteersAroundDeadBodies=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x2016C603D6B8987C,ped,toggle)end;
	SetPedSteersAroundPeds=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x46F2193B3AD1D891,ped,toggle)end;
	SetPedSteersAroundObjects=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x1509C089ADC208BF,ped,toggle)end;
	SetPedSteersAroundVehicles=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xEB6FB9D48DDE23EC,ped,toggle)end;
	SetPedIsAvoidedByOthers=function(p0--[[@param p0 any]],p1--[[@param p1 boolean]])return InvokeVoid(0xA9B61A329BFDCBEA,p0,p1)end;
	SetPedIncreasedAvoidanceRadius=function(ped--[[@param ped integer]])return InvokeVoid(0x570389D1C3DE3C6B,ped)end;
	SetPedBlocksPathingWhenDead=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x576594E8D64375E2,ped,toggle)end;
	SetPedNoTimeDelayBeforeShot=function(p0--[[@param p0 any]])return InvokeVoid(0xA52D5247A4227E14,p0)end;
	IsAnyPedNearPoint=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]])return InvokeBool(0x083961498679DC9F,x+.0,y+.0,z+.0,radius+.0)end;---@return boolean
	ForcePedAiAndAnimationUpdate=function(ped--[[@param ped integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0x2208438012482A1A,ped,p1,p2)end;
	IsPedHeadingTowardsPosition=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],p4--[[@param p4 number]])return InvokeBool(0xFCF37A457CB96DC0,ped,x+.0,y+.0,z+.0,p4+.0)end;---@return boolean
	RequestPedVisibilityTracking=function(ped--[[@param ped integer]])return InvokeVoid(0x7D7A2E43E74E2EB8,ped)end;
	RequestPedVehicleVisibilityTracking=function(ped--[[@param ped integer]],p1--[[@param p1 boolean]])return InvokeVoid(0x2BC338A7B21F4608,ped,p1)end;
	RequestPedRestrictedVehicleVisibilityTracking=function(ped--[[@param ped integer]],p1--[[@param p1 boolean]])return InvokeVoid(0xCD018C591F94CB43,ped,p1)end;
	RequestPedUseSmallBboxVisibilityTracking=function(ped--[[@param ped integer]],p1--[[@param p1 boolean]])return InvokeVoid(0x75BA1CB3B7D40CAF,ped,p1)end;
	--[=[returns whether or not a ped is visible within your FOV, not this check auto's to false after a certain distance.


Target needs to be tracked.. won't work otherwise.]=]
	IsTrackedPedVisible=function(ped--[[@param ped integer]])return InvokeBool(0x91C8E617F64188AC,ped)end;---@return boolean
	GetTrackedPedPixelcount=function(ped--[[@param ped integer]])return InvokeInt(0x511F1A683387C7E2,ped)end;---@return integer
	IsPedTracked=function(ped--[[@param ped integer]])return InvokeBool(0x4C5E1F087CD10BB7,ped)end;---@return boolean
	HasPedReceivedEvent=function(ped--[[@param ped integer]],eventId--[[@param eventId integer]])return InvokeBool(0x8507BCB710FA6DC0,ped,eventId)end;---@return boolean
	CanPedSeeHatedPed=function(ped1--[[@param ped1 integer]],ped2--[[@param ped2 integer]])return InvokeBool(0x6CD5A433374D4CFB,ped1,ped2)end;---@return boolean
	CanPedShuffleToOrFromTurretSeat=function(ped--[[@param ped integer]],p1--[[@param p1 integer*]])return InvokeBool(0x9C6A6C19B6C0C496,ped,p1)end;---@return boolean
	CanPedShuffleToOrFromExtraSeat=function(ped--[[@param ped integer]],p1--[[@param p1 integer*]])return InvokeBool(0x2DFC81C9B9608549,ped,p1)end;---@return boolean
	--[=[no bone= -1

boneIds:
        SKEL_ROOT = 0x0,
   SKEL_Pelvis = 0x2e28,
 SKEL_L_Thigh = 0xe39f,
    SKEL_L_Calf = 0xf9bb,
 SKEL_L_Foot = 0x3779,
 SKEL_L_Toe0 = 0x83c,
  IK_L_Foot = 0xfedd,
   PH_L_Foot = 0xe175,
   MH_L_Knee = 0xb3fe,
   SKEL_R_Thigh = 0xca72,
    SKEL_R_Calf = 0x9000,
 SKEL_R_Foot = 0xcc4d,
 SKEL_R_Toe0 = 0x512d,
 IK_R_Foot = 0x8aae,
   PH_R_Foot = 0x60e6,
   MH_R_Knee = 0x3fcf,
   RB_L_ThighRoll = 0x5c57,
  RB_R_ThighRoll = 0x192a,
  SKEL_Spine_Root = 0xe0fd,
 SKEL_Spine0 = 0x5c01,
 SKEL_Spine1 = 0x60f0,
 SKEL_Spine2 = 0x60f1,
 SKEL_Spine3 = 0x60f2,
 SKEL_L_Clavicle = 0xfcd9,
 SKEL_L_UpperArm = 0xb1c5,
 SKEL_L_Forearm = 0xeeeb,
  SKEL_L_Hand = 0x49d9,
 SKEL_L_Finger00 = 0x67f2,
 SKEL_L_Finger01 = 0xff9,
  SKEL_L_Finger02 = 0xffa,
  SKEL_L_Finger10 = 0x67f3,
 SKEL_L_Finger11 = 0x1049,
 SKEL_L_Finger12 = 0x104a,
 SKEL_L_Finger20 = 0x67f4,
 SKEL_L_Finger21 = 0x1059,
 SKEL_L_Finger22 = 0x105a,
 SKEL_L_Finger30 = 0x67f5,
 SKEL_L_Finger31 = 0x1029,
 SKEL_L_Finger32 = 0x102a,
 SKEL_L_Finger40 = 0x67f6,
 SKEL_L_Finger41 = 0x1039,
 SKEL_L_Finger42 = 0x103a,
 PH_L_Hand = 0xeb95,
   IK_L_Hand = 0x8cbd,
   RB_L_ForeArmRoll = 0xee4f,
    RB_L_ArmRoll = 0x1470,
    MH_L_Elbow = 0x58b7,
  SKEL_R_Clavicle = 0x29d2,
 SKEL_R_UpperArm = 0x9d4d,
 SKEL_R_Forearm = 0x6e5c,
  SKEL_R_Hand = 0xdead,
 SKEL_R_Finger00 = 0xe5f2,
 SKEL_R_Finger01 = 0xfa10,
 SKEL_R_Finger02 = 0xfa11,
 SKEL_R_Finger10 = 0xe5f3,
 SKEL_R_Finger11 = 0xfa60,
 SKEL_R_Finger12 = 0xfa61,
 SKEL_R_Finger20 = 0xe5f4,
 SKEL_R_Finger21 = 0xfa70,
 SKEL_R_Finger22 = 0xfa71,
 SKEL_R_Finger30 = 0xe5f5,
 SKEL_R_Finger31 = 0xfa40,
 SKEL_R_Finger32 = 0xfa41,
 SKEL_R_Finger40 = 0xe5f6,
 SKEL_R_Finger41 = 0xfa50,
 SKEL_R_Finger42 = 0xfa51,
 PH_R_Hand = 0x6f06,
   IK_R_Hand = 0x188e,
   RB_R_ForeArmRoll = 0xab22,
    RB_R_ArmRoll = 0x90ff,
    MH_R_Elbow = 0xbb0,
   SKEL_Neck_1 = 0x9995,
 SKEL_Head = 0x796e,
   IK_Head = 0x322c,
 FACIAL_facialRoot = 0xfe2c,
   FB_L_Brow_Out_000 = 0xe3db,
   FB_L_Lid_Upper_000 = 0xb2b6,
  FB_L_Eye_000 = 0x62ac,
    FB_L_CheekBone_000 = 0x542e,
  FB_L_Lip_Corner_000 = 0x74ac,
 FB_R_Lid_Upper_000 = 0xaa10,
  FB_R_Eye_000 = 0x6b52,
    FB_R_CheekBone_000 = 0x4b88,
  FB_R_Brow_Out_000 = 0x54c,
    FB_R_Lip_Corner_000 = 0x2ba6,
 FB_Brow_Centre_000 = 0x9149,
  FB_UpperLipRoot_000 = 0x4ed2,
 FB_UpperLip_000 = 0xf18f,
 FB_L_Lip_Top_000 = 0x4f37,
    FB_R_Lip_Top_000 = 0x4537,
    FB_Jaw_000 = 0xb4a0,
  FB_LowerLipRoot_000 = 0x4324,
 FB_LowerLip_000 = 0x508f,
 FB_L_Lip_Bot_000 = 0xb93b,
    FB_R_Lip_Bot_000 = 0xc33b,
    FB_Tongue_000 = 0xb987,
   RB_Neck_1 = 0x8b93,
   IK_Root = 0xdd1c]=]
	GetPedBoneIndex=function(ped--[[@param ped integer]],boneId--[[@param boneId integer]])return InvokeInt(0x3F428D08BE5AAE31,ped,boneId)end;---@return integer
	GetPedRagdollBoneIndex=function(ped--[[@param ped integer]],bone--[[@param bone integer]])return InvokeInt(0x2057EF813397A772,ped,bone)end;---@return integer
	--[=[Values look to be between 0.0 and 1.0
From decompiled scripts: 0.0, 0.6, 0.65, 0.8, 1.0

You are correct, just looked in IDA it breaks from the function if it's less than 0.0f or greater than 1.0f.]=]
	SetPedEnveffScale=function(ped--[[@param ped integer]],value--[[@param value number]])return InvokeVoid(0xBF29516833893561,ped,value+.0)end;
	GetPedEnveffScale=function(ped--[[@param ped integer]])return InvokeFloat(0x9C14D30395A51A3C,ped)end;---@return number
	SetEnablePedEnveffScale=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xD2C5AA0C0E8D0F1E,ped,toggle)end;
	--[=[In agency_heist3b.c4, its like this 90% of the time:

PED::SET_PED_ENVEFF_CPV_ADD(ped, 0.099);
PED::SET_PED_ENVEFF_SCALE(ped, 1.0);
PED::SET_PED_ENVEFF_CPV_ADD(ped, 87, 81, 68);
PED::SET_ENABLE_PED_ENVEFF_SCALE(ped, 1);

and its like this 10% of the time:

PED::SET_PED_ENVEFF_CPV_ADD(ped, 0.2);
PED::SET_PED_ENVEFF_SCALE(ped, 0.65);
PED::SET_PED_ENVEFF_COLOR_MODULATOR(ped, 74, 69, 60);
PED::SET_ENABLE_PED_ENVEFF_SCALE(ped, 1);]=]
	SetPedEnveffCpvAdd=function(ped--[[@param ped integer]],p1--[[@param p1 number]])return InvokeVoid(0x110F526AB784111F,ped,p1+.0)end;
	--[=[Something related to the environmental effects natives.
In the "agency_heist3b" script, p1 - p3 are always under 100 - usually they are {87, 81, 68}. If SET_PED_ENVEFF_SCALE is set to 0.65 (instead of the usual 1.0), they use {74, 69, 60}]=]
	SetPedEnveffColorModulator=function(ped--[[@param ped integer]],p1--[[@param p1 integer]],p2--[[@param p2 integer]],p3--[[@param p3 integer]])return InvokeVoid(0xD69411AA0CEBF9E9,ped,p1,p2,p3)end;
	--[=[intensity: 0.0f - 1.0f

This native sets the emissive intensity for the given ped. It is used for different 'glow' levels on illuminated clothing.]=]
	SetPedEmissiveScale=function(ped--[[@param ped integer]],intensity--[[@param intensity number]])return InvokeVoid(0x4E90D746056E273D,ped,intensity+.0)end;
	--[=[Use 0x4E90D746056E273D to set the illuminated clothing glow intensity for a specific ped.
Returns a float between 0.0 and 1.0 representing the current illuminated clothing glow intensity.]=]
	GetPedEmissiveScale=function(ped--[[@param ped integer]])return InvokeFloat(0x1461B28A06717D68,ped)end;---@return number
	IsPedShaderReady=function(ped--[[@param ped integer]])return InvokeBool(0x81AA517FBBA05D39,ped)end;---@return boolean
	SetPedEnableCrewEmblem=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xE906EC930F5FE7C8,ped,toggle)end;
	--[=[This native does absolutely nothing, just a nullsub]=]
	RequestRagdollBoundsUpdate=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x1216E0BFA72CC703,p0,p1)end;
	--[=[Enable/disable ped shadow (ambient occlusion). https://gfycat.com/thankfulesteemedgecko]=]
	SetPedAoBlobRendering=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x2B5AA717A181FB4C,ped,toggle)end;
	IsPedSheltered=function(ped--[[@param ped integer]])return InvokeBool(0xB8B52E498014F5B0,ped)end;---@return boolean
	--[=[p6 always 2 (but it doesnt seem to matter...)

roll and pitch 0
yaw to Ped.rotation]=]
	CreateSynchronizedScene=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],roll--[[@param roll number]],pitch--[[@param pitch number]],yaw--[[@param yaw number]],p6--[[@param p6 integer]])return InvokeInt(0x8C18E0F9080ADD73,x+.0,y+.0,z+.0,roll+.0,pitch+.0,yaw+.0,p6)end;---@return integer
	CreateSynchronizedSceneAtMapObject=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]],object--[[@param object integer]])return InvokeInt(0x62EC273D00187DCA,x+.0,y+.0,z+.0,radius+.0,object)end;---@return integer
	--[=[Returns true if a synchronized scene is running]=]
	IsSynchronizedSceneRunning=function(sceneId--[[@param sceneId integer]])return InvokeBool(0x25D39B935A038A26,sceneId)end;---@return boolean
	SetSynchronizedSceneOrigin=function(sceneID--[[@param sceneID integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],roll--[[@param roll number]],pitch--[[@param pitch number]],yaw--[[@param yaw number]],p7--[[@param p7 boolean]])return InvokeVoid(0x6ACF6B7225801CD7,sceneID,x+.0,y+.0,z+.0,roll+.0,pitch+.0,yaw+.0,p7)end;
	SetSynchronizedScenePhase=function(sceneID--[[@param sceneID integer]],phase--[[@param phase number]])return InvokeVoid(0x734292F4F0ABF6D0,sceneID,phase+.0)end;
	GetSynchronizedScenePhase=function(sceneID--[[@param sceneID integer]])return InvokeFloat(0xE4A310B1D7FA73CC,sceneID)end;---@return number
	SetSynchronizedSceneRate=function(sceneID--[[@param sceneID integer]],rate--[[@param rate number]])return InvokeVoid(0xB6C49F8A5E295A5D,sceneID,rate+.0)end;
	GetSynchronizedSceneRate=function(sceneID--[[@param sceneID integer]])return InvokeFloat(0xD80932D577274D40,sceneID)end;---@return number
	SetSynchronizedSceneLooped=function(sceneID--[[@param sceneID integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xD9A897A4C6C2974F,sceneID,toggle)end;
	IsSynchronizedSceneLooped=function(sceneID--[[@param sceneID integer]])return InvokeBool(0x62522002E0C391BA,sceneID)end;---@return boolean
	SetSynchronizedSceneHoldLastFrame=function(sceneID--[[@param sceneID integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x394B9CD12435C981,sceneID,toggle)end;
	IsSynchronizedSceneHoldLastFrame=function(sceneID--[[@param sceneID integer]])return InvokeBool(0x7F2F4F13AC5257EF,sceneID)end;---@return boolean
	AttachSynchronizedSceneToEntity=function(sceneID--[[@param sceneID integer]],entity--[[@param entity integer]],boneIndex--[[@param boneIndex integer]])return InvokeVoid(0x272E4723B56A3B96,sceneID,entity,boneIndex)end;
	DetachSynchronizedScene=function(sceneID--[[@param sceneID integer]])return InvokeVoid(0x6D38F1F04CBB37EA,sceneID)end;
	TakeOwnershipOfSynchronizedScene=function(scene--[[@param scene integer]])return InvokeVoid(0xCD9CC7E200A52A6F,scene)end;
	--[=[Regarding p2, p3 and p4: Most common is 0, 0, 0); followed by 0, 1, 0); and 1, 1, 0); in R* scripts. p4 is very rarely something other than 0.

enum eMotionState // 0x92A659FE
{
	MotionState_None = 0xEE717723,
	MotionState_Idle = 0x9072A713,
	MotionState_Walk = 0xD827C3DB,
	MotionState_Run = 0xFFF7E7A4,
	MotionState_Sprint = 0xBD8817DB,
	MotionState_Crouch_Idle = 0x43FB099E,
	MotionState_Crouch_Walk = 0x08C31A98,
	MotionState_Crouch_Run = 0x3593CF09,
	MotionState_DoNothing = 0x0EC17E58,
	MotionState_AnimatedVelocity = 0x551AAC43,
	MotionState_InVehicle = 0x94D9D58D,
	MotionState_Aiming = 0x3F67C6AF,
	MotionState_Diving_Idle = 0x4848CDED,
	MotionState_Diving_Swim = 0x916E828C,
	MotionState_Swimming_TreadWater = 0xD1BF11C7,
	MotionState_Dead = 0x0DBB071C,
	MotionState_Stealth_Idle = 0x422D7A25,
	MotionState_Stealth_Walk = 0x042AB6A2,
	MotionState_Stealth_Run = 0xFB0B79E1,
	MotionState_Parachuting = 0xBAC0F10B,
	MotionState_ActionMode_Idle = 0xDA40A0DC,
	MotionState_ActionMode_Walk = 0xD2905EA7,
	MotionState_ActionMode_Run = 0x31BADE14,
	MotionState_Jetpack = 0x535E6A5E
};]=]
	ForcePedMotionState=function(ped--[[@param ped integer]],motionStateHash--[[@param motionStateHash integer]],p2--[[@param p2 boolean]],p3--[[@param p3 integer]],p4--[[@param p4 boolean]])return InvokeBool(0xF28965D04F570DCA,ped,motionStateHash,p2,p3,p4)end;---@return boolean
	GetPedCurrentMoveBlendRatio=function(ped--[[@param ped integer]],speedX--[[@param speedX number*]],speedY--[[@param speedY number*]])return InvokeBool(0xF60165E1D2C5370B,ped,speedX,speedY)end;---@return boolean
	SetPedMaxMoveBlendRatio=function(ped--[[@param ped integer]],value--[[@param value number]])return InvokeVoid(0x433083750C5E064A,ped,value+.0)end;
	SetPedMinMoveBlendRatio=function(ped--[[@param ped integer]],value--[[@param value number]])return InvokeVoid(0x01A898D26E2333DD,ped,value+.0)end;
	--[=[Min: 0.00
Max: 10.00

Can be used in combo with fast run cheat.

When value is set to 10.00:
Sprinting without fast run cheat: 66 m/s
Sprinting with fast run cheat: 77 m/s

Needs to be looped!

Note: According to IDA for the Xbox360 xex, when they check bgt they seem to have the min to 0.0f, but the max set to 1.15f not 10.0f.]=]
	SetPedMoveRateOverride=function(ped--[[@param ped integer]],value--[[@param value number]])return InvokeVoid(0x085BF80FA50A39D1,ped,value+.0)end;
	SetPedMoveRateInWaterOverride=function(ped--[[@param ped integer]],p1--[[@param p1 number]])return InvokeVoid(0x0B3E35AC043707D9,ped,p1+.0)end;
	--[=[Checks if the specified sexiness flag is set

enum eSexinessFlags
{
 SF_JEER_AT_HOT_PED = 0,
 SF_HURRIEDFEMALES_SEXY = 1,
 SF_HOT_PERSON = 2,
 };]=]
	PedHasSexinessFlagSet=function(ped--[[@param ped integer]],sexinessFlag--[[@param sexinessFlag integer]])return InvokeBool(0x46B05BCAE43856B0,ped,sexinessFlag)end;---@return boolean
	--[=[Returns size of array, passed into the second variable.

See below for usage information.

This function actually requires a struct, where the first value is the maximum number of elements to return.  Here is a sample of how I was able to get it to work correctly, without yet knowing the struct format.

//Setup the array
 const int numElements = 10;
   const int arrSize = numElements * 2 + 2;
  Any veh[arrSize];
 //0 index is the size of the array
    veh[0] = numElements;

   int count = PED::GET_PED_NEARBY_VEHICLES(PLAYER::PLAYER_PED_ID(), veh);

 if (veh != NULL)
  {
     //Simple loop to go through results
       for (int i = 0; i < count; i++)
        {
         int offsettedID = i * 2 + 2;
          //Make sure it exists
         if (veh[offsettedID] != NULL && ENTITY::DOES_ENTITY_EXIST(veh[offsettedID]))
          {
             //Do something
            }
     }
 }  ]=]
	GetPedNearbyVehicles=function(ped--[[@param ped integer]],sizeAndVehs--[[@param sizeAndVehs any*]])return InvokeInt(0xCFF869CBFA210D82,ped,sizeAndVehs)end;---@return integer
	--[=[sizeAndPeds - is a pointer to an array. The array is filled with peds found nearby the ped supplied to the first argument.
ignore - ped type to ignore

Return value is the number of peds found and added to the array passed.

-----------------------------------

To make this work in most menu bases at least in C++ do it like so,

 Formatted Example: https://pastebin.com/D8an9wwp

-----------------------------------

Example: gtaforums.com/topic/789788-function-args-to-pedget-ped-nearby-peds/?p=1067386687]=]
	GetPedNearbyPeds=function(ped--[[@param ped integer]],sizeAndPeds--[[@param sizeAndPeds any*]],ignore--[[@param ignore integer]])return InvokeInt(0x23F8F5FC7E8C4A6B,ped,sizeAndPeds,ignore)end;---@return integer
	HaveAllStreamingRequestsCompleted=function(ped--[[@param ped integer]])return InvokeBool(0x7350823473013C02,ped)end;---@return boolean
	IsPedUsingActionMode=function(ped--[[@param ped integer]])return InvokeBool(0x00E73468D085F745,ped)end;---@return boolean
	--[=[p2 is usually -1 in the scripts. action is either 0 or "DEFAULT_ACTION".]=]
	SetPedUsingActionMode=function(ped--[[@param ped integer]],p1--[[@param p1 boolean]],p2--[[@param p2 integer]],action--[[@param action string]])return InvokeVoid(0xD75ACCF5E0FB5367,ped,p1,p2,action)end;
	--[=[name: "MP_FEMALE_ACTION" found multiple times in the b617d scripts.]=]
	SetMovementModeOverride=function(ped--[[@param ped integer]],name--[[@param name string]])return InvokeVoid(0x781DE8FA214E87D2,ped,name)end;
	--[=[Overrides the ped's collision capsule radius for the current tick.
Must be called every tick to be effective.

Setting this to 0.001 will allow warping through some objects.]=]
	SetPedCapsule=function(ped--[[@param ped integer]],value--[[@param value number]])return InvokeVoid(0x364DF566EC833DE2,ped,value+.0)end;
	--[=[gtaforums.com/topic/885580-ped-headshotmugshot-txd/]=]
	RegisterPedheadshot=function(ped--[[@param ped integer]])return InvokeInt(0x4462658788425076,ped)end;---@return integer
	RegisterPedheadshotHires=function(ped--[[@param ped integer]])return InvokeInt(0xBA8805A1108A2515,ped)end;---@return integer
	--[=[Similar to REGISTER_PEDHEADSHOT but creates a transparent background instead of black. Example: https://i.imgur.com/iHz8ztn.png]=]
	RegisterPedheadshotTransparent=function(ped--[[@param ped integer]])return InvokeInt(0x953563CE563143AF,ped)end;---@return integer
	--[=[gtaforums.com/topic/885580-ped-headshotmugshot-txd/]=]
	UnregisterPedheadshot=function(id--[[@param id integer]])return InvokeVoid(0x96B1361D9B24C2FF,id)end;
	--[=[gtaforums.com/topic/885580-ped-headshotmugshot-txd/]=]
	IsPedheadshotValid=function(id--[[@param id integer]])return InvokeBool(0xA0A9668F158129A2,id)end;---@return boolean
	--[=[gtaforums.com/topic/885580-ped-headshotmugshot-txd/]=]
	IsPedheadshotReady=function(id--[[@param id integer]])return InvokeBool(0x7085228842B13A67,id)end;---@return boolean
	--[=[gtaforums.com/topic/885580-ped-headshotmugshot-txd/]=]
	GetPedheadshotTxdString=function(id--[[@param id integer]])return InvokeString(0xDB4EACD4AD0A5D6B,id)end;---@return string
	RequestPedheadshotImgUpload=function(id--[[@param id integer]])return InvokeBool(0xF0DAEF2F545BEE25,id)end;---@return boolean
	ReleasePedheadshotImgUpload=function(id--[[@param id integer]])return InvokeVoid(0x5D517B27CF6ECD04,id)end;
	IsPedheadshotImgUploadAvailable=function()return InvokeBool(0xEBB376779A760AA8)end;---@return boolean
	HasPedheadshotImgUploadFailed=function()return InvokeBool(0x876928DDDFCCC9CD)end;---@return boolean
	HasPedheadshotImgUploadSucceeded=function()return InvokeBool(0xE8A169E666CBC541)end;---@return boolean
	SetPedHeatscaleOverride=function(ped--[[@param ped integer]],heatScale--[[@param heatScale number]])return InvokeVoid(0xC1F6EBF9A3D55538,ped,heatScale+.0)end;
	DisablePedHeatscaleOverride=function(ped--[[@param ped integer]])return InvokeVoid(0x600048C60D5C2C51,ped)end;
	SpawnpointsStartSearch=function(p0--[[@param p0 number]],p1--[[@param p1 number]],p2--[[@param p2 number]],p3--[[@param p3 number]],p4--[[@param p4 number]],interiorFlags--[[@param interiorFlags integer]],scale--[[@param scale number]],duration--[[@param duration integer]])return InvokeVoid(0x2DF9038C90AD5264,p0+.0,p1+.0,p2+.0,p3+.0,p4+.0,interiorFlags,scale+.0,duration)end;
	SpawnpointsStartSearchInAngledArea=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],width--[[@param width number]],interiorFlags--[[@param interiorFlags integer]],scale--[[@param scale number]],duration--[[@param duration integer]])return InvokeVoid(0xB2AFF10216DEFA2F,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,width+.0,interiorFlags,scale+.0,duration)end;
	SpawnpointsCancelSearch=function()return InvokeVoid(0xFEE4A5459472A9F8)end;
	SpawnpointsIsSearchActive=function()return InvokeBool(0x3C67506996001F5E)end;---@return boolean
	SpawnpointsIsSearchComplete=function()return InvokeBool(0xA586FBEB32A53DBB)end;---@return boolean
	SpawnpointsIsSearchFailed=function()return InvokeBool(0xF445DE8DA80A1792)end;---@return boolean
	SpawnpointsGetNumSearchResults=function()return InvokeInt(0xA635C11B8C44AFC2)end;---@return integer
	SpawnpointsGetSearchResult=function(randomInt--[[@param randomInt integer]],x--[[@param x number*]],y--[[@param y number*]],z--[[@param z number*]])return InvokeVoid(0x280C7E3AC7F56E90,randomInt,x,y,z)end;
	SpawnpointsGetSearchResultFlags=function(p0--[[@param p0 integer]],p1--[[@param p1 integer*]])return InvokeVoid(0xB782F8238512BAD5,p0,p1)end;
	SetIkTarget=function(ped--[[@param ped integer]],ikIndex--[[@param ikIndex integer]],entityLookAt--[[@param entityLookAt integer]],boneLookAt--[[@param boneLookAt integer]],offsetX--[[@param offsetX number]],offsetY--[[@param offsetY number]],offsetZ--[[@param offsetZ number]],p7--[[@param p7 any]],blendInDuration--[[@param blendInDuration integer]],blendOutDuration--[[@param blendOutDuration integer]])return InvokeVoid(0xC32779C16FCEECD9,ped,ikIndex,entityLookAt,boneLookAt,offsetX+.0,offsetY+.0,offsetZ+.0,p7,blendInDuration,blendOutDuration)end;
	ForceInstantLegIkSetup=function(ped--[[@param ped integer]])return InvokeVoid(0xED3C76ADFA6D07C4,ped)end;
	RequestActionModeAsset=function(asset--[[@param asset string]])return InvokeVoid(0x290E2780BB7AA598,asset)end;
	HasActionModeAssetLoaded=function(asset--[[@param asset string]])return InvokeBool(0xE4B5F4BF2CB24E65,asset)end;---@return boolean
	RemoveActionModeAsset=function(asset--[[@param asset string]])return InvokeVoid(0x13E940F88470FA51,asset)end;
	RequestStealthModeAsset=function(asset--[[@param asset string]])return InvokeVoid(0x2A0A62FCDEE16D4F,asset)end;
	HasStealthModeAssetLoaded=function(asset--[[@param asset string]])return InvokeBool(0xE977FC5B08AF3441,asset)end;---@return boolean
	RemoveStealthModeAsset=function(asset--[[@param asset string]])return InvokeVoid(0x9219857D21F0E842,asset)end;
	SetPedLodMultiplier=function(ped--[[@param ped integer]],multiplier--[[@param multiplier number]])return InvokeVoid(0xDC2C5C242AAC342B,ped,multiplier+.0)end;
	SetPedCanLosePropsOnDamage=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]],p2--[[@param p2 integer]])return InvokeVoid(0xE861D0B05C7662B8,ped,toggle,p2)end;
	SetForceFootstepUpdate=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x129466ED55140F8D,ped,toggle)end;
	SetForceStepType=function(ped--[[@param ped integer]],p1--[[@param p1 boolean]],type--[[@param type integer]],p3--[[@param p3 integer]])return InvokeVoid(0xCB968B53FC7F916D,ped,p1,type,p3)end;
	IsAnyHostilePedNearPoint=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]])return InvokeBool(0x68772DB2B2526F9F,ped,x+.0,y+.0,z+.0,radius+.0)end;---@return boolean
	--[=[Toggles config flag CPED_CONFIG_FLAG_CanPlayInCarIdles.]=]
	SetPedCanPlayInCarIdles=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x820E9892A77E97CD,ped,toggle)end;
	IsTargetPedInPerceptionArea=function(ped--[[@param ped integer]],targetPed--[[@param targetPed integer]],p2--[[@param p2 number]],p3--[[@param p3 number]],p4--[[@param p4 number]],p5--[[@param p5 number]])return InvokeBool(0x06087579E7AA85A9,ped,targetPed,p2+.0,p3+.0,p4+.0,p5+.0)end;---@return boolean
	--[=[Min and max are usually 100.0 and 200.0]=]
	SetPopControlSphereThisFrame=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],min--[[@param min number]],max--[[@param max number]])return InvokeVoid(0xD8C3BE3EE94CAF2D,x+.0,y+.0,z+.0,min+.0,max+.0)end;
	ForceZeroMassInCollisions=function(ped--[[@param ped integer]])return InvokeVoid(0xD33DAA36272177C4,ped)end;
	SetDisableHighFallDeath=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x711794453CFD692B,ped,toggle)end;
	SetPedPhonePaletteIdx=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x83A169EABCDB10A2,p0,p1)end;
	SetPedSteerBias=function(ped--[[@param ped integer]],value--[[@param value number]])return InvokeVoid(0x288DF530C92DAD6F,ped,value+.0)end;
	IsPedSwitchingWeapon=function(Ped--[[@param Ped integer]])return InvokeBool(0x3795688A307E1EB6,Ped)end;---@return boolean
	SetPedTreatedAsFriendly=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0x0F62619393661D6E,p0,p1,p2)end;
	SetDisablePedMapCollision=function(ped--[[@param ped integer]])return InvokeVoid(0xDFE68C4B787E1BFB,ped)end;
	EnableMpLight=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xEE2476B9EE4A094F,ped,toggle)end;
	GetMpLightEnabled=function(ped--[[@param ped integer]])return InvokeBool(0x88274C11CF0D866D,ped)end;---@return boolean
	ClearCoverPointForPed=function(ped--[[@param ped integer]])return InvokeVoid(0x637822DC2AFEEBF8,ped)end;
	SetAllowStuntJumpCamera=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xFAB944D4D481ACCB,ped,toggle)end;
}
_G.Physics={
	--[=[Creates a rope at the specific position, that extends in the specified direction when not attached to any entities.
__

Add_Rope(pos.x,pos.y,pos.z,0.0,0.0,0.0,20.0,4,20.0,1.0,0.0,false,false,false,5.0,false,NULL)

When attached, Position<vector> does not matter
When attached, Angle<vector> does not matter

Rope Type:
4 and bellow is a thick rope
5 and up are small metal wires
0 crashes the game

Max_length - Rope is forced to this length, generally best to keep this the same as your rope length.

windingSpeed - Speed the Rope is being winded, using native START_ROPE_WINDING. Set positive for winding and negative for unwinding.

Rigid - If max length is zero, and this is set to false the rope will become rigid (it will force a specific distance, what ever length is, between the objects).

breakable - Whether or not shooting the rope will break it.

unkPtr - unknown ptr, always 0 in orig scripts
__

Lengths can be calculated like so:

float distance = abs(x1 - x2) + abs(y1 - y2) + abs(z1 - z2); // Rope length


NOTES:

Rope does NOT interact with anything you attach it to, in some cases it make interact with the world AFTER it breaks (seems to occur if you set the type to -1).

Rope will sometimes contract and fall to the ground like you'd expect it to, but since it doesn't interact with the world the effect is just jaring.]=]
	AddRope=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],rotX--[[@param rotX number]],rotY--[[@param rotY number]],rotZ--[[@param rotZ number]],length--[[@param length number]],ropeType--[[@param ropeType integer]],maxLength--[[@param maxLength number]],minLength--[[@param minLength number]],windingSpeed--[[@param windingSpeed number]],p11--[[@param p11 boolean]],p12--[[@param p12 boolean]],rigid--[[@param rigid boolean]],p14--[[@param p14 number]],breakWhenShot--[[@param breakWhenShot boolean]],unkPtr--[[@param unkPtr any*]])return InvokeInt(0xE832D760399EB220,x+.0,y+.0,z+.0,rotX+.0,rotY+.0,rotZ+.0,length+.0,ropeType,maxLength+.0,minLength+.0,windingSpeed+.0,p11,p12,rigid,p14+.0,breakWhenShot,unkPtr)end;---@return integer
	DeleteRope=function(ropeId--[[@param ropeId integer*]])return InvokeVoid(0x52B4829281364649,ropeId)end;
	DeleteChildRope=function(ropeId--[[@param ropeId integer]])return InvokeVoid(0xAA5D6B1888E4DB20,ropeId)end;
	DoesRopeExist=function(ropeId--[[@param ropeId integer*]])return InvokeBool(0xFD5448BE3111ED96,ropeId)end;---@return boolean
	RopeDrawEnabled=function(ropeId--[[@param ropeId integer*]],p1--[[@param p1 boolean]])return InvokeVoid(0xA1AE736541B0FCA3,ropeId,p1)end;
	RopeDrawShadowEnabled=function(ropeId--[[@param ropeId integer*]],toggle--[[@param toggle boolean]])return InvokeVoid(0xF159A63806BB5BA8,ropeId,toggle)end;
	--[=[Rope presets can be found in the gamefiles. One example is "ropeFamily3", it is NOT a hash but rather a string.]=]
	LoadRopeData=function(ropeId--[[@param ropeId integer]],rope_preset--[[@param rope_preset string]])return InvokeVoid(0xCBB203C04D1ABD27,ropeId,rope_preset)end;
	PinRopeVertex=function(ropeId--[[@param ropeId integer]],vertex--[[@param vertex integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0x2B320CF14146B69A,ropeId,vertex,x+.0,y+.0,z+.0)end;
	UnpinRopeVertex=function(ropeId--[[@param ropeId integer]],vertex--[[@param vertex integer]])return InvokeVoid(0x4B5AE2EEE4A8F180,ropeId,vertex)end;
	GetRopeVertexCount=function(ropeId--[[@param ropeId integer]])return InvokeInt(0x3655F544CD30F0B5,ropeId)end;---@return integer
	--[=[Attaches entity 1 to entity 2.]=]
	AttachEntitiesToRope=function(ropeId--[[@param ropeId integer]],ent1--[[@param ent1 integer]],ent2--[[@param ent2 integer]],ent1_x--[[@param ent1_x number]],ent1_y--[[@param ent1_y number]],ent1_z--[[@param ent1_z number]],ent2_x--[[@param ent2_x number]],ent2_y--[[@param ent2_y number]],ent2_z--[[@param ent2_z number]],length--[[@param length number]],p10--[[@param p10 boolean]],p11--[[@param p11 boolean]],p12--[[@param p12 any*]],p13--[[@param p13 any*]])return InvokeVoid(0x3D95EC8B6D940AC3,ropeId,ent1,ent2,ent1_x+.0,ent1_y+.0,ent1_z+.0,ent2_x+.0,ent2_y+.0,ent2_z+.0,length+.0,p10,p11,p12,p13)end;
	--[=[The position supplied can be anywhere, and the entity should anchor relative to that point from it's origin.]=]
	AttachRopeToEntity=function(ropeId--[[@param ropeId integer]],entity--[[@param entity integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],p5--[[@param p5 boolean]])return InvokeVoid(0x4B490A6832559A65,ropeId,entity,x+.0,y+.0,z+.0,p5)end;
	DetachRopeFromEntity=function(ropeId--[[@param ropeId integer]],entity--[[@param entity integer]])return InvokeVoid(0xBCF3026912A8647D,ropeId,entity)end;
	RopeSetUpdatePinverts=function(ropeId--[[@param ropeId integer]])return InvokeVoid(0xC8D667EE52114ABA,ropeId)end;
	RopeSetUpdateOrder=function(ropeId--[[@param ropeId integer]],p1--[[@param p1 any]])return InvokeVoid(0xDC57A637A20006ED,ropeId,p1)end;
	RopeSetSmoothReelin=function(ropeId--[[@param ropeId integer]],p1--[[@param p1 boolean]])return InvokeVoid(0x36CCB9BE67B970FD,ropeId,p1)end;
	IsRopeAttachedAtBothEnds=function(ropeId--[[@param ropeId integer*]])return InvokeBool(0x84DE3B5FB3E666F0,ropeId)end;---@return boolean
	GetRopeLastVertexCoord=function(ropeId--[[@param ropeId integer]])return InvokeV3(0x21BB0FBD3E217C2D,ropeId)end;---@return V3
	GetRopeVertexCoord=function(ropeId--[[@param ropeId integer]],vertex--[[@param vertex integer]])return InvokeV3(0xEA61CA8E80F09E4D,ropeId,vertex)end;---@return V3
	StartRopeWinding=function(ropeId--[[@param ropeId integer]])return InvokeVoid(0x1461C72C889E343E,ropeId)end;
	StopRopeWinding=function(ropeId--[[@param ropeId integer]])return InvokeVoid(0xCB2D4AB84A19AA7C,ropeId)end;
	StartRopeUnwindingFront=function(ropeId--[[@param ropeId integer]])return InvokeVoid(0x538D1179EC1AA9A9,ropeId)end;
	StopRopeUnwindingFront=function(ropeId--[[@param ropeId integer]])return InvokeVoid(0xFFF3A50779EFBBB3,ropeId)end;
	RopeConvertToSimple=function(ropeId--[[@param ropeId integer]])return InvokeVoid(0x5389D48EFA2F079A,ropeId)end;
	--[=[Loads rope textures for all ropes in the current scene.]=]
	RopeLoadTextures=function()return InvokeVoid(0x9B9039DBF2D258C1)end;
	RopeAreTexturesLoaded=function()return InvokeBool(0xF2D0E6A75CC05597)end;---@return boolean
	--[=[Unloads rope textures for all ropes in the current scene.]=]
	RopeUnloadTextures=function()return InvokeVoid(0x6CE36C35C1AC8163)end;
	DoesScriptOwnRope=function(ropeId--[[@param ropeId integer]])return InvokeBool(0x271C9D3ACA5D6409,ropeId)end;---@return boolean
	RopeAttachVirtualBoundGeom=function(ropeId--[[@param ropeId integer]],p1--[[@param p1 integer]],p2--[[@param p2 number]],p3--[[@param p3 number]],p4--[[@param p4 number]],p5--[[@param p5 number]],p6--[[@param p6 number]],p7--[[@param p7 number]],p8--[[@param p8 number]],p9--[[@param p9 number]],p10--[[@param p10 number]],p11--[[@param p11 number]],p12--[[@param p12 number]],p13--[[@param p13 number]])return InvokeVoid(0xBC0CE682D4D05650,ropeId,p1,p2+.0,p3+.0,p4+.0,p5+.0,p6+.0,p7+.0,p8+.0,p9+.0,p10+.0,p11+.0,p12+.0,p13+.0)end;
	RopeChangeScriptOwner=function(p0--[[@param p0 any]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0xB1B6216CA2E7B55E,p0,p1,p2)end;
	RopeSetRefframevelocityColliderorder=function(ropeId--[[@param ropeId integer]],p1--[[@param p1 integer]])return InvokeVoid(0xB743F735C03D7810,ropeId,p1)end;
	RopeGetDistanceBetweenEnds=function(ropeId--[[@param ropeId integer]])return InvokeFloat(0x73040398DFF9A4A6,ropeId)end;---@return number
	--[=[Forces a rope to a certain length.]=]
	RopeForceLength=function(ropeId--[[@param ropeId integer]],length--[[@param length number]])return InvokeVoid(0xD009F759A723DB1B,ropeId,length+.0)end;
	--[=[Reset a rope to a certain length.]=]
	RopeResetLength=function(ropeId--[[@param ropeId integer]],length--[[@param length number]])return InvokeVoid(0xC16DE94D9BEA14A0,ropeId,length+.0)end;
	ApplyImpulseToCloth=function(posX--[[@param posX number]],posY--[[@param posY number]],posZ--[[@param posZ number]],vecX--[[@param vecX number]],vecY--[[@param vecY number]],vecZ--[[@param vecZ number]],impulse--[[@param impulse number]])return InvokeVoid(0xE37F721824571784,posX+.0,posY+.0,posZ+.0,vecX+.0,vecY+.0,vecZ+.0,impulse+.0)end;
	SetDamping=function(entity--[[@param entity integer]],vertex--[[@param vertex integer]],value--[[@param value number]])return InvokeVoid(0xEEA3B200A6FEB65B,entity,vertex,value+.0)end;
	ActivatePhysics=function(entity--[[@param entity integer]])return InvokeVoid(0x710311ADF0E20730,entity)end;
	SetCgoffset=function(entity--[[@param entity integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0xD8FA3908D7B86904,entity,x+.0,y+.0,z+.0)end;
	GetCgoffset=function(entity--[[@param entity integer]])return InvokeV3(0x8214A4B5A7A33612,entity)end;---@return V3
	SetCgAtBoundcenter=function(entity--[[@param entity integer]])return InvokeVoid(0xBE520D9761FF811F,entity)end;
	BreakEntityGlass=function(entity--[[@param entity integer]],p1--[[@param p1 number]],p2--[[@param p2 number]],p3--[[@param p3 number]],p4--[[@param p4 number]],p5--[[@param p5 number]],p6--[[@param p6 number]],p7--[[@param p7 number]],p8--[[@param p8 number]],p9--[[@param p9 any]],p10--[[@param p10 boolean]])return InvokeVoid(0x2E648D16F6E308F3,entity,p1+.0,p2+.0,p3+.0,p4+.0,p5+.0,p6+.0,p7+.0,p8+.0,p9,p10)end;
	GetIsEntityAFrag=function(object--[[@param object integer]])return InvokeBool(0x0C112765300C7E1E,object)end;---@return boolean
	SetDisableBreaking=function(object--[[@param object integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x5CEC1A84620E7D5B,object,toggle)end;
	ResetDisableBreaking=function(object--[[@param object integer]])return InvokeVoid(0xCC6E963682533882,object)end;
	SetDisableFragDamage=function(object--[[@param object integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x01BA3AED21C16CFB,object,toggle)end;
	--[=[PED_RAGDOLL_BUMP Proof?]=]
	SetUseKinematicPhysics=function(entity--[[@param entity integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x15F944730C832252,entity,toggle)end;
	SetInStuntMode=function(p0--[[@param p0 boolean]])return InvokeVoid(0x9EBD751E5787BAF2,p0)end;
	--[=[Related to the lower-end of a vehicles fTractionCurve, e.g., from standing starts and acceleration from low/zero speeds.]=]
	SetInArenaMode=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xAA6A6098851C396F,toggle)end;
}
_G.Player={
	--[=[Gets the ped for a specified player index.]=]
	GetPlayerPed=function(player--[[@param player integer]])return InvokeInt(0x43A66C31C68491C0,player)end;---@return integer
	--[=[Does the same like PLAYER::GET_PLAYER_PED]=]
	GetPlayerPedScriptIndex=function(player--[[@param player integer]])return InvokeInt(0x50FAC3A3E030A6E1,player)end;---@return integer
	--[=[Set the model for a specific Player. Be aware that this will destroy the current Ped for the Player and create a new one, any reference to the old ped should be reset
Make sure to request the model first and wait until it has loaded.]=]
	SetPlayerModel=function(player--[[@param player integer]],model--[[@param model integer]])return InvokeVoid(0x00A1CADD00108836,player,model)end;
	ChangePlayerPed=function(player--[[@param player integer]],ped--[[@param ped integer]],p2--[[@param p2 boolean]],resetDamage--[[@param resetDamage boolean]])return InvokeVoid(0x048189FAC643DEEE,player,ped,p2,resetDamage)end;
	GetPlayerRgbColour=function(player--[[@param player integer]],r--[[@param r integer*]],g--[[@param g integer*]],b--[[@param b integer*]])return InvokeVoid(0xE902EF951DCE178F,player,r,g,b)end;
	--[=[Gets the number of players in the current session.
If not multiplayer, always returns 1.]=]
	GetNumberOfPlayers=function()return InvokeInt(0x407C7F91DDB46C16)end;---@return integer
	--[=[Gets the player's team.
Does nothing in singleplayer.]=]
	GetPlayerTeam=function(player--[[@param player integer]])return InvokeInt(0x37039302F4E0A008,player)end;---@return integer
	--[=[Set player team on deathmatch and last team standing..]=]
	SetPlayerTeam=function(player--[[@param player integer]],team--[[@param team integer]])return InvokeVoid(0x0299FA38396A4940,player,team)end;
	GetNumberOfPlayersInTeam=function(team--[[@param team integer]])return InvokeInt(0x1FC200409F10E6F1,team)end;---@return integer
	GetPlayerName=function(player--[[@param player integer]])return InvokeString(0x6D0DE6A7B5DA71F8,player)end;---@return string
	--[=[Remnant from GTA IV. Does nothing in GTA V.]=]
	GetWantedLevelRadius=function(player--[[@param player integer]])return InvokeFloat(0x085DEB493BE80812,player)end;---@return number
	GetPlayerWantedCentrePosition=function(player--[[@param player integer]])return InvokeV3(0x0C92BA89F1AF26F8,player)end;---@return V3
	--[=[# Predominant call signatures
PLAYER::SET_PLAYER_WANTED_CENTRE_POSITION(PLAYER::PLAYER_ID(), ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1));

# Parameter value ranges
P0: PLAYER::PLAYER_ID()
P1: ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1)
P2: Not set by any call]=]
	SetPlayerWantedCentrePosition=function(player--[[@param player integer]],position--[[@param position V3*]],p2--[[@param p2 boolean]],p3--[[@param p3 boolean]])return InvokeVoid(0x520E541A97A13354,player,position,p2,p3)end;
	--[=[Drft]=]
	GetWantedLevelThreshold=function(wantedLevel--[[@param wantedLevel integer]])return InvokeInt(0xFDD179EAF45B556C,wantedLevel)end;---@return integer
	--[=[Call SET_PLAYER_WANTED_LEVEL_NOW for immediate effect

wantedLevel is an integer value representing 0 to 5 stars even though the game supports the 6th wanted level but no police will appear since no definitions are present for it in the game files

disableNoMission-  Disables When Off Mission- appears to always be false
]=]
	SetPlayerWantedLevel=function(player--[[@param player integer]],wantedLevel--[[@param wantedLevel integer]],disableNoMission--[[@param disableNoMission boolean]])return InvokeVoid(0x39FF19C64EF7DA5B,player,wantedLevel,disableNoMission)end;
	--[=[p2 is always false in R* scripts]=]
	SetPlayerWantedLevelNoDrop=function(player--[[@param player integer]],wantedLevel--[[@param wantedLevel integer]],p2--[[@param p2 boolean]])return InvokeVoid(0x340E61DE7F471565,player,wantedLevel,p2)end;
	--[=[Forces any pending wanted level to be applied to the specified player immediately.

Call SET_PLAYER_WANTED_LEVEL with the desired wanted level, followed by SET_PLAYER_WANTED_LEVEL_NOW.

Second parameter is unknown (always false).]=]
	SetPlayerWantedLevelNow=function(player--[[@param player integer]],p1--[[@param p1 boolean]])return InvokeVoid(0xE0A7D1E497FFCD6F,player,p1)end;
	ArePlayerFlashingStarsAboutToDrop=function(player--[[@param player integer]])return InvokeBool(0xAFAF86043E5874E9,player)end;---@return boolean
	ArePlayerStarsGreyedOut=function(player--[[@param player integer]])return InvokeBool(0x0A6EB355EE14A2DB,player)end;---@return boolean
	IsWantedAndHasBeenSeenByCops=function(player--[[@param player integer]])return InvokeBool(0x7E07C78925D5FD96,player)end;---@return boolean
	SetDispatchCopsForPlayer=function(player--[[@param player integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xDB172424876553F4,player,toggle)end;
	IsPlayerWantedLevelGreater=function(player--[[@param player integer]],wantedLevel--[[@param wantedLevel integer]])return InvokeBool(0x238DB2A2C23EE9EF,player,wantedLevel)end;---@return boolean
	--[=[This executes at the same as speed as PLAYER::SET_PLAYER_WANTED_LEVEL(player, 0, false);

PLAYER::GET_PLAYER_WANTED_LEVEL(player); executes in less than half the time. Which means that it's worth first checking if the wanted level needs to be cleared before clearing. However, this is mostly about good code practice and can important in other situations. The difference in time in this example is negligible. ]=]
	ClearPlayerWantedLevel=function(player--[[@param player integer]])return InvokeVoid(0xB302540597885499,player)end;
	IsPlayerDead=function(player--[[@param player integer]])return InvokeBool(0x424D4687FA1E5652,player)end;---@return boolean
	IsPlayerPressingHorn=function(player--[[@param player integer]])return InvokeBool(0xFA1E2BF8B10598F9,player)end;---@return boolean
	--[=[Flags:
SPC_AMBIENT_SCRIPT = (1 << 1),
SPC_CLEAR_TASKS = (1 << 2),
SPC_REMOVE_FIRES = (1 << 3),
SPC_REMOVE_EXPLOSIONS = (1 << 4),
SPC_REMOVE_PROJECTILES = (1 << 5),
SPC_DEACTIVATE_GADGETS = (1 << 6),
SPC_REENABLE_CONTROL_ON_DEATH = (1 << 7),
SPC_LEAVE_CAMERA_CONTROL_ON = (1 << 8),
SPC_ALLOW_PLAYER_DAMAGE = (1 << 9),
SPC_DONT_STOP_OTHER_CARS_AROUND_PLAYER = (1 << 10),
SPC_PREVENT_EVERYBODY_BACKOFF = (1 << 11),
SPC_ALLOW_PAD_SHAKE = (1 << 12)

See: https://alloc8or.re/gta5/doc/enums/eSetPlayerControlFlag.txt]=]
	SetPlayerControl=function(player--[[@param player integer]],bHasControl--[[@param bHasControl boolean]],flags--[[@param flags integer]])return InvokeVoid(0x8D32347D6D4C40A2,player,bHasControl,flags)end;
	GetPlayerWantedLevel=function(player--[[@param player integer]])return InvokeInt(0xE28E54788CE8F12D,player)end;---@return integer
	SetMaxWantedLevel=function(maxWantedLevel--[[@param maxWantedLevel integer]])return InvokeVoid(0xAA5F02DB48D704B9,maxWantedLevel)end;
	--[=[If toggle is set to false:
 The police won't be shown on the (mini)map

If toggle is set to true:
 The police will be shown on the (mini)map]=]
	SetPoliceRadarBlips=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x43286D561B72B8BF,toggle)end;
	--[=[The player will be ignored by the police if toggle is set to true]=]
	SetPoliceIgnorePlayer=function(player--[[@param player integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x32C62AA929C2DA6A,player,toggle)end;
	--[=[Checks whether the specified player has a Ped, the Ped is not dead, is not injured and is not arrested.]=]
	IsPlayerPlaying=function(player--[[@param player integer]])return InvokeBool(0x5E9564D8246B909A,player)end;---@return boolean
	SetEveryoneIgnorePlayer=function(player--[[@param player integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x8EEDA153AD141BA4,player,toggle)end;
	SetAllRandomPedsFlee=function(player--[[@param player integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x056E0FE8534C2949,player,toggle)end;
	SetAllRandomPedsFleeThisFrame=function(player--[[@param player integer]])return InvokeVoid(0x471D2FF42A94B4F2,player)end;
	SetAllNeutralRandomPedsFlee=function(player--[[@param player integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xDE45D1A1EF45EE61,player,toggle)end;
	--[=[- This is called after SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME
]=]
	SetAllNeutralRandomPedsFleeThisFrame=function(player--[[@param player integer]])return InvokeVoid(0xC3376F42B1FACCC6,player)end;
	SetLawPedsCanAttackNonWantedPlayerThisFrame=function(player--[[@param player integer]])return InvokeVoid(0xFAC75988A7D078D3,player)end;
	SetIgnoreLowPriorityShockingEvents=function(player--[[@param player integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x596976B02B6B5700,player,toggle)end;
	SetWantedLevelMultiplier=function(multiplier--[[@param multiplier number]])return InvokeVoid(0x020E5F00CDA207BA,multiplier+.0)end;
	--[=[Max value is 1.0]=]
	SetWantedLevelDifficulty=function(player--[[@param player integer]],difficulty--[[@param difficulty number]])return InvokeVoid(0x9B0BB33B04405E7A,player,difficulty+.0)end;
	ResetWantedLevelDifficulty=function(player--[[@param player integer]])return InvokeVoid(0xB9D0DD990DC141DD,player)end;
	GetWantedLevelTimeToEscape=function()return InvokeInt(0xA72200F51875FEA4)end;---@return integer
	SetWantedLevelHiddenEscapeTime=function(player--[[@param player integer]],wantedLevel--[[@param wantedLevel integer]],lossTime--[[@param lossTime integer]])return InvokeVoid(0x49B856B1360C47C7,player,wantedLevel,lossTime)end;
	ResetWantedLevelHiddenEscapeTime=function(player--[[@param player integer]])return InvokeVoid(0x823EC8E82BA45986,player)end;
	StartFiringAmnesty=function(duration--[[@param duration integer]])return InvokeVoid(0xBF9BD71691857E48,duration)end;
	--[=[PLAYER::REPORT_CRIME(PLAYER::PLAYER_ID(), 37, PLAYER::GET_WANTED_LEVEL_THRESHOLD(1));

From am_armybase.ysc.c4:

PLAYER::REPORT_CRIME(PLAYER::PLAYER_ID(4), 36, PLAYER::GET_WANTED_LEVEL_THRESHOLD(4));

-----

This was taken from the GTAV.exe v1.334. The function is called sub_140592CE8. For a full decompilation of the function, see here: https://pastebin.com/09qSMsN7 

-----
crimeType:
1: Firearms possession
2: Person running a red light ("5-0-5")
3: Reckless driver
4: Speeding vehicle (a "5-10")
5: Traffic violation (a "5-0-5")
6: Motorcycle rider without a helmet
7: Vehicle theft (a "5-0-3")
8: Grand Theft Auto
9: ???
10: ???
11: Assault on a civilian (a "2-40")
12: Assault on an officer
13: Assault with a deadly weapon (a "2-45")
14: Officer shot (a "2-45")
15: Pedestrian struck by a vehicle
16: Officer struck by a vehicle
17: Helicopter down (an "AC"?)
18: Civilian on fire (a "2-40")
19: Officer set on fire (a "10-99")
20: Car on fire
21: Air unit down (an "AC"?)
22: An explosion (a "9-96")
23: A stabbing (a "2-45") (also something else I couldn't understand)
24: Officer stabbed (also something else I couldn't understand)
25: Attack on a vehicle ("MDV"?)
26: Damage to property
27: Suspect threatening officer with a firearm
28: Shots fired
29: ???
30: ???
31: ???
32: ???
33: ???
34: A "2-45"
35: ???
36: A "9-25"
37: ???
38: ???
39: ???
40: ???
41: ???
42: ???
43: Possible disturbance
44: Civilian in need of assistance
45: ???
46: ???]=]
	ReportCrime=function(player--[[@param player integer]],crimeType--[[@param crimeType integer]],wantedLvlThresh--[[@param wantedLvlThresh integer]])return InvokeVoid(0xE9B09589827545E7,player,crimeType,wantedLvlThresh)end;
	--[=[crimeType: see REPORT_CRIME]=]
	SuppressCrimeThisFrame=function(player--[[@param player integer]],crimeType--[[@param crimeType integer]])return InvokeVoid(0x9A987297ED8BD838,player,crimeType)end;
	--[=[This native is used in both singleplayer and multiplayer scripts.

Always used like this in scripts
PLAYER::UPDATE_WANTED_POSITION_THIS_FRAME(PLAYER::PLAYER_ID());]=]
	UpdateWantedPositionThisFrame=function(player--[[@param player integer]])return InvokeVoid(0xBC9490CA15AEA8FB,player)end;
	--[=[This has been found in use in the decompiled files.]=]
	SuppressLosingWantedLevelIfHiddenThisFrame=function(player--[[@param player integer]])return InvokeVoid(0x4669B3ED80F24B4E,player)end;
	AllowEvasionHudIfDisablingHiddenEvasionThisFrame=function(player--[[@param player integer]],p1--[[@param p1 any]])return InvokeVoid(0x2F41A3BAE005E5FA,player,p1)end;
	--[=[This has been found in use in the decompiled files.]=]
	ForceStartHiddenEvasion=function(player--[[@param player integer]])return InvokeVoid(0xAD73CE5A09E42D12,player)end;
	SuppressWitnessesCallingPoliceThisFrame=function(player--[[@param player integer]])return InvokeVoid(0x36F1B38855F2A8DF,player)end;
	ReportPoliceSpottedPlayer=function(player--[[@param player integer]])return InvokeVoid(0xDC64D2C53493ED12,player)end;
	--[=[PLAYER::SET_LAW_RESPONSE_DELAY_OVERRIDE(rPtr((&l_122) + 71)); // Found in decompilation

***

In "am_hold_up.ysc" used once:

l_8d._f47 = MISC::GET_RANDOM_FLOAT_IN_RANGE(18.0, 28.0);
PLAYER::SET_LAW_RESPONSE_DELAY_OVERRIDE((l_8d._f47));]=]
	SetLawResponseDelayOverride=function(p0--[[@param p0 number]])return InvokeVoid(0xB45EFF719D8427A6,p0+.0)end;
	--[=[2 matches in 1 script - am_hold_up

Used in multiplayer scripts?]=]
	ResetLawResponseDelayOverride=function()return InvokeVoid(0x0032A6DBA562C518)end;
	CanPlayerStartMission=function(player--[[@param player integer]])return InvokeBool(0xDE7465A27D403C06,player)end;---@return boolean
	IsPlayerReadyForCutscene=function(player--[[@param player integer]])return InvokeBool(0x908CBECC2CAA3690,player)end;---@return boolean
	IsPlayerTargettingEntity=function(player--[[@param player integer]],entity--[[@param entity integer]])return InvokeBool(0x7912F7FC4F6264B6,player,entity)end;---@return boolean
	--[=[Assigns the handle of locked-on melee target to *entity that you pass it.
Returns false if no entity found.]=]
	GetPlayerTargetEntity=function(player--[[@param player integer]],entity--[[@param entity integer*]])return InvokeBool(0x13EDE1A5DBF797C9,player,entity)end;---@return boolean
	--[=[Gets a value indicating whether the specified player is currently aiming freely.]=]
	IsPlayerFreeAiming=function(player--[[@param player integer]])return InvokeBool(0x2E397FD2ECD37C87,player)end;---@return boolean
	--[=[Gets a value indicating whether the specified player is currently aiming freely at the specified entity.]=]
	IsPlayerFreeAimingAtEntity=function(player--[[@param player integer]],entity--[[@param entity integer]])return InvokeBool(0x3C06B5C839B38F7B,player,entity)end;---@return boolean
	--[=[Returns TRUE if it found an entity in your crosshair within range of your weapon. Assigns the handle of the target to the *entity that you pass it.
Returns false if no entity found.]=]
	GetEntityPlayerIsFreeAimingAt=function(player--[[@param player integer]],entity--[[@param entity integer*]])return InvokeBool(0x2975C866E6713290,player,entity)end;---@return boolean
	--[=[Affects the range of auto aim target.]=]
	SetPlayerLockonRangeOverride=function(player--[[@param player integer]],range--[[@param range number]])return InvokeVoid(0x29961D490E5814FD,player,range+.0)end;
	--[=[Set whether this player should be able to do drive-bys.

"A drive-by is when a ped is aiming/shooting from vehicle. This includes middle finger taunts. By setting this value to false I confirm the player is unable to do all that. Tested on tick."
]=]
	SetPlayerCanDoDriveBy=function(player--[[@param player integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x6E8834B52EC20C77,player,toggle)end;
	--[=[Sets whether this player can be hassled by gangs.]=]
	SetPlayerCanBeHassledByGangs=function(player--[[@param player integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xD5E460AD7020A246,player,toggle)end;
	--[=[Sets whether this player can take cover.]=]
	SetPlayerCanUseCover=function(player--[[@param player integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xD465A8599DFF6814,player,toggle)end;
	--[=[Gets the maximum wanted level the player can get.
Ranges from 0 to 5.]=]
	GetMaxWantedLevel=function()return InvokeInt(0x462E0DB9B137DC5F)end;---@return integer
	IsPlayerTargettingAnything=function(player--[[@param player integer]])return InvokeBool(0x78CFE51896B6B8A4,player)end;---@return boolean
	SetPlayerSprint=function(player--[[@param player integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xA01B8075D8B92DF4,player,toggle)end;
	ResetPlayerStamina=function(player--[[@param player integer]])return InvokeVoid(0xA6F312FCCE9C1DFE,player)end;
	RestorePlayerStamina=function(player--[[@param player integer]],p1--[[@param p1 number]])return InvokeVoid(0xA352C1B864CAFD33,player,p1+.0)end;
	GetPlayerSprintStaminaRemaining=function(player--[[@param player integer]])return InvokeFloat(0x3F9F16F8E65A7ED7,player)end;---@return number
	GetPlayerSprintTimeRemaining=function(player--[[@param player integer]])return InvokeFloat(0x1885BC9B108B4C99,player)end;---@return number
	GetPlayerUnderwaterTimeRemaining=function(player--[[@param player integer]])return InvokeFloat(0xA1FCF8E6AF40B731,player)end;---@return number
	SetPlayerUnderwaterBreathPercentRemaining=function(player--[[@param player integer]],time--[[@param time number]])return InvokeFloat(0xA0D3E4F7AAFB7E78,player,time+.0)end;---@return number
	--[=[Returns the group ID the player is member of.]=]
	GetPlayerGroup=function(player--[[@param player integer]])return InvokeInt(0x0D127585F77030AF,player)end;---@return integer
	GetPlayerMaxArmour=function(player--[[@param player integer]])return InvokeInt(0x92659B4CE1863CB3,player)end;---@return integer
	--[=[Can the player control himself, used to disable controls for player for things like a cutscene.

---

You can't disable controls with this, use SET_PLAYER_CONTROL(...) for this. ]=]
	IsPlayerControlOn=function(player--[[@param player integer]])return InvokeBool(0x49C32D60007AFA47,player)end;---@return boolean
	--[=[Returns true when the player is not able to control the cam i.e. when running a benchmark test, switching the player or viewing a cutscene.

Note: I am not 100% sure if the native actually checks if the cam control is disabled but it seems promising.]=]
	GetAreCameraControlsDisabled=function()return InvokeBool(0x7C814D2FB49F40C0)end;---@return boolean
	IsPlayerScriptControlOn=function(player--[[@param player integer]])return InvokeBool(0x8A876A65283DD7D7,player)end;---@return boolean
	--[=[Returns TRUE if the player ('s ped) is climbing at the moment.]=]
	IsPlayerClimbing=function(player--[[@param player integer]])return InvokeBool(0x95E8F73DC65EFB9C,player)end;---@return boolean
	--[=[Return true while player is being arrested / busted.

If atArresting is set to 1, this function will return 1 when player is being arrested (while player is putting his hand up, but still have control)

If atArresting is set to 0, this function will return 1 only when the busted screen is shown.]=]
	IsPlayerBeingArrested=function(player--[[@param player integer]],atArresting--[[@param atArresting boolean]])return InvokeBool(0x388A47C51ABDAC8E,player,atArresting)end;---@return boolean
	ResetPlayerArrestState=function(player--[[@param player integer]])return InvokeVoid(0x2D03E13C460760D6,player)end;
	--[=[Alternative: GET_VEHICLE_PED_IS_IN(PLAYER_PED_ID(), 1);]=]
	GetPlayersLastVehicle=function()return InvokeInt(0xB6997A7EB3F5C8C0)end;---@return integer
	--[=[Returns the same as PLAYER_ID and NETWORK_PLAYER_ID_TO_INT]=]
	GetPlayerIndex=function()return InvokeInt(0xA5EDC40EF369B48D)end;---@return integer
	--[=[Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).]=]
	IntToPlayerindex=function(value--[[@param value integer]])return InvokeInt(0x41BD2A6B006AF756,value)end;---@return integer
	--[=[Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
--------------------------------------------------------
if (NETWORK::NETWORK_IS_PARTICIPANT_ACTIVE(PLAYER::INT_TO_PARTICIPANTINDEX(i)))
]=]
	IntToParticipantindex=function(value--[[@param value integer]])return InvokeInt(0x9EC6603812C24710,value)end;---@return integer
	GetTimeSincePlayerHitVehicle=function(player--[[@param player integer]])return InvokeInt(0x5D35ECF3A81A0EE0,player)end;---@return integer
	GetTimeSincePlayerHitPed=function(player--[[@param player integer]])return InvokeInt(0xE36A25322DC35F42,player)end;---@return integer
	GetTimeSincePlayerDroveOnPavement=function(player--[[@param player integer]])return InvokeInt(0xD559D2BE9E37853B,player)end;---@return integer
	GetTimeSincePlayerDroveAgainstTraffic=function(player--[[@param player integer]])return InvokeInt(0xDB89591E290D9182,player)end;---@return integer
	IsPlayerFreeForAmbientTask=function(player--[[@param player integer]])return InvokeBool(0xDCCFD3F106C36AB4,player)end;---@return boolean
	--[=[This returns YOUR 'identity' as a Player type.

Always returns 0 in story mode.]=]
	PlayerId=function()return InvokeInt(0x4F8644AF03D0E0D6)end;---@return integer
	--[=[Returns current player ped]=]
	PlayerPedId=function()return InvokeInt(0xD80958FC74E988A6)end;---@return integer
	--[=[Does exactly the same thing as PLAYER_ID()]=]
	NetworkPlayerIdToInt=function()return InvokeInt(0xEE68096F9F37341E)end;---@return integer
	HasForceCleanupOccurred=function(cleanupFlags--[[@param cleanupFlags integer]])return InvokeBool(0xC968670BFACE42D9,cleanupFlags)end;---@return boolean
	--[=[used with 1,2,8,64,128 in the scripts]=]
	ForceCleanup=function(cleanupFlags--[[@param cleanupFlags integer]])return InvokeVoid(0xBC8983F38F78ED51,cleanupFlags)end;
	--[=[PLAYER::FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME("pb_prostitute", 1); // Found in decompilation]=]
	ForceCleanupForAllThreadsWithThisName=function(name--[[@param name string]],cleanupFlags--[[@param cleanupFlags integer]])return InvokeVoid(0x4C68DDDDF0097317,name,cleanupFlags)end;
	ForceCleanupForThreadWithThisId=function(id--[[@param id integer]],cleanupFlags--[[@param cleanupFlags integer]])return InvokeVoid(0xF745B37630DF176B,id,cleanupFlags)end;
	GetCauseOfMostRecentForceCleanup=function()return InvokeInt(0x9A41CF4674A12272)end;---@return integer
	SetPlayerMayOnlyEnterThisVehicle=function(player--[[@param player integer]],vehicle--[[@param vehicle integer]])return InvokeVoid(0x8026FF78F208978A,player,vehicle)end;
	SetPlayerMayNotEnterAnyVehicle=function(player--[[@param player integer]])return InvokeVoid(0x1DE37BBF9E9CC14A,player)end;
	--[=[1 - Welcome to Los Santos
2 - A Friendship Resurrected
3 - A Fair Day's Pay
4 - The Moment of Truth
5 - To Live or Die in Los Santos
6 - Diamond Hard
7 - Subversive
8 - Blitzed
9 - Small Town, Big Job
10 - The Government Gimps
11 - The Big One!
12 - Solid Gold, Baby!
13 - Career Criminal
14 - San Andreas Sightseer
15 - All's Fare in Love and War
16 - TP Industries Arms Race
17 - Multi-Disciplined
18 - From Beyond the Stars
19 - A Mystery, Solved
20 - Waste Management
21 - Red Mist
22 - Show Off
23 - Kifflom!
24 - Three Man Army
25 - Out of Your Depth
26 - Altruist Acolyte
27 - A Lot of Cheddar
28 - Trading Pure Alpha
29 - Pimp My Sidearm
30 - Wanted: Alive Or Alive
31 - Los Santos Customs
32 - Close Shave
33 - Off the Plane
34 - Three-Bit Gangster
35 - Making Moves
36 - Above the Law
37 - Numero Uno
38 - The Midnight Club
39 - Unnatural Selection
40 - Backseat Driver
41 - Run Like The Wind
42 - Clean Sweep
43 - Decorated
44 - Stick Up Kid
45 - Enjoy Your Stay
46 - Crew Cut
47 - Full Refund
48 - Dialling Digits
49 - American Dream
50 - A New Perspective
51 - Be Prepared
52 - In the Name of Science
53 - Dead Presidents
54 - Parole Day
55 - Shot Caller
56 - Four Way
57 - Live a Little
58 - Can't Touch This
59 - Mastermind
60 - Vinewood Visionary
61 - Majestic
62 - Humans of Los Santos
63 - First Time Director
64 - Animal Lover
65 - Ensemble Piece
66 - Cult Movie
67 - Location Scout
68 - Method Actor
69 - Cryptozoologist
70 - Getting Started
71 - The Data Breaches
72 - The Bogdan Problem
73 - The Doomsday Scenario
74 - A World Worth Saving
75 - Orbital Obliteration
76 - Elitist
77 - Masterminds]=]
	GiveAchievementToPlayer=function(achievementId--[[@param achievementId integer]])return InvokeBool(0xBEC7076D64130195,achievementId)end;---@return boolean
	--[=[For Steam.
Does nothing and always returns false in the retail version of the game.]=]
	SetAchievementProgress=function(achievementId--[[@param achievementId integer]],progress--[[@param progress integer]])return InvokeBool(0xC2AFFFDABBDC2C5C,achievementId,progress)end;---@return boolean
	--[=[For Steam.
Always returns 0 in retail version of the game.]=]
	GetAchievementProgress=function(achievementId--[[@param achievementId integer]])return InvokeInt(0x1C186837D0619335,achievementId)end;---@return integer
	--[=[See GIVE_ACHIEVEMENT_TO_PLAYER]=]
	HasAchievementBeenPassed=function(achievementId--[[@param achievementId integer]])return InvokeBool(0x867365E111A3B6EB,achievementId)end;---@return boolean
	--[=[Returns TRUE if the game is in online mode and FALSE if in offline mode.

This is an alias for NETWORK_IS_SIGNED_ONLINE.]=]
	IsPlayerOnline=function()return InvokeBool(0xF25D331DC2627BBC)end;---@return boolean
	--[=[this function is hard-coded to always return 0.]=]
	IsPlayerLoggingInNp=function()return InvokeBool(0x74556E1420867ECA)end;---@return boolean
	--[=[Purpose of the BOOL currently unknown.
Both, true and false, work]=]
	DisplaySystemSigninUi=function(p0--[[@param p0 boolean]])return InvokeVoid(0x94DD7888C10A979E,p0)end;
	IsSystemUiBeingDisplayed=function()return InvokeBool(0x5D511E3867C87139)end;---@return boolean
	--[=[Simply sets you as invincible (Health will not deplete).

Use 0x733A643B5B0C53C1 instead if you want Ragdoll enabled, which is equal to:
*(DWORD *)(playerPedAddress + 0x188) |= (1 << 9);]=]
	SetPlayerInvincible=function(player--[[@param player integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x239528EACDC3E7DE,player,toggle)end;
	--[=[Returns the Player's Invincible status.

This function will always return false if 0x733A643B5B0C53C1 is used to set the invincibility status. To always get the correct result, use this:

 bool IsPlayerInvincible(Player player)
    {
     auto addr = getScriptHandleBaseAddress(GET_PLAYER_PED(player)); 

        if (addr)
     {
         DWORD flag = *(DWORD *)(addr + 0x188);
            return ((flag & (1 << 8)) != 0) || ((flag & (1 << 9)) != 0);
      }

       return false;
 }

]=]
	GetPlayerInvincible=function(player--[[@param player integer]])return InvokeBool(0xB721981B2B939E07,player)end;---@return boolean
	--[=[Always returns false.]=]
	GetPlayerDebugInvincible=function(player--[[@param player integer]])return InvokeBool(0xDCC07526B8EC45AF,player)end;---@return boolean
	SetPlayerInvincibleButHasReactions=function(player--[[@param player integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x6BC97F4F4BB3C04B,player,toggle)end;
	SetPlayerCanCollectDroppedMoney=function(player--[[@param player integer]],p1--[[@param p1 boolean]])return InvokeVoid(0xCAC57395B151135F,player,p1)end;
	RemovePlayerHelmet=function(player--[[@param player integer]],p2--[[@param p2 boolean]])return InvokeVoid(0xF3AC26D3CC576528,player,p2)end;
	GivePlayerRagdollControl=function(player--[[@param player integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x3C49C870E66F0A28,player,toggle)end;
	--[=[Example from fm_mission_controler.ysc.c4:

PLAYER::SET_PLAYER_LOCKON(PLAYER::PLAYER_ID(), 1);

All other decompiled scripts using this seem to be using the player id as the first parameter, so I feel the need to confirm it as so.

No need to confirm it says PLAYER_ID() so it uses PLAYER_ID() lol.]=]
	SetPlayerLockon=function(player--[[@param player integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x5C8B2F450EE4328E,player,toggle)end;
	--[=[Sets your targeting mode.
0 = Assisted Aim - Full
1 = Assisted Aim - Partial
2 = Free Aim - Assisted
3 = Free Aim]=]
	SetPlayerTargetingMode=function(targetMode--[[@param targetMode integer]])return InvokeVoid(0xB1906895227793F3,targetMode)end;
	SetPlayerTargetLevel=function(targetLevel--[[@param targetLevel integer]])return InvokeVoid(0x5702B917B99DB1CD,targetLevel)end;
	--[=[Returns profile setting 237.]=]
	GetIsUsingFpsThirdPersonCover=function()return InvokeBool(0xB9CF1F793A9F1BF1)end;---@return boolean
	--[=[Returns profile setting 243.]=]
	GetIsUsingHoodCamera=function()return InvokeBool(0xCB645E85E97EA48B)end;---@return boolean
	ClearPlayerHasDamagedAtLeastOnePed=function(player--[[@param player integer]])return InvokeVoid(0xF0B67A4DE6AB5F98,player)end;
	HasPlayerDamagedAtLeastOnePed=function(player--[[@param player integer]])return InvokeBool(0x20CE80B0C2BF4ACC,player)end;---@return boolean
	ClearPlayerHasDamagedAtLeastOneNonAnimalPed=function(player--[[@param player integer]])return InvokeVoid(0x4AACB96203D11A31,player)end;
	HasPlayerDamagedAtLeastOneNonAnimalPed=function(player--[[@param player integer]])return InvokeBool(0xE4B90F367BD81752,player)end;---@return boolean
	--[=[This can be between 1.0f - 14.9f 

You can change the max in IDA from 15.0. I say 15.0 as the function blrs if what you input is greater than or equal to 15.0 hence why it's 14.9 max default.

]=]
	SetAirDragMultiplierForPlayersVehicle=function(player--[[@param player integer]],multiplier--[[@param multiplier number]])return InvokeVoid(0xCA7DC8329F0A1E9E,player,multiplier+.0)end;
	--[=[Swim speed multiplier.
Multiplier goes up to 1.49

Just call it one time, it is not required to be called once every tick. - Note copied from below native.

Note: At least the IDA method if you change the max float multiplier from 1.5 it will change it for both this and RUN_SPRINT below. I say 1.5 as the function blrs if what you input is greater than or equal to 1.5 hence why it's 1.49 max default.]=]
	SetSwimMultiplierForPlayer=function(player--[[@param player integer]],multiplier--[[@param multiplier number]])return InvokeVoid(0xA91C6F0FF7D16A13,player,multiplier+.0)end;
	--[=[Multiplier goes up to 1.49 any value above will be completely overruled by the game and the multiplier will not take effect, this can be edited in memory however.

Just call it one time, it is not required to be called once every tick.

Note: At least the IDA method if you change the max float multiplier from 1.5 it will change it for both this and SWIM above. I say 1.5 as the function blrs if what you input is greater than or equal to 1.5 hence why it's 1.49 max default.]=]
	SetRunSprintMultiplierForPlayer=function(player--[[@param player integer]],multiplier--[[@param multiplier number]])return InvokeVoid(0x6DB47AA77FD94E09,player,multiplier+.0)end;
	--[=[Returns the time since the character was arrested in (ms) milliseconds.

example

var time = Function.call<int>(Hash.GET_TIME_SINCE_LAST_ARREST();

UI.DrawSubtitle(time.ToString());

if player has not been arrested, the int returned will be -1.]=]
	GetTimeSinceLastArrest=function()return InvokeInt(0x5063F92F07C2A316)end;---@return integer
	--[=[Returns the time since the character died in (ms) milliseconds.

example

var time = Function.call<int>(Hash.GET_TIME_SINCE_LAST_DEATH();

UI.DrawSubtitle(time.ToString());

if player has not died, the int returned will be -1.]=]
	GetTimeSinceLastDeath=function()return InvokeInt(0xC7034807558DDFCA)end;---@return integer
	AssistedMovementCloseRoute=function()return InvokeVoid(0xAEBF081FFC0A0E5E)end;
	AssistedMovementFlushRoute=function()return InvokeVoid(0x8621390F0CDCFE1F)end;
	SetPlayerForcedAim=function(player--[[@param player integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x0FEE4F80AC44A726,player,toggle)end;
	SetPlayerForcedZoom=function(player--[[@param player integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x75E7D505F2B15902,player,toggle)end;
	SetPlayerForceSkipAimIntro=function(player--[[@param player integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x7651BC64AE59E128,player,toggle)end;
	--[=[Inhibits the player from using any method of combat including melee and firearms.

NOTE: Only disables the firing for one frame]=]
	DisablePlayerFiring=function(player--[[@param player integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x5E6CC07646BBEAB8,player,toggle)end;
	--[=[Used only once in R* scripts (freemode.ysc).]=]
	DisablePlayerThrowGrenadeWhileUsingGun=function()return InvokeVoid(0xB885852C39CC265D)end;
	SetDisableAmbientMeleeMove=function(player--[[@param player integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x2E8AABFA40A84F8C,player,toggle)end;
	--[=[Default is 100. Use player id and not ped id. For instance: PLAYER::SET_PLAYER_MAX_ARMOUR(PLAYER::PLAYER_ID(), 100); // main_persistent.ct4]=]
	SetPlayerMaxArmour=function(player--[[@param player integer]],value--[[@param value integer]])return InvokeVoid(0x77DFCCF5948B8C71,player,value)end;
	--[=[p1 is always 0 in the scripts]=]
	SpecialAbilityActivate=function(player--[[@param player integer]],p1--[[@param p1 integer]])return InvokeVoid(0x821FDC827D6F4090,player,p1)end;
	SetSpecialAbilityMp=function(player--[[@param player integer]],p1--[[@param p1 integer]],p2--[[@param p2 any]])return InvokeVoid(0xB214D570EAD7F81A,player,p1,p2)end;
	--[=[p1 is always 0 in the scripts]=]
	SpecialAbilityDeactivateMp=function(player--[[@param player integer]],p1--[[@param p1 integer]])return InvokeVoid(0x17F7471EACA78290,player,p1)end;
	SpecialAbilityDeactivate=function(player--[[@param player integer]],p1--[[@param p1 any]])return InvokeVoid(0xD6A953C6D1492057,player,p1)end;
	SpecialAbilityDeactivateFast=function(player--[[@param player integer]],p1--[[@param p1 any]])return InvokeVoid(0x9CB5CE07A3968D5A,player,p1)end;
	SpecialAbilityReset=function(player--[[@param player integer]],p1--[[@param p1 any]])return InvokeVoid(0x375F0E738F861A94,player,p1)end;
	SpecialAbilityChargeOnMissionFailed=function(player--[[@param player integer]],p1--[[@param p1 any]])return InvokeVoid(0xC9A763D8FE87436A,player,p1)end;
	--[=[Every occurrence of p1 & p2 were both true.]=]
	SpecialAbilityChargeSmall=function(player--[[@param player integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],p3--[[@param p3 any]])return InvokeVoid(0x2E7B9B683481687D,player,p1,p2,p3)end;
	--[=[Only 1 match. Both p1 & p2 were true.]=]
	SpecialAbilityChargeMedium=function(player--[[@param player integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],p3--[[@param p3 any]])return InvokeVoid(0xF113E3AA9BC54613,player,p1,p2,p3)end;
	--[=[2 matches. p1 was always true.]=]
	SpecialAbilityChargeLarge=function(player--[[@param player integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],p3--[[@param p3 any]])return InvokeVoid(0xF733F45FA4497D93,player,p1,p2,p3)end;
	--[=[p1 appears to always be 1 (only comes up twice)]=]
	SpecialAbilityChargeContinuous=function(player--[[@param player integer]],p1--[[@param p1 integer]],p2--[[@param p2 any]])return InvokeVoid(0xED481732DFF7E997,player,p1,p2)end;
	--[=[p1 appears as 5, 10, 15, 25, or 30. p2 is always true.]=]
	SpecialAbilityChargeAbsolute=function(player--[[@param player integer]],p1--[[@param p1 integer]],p2--[[@param p2 boolean]],p3--[[@param p3 any]])return InvokeVoid(0xB7B0870EB531D08D,player,p1,p2,p3)end;
	--[=[
normalizedValue is from 0.0 - 1.0
p2 is always 1]=]
	SpecialAbilityChargeNormalized=function(player--[[@param player integer]],normalizedValue--[[@param normalizedValue number]],p2--[[@param p2 boolean]],p3--[[@param p3 any]])return InvokeVoid(0xA0696A65F009EE18,player,normalizedValue+.0,p2,p3)end;
	--[=[Also known as _RECHARGE_SPECIAL_ABILITY]=]
	SpecialAbilityFillMeter=function(player--[[@param player integer]],p1--[[@param p1 boolean]],p2--[[@param p2 any]])return InvokeVoid(0x3DACA8DDC6FD4980,player,p1,p2)end;
	--[=[p1 was always true.]=]
	SpecialAbilityDepleteMeter=function(player--[[@param player integer]],p1--[[@param p1 boolean]],p2--[[@param p2 any]])return InvokeVoid(0x1D506DBBBC51E64B,player,p1,p2)end;
	SpecialAbilityLock=function(playerModel--[[@param playerModel integer]],p1--[[@param p1 any]])return InvokeVoid(0x6A09D0D590A47D13,playerModel,p1)end;
	SpecialAbilityUnlock=function(playerModel--[[@param playerModel integer]],p1--[[@param p1 any]])return InvokeVoid(0xF145F3BE2EFA9A3B,playerModel,p1)end;
	IsSpecialAbilityUnlocked=function(playerModel--[[@param playerModel integer]])return InvokeBool(0xC6017F6A6CDFA694,playerModel)end;---@return boolean
	IsSpecialAbilityActive=function(player--[[@param player integer]],p1--[[@param p1 any]])return InvokeBool(0x3E5F7FC85D854E15,player,p1)end;---@return boolean
	IsSpecialAbilityMeterFull=function(player--[[@param player integer]],p1--[[@param p1 any]])return InvokeBool(0x05A1FE504B7F2587,player,p1)end;---@return boolean
	EnableSpecialAbility=function(player--[[@param player integer]],toggle--[[@param toggle boolean]],p2--[[@param p2 any]])return InvokeVoid(0x181EC197DAEFE121,player,toggle,p2)end;
	IsSpecialAbilityEnabled=function(player--[[@param player integer]],p1--[[@param p1 any]])return InvokeBool(0xB1D200FE26AEF3CB,player,p1)end;---@return boolean
	SetSpecialAbilityMultiplier=function(multiplier--[[@param multiplier number]])return InvokeVoid(0xA49C426ED0CA4AB7,multiplier+.0)end;
	UpdateSpecialAbilityFromStat=function(player--[[@param player integer]],p1--[[@param p1 any]])return InvokeVoid(0xFFEE8FA29AB9A18E,player,p1)end;
	--[=[Appears once in "re_dealgonewrong"]=]
	GetIsPlayerDrivingOnHighway=function(player--[[@param player integer]])return InvokeBool(0x5FC472C501CCADB3,player)end;---@return boolean
	--[=[Only 1 occurrence. p1 was 2.]=]
	GetIsPlayerDrivingWreckless=function(player--[[@param player integer]],p1--[[@param p1 integer]])return InvokeBool(0xF10B44FD479D69F3,player,p1)end;---@return boolean
	--[=[2 occurrences in agency_heist3a. p1 was 0.7f then 0.4f.]=]
	GetIsMoppingAreaFreeInFrontOfPlayer=function(player--[[@param player integer]],p1--[[@param p1 number]])return InvokeBool(0xDD2620B7B9D16FF1,player,p1+.0)end;---@return boolean
	--[=[`findCollisionLand`: This teleports the player to land when set to true and will not consider the Z coordinate parameter provided by you. It will automatically put the Z coordinate so that you don't fall from sky.]=]
	StartPlayerTeleport=function(player--[[@param player integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],heading--[[@param heading number]],p5--[[@param p5 boolean]],findCollisionLand--[[@param findCollisionLand boolean]],p7--[[@param p7 boolean]])return InvokeVoid(0xAD15F075A4DA0FDE,player,x+.0,y+.0,z+.0,heading+.0,p5,findCollisionLand,p7)end;
	UpdatePlayerTeleport=function(player--[[@param player integer]])return InvokeBool(0xE23D5873C2394C61,player)end;---@return boolean
	--[=[Disables the player's teleportation]=]
	StopPlayerTeleport=function()return InvokeVoid(0xC449EDED9D73009C)end;
	IsPlayerTeleportActive=function()return InvokeBool(0x02B15662D7F8886F)end;---@return boolean
	GetPlayerCurrentStealthNoise=function(player--[[@param player integer]])return InvokeFloat(0x2F395D61F3A1F877,player)end;---@return number
	--[=[`regenRate`: The recharge multiplier, a value between 0.0 and 1.0.
Use 1.0 to reset it back to normal]=]
	SetPlayerHealthRechargeMultiplier=function(player--[[@param player integer]],regenRate--[[@param regenRate number]])return InvokeVoid(0x5DB660B38DD98A31,player,regenRate+.0)end;
	GetPlayerHealthRechargeMaxPercent=function(player--[[@param player integer]])return InvokeFloat(0x8BC515BAE4AAF8FF,player)end;---@return number
	SetPlayerHealthRechargeMaxPercent=function(player--[[@param player integer]],limit--[[@param limit number]])return InvokeVoid(0xC388A0F065F5BC34,player,limit+.0)end;
	--[=[Needs to be called every frame.]=]
	DisablePlayerHealthRecharge=function(player--[[@param player integer]])return InvokeVoid(0xBCB06442F7E52666,player)end;
	SetPlayerFallDistanceToTriggerRagdollOverride=function(player--[[@param player integer]],p1--[[@param p1 number]])return InvokeVoid(0xEFD79FA81DFBA9CB,player,p1+.0)end;
	--[=[This modifies the damage value of your weapon. Whether it is a multiplier or base damage is unknown. 

Based on tests, it is unlikely to be a multiplier.

modifier's min value is 0.1]=]
	SetPlayerWeaponDamageModifier=function(player--[[@param player integer]],modifier--[[@param modifier number]])return InvokeVoid(0xCE07B9F7817AADA3,player,modifier+.0)end;
	--[=[modifier's min value is 0.1]=]
	SetPlayerWeaponDefenseModifier=function(player--[[@param player integer]],modifier--[[@param modifier number]])return InvokeVoid(0x2D83BC011CA14A3C,player,modifier+.0)end;
	--[=[modifier's min value is 0.1]=]
	SetPlayerWeaponMinigunDefenseModifier=function(player--[[@param player integer]],modifier--[[@param modifier number]])return InvokeVoid(0xBCFDE9EDE4CF27DC,player,modifier+.0)end;
	--[=[modifier's min value is 0.1]=]
	SetPlayerMeleeWeaponDamageModifier=function(player--[[@param player integer]],modifier--[[@param modifier number]],p2--[[@param p2 boolean]])return InvokeVoid(0x4A3DC7ECCC321032,player,modifier+.0,p2)end;
	--[=[modifier's min value is 0.1]=]
	SetPlayerMeleeWeaponDefenseModifier=function(player--[[@param player integer]],modifier--[[@param modifier number]])return InvokeVoid(0xAE540335B4ABC4E2,player,modifier+.0)end;
	--[=[modifier's min value is 0.1]=]
	SetPlayerVehicleDamageModifier=function(player--[[@param player integer]],modifier--[[@param modifier number]])return InvokeVoid(0xA50E117CDDF82F0C,player,modifier+.0)end;
	--[=[modifier's min value is 0.1]=]
	SetPlayerVehicleDefenseModifier=function(player--[[@param player integer]],modifier--[[@param modifier number]])return InvokeVoid(0x4C60E6EFDAFF2462,player,modifier+.0)end;
	SetPlayerMaxExplosiveDamage=function(player--[[@param player integer]],p1--[[@param p1 number]])return InvokeVoid(0x8D768602ADEF2245,player,p1+.0)end;
	SetPlayerExplosiveDamageModifier=function(player--[[@param player integer]],p1--[[@param p1 any]])return InvokeVoid(0xD821056B9ACF8052,player,p1)end;
	SetPlayerWeaponTakedownDefenseModifier=function(player--[[@param player integer]],p1--[[@param p1 number]])return InvokeVoid(0x31E90B8873A4CD3B,player,p1+.0)end;
	--[=[Tints:
   None = -1,
    Rainbow = 0,
  Red = 1,
  SeasideStripes = 2,
   WidowMaker = 3,
   Patriot = 4,
  Blue = 5,
 Black = 6,
    Hornet = 7,
   AirFocce = 8,
 Desert = 9,
   Shadow = 10,
  HighAltitude = 11,
    Airbone = 12,
 Sunrise = 13,
]=]
	SetPlayerParachuteTintIndex=function(player--[[@param player integer]],tintIndex--[[@param tintIndex integer]])return InvokeVoid(0xA3D0E54541D9A5E5,player,tintIndex)end;
	--[=[Tints:
  None = -1,
    Rainbow = 0,
  Red = 1,
  SeasideStripes = 2,
   WidowMaker = 3,
   Patriot = 4,
  Blue = 5,
 Black = 6,
    Hornet = 7,
   AirFocce = 8,
 Desert = 9,
   Shadow = 10,
  HighAltitude = 11,
    Airbone = 12,
 Sunrise = 13,]=]
	GetPlayerParachuteTintIndex=function(player--[[@param player integer]],tintIndex--[[@param tintIndex integer*]])return InvokeVoid(0x75D3F7A1B0D9B145,player,tintIndex)end;
	--[=[Tints:
   None = -1,
    Rainbow = 0,
  Red = 1,
  SeasideStripes = 2,
   WidowMaker = 3,
   Patriot = 4,
  Blue = 5,
 Black = 6,
    Hornet = 7,
   AirFocce = 8,
 Desert = 9,
   Shadow = 10,
  HighAltitude = 11,
    Airbone = 12,
 Sunrise = 13,]=]
	SetPlayerReserveParachuteTintIndex=function(player--[[@param player integer]],index--[[@param index integer]])return InvokeVoid(0xAF04C87F5DC1DF38,player,index)end;
	--[=[Tints:
  None = -1,
    Rainbow = 0,
  Red = 1,
  SeasideStripes = 2,
   WidowMaker = 3,
   Patriot = 4,
  Blue = 5,
 Black = 6,
    Hornet = 7,
   AirFocce = 8,
 Desert = 9,
   Shadow = 10,
  HighAltitude = 11,
    Airbone = 12,
 Sunrise = 13,]=]
	GetPlayerReserveParachuteTintIndex=function(player--[[@param player integer]],index--[[@param index integer*]])return InvokeVoid(0xD5A016BC3C09CF40,player,index)end;
	--[=[tints 0- 13
0 - unkown
1 - unkown
2 - unkown
3 - unkown
4 - unkown]=]
	SetPlayerParachutePackTintIndex=function(player--[[@param player integer]],tintIndex--[[@param tintIndex integer]])return InvokeVoid(0x93B0FB27C9A04060,player,tintIndex)end;
	GetPlayerParachutePackTintIndex=function(player--[[@param player integer]],tintIndex--[[@param tintIndex integer*]])return InvokeVoid(0x6E9C742F340CE5A2,player,tintIndex)end;
	SetPlayerHasReserveParachute=function(player--[[@param player integer]])return InvokeVoid(0x7DDAB28D31FAC363,player)end;
	GetPlayerHasReserveParachute=function(player--[[@param player integer]])return InvokeBool(0x5DDFE2FF727F3CA3,player)end;---@return boolean
	SetPlayerCanLeaveParachuteSmokeTrail=function(player--[[@param player integer]],enabled--[[@param enabled boolean]])return InvokeVoid(0xF401B182DBA8AF53,player,enabled)end;
	SetPlayerParachuteSmokeTrailColor=function(player--[[@param player integer]],r--[[@param r integer]],g--[[@param g integer]],b--[[@param b integer]])return InvokeVoid(0x8217FD371A4625CF,player,r,g,b)end;
	GetPlayerParachuteSmokeTrailColor=function(player--[[@param player integer]],r--[[@param r integer*]],g--[[@param g integer*]],b--[[@param b integer*]])return InvokeVoid(0xEF56DBABD3CD4887,player,r,g,b)end;
	--[=[example:

flags: 0-6

PLAYER::SET_PLAYER_RESET_FLAG_PREFER_REAR_SEATS(PLAYER::PLAYER_ID(), 6);

wouldnt the flag be the seatIndex?]=]
	SetPlayerPhonePaletteIdx=function(player--[[@param player integer]],flags--[[@param flags integer]])return InvokeVoid(0x11D5F725F0E780E0,player,flags)end;
	SetPlayerNoiseMultiplier=function(player--[[@param player integer]],multiplier--[[@param multiplier number]])return InvokeVoid(0xDB89EF50FF25FCE9,player,multiplier+.0)end;
	--[=[Values around 1.0f to 2.0f used in game scripts.]=]
	SetPlayerSneakingNoiseMultiplier=function(player--[[@param player integer]],multiplier--[[@param multiplier number]])return InvokeVoid(0xB2C1A29588A9F47C,player,multiplier+.0)end;
	CanPedHearPlayer=function(player--[[@param player integer]],ped--[[@param ped integer]])return InvokeBool(0xF297383AA91DCA29,player,ped)end;---@return boolean
	--[=[This is to make the player walk without accepting input from INPUT.

gaitType is in increments of 100s. 2000, 500, 300, 200, etc.

p4 is always 1 and p5 is always 0.

C# Example :

Function.Call(Hash.SIMULATE_PLAYER_INPUT_GAIT, Game.Player, 1.0f, 100, 1.0f, 1, 0); //Player will go forward for 100ms]=]
	SimulatePlayerInputGait=function(player--[[@param player integer]],amount--[[@param amount number]],gaitType--[[@param gaitType integer]],speed--[[@param speed number]],p4--[[@param p4 boolean]],p5--[[@param p5 boolean]],p6--[[@param p6 any]])return InvokeVoid(0x477D5D63E63ECA5D,player,amount+.0,gaitType,speed+.0,p4,p5,p6)end;
	ResetPlayerInputGait=function(player--[[@param player integer]])return InvokeVoid(0x19531C47A2ABD691,player)end;
	SetAutoGiveParachuteWhenEnterPlane=function(player--[[@param player integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x9F343285A00B4BB6,player,toggle)end;
	SetAutoGiveScubaGearWhenExitVehicle=function(player--[[@param player integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xD2B315B6689D537D,player,toggle)end;
	SetPlayerStealthPerceptionModifier=function(player--[[@param player integer]],value--[[@param value number]])return InvokeVoid(0x4E9021C1FCDD507A,player,value+.0)end;
	IsRemotePlayerInNonClonedVehicle=function(player--[[@param player integer]])return InvokeBool(0x690A61A6D13583F6,player)end;---@return boolean
	IncreasePlayerJumpSuppressionRange=function(player--[[@param player integer]])return InvokeVoid(0x9EDD76E87D5D51BA,player)end;
	SetPlayerSimulateAiming=function(player--[[@param player integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xC54C95DA968EC5B5,player,toggle)end;
	SetPlayerClothPinFrames=function(player--[[@param player integer]],p1--[[@param p1 integer]])return InvokeVoid(0x749FADDF97DFE930,player,p1)end;
	--[=[Every occurrence was either 0 or 2.]=]
	SetPlayerClothPackageIndex=function(index--[[@param index integer]])return InvokeVoid(0x9F7BBA2EA6372500,index)end;
	--[=[6 matches across 4 scripts. 5 occurrences were 240. The other was 255.]=]
	SetPlayerClothLockCounter=function(value--[[@param value integer]])return InvokeVoid(0x14D913B777DFF5DA,value)end;
	--[=[Only 1 match. ob_sofa_michael.

PLAYER::PLAYER_ATTACH_VIRTUAL_BOUND(-804.5928f, 173.1801f, 71.68436f, 0f, 0f, 0.590625f, 1f, 0.7f);1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1;]=]
	PlayerAttachVirtualBound=function(p0--[[@param p0 number]],p1--[[@param p1 number]],p2--[[@param p2 number]],p3--[[@param p3 number]],p4--[[@param p4 number]],p5--[[@param p5 number]],p6--[[@param p6 number]],p7--[[@param p7 number]])return InvokeVoid(0xED51733DC73AED51,p0+.0,p1+.0,p2+.0,p3+.0,p4+.0,p5+.0,p6+.0,p7+.0)end;
	--[=[1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1;]=]
	PlayerDetachVirtualBound=function()return InvokeVoid(0x1DD5897E2FA6E7C9)end;
	HasPlayerBeenSpottedInStolenVehicle=function(player--[[@param player integer]])return InvokeBool(0xD705740BB0A1CF4C,player)end;---@return boolean
	--[=[Returns true if an unk value is greater than 0.0f]=]
	IsPlayerBattleAware=function(player--[[@param player integer]])return InvokeBool(0x38D28DA81E4E9BF9,player)end;---@return boolean
	GetPlayerReceivedBattleEventRecently=function(player--[[@param player integer]],p1--[[@param p1 integer]],p2--[[@param p2 boolean]])return InvokeBool(0xBC0753C9CA14B506,player,p1,p2)end;---@return boolean
	--[=[Appears only 3 times in the scripts, more specifically in michael1.ysc

-
This can be used to prevent dying if you are "out of the world"]=]
	ExtendWorldBoundaryForPlayer=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0x5006D96C995A5827,x+.0,y+.0,z+.0)end;
	ResetWorldBoundaryForPlayer=function()return InvokeVoid(0xDA1DF03D5A315F4E)end;
	--[=[Returns true if the player is riding a train.]=]
	IsPlayerRidingTrain=function(player--[[@param player integer]])return InvokeBool(0x4EC12697209F2196,player)end;---@return boolean
	HasPlayerLeftTheWorld=function(player--[[@param player integer]])return InvokeBool(0xD55DDFB47991A294,player)end;---@return boolean
	SetPlayerLeavePedBehind=function(player--[[@param player integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xFF300C7649724A0B,player,toggle)end;
	--[=[p1 was always 5.
p4 was always false.]=]
	SetPlayerParachuteVariationOverride=function(player--[[@param player integer]],p1--[[@param p1 integer]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 boolean]])return InvokeVoid(0xD9284A8C0D48352C,player,p1,p2,p3,p4)end;
	ClearPlayerParachuteVariationOverride=function(player--[[@param player integer]])return InvokeVoid(0x0F4CC924CF8C7B21,player)end;
	SetPlayerParachuteModelOverride=function(player--[[@param player integer]],model--[[@param model integer]])return InvokeVoid(0x977DB4641F6FC3DB,player,model)end;
	SetPlayerReserveParachuteModelOverride=function(player--[[@param player integer]],model--[[@param model integer]])return InvokeVoid(0x0764486AEDE748DB,player,model)end;
	GetPlayerParachuteModelOverride=function(player--[[@param player integer]])return InvokeInt(0xC219887CA3E65C41,player)end;---@return integer
	GetPlayerReserveParachuteModelOverride=function(player--[[@param player integer]])return InvokeInt(0x37FAAA68DCA9D08D,player)end;---@return integer
	ClearPlayerParachuteModelOverride=function(player--[[@param player integer]])return InvokeVoid(0x8753997EB5F6EE3F,player)end;
	ClearPlayerReserveParachuteModelOverride=function(player--[[@param player integer]])return InvokeVoid(0x290D248E25815AE8,player)end;
	SetPlayerParachutePackModelOverride=function(player--[[@param player integer]],model--[[@param model integer]])return InvokeVoid(0xDC80A4C2F18A2B64,player,model)end;
	ClearPlayerParachutePackModelOverride=function(player--[[@param player integer]])return InvokeVoid(0x10C54E4389C12B42,player)end;
	DisablePlayerVehicleRewards=function(player--[[@param player integer]])return InvokeVoid(0xC142BE3BB9CE125F,player)end;
	SetPlayerSpectatedVehicleRadioOverride=function(p0--[[@param p0 boolean]])return InvokeVoid(0x2F7CEB6520288061,p0)end;
	SetPlayerBluetoothState=function(player--[[@param player integer]],state--[[@param state boolean]])return InvokeVoid(0x5DC40A8869C22141,player,state)end;
	IsPlayerBluetoothEnable=function(player--[[@param player integer]])return InvokeBool(0x65FAEE425DE637B0,player)end;---@return boolean
	DisableCameraViewModeCycle=function(player--[[@param player integer]])return InvokeVoid(0x5501B7A5CDB79D37,player)end;
	GetPlayerFakeWantedLevel=function(player--[[@param player integer]])return InvokeInt(0x56105E599CAB0EFA,player)end;---@return integer
	SetPlayerCanDamagePlayer=function(player1--[[@param player1 integer]],player2--[[@param player2 integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x55FCC0C390620314,player1,player2,toggle)end;
	SetApplyWaypointOfPlayer=function(player--[[@param player integer]],hudColor--[[@param hudColor integer]])return InvokeVoid(0x2382AB11450AE7BA,player,hudColor)end;
	IsPlayerVehicleWeaponToggledToNonHoming=function(p0--[[@param p0 any]])return InvokeBool(0x6E4361FF3E8CD7CA,p0)end;---@return boolean
	--[=[Unsets playerPed+330 if the current weapon has certain flags.]=]
	SetPlayerVehicleWeaponToNonHoming=function(p0--[[@param p0 any]])return InvokeVoid(0x237440E46D918649,p0)end;
	SetPlayerHomingDisabledForAllVehicleWeapons=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0xEE4EBDD2593BA844,p0,p1)end;
	AddPlayerTargetableEntity=function(player--[[@param player integer]],entity--[[@param entity integer]])return InvokeVoid(0x9097EB6D4BB9A12A,player,entity)end;
	RemovePlayerTargetableEntity=function(player--[[@param player integer]],entity--[[@param entity integer]])return InvokeVoid(0x9F260BFB59ADBCA3,player,entity)end;
	SetPlayerPreviousVariationData=function(player--[[@param player integer]],p1--[[@param p1 integer]],p2--[[@param p2 integer]],p3--[[@param p3 any]],p4--[[@param p4 any]],p5--[[@param p5 any]])return InvokeVoid(0x7BAE68775557AE0B,player,p1,p2,p3,p4,p5)end;
	--[=[Resets values set by SET_SCRIPT_FIRE_POSITION]=]
	RemoveScriptFirePosition=function()return InvokeVoid(0x7148E0F43D11F0D9)end;
	SetScriptFirePosition=function(coordX--[[@param coordX number]],coordY--[[@param coordY number]],coordZ--[[@param coordZ number]])return InvokeVoid(0x70A382ADEC069DD3,coordX+.0,coordY+.0,coordZ+.0)end;
}
_G.Recording={
	ReplayStartEvent=function(p0--[[@param p0 integer]])return InvokeVoid(0x48621C9FCA3EBD28,p0)end;
	ReplayStopEvent=function()return InvokeVoid(0x81CBAE94390F9F89)end;
	ReplayCancelEvent=function()return InvokeVoid(0x13B350B8AD0EEE10)end;
	ReplayRecordBackForTime=function(p0--[[@param p0 number]],p1--[[@param p1 number]],p2--[[@param p2 integer]])return InvokeVoid(0x293220DA1B46CEBC,p0+.0,p1+.0,p2)end;
	--[=[-This function appears to be deprecated/ unused. Tracing the call internally leads to a _nullsub -

first one seems to be a string of a mission name, second one seems to be a bool/toggle

p1 was always 0.
]=]
	ReplayCheckForEventThisFrame=function(missionNameLabel--[[@param missionNameLabel string]],p1--[[@param p1 any]])return InvokeVoid(0x208784099002BC30,missionNameLabel,p1)end;
	--[=[This disable the recording feature and has to be called every frame.]=]
	ReplayPreventRecordingThisFrame=function()return InvokeVoid(0xEB2D525B57F42B40)end;
	ReplayResetEventInfo=function()return InvokeVoid(0xF854439EFBB3B583)end;
	--[=[This will disable the ability to make camera changes in R* Editor.]=]
	ReplayDisableCameraMovementThisFrame=function()return InvokeVoid(0xAF66DCEE6609B148)end;
	--[=[Does nothing (it's a nullsub).]=]
	RecordGreatestMoment=function(p0--[[@param p0 integer]],p1--[[@param p1 integer]],p2--[[@param p2 integer]])return InvokeVoid(0x66972397E0757E7A,p0,p1,p2)end;
	--[=[Starts recording a replay.
If mode is 0, turns on action replay.
If mode is 1, starts recording.
If already recording a replay, does nothing.]=]
	StartReplayRecording=function(mode--[[@param mode integer]])return InvokeVoid(0xC3AC2FFF9612AC81,mode)end;
	--[=[Stops recording and saves the recorded clip.]=]
	StopReplayRecording=function()return InvokeVoid(0x071A5197D6AFC8B3)end;
	--[=[Stops recording and discards the recorded clip.]=]
	CancelReplayRecording=function()return InvokeVoid(0x88BB3507ED41A240)end;
	SaveReplayRecording=function()return InvokeBool(0x644546EC5287471B)end;---@return boolean
	--[=[Checks if you're recording, returns TRUE when you start recording (F1) or turn on action replay (F2)

mov al, cs:g_bIsRecordingGameplay // byte_141DD0CD0 in b944
retn]=]
	IsReplayRecording=function()return InvokeBool(0x1897CA71995A90B4)end;---@return boolean
	IsReplayInitialized=function()return InvokeBool(0xDF4B952F7D381B95)end;---@return boolean
	IsReplayAvailable=function()return InvokeBool(0x4282E08174868BE3)end;---@return boolean
	IsReplayRecordSpaceAvailable=function(p0--[[@param p0 boolean]])return InvokeBool(0x33D47E85B476ABCD,p0)end;---@return boolean
}
_G.Replay={
	--[=[Does nothing (it's a nullsub).]=]
	RegisterEffectForReplayEditor=function(p0--[[@param p0 string]],p1--[[@param p1 boolean]])return InvokeVoid(0x7E2BD3EF6C205F09,p0,p1)end;
	--[=[Returns a bool if interior rendering is disabled, if yes, all "normal" rendered interiors are invisible]=]
	ReplaySystemHasRequestedAScriptCleanup=function()return InvokeBool(0x95AB8B5C992C7B58)end;---@return boolean
	--[=[Disables some other rendering (internal)]=]
	SetScriptsHaveCleanedUpForReplaySystem=function()return InvokeVoid(0x5AD3932DAEB1E5D3)end;
	SetReplaySystemPausedForSave=function(p0--[[@param p0 boolean]])return InvokeVoid(0xE058175F8EAFE79A,p0)end;
	--[=[Sets (almost, not sure) all Rockstar Editor values (bIsRecording etc) to 0.]=]
	ReplayControlShutdown=function()return InvokeVoid(0x3353D13F09307691)end;
	--[=[Please note that you will need to call DO_SCREEN_FADE_IN after exiting the Rockstar Editor when you call this.]=]
	ActivateRockstarEditor=function(p0--[[@param p0 integer]])return InvokeVoid(0x49DA8145672B2725,p0)end;
}
_G.Savemigration={
	SavemigrationIsMpEnabled=function()return InvokeBool(0x84B418E93894AC1C)end;---@return boolean
	SavemigrationMpRequestAccounts=function()return InvokeBool(0x85F41F9225D08C72)end;---@return boolean
	SavemigrationMpGetAccountsStatus=function()return InvokeInt(0xC8CB5999919EA2CA)end;---@return integer
	SavemigrationMpNumAccounts=function()return InvokeInt(0x77A16200E18E0C55)end;---@return integer
	SavemigrationMpGetAccount=function(p0--[[@param p0 integer]],p1--[[@param p1 any*]])return InvokeBool(0xFCE2747EEF1D05FC,p0,p1)end;---@return boolean
	SavemigrationMpRequestStatus=function()return InvokeBool(0xE5E9746A66359F9D)end;---@return boolean
	SavemigrationMpGetStatus=function()return InvokeInt(0x690B76BD2763E068)end;---@return integer
}
_G.Script={
	RequestScript=function(scriptName--[[@param scriptName string]])return InvokeVoid(0x6EB5F71AA68F2E8E,scriptName)end;
	SetScriptAsNoLongerNeeded=function(scriptName--[[@param scriptName string]])return InvokeVoid(0xC90D2DCACD56184C,scriptName)end;
	--[=[Returns if a script has been loaded into the game. Used to see if a script was loaded after requesting.]=]
	HasScriptLoaded=function(scriptName--[[@param scriptName string]])return InvokeBool(0xE6CC9F3BA0FB9EF1,scriptName)end;---@return boolean
	DoesScriptExist=function(scriptName--[[@param scriptName string]])return InvokeBool(0xFC04745FBE67C19A,scriptName)end;---@return boolean
	--[=[formerly _REQUEST_STREAMED_SCRIPT]=]
	RequestScriptWithNameHash=function(scriptHash--[[@param scriptHash integer]])return InvokeVoid(0xD62A67D26D9653E6,scriptHash)end;
	SetScriptWithNameHashAsNoLongerNeeded=function(scriptHash--[[@param scriptHash integer]])return InvokeVoid(0xC5BC038960E9DB27,scriptHash)end;
	HasScriptWithNameHashLoaded=function(scriptHash--[[@param scriptHash integer]])return InvokeBool(0x5F0F0C783EB16C04,scriptHash)end;---@return boolean
	DoesScriptWithNameHashExist=function(scriptHash--[[@param scriptHash integer]])return InvokeBool(0xF86AA3C56BA31381,scriptHash)end;---@return boolean
	TerminateThread=function(threadId--[[@param threadId integer]])return InvokeVoid(0xC8B189ED9138BCD4,threadId)end;
	IsThreadActive=function(threadId--[[@param threadId integer]])return InvokeBool(0x46E9AE36D8FA6417,threadId)end;---@return boolean
	GetNameOfScriptWithThisId=function(threadId--[[@param threadId integer]])return InvokeString(0x05A42BA9FC8DA96B,threadId)end;---@return string
	--[=[Starts a new iteration of the current threads.
Call this first, then SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID (0x30B4FA1C82DD4B9F)]=]
	ScriptThreadIteratorReset=function()return InvokeVoid(0xDADFADA5A20143A8)end;
	--[=[If the function returns 0, the end of the iteration has been reached.]=]
	ScriptThreadIteratorGetNextThreadId=function()return InvokeInt(0x30B4FA1C82DD4B9F)end;---@return integer
	GetIdOfThisThread=function()return InvokeInt(0xC30338E8088E2E21)end;---@return integer
	TerminateThisThread=function()return InvokeVoid(0x1090044AD1DA76FA)end;
	--[=[Gets the number of instances of the specified script is currently running.

Actually returns numRefs - 1.
if (program)
	v3 = rage::scrProgram::GetNumRefs(program) - 1;
return v3;]=]
	GetNumberOfThreadsRunningTheScriptWithThisHash=function(scriptHash--[[@param scriptHash integer]])return InvokeInt(0x2C83A9DA6BFFC4F9,scriptHash)end;---@return integer
	GetThisScriptName=function()return InvokeString(0x442E0A7EDE4A738A)end;---@return string
	GetHashOfThisScriptName=function()return InvokeInt(0x8A1C8B1738FFE87E)end;---@return integer
	--[=[eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)]=]
	GetNumberOfEvents=function(eventGroup--[[@param eventGroup integer]])return InvokeInt(0x5F92A689A06620AA,eventGroup)end;---@return integer
	--[=[eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)]=]
	GetEventExists=function(eventGroup--[[@param eventGroup integer]],eventIndex--[[@param eventIndex integer]])return InvokeBool(0x936E6168A9BCEDB5,eventGroup,eventIndex)end;---@return boolean
	--[=[eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)]=]
	GetEventAtIndex=function(eventGroup--[[@param eventGroup integer]],eventIndex--[[@param eventIndex integer]])return InvokeInt(0xD8F66A3A60C62153,eventGroup,eventIndex)end;---@return integer
	--[=[eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)

Note: eventDataSize is NOT the size in bytes, it is the size determined by the SIZE_OF operator (RAGE Script operator, not C/C++ sizeof). That is, the size in bytes divided by 8 (script variables are always 8-byte aligned!).]=]
	GetEventData=function(eventGroup--[[@param eventGroup integer]],eventIndex--[[@param eventIndex integer]],eventData--[[@param eventData any*]],eventDataSize--[[@param eventDataSize integer]])return InvokeBool(0x2902843FCD2B2D79,eventGroup,eventIndex,eventData,eventDataSize)end;---@return boolean
	--[=[eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)

Note: eventDataSize is NOT the size in bytes, it is the size determined by the SIZE_OF operator (RAGE Script operator, not C/C++ sizeof). That is, the size in bytes divided by 8 (script variables are always 8-byte aligned!).

playerBits (also known as playersToBroadcastTo) is a bitset that indicates which players this event should be sent to. In order to send the event to specific players only, use (1 << playerIndex). Set all bits if it should be broadcast to all players.]=]
	TriggerScriptEvent=function(eventGroup--[[@param eventGroup integer]],eventData--[[@param eventData any*]],eventDataSize--[[@param eventDataSize integer]],playerBits--[[@param playerBits integer]])return InvokeVoid(0x5AE99C571D5BBE5D,eventGroup,eventData,eventDataSize,playerBits)end;
	ShutdownLoadingScreen=function()return InvokeVoid(0x078EBE9809CCD637)end;
	SetNoLoadingScreen=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x5262CC1995D07E09,toggle)end;
	GetNoLoadingScreen=function()return InvokeBool(0x18C1270EA7F199BC)end;---@return boolean
	CommitToLoadingscreenSelction=function()return InvokeVoid(0xB1577667C3708F9B)end;
	--[=[Returns true if bit 0 in GtaThread+0x154 is set.]=]
	BgIsExitflagSet=function()return InvokeBool(0x836B62713E0534CA)end;---@return boolean
	--[=[Sets bit 1 in GtaThread+0x154]=]
	BgSetExitflagResponse=function()return InvokeVoid(0x760910B49D2B98EA)end;
	--[=[Hashed version of BG_START_CONTEXT.]=]
	BgStartContextHash=function(contextHash--[[@param contextHash integer]])return InvokeVoid(0x75B18E49607874C7,contextHash)end;
	--[=[Hashed version of BG_END_CONTEXT.]=]
	BgEndContextHash=function(contextHash--[[@param contextHash integer]])return InvokeVoid(0x107E5CC7CA942BC1,contextHash)end;
	--[=[Inserts the given context into the background scripts context map.]=]
	BgStartContext=function(contextName--[[@param contextName string]])return InvokeVoid(0x9D5A25BADB742ACD,contextName)end;
	--[=[Deletes the given context from the background scripts context map.]=]
	BgEndContext=function(contextName--[[@param contextName string]])return InvokeVoid(0xDC2BACD920D0A0DD,contextName)end;
	BgDoesLaunchParamExist=function(scriptIndex--[[@param scriptIndex integer]],p1--[[@param p1 string]])return InvokeBool(0x0F6F1EBBC4E1D5E6,scriptIndex,p1)end;---@return boolean
	BgGetLaunchParamValue=function(scriptIndex--[[@param scriptIndex integer]],p1--[[@param p1 string]])return InvokeInt(0x22E21FBCFC88C149,scriptIndex,p1)end;---@return integer
	BgGetScriptIdFromNameHash=function(p0--[[@param p0 integer]])return InvokeInt(0x829CD22E043A2577,p0)end;---@return integer
	--[=[See TRIGGER_SCRIPT_EVENT]=]
	SendTuScriptEvent=function(eventGroup--[[@param eventGroup integer]],eventData--[[@param eventData any*]],eventDataSize--[[@param eventDataSize integer]],playerBits--[[@param playerBits integer]])return InvokeVoid(0xA40CC53DF8E50837,eventGroup,eventData,eventDataSize,playerBits)end;
}
_G.Security={
	--[=[Registers a protected variable that will be checked for modifications by the anticheat]=]
	RegisterScriptVariable=function(variable--[[@param variable any*]])return InvokeVoid(0x40EB1EFD921822BC,variable)end;
	UnregisterScriptVariable=function(variable--[[@param variable any*]])return InvokeVoid(0x340A36A700E99699,variable)end;
	ForceCheckScriptVariables=function()return InvokeVoid(0x8E580AB902917360)end;
}
_G.Shapetest={
	--[=[Asynchronously starts a line-of-sight (raycast) world probe shape test.

Use the handle with 0x3D87450E15D98694 or 0x65287525D951F6BE until it returns 0 or 2.

p8 is a bit mask with bits 1, 2 and/or 4, relating to collider types; 4 should usually be used.]=]
	StartShapeTestLosProbe=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],flags--[[@param flags integer]],entity--[[@param entity integer]],p8--[[@param p8 integer]])return InvokeInt(0x7EE9F5D83DD4F90E,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,flags,entity,p8)end;---@return integer
	--[=[Does the same as 0x7EE9F5D83DD4F90E, except blocking until the shape test completes.]=]
	StartExpensiveSynchronousShapeTestLosProbe=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],flags--[[@param flags integer]],entity--[[@param entity integer]],p8--[[@param p8 integer]])return InvokeInt(0x377906D8A31E5586,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,flags,entity,p8)end;---@return integer
	StartShapeTestBoundingBox=function(entity--[[@param entity integer]],flags1--[[@param flags1 integer]],flags2--[[@param flags2 integer]])return InvokeInt(0x052837721A854EC7,entity,flags1,flags2)end;---@return integer
	StartShapeTestBox=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],dimX--[[@param dimX number]],dimY--[[@param dimY number]],dimZ--[[@param dimZ number]],rotX--[[@param rotX number]],rotY--[[@param rotY number]],rotZ--[[@param rotZ number]],p9--[[@param p9 any]],flags--[[@param flags integer]],entity--[[@param entity integer]],p12--[[@param p12 any]])return InvokeInt(0xFE466162C4401D18,x+.0,y+.0,z+.0,dimX+.0,dimY+.0,dimZ+.0,rotX+.0,rotY+.0,rotZ+.0,p9,flags,entity,p12)end;---@return integer
	StartShapeTestBound=function(entity--[[@param entity integer]],flags1--[[@param flags1 integer]],flags2--[[@param flags2 integer]])return InvokeInt(0x37181417CE7C8900,entity,flags1,flags2)end;---@return integer
	--[=[Raycast from point to point, where the ray has a radius. 

flags:
vehicles=10
peds =12

Iterating through flags yields many ped / vehicle/ object combinations

p9 = 7, but no idea what it does

Entity is an entity to ignore]=]
	StartShapeTestCapsule=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],radius--[[@param radius number]],flags--[[@param flags integer]],entity--[[@param entity integer]],p9--[[@param p9 integer]])return InvokeInt(0x28579D1B8F8AAC80,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,radius+.0,flags,entity,p9)end;---@return integer
	StartShapeTestSweptSphere=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],radius--[[@param radius number]],flags--[[@param flags integer]],entity--[[@param entity integer]],p9--[[@param p9 any]])return InvokeInt(0xE6AC6C45FBE83004,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,radius+.0,flags,entity,p9)end;---@return integer
	--[=[Returns a ShapeTest handle that can be used with GET_SHAPE_TEST_RESULT.

In its only usage in game scripts its called with flag set to 511, entity to player_ped_id and flag2 set to 7]=]
	StartShapeTestMouseCursorLosProbe=function(pVec1--[[@param pVec1 V3*]],pVec2--[[@param pVec2 V3*]],flag--[[@param flag integer]],entity--[[@param entity integer]],flag2--[[@param flag2 integer]])return InvokeInt(0xFF6BE494C7987F34,pVec1,pVec2,flag,entity,flag2)end;---@return integer
	--[=[Returns the result of a shape test: 0 if the handle is invalid, 1 if the shape test is still pending, or 2 if the shape test has completed, and the handle should be invalidated.

When used with an asynchronous shape test, this native should be looped until returning 0 or 2, after which the handle is invalidated.]=]
	GetShapeTestResult=function(shapeTestHandle--[[@param shapeTestHandle integer]],hit--[[@param hit boolean*]],endCoords--[[@param endCoords V3*]],surfaceNormal--[[@param surfaceNormal V3*]],entityHit--[[@param entityHit integer*]])return InvokeInt(0x3D87450E15D98694,shapeTestHandle,hit,endCoords,surfaceNormal,entityHit)end;---@return integer
	--[=[Returns the result of a shape test, also returning the material of any touched surface.

When used with an asynchronous shape test, this native should be looped until returning 0 or 2, after which the handle is invalidated.

Unless the return value is 2, the other return values are undefined.]=]
	GetShapeTestResultIncludingMaterial=function(shapeTestHandle--[[@param shapeTestHandle integer]],hit--[[@param hit boolean*]],endCoords--[[@param endCoords V3*]],surfaceNormal--[[@param surfaceNormal V3*]],materialHash--[[@param materialHash integer*]],entityHit--[[@param entityHit integer*]])return InvokeInt(0x65287525D951F6BE,shapeTestHandle,hit,endCoords,surfaceNormal,materialHash,entityHit)end;---@return integer
	--[=[Invalidates the entity handle passed by removing the fwScriptGuid from the entity. This should be used when receiving an ambient entity from shape testing natives, but can also be used for other natives returning an 'irrelevant' entity handle.]=]
	ReleaseScriptGuidFromEntity=function(entityHit--[[@param entityHit integer]])return InvokeVoid(0x2B3334BCA57CD799,entityHit)end;
}
_G.Socialclub={
	ScInboxGetTotalNumMessages=function()return InvokeInt(0x03A93FF1A2CA0864)end;---@return integer
	ScInboxGetMessageTypeAtIndex=function(msgIndex--[[@param msgIndex integer]])return InvokeInt(0xBB8EA16ECBC976C4,msgIndex)end;---@return integer
	ScInboxGetMessageIsReadAtIndex=function(msgIndex--[[@param msgIndex integer]])return InvokeBool(0x93028F1DB42BFD08,msgIndex)end;---@return boolean
	ScInboxSetMessageAsReadAtIndex=function(msgIndex--[[@param msgIndex integer]])return InvokeBool(0x2C015348CF19CA1D,msgIndex)end;---@return boolean
	ScInboxMessageGetDataInt=function(p0--[[@param p0 integer]],context--[[@param context string]],out--[[@param out integer*]])return InvokeBool(0xA00EFE4082C4056E,p0,context,out)end;---@return boolean
	ScInboxMessageGetDataBool=function(p0--[[@param p0 integer]],p1--[[@param p1 string]])return InvokeBool(0xFFE5C16F402D851D,p0,p1)end;---@return boolean
	ScInboxMessageGetDataString=function(p0--[[@param p0 integer]],context--[[@param context string]],out--[[@param out integer*]])return InvokeBool(0x7572EF42FC6A9B6D,p0,context,out)end;---@return boolean
	ScInboxMessageDoApply=function(p0--[[@param p0 integer]])return InvokeBool(0x9A2C8064B6C1E41A,p0)end;---@return boolean
	ScInboxMessageGetRawTypeAtIndex=function(p0--[[@param p0 integer]])return InvokeString(0xF3E31D16CBDCB304,p0)end;---@return string
	ScInboxMessagePushGamerT0RecipList=function(gamerHandle--[[@param gamerHandle any*]])return InvokeVoid(0xDA024BDBD600F44A,gamerHandle)end;
	ScInboxSendUgcstatupdateToRecipList=function(data--[[@param data any*]])return InvokeVoid(0xA68D3D229F4F3B06,data)end;
	ScInboxMessageGetUgcdata=function(p0--[[@param p0 integer]],p1--[[@param p1 any*]])return InvokeBool(0x69D82604A1A5A254,p0,p1)end;---@return boolean
	ScInboxSendBountyToRecipList=function(data--[[@param data any*]])return InvokeBool(0x6AFD2CD753FEEF83,data)end;---@return boolean
	ScInboxGetBountyDataAtIndex=function(index--[[@param index integer]],outData--[[@param outData any*]])return InvokeBool(0x87E0052F08BD64E6,index,outData)end;---@return boolean
	ScEmailRetrieveEmails=function(offset--[[@param offset integer]],limit--[[@param limit integer]])return InvokeVoid(0x040ADDCBAFA1018A,offset,limit)end;
	ScEmailGetRetrievalStatus=function()return InvokeInt(0x16DA8172459434AA)end;---@return integer
	ScEmailGetNumRetrievedEmails=function()return InvokeInt(0x7DB18CA8CAD5B098)end;---@return integer
	ScEmailGetEmailAtIndex=function(p0--[[@param p0 integer]],p1--[[@param p1 any*]])return InvokeBool(0x4737980E8A283806,p0,p1)end;---@return boolean
	ScEmailDeleteEmails=function(p0--[[@param p0 any*]],p1--[[@param p1 any]])return InvokeVoid(0x44ACA259D67651DB,p0,p1)end;
	ScEmailMessagePushGamerToRecipList=function(gamerHandle--[[@param gamerHandle any*]])return InvokeVoid(0x2330C12A7A605D16,gamerHandle)end;
	ScEmailMessageClearRecipList=function()return InvokeVoid(0x55DF6DB45179236E)end;
	ScEmailSendEmail=function(p0--[[@param p0 string]])return InvokeVoid(0x116FB94DC4B79F17,p0)end;
	ScEmailSetCurrentEmailTag=function(p0--[[@param p0 any]])return InvokeBool(0x07DBD622D9533857,p0)end;---@return boolean
	ScCacheNewRockstarMsgs=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xBFA0A56A817C6C7D,toggle)end;
	ScHasNewRockstarMsg=function()return InvokeBool(0xBC1CC91205EC8D6E)end;---@return boolean
	ScGetNewRockstarMsg=function()return InvokeString(0xDF649C4E9AFDD788)end;---@return string
	ScPresenceAttrSetInt=function(attrHash--[[@param attrHash integer]],value--[[@param value integer]])return InvokeBool(0x1F1E9682483697C7,attrHash,value)end;---@return boolean
	ScPresenceAttrSetFloat=function(attrHash--[[@param attrHash integer]],value--[[@param value number]])return InvokeBool(0xC4C4575F62534A24,attrHash,value+.0)end;---@return boolean
	ScPresenceAttrSetString=function(attrHash--[[@param attrHash integer]],value--[[@param value string]])return InvokeBool(0x287F1F75D2803595,attrHash,value)end;---@return boolean
	ScPresenceSetActivityRating=function(p0--[[@param p0 any]],p1--[[@param p1 number]])return InvokeBool(0x487912FD248EFDDF,p0,p1+.0)end;---@return boolean
	ScGamerdataGetInt=function(name--[[@param name string]],value--[[@param value integer*]])return InvokeBool(0xC85A7127E7AD02AA,name,value)end;---@return boolean
	ScGamerdataGetFloat=function(name--[[@param name string]],value--[[@param value number*]])return InvokeBool(0xA770C8EEC6FB2AC5,name,value)end;---@return boolean
	ScGamerdataGetBool=function(name--[[@param name string]])return InvokeBool(0x8416FE4E4629D7D7,name)end;---@return boolean
	ScGamerdataGetString=function(name--[[@param name string]],value--[[@param value integer*]])return InvokeBool(0x7FFCBFEE44ECFABF,name,value)end;---@return boolean
	ScGamerdataGetActiveXpBonus=function(value--[[@param value number*]])return InvokeBool(0x2D874D4AE612A65F,value)end;---@return boolean
	--[=[Starts a task to check an entered string for profanity on the ROS/Social Club services.

See also: 1753344C770358AE, 82E4A58BABC15AE7.]=]
	ScProfanityCheckString=function(string--[[@param string string]],token--[[@param token integer*]])return InvokeBool(0x75632C5ECD7ED843,string,token)end;---@return boolean
	ScProfanityCheckStringUgc=function(string--[[@param string string]],token--[[@param token integer*]])return InvokeBool(0xEB2BF817463DFA28,string,token)end;---@return boolean
	ScProfanityGetCheckIsValid=function(token--[[@param token integer]])return InvokeBool(0x1753344C770358AE,token)end;---@return boolean
	ScProfanityGetCheckIsPending=function(token--[[@param token integer]])return InvokeBool(0x82E4A58BABC15AE7,token)end;---@return boolean
	ScProfanityGetStringPassed=function(token--[[@param token integer]])return InvokeBool(0x85535ACF97FC0969,token)end;---@return boolean
	ScProfanityGetStringStatus=function(token--[[@param token integer]])return InvokeInt(0x930DE22F07B1CCE3,token)end;---@return integer
	ScLicenseplateCheckString=function(p0--[[@param p0 string]],p1--[[@param p1 integer*]])return InvokeBool(0xF6BAAAF762E1BF40,p0,p1)end;---@return boolean
	ScLicenseplateGetCheckIsValid=function(p0--[[@param p0 any]])return InvokeBool(0xF22CA0FD74B80E7A,p0)end;---@return boolean
	ScLicenseplateGetCheckIsPending=function(p0--[[@param p0 any]])return InvokeBool(0x9237E334F6E43156,p0)end;---@return boolean
	ScLicenseplateGetCount=function(token--[[@param token integer]])return InvokeInt(0x700569DBA175A77C,token)end;---@return integer
	ScLicenseplateGetPlate=function(token--[[@param token integer]],plateIndex--[[@param plateIndex integer]])return InvokeString(0x1D4446A62D35B0D0,token,plateIndex)end;---@return string
	ScLicenseplateGetPlateData=function(token--[[@param token integer]],plateIndex--[[@param plateIndex integer]])return InvokeString(0x2E89990DDFF670C3,token,plateIndex)end;---@return string
	ScLicenseplateSetPlateData=function(oldPlateText--[[@param oldPlateText string]],newPlateText--[[@param newPlateText string]],plateData--[[@param plateData any*]])return InvokeBool(0xD0EE05FE193646EA,oldPlateText,newPlateText,plateData)end;---@return boolean
	ScLicenseplateAdd=function(plateText--[[@param plateText string]],plateData--[[@param plateData any*]],token--[[@param token integer*]])return InvokeBool(0x1989C6E6F67E76A8,plateText,plateData,token)end;---@return boolean
	ScLicenseplateGetAddIsPending=function(token--[[@param token integer]])return InvokeBool(0x07C61676E5BB52CD,token)end;---@return boolean
	ScLicenseplateGetAddStatus=function(token--[[@param token integer]])return InvokeInt(0x8147FFF6A718E1AD,token)end;---@return integer
	ScLicenseplateIsvalid=function(plateText--[[@param plateText string]],token--[[@param token integer*]])return InvokeBool(0x0F73393BAC7E6730,plateText,token)end;---@return boolean
	ScLicenseplateGetIsvalidIsPending=function(token--[[@param token integer]])return InvokeBool(0xD302E99EDF0449CF,token)end;---@return boolean
	ScLicenseplateGetIsvalidStatus=function(token--[[@param token integer]])return InvokeInt(0x5C4EBFFA98BDB41C,token)end;---@return integer
	ScCommunityEventIsActive=function()return InvokeBool(0xFF8F3A92B75ED67A)end;---@return boolean
	ScCommunityEventGetEventId=function()return InvokeInt(0x4ED9C8D6DA297639)end;---@return integer
	ScCommunityEventGetExtraDataInt=function(p0--[[@param p0 string]],p1--[[@param p1 integer*]])return InvokeBool(0x710BCDA8071EDED1,p0,p1)end;---@return boolean
	ScCommunityEventGetExtraDataFloat=function(p0--[[@param p0 string]],p1--[[@param p1 number*]])return InvokeBool(0x50A8A36201DBF83E,p0,p1)end;---@return boolean
	ScCommunityEventGetExtraDataString=function(p0--[[@param p0 string]],p1--[[@param p1 integer*]])return InvokeBool(0x9DE5D2F723575ED0,p0,p1)end;---@return boolean
	ScCommunityEventGetDisplayName=function(p0--[[@param p0 integer*]])return InvokeBool(0xC2C97EA97711D1AE,p0)end;---@return boolean
	ScCommunityEventIsActiveForType=function(p0--[[@param p0 string]])return InvokeBool(0x450819D8CF90C416,p0)end;---@return boolean
	ScCommunityEventGetEventIdForType=function(p0--[[@param p0 string]])return InvokeInt(0x4A7D6E727F941747,p0)end;---@return integer
	ScCommunityEventGetExtraDataIntForType=function(p0--[[@param p0 string]],p1--[[@param p1 integer*]],p2--[[@param p2 string]])return InvokeBool(0xE75A4A2E5E316D86,p0,p1,p2)end;---@return boolean
	ScCommunityEventGetExtraDataFloatForType=function(p0--[[@param p0 string]],p1--[[@param p1 number*]],p2--[[@param p2 string]])return InvokeBool(0x2570E26BE63964E3,p0,p1,p2)end;---@return boolean
	ScCommunityEventGetExtraDataStringForType=function(p0--[[@param p0 string]],p1--[[@param p1 integer*]],p2--[[@param p2 string]])return InvokeBool(0x1D12A56FC95BE92E,p0,p1,p2)end;---@return boolean
	ScCommunityEventGetDisplayNameForType=function(p0--[[@param p0 integer*]],p1--[[@param p1 string]])return InvokeBool(0x33DF47CC0642061B,p0,p1)end;---@return boolean
	ScCommunityEventIsActiveById=function(p0--[[@param p0 integer]])return InvokeBool(0xA468E0BE12B12C70,p0)end;---@return boolean
	ScCommunityEventGetExtraDataIntById=function(p0--[[@param p0 integer]],p1--[[@param p1 string]],p2--[[@param p2 integer*]])return InvokeBool(0x8CC469AB4D349B7C,p0,p1,p2)end;---@return boolean
	ScCommunityEventGetExtraDataFloatById=function(p0--[[@param p0 integer]],p1--[[@param p1 string]],p2--[[@param p2 number*]])return InvokeBool(0xC5A35C73B68F3C49,p0,p1,p2)end;---@return boolean
	ScCommunityEventGetExtraDataStringById=function(p0--[[@param p0 integer]],p1--[[@param p1 string]],p2--[[@param p2 integer*]])return InvokeBool(0x699E4A5C8C893A18,p0,p1,p2)end;---@return boolean
	ScCommunityEventGetDisplayNameById=function(p0--[[@param p0 integer]],p1--[[@param p1 integer*]])return InvokeBool(0x19853B5B17D77BCA,p0,p1)end;---@return boolean
	ScTransitionNewsShow=function(p0--[[@param p0 any]])return InvokeBool(0x6BFB12CE158E3DD4,p0)end;---@return boolean
	ScTransitionNewsShowTimed=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeBool(0xFE4C1D0D3B9CC17E,p0,p1)end;---@return boolean
	ScTransitionNewsShowNextItem=function()return InvokeBool(0xD8122C407663B995)end;---@return boolean
	ScTransitionNewsHasExtraDataTu=function()return InvokeBool(0x3001BEF2FECA3680)end;---@return boolean
	ScTransitionNewsGetExtraDataIntTu=function(p0--[[@param p0 string]],p1--[[@param p1 integer*]])return InvokeBool(0x92DA6E70EF249BD1,p0,p1)end;---@return boolean
	ScTransitionNewsEnd=function()return InvokeVoid(0x675721C9F644D161)end;
	ScPauseNewsInitStarterPack=function(p0--[[@param p0 any]])return InvokeBool(0xE4F6E8D07A2F0F51,p0)end;---@return boolean
	--[=[Fills some 0x30 sized struct]=]
	ScPauseNewsGetPendingStory=function(p0--[[@param p0 any]])return InvokeBool(0x8A4416C0DB05FA66,p0)end;---@return boolean
	ScPauseNewsShutdown=function()return InvokeVoid(0xEA95C0853A27888E)end;
	--[=[Returns the nickname of the logged-in Rockstar Social Club account.]=]
	ScAccountInfoGetNickname=function()return InvokeString(0x198D161F458ECC7F)end;---@return string
	ScAchievementInfoStatus=function(p0--[[@param p0 integer*]])return InvokeBool(0x225798743970412B,p0)end;---@return boolean
	--[=[Same as HAS_ACHIEVEMENT_BEEN_PASSED]=]
	ScHasAchievementBeenPassed=function(achievementId--[[@param achievementId integer]])return InvokeBool(0x418DC16FAE452C1C,achievementId)end;---@return boolean
}
_G.Stats={
	--[=[Example:

for (v_2 = 0; v_2 <= 4; v_2 += 1) {
    STATS::STAT_CLEAR_SLOT_FOR_RELOAD(v_2);
}]=]
	StatClearSlotForReload=function(statSlot--[[@param statSlot integer]])return InvokeBool(0xEB0A72181D4AA4AD,statSlot)end;---@return boolean
	StatLoad=function(statSlot--[[@param statSlot integer]])return InvokeBool(0xA651443F437B1CE6,statSlot)end;---@return boolean
	StatSave=function(p0--[[@param p0 integer]],p1--[[@param p1 boolean]],p2--[[@param p2 integer]],p3--[[@param p3 boolean]])return InvokeBool(0xE07BCA305B82D2FD,p0,p1,p2,p3)end;---@return boolean
	StatSetOpenSavetypeInJob=function(p0--[[@param p0 integer]])return InvokeVoid(0x5688585E6D563CD8,p0)end;
	StatLoadPending=function(statSlot--[[@param statSlot integer]])return InvokeBool(0xA1750FFAFA181661,statSlot)end;---@return boolean
	StatSavePending=function()return InvokeBool(0x7D3A583856F2C5AC)end;---@return boolean
	StatSavePendingOrRequested=function()return InvokeBool(0xBBB6AD006F1BBEA3)end;---@return boolean
	--[=[p0 is characterSlot? seems range from 0 to 2]=]
	StatDeleteSlot=function(p0--[[@param p0 integer]])return InvokeBool(0x49A49BED12794D70,p0)end;---@return boolean
	StatSlotIsLoaded=function(statSlot--[[@param statSlot integer]])return InvokeBool(0x0D0A9F0E7BD91E3C,statSlot)end;---@return boolean
	StatCloudSlotLoadFailed=function(p0--[[@param p0 integer]])return InvokeBool(0x7F2C4CDF2E82DF4C,p0)end;---@return boolean
	StatCloudSlotLoadFailedCode=function(p0--[[@param p0 any]])return InvokeInt(0xE496A53BA5F50A56,p0)end;---@return integer
	StatSetBlockSaves=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xF434A10BA01C37D0,toggle)end;
	StatGetBlockSaves=function()return InvokeBool(0x6A7F19756F1A9016)end;---@return boolean
	StatCloudSlotSaveFailed=function(p0--[[@param p0 any]])return InvokeBool(0x7E6946F68A38B74F,p0)end;---@return boolean
	StatClearPendingSaves=function(p0--[[@param p0 any]])return InvokeVoid(0xA8733668D1047B51,p0)end;
	StatLoadDirtyReadDetected=function()return InvokeBool(0xECB41AC6AB754401)end;---@return boolean
	StatClearDirtyReadDetected=function()return InvokeVoid(0x9B4BD21D69B1E609)end;
	StatGetLoadSafeToProgressToMpFromSp=function()return InvokeBool(0xC0E0D686DDFC6EAE)end;---@return boolean
	--[=[Returns stat hash based on dataType, statIndex/statId and characterSlot. Related to CStatsMpCharacterMappingData]=]
	GetStatHashForCharacterStat=function(dataType--[[@param dataType integer]],statIndex--[[@param statIndex integer]],charSlot--[[@param charSlot integer]])return InvokeInt(0xD69CE161FE614531,dataType,statIndex,charSlot)end;---@return integer
	--[=[Example:
 STATS::STAT_SET_INT(MISC::GET_HASH_KEY("MPPLY_KILLS_PLAYERS"), 1337, true);]=]
	StatSetInt=function(statName--[[@param statName integer]],value--[[@param value integer]],save--[[@param save boolean]])return InvokeBool(0xB3271D7AB655B441,statName,value,save)end;---@return boolean
	--[=[Example:
 STATS::STAT_SET_FLOAT(MISC::GET_HASH_KEY("MP0_WEAPON_ACCURACY"), 66.6f, true);]=]
	StatSetFloat=function(statName--[[@param statName integer]],value--[[@param value number]],save--[[@param save boolean]])return InvokeBool(0x4851997F37FE9B3C,statName,value+.0,save)end;---@return boolean
	--[=[Example:
 STATS::STAT_SET_BOOL(MISC::GET_HASH_KEY("MPPLY_MELEECHLENGECOMPLETED"), trur, true);]=]
	StatSetBool=function(statName--[[@param statName integer]],value--[[@param value boolean]],save--[[@param save boolean]])return InvokeBool(0x4B33C4243DE0C432,statName,value,save)end;---@return boolean
	--[=[The following values have been found in the decompiled scripts:
"RC_ABI1"
"RC_ABI2"
"RC_BA1"
"RC_BA2"
"RC_BA3"
"RC_BA3A"
"RC_BA3C"
"RC_BA4"
"RC_DRE1"
"RC_EPS1"
"RC_EPS2"
"RC_EPS3"
"RC_EPS4"
"RC_EPS5"
"RC_EPS6"
"RC_EPS7"
"RC_EPS8"
"RC_EXT1"
"RC_EXT2"
"RC_EXT3"
"RC_EXT4"
"RC_FAN1"
"RC_FAN2"
"RC_FAN3"
"RC_HAO1"
"RC_HUN1"
"RC_HUN2"
"RC_JOS1"
"RC_JOS2"
"RC_JOS3"
"RC_JOS4"
"RC_MAU1"
"RC_MIN1"
"RC_MIN2"
"RC_MIN3"
"RC_MRS1"
"RC_MRS2"
"RC_NI1"
"RC_NI1A"
"RC_NI1B"
"RC_NI1C"
"RC_NI1D"
"RC_NI2"
"RC_NI3"
"RC_OME1"
"RC_OME2"
"RC_PA1"
"RC_PA2"
"RC_PA3"
"RC_PA3A"
"RC_PA3B"
"RC_PA4"
"RC_RAM1"
"RC_RAM2"
"RC_RAM3"
"RC_RAM4"
"RC_RAM5"
"RC_SAS1"
"RC_TON1"
"RC_TON2"
"RC_TON3"
"RC_TON4"
"RC_TON5"]=]
	StatSetGxtLabel=function(statName--[[@param statName integer]],value--[[@param value string]],save--[[@param save boolean]])return InvokeBool(0x17695002FD8B2AE0,statName,value,save)end;---@return boolean
	--[=['value' is a structure to a structure, 'numFields' is how many fields there are in said structure (usually 7).

The structure looks like this:

int year
int month
int day
int hour
int minute
int second
int millisecond

The decompiled scripts use TIME::GET_POSIX_TIME to fill this structure.]=]
	StatSetDate=function(statName--[[@param statName integer]],value--[[@param value any*]],numFields--[[@param numFields integer]],save--[[@param save boolean]])return InvokeBool(0x2C29BFB64F4FCBE4,statName,value,numFields,save)end;---@return boolean
	StatSetString=function(statName--[[@param statName integer]],value--[[@param value string]],save--[[@param save boolean]])return InvokeBool(0xA87B2335D12531D7,statName,value,save)end;---@return boolean
	StatSetPos=function(statName--[[@param statName integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],save--[[@param save boolean]])return InvokeBool(0xDB283FDE680FE72E,statName,x+.0,y+.0,z+.0,save)end;---@return boolean
	StatSetMaskedInt=function(statName--[[@param statName integer]],p1--[[@param p1 integer]],p2--[[@param p2 integer]],p3--[[@param p3 integer]],save--[[@param save boolean]])return InvokeBool(0x7BBB1B54583ED410,statName,p1,p2,p3,save)end;---@return boolean
	StatSetUserId=function(statName--[[@param statName integer]],value--[[@param value string]],save--[[@param save boolean]])return InvokeBool(0x8CDDF1E452BABE11,statName,value,save)end;---@return boolean
	--[=[p1 always true.]=]
	StatSetCurrentPosixTime=function(statName--[[@param statName integer]],p1--[[@param p1 boolean]])return InvokeBool(0xC2F84B7F9C4D0C61,statName,p1)end;---@return boolean
	--[=[p2 appears to always be -1
]=]
	StatGetInt=function(statHash--[[@param statHash integer]],outValue--[[@param outValue integer*]],p2--[[@param p2 integer]])return InvokeBool(0x767FBC2AC802EF3D,statHash,outValue,p2)end;---@return boolean
	StatGetFloat=function(statHash--[[@param statHash integer]],outValue--[[@param outValue number*]],p2--[[@param p2 any]])return InvokeBool(0xD7AE6C9C9C6AC54C,statHash,outValue,p2)end;---@return boolean
	StatGetBool=function(statHash--[[@param statHash integer]],outValue--[[@param outValue boolean*]],p2--[[@param p2 any]])return InvokeBool(0x11B5E6D2AE73F48E,statHash,outValue,p2)end;---@return boolean
	--[=[p3 is probably characterSlot or BOOL save, always -1]=]
	StatGetDate=function(statHash--[[@param statHash integer]],outValue--[[@param outValue any*]],numFields--[[@param numFields integer]],p3--[[@param p3 any]])return InvokeBool(0x8B0FACEFC36C824B,statHash,outValue,numFields,p3)end;---@return boolean
	--[=[p1 is always -1 in the script files]=]
	StatGetString=function(statHash--[[@param statHash integer]],p1--[[@param p1 integer]])return InvokeString(0xE50384ACC2C3DB74,statHash,p1)end;---@return string
	--[=[p3 is probably characterSlot or BOOL save, always -1]=]
	StatGetPos=function(statName--[[@param statName integer]],outX--[[@param outX number*]],outY--[[@param outY number*]],outZ--[[@param outZ number*]],p4--[[@param p4 any]])return InvokeBool(0x350F82CCB186AA1B,statName,outX,outY,outZ,p4)end;---@return boolean
	--[=[p4 is probably characterSlot or BOOL save]=]
	StatGetMaskedInt=function(statHash--[[@param statHash integer]],outValue--[[@param outValue integer*]],p2--[[@param p2 integer]],p3--[[@param p3 integer]],p4--[[@param p4 any]])return InvokeBool(0x655185A06D9EEAAB,statHash,outValue,p2,p3,p4)end;---@return boolean
	--[=[Returns the rockstar ID (user id) value of a given stat. Returns "STAT_UNKNOWN" if the statHash is invalid or the stat has no userId]=]
	StatGetUserId=function(statHash--[[@param statHash integer]])return InvokeString(0x2365C388E393BBE2,statHash)end;---@return string
	StatGetLicensePlate=function(statName--[[@param statName integer]])return InvokeString(0x5473D4195058B2E4,statName)end;---@return string
	StatSetLicensePlate=function(statName--[[@param statName integer]],str--[[@param str string]])return InvokeBool(0x69FF13266D7296DA,statName,str)end;---@return boolean
	StatIncrement=function(statName--[[@param statName integer]],value--[[@param value number]])return InvokeVoid(0x9B5A68C6489E9909,statName,value+.0)end;
	StatCommunityStartSynch=function()return InvokeBool(0x5A556B229A169402)end;---@return boolean
	StatCommunitySynchIsPending=function()return InvokeBool(0xB1D2BB1E1631F5B1)end;---@return boolean
	StatCommunityGetHistory=function(statName--[[@param statName integer]],p1--[[@param p1 integer]],outValue--[[@param outValue number*]])return InvokeBool(0xBED9F5693F34ED17,statName,p1,outValue)end;---@return boolean
	--[=[p0 seems to range from 0 to 7]=]
	StatResetAllOnlineCharacterStats=function(p0--[[@param p0 integer]])return InvokeVoid(0x26D7399B9587FE89,p0)end;
	--[=[p0 seems to range from 0 to 7]=]
	StatLocalResetAllOnlineCharacterStats=function(p0--[[@param p0 integer]])return InvokeVoid(0xA78B8FA58200DA56,p0)end;
	StatGetNumberOfDays=function(statName--[[@param statName integer]])return InvokeInt(0xE0E854F5280FB769,statName)end;---@return integer
	StatGetNumberOfHours=function(statName--[[@param statName integer]])return InvokeInt(0xF2D4B2FE415AAFC3,statName)end;---@return integer
	StatGetNumberOfMinutes=function(statName--[[@param statName integer]])return InvokeInt(0x7583B4BE4C5A41B5,statName)end;---@return integer
	StatGetNumberOfSeconds=function(statName--[[@param statName integer]])return InvokeInt(0x2CE056FF3723F00B,statName)end;---@return integer
	--[=[Does not take effect immediately, unfortunately.

profileSetting seems to only be 936, 937 and 938 in scripts]=]
	StatSetProfileSettingValue=function(profileSetting--[[@param profileSetting integer]],value--[[@param value integer]])return InvokeVoid(0x68F01422BE1D838F,profileSetting,value)end;
	--[=[This native does absolutely nothing, just a nullsub]=]
	StatsCompletedCharacterCreation=function(p0--[[@param p0 any]])return InvokeVoid(0xC01D2470F22CDE5A,p0)end;
	--[=[Needs more research. Possibly used to calculate the "mask" when calling "STAT_SET_MASKED_INT"?]=]
	PackedStatGetIntStatIndex=function(p0--[[@param p0 integer]])return InvokeInt(0x94F12ABF9C79E339,p0)end;---@return integer
	GetPackedIntStatKey=function(index--[[@param index integer]],spStat--[[@param spStat boolean]],charStat--[[@param charStat boolean]],character--[[@param character integer]])return InvokeInt(0x61E111E323419E07,index,spStat,charStat,character)end;---@return integer
	GetPackedTuIntStatKey=function(index--[[@param index integer]],spStat--[[@param spStat boolean]],charStat--[[@param charStat boolean]],character--[[@param character integer]])return InvokeInt(0xD16C2AD6B8E32854,index,spStat,charStat,character)end;---@return integer
	--[=[Needs more research. Gets the stat name of a masked int?

section - values used in the decompiled scripts:
"_NGPSTAT_INT"
"_MP_NGPSTAT_INT"
"_MP_LRPSTAT_INT"
"_MP_APAPSTAT_INT"
"_MP_LR2PSTAT_INT"
"_MP_BIKEPSTAT_INT"
"_MP_IMPEXPPSTAT_INT"
"_MP_GUNRPSTAT_INT"
"_NGDLCPSTAT_INT"
"_MP_NGDLCPSTAT_INT"
"_DLCSMUGCHARPSTAT_INT"
"_GANGOPSPSTAT_INT"
"_BUSINESSBATPSTAT_INT"
"_ARENAWARSPSTAT_INT"
"_CASINOPSTAT_INT"
"_CASINOHSTPSTAT_INT"]=]
	GetPackedNgIntStatKey=function(index--[[@param index integer]],spStat--[[@param spStat boolean]],charStat--[[@param charStat boolean]],character--[[@param character integer]],section--[[@param section string]])return InvokeInt(0x2B4CDCA6F07FF3DA,index,spStat,charStat,character,section)end;---@return integer
	GetPackedStatBoolCode=function(index--[[@param index integer]],characterSlot--[[@param characterSlot integer]])return InvokeBool(0xDA7EBFC49AE3F1B0,index,characterSlot)end;---@return boolean
	GetPackedStatIntCode=function(index--[[@param index integer]],characterSlot--[[@param characterSlot integer]])return InvokeInt(0x0BC900A6FE73770C,index,characterSlot)end;---@return integer
	SetPackedStatBoolCode=function(index--[[@param index integer]],value--[[@param value boolean]],characterSlot--[[@param characterSlot integer]])return InvokeVoid(0xDB8A58AEAA67CD07,index,value,characterSlot)end;
	SetPackedStatIntCode=function(index--[[@param index integer]],value--[[@param value integer]],characterSlot--[[@param characterSlot integer]])return InvokeVoid(0x1581503AE529CD2E,index,value,characterSlot)end;
	PlaystatsBackgroundScriptAction=function(action--[[@param action string]],value--[[@param value integer]])return InvokeVoid(0x5009DFD741329729,action,value)end;
	--[=[p3: VehicleConversion, SCAdminCashGift
p4: 0]=]
	PlaystatsFlowLow=function(posX--[[@param posX number]],posY--[[@param posY number]],posZ--[[@param posZ number]],p3--[[@param p3 string]],p4--[[@param p4 any]],amount--[[@param amount integer]])return InvokeVoid(0xE6A27CDA42887F93,posX+.0,posY+.0,posZ+.0,p3,p4,amount)end;
	PlaystatsNpcInvite=function(p0--[[@param p0 string]])return InvokeVoid(0x93054C88E6AA7C44,p0)end;
	PlaystatsAwardXp=function(amount--[[@param amount integer]],type--[[@param type integer]],category--[[@param category integer]])return InvokeVoid(0x46F917F6B4128FE4,amount,type,category)end;
	PlaystatsRankUp=function(rank--[[@param rank integer]])return InvokeVoid(0xC7F2DE41D102BFB4,rank)end;
	PlaystatsStartedSessionInOfflinemode=function()return InvokeVoid(0x098760C7461724CD)end;
	PlaystatsActivityDone=function(p0--[[@param p0 integer]],activityId--[[@param activityId integer]])return InvokeVoid(0xA071E0ED98F91286,p0,activityId)end;
	PlaystatsLeaveJobChain=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]])return InvokeVoid(0xC5BE134EC7BA96A0,p0,p1,p2,p3,p4)end;
	PlaystatsMissionStarted=function(p0--[[@param p0 string]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 boolean]])return InvokeVoid(0xC19A2925C34D2231,p0,p1,p2,p3)end;
	PlaystatsMissionOver=function(p0--[[@param p0 string]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 boolean]],p4--[[@param p4 boolean]],p5--[[@param p5 boolean]])return InvokeVoid(0x7C4BB33A8CED7324,p0,p1,p2,p3,p4,p5)end;
	PlaystatsMissionCheckpoint=function(p0--[[@param p0 string]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0xC900596A63978C1D,p0,p1,p2,p3)end;
	PlaystatsRandomMissionDone=function(name--[[@param name string]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x71862B1D855F32E1,name,p1,p2,p3)end;
	PlaystatsRosBet=function(amount--[[@param amount integer]],act--[[@param act integer]],player--[[@param player integer]],cm--[[@param cm number]])return InvokeVoid(0x121FB4DDDC2D5291,amount,act,player,cm+.0)end;
	PlaystatsRaceCheckpoint=function(p0--[[@param p0 integer]],p1--[[@param p1 any]],p2--[[@param p2 integer]],p3--[[@param p3 integer]],p4--[[@param p4 any]])return InvokeVoid(0x9C375C315099DDE4,p0,p1,p2,p3,p4)end;
	PlaystatsCreateMatchHistoryId2=function(playerAccountId--[[@param playerAccountId integer*]],posixTime--[[@param posixTime integer*]])return InvokeBool(0x6DEE77AFF8C21BD1,playerAccountId,posixTime)end;---@return boolean
	PlaystatsMatchStarted=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0xBC80E22DED931E3D,p0,p1,p2)end;
	PlaystatsShopItem=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]])return InvokeVoid(0x176852ACAAC173D1,p0,p1,p2,p3,p4)end;
	PlaystatsCrateDropMissionDone=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]],p5--[[@param p5 any]],p6--[[@param p6 any]],p7--[[@param p7 any]])return InvokeVoid(0x1CAE5D2E3F9A07F0,p0,p1,p2,p3,p4,p5,p6,p7)end;
	PlaystatsCrateCreated=function(p0--[[@param p0 number]],p1--[[@param p1 number]],p2--[[@param p2 number]])return InvokeVoid(0xAFC7E5E075A96F46,p0+.0,p1+.0,p2+.0)end;
	PlaystatsHoldUpMissionDone=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0xCB00196B31C39EB1,p0,p1,p2,p3)end;
	PlaystatsImportExportMissionDone=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x2B69F5074C894811,p0,p1,p2,p3)end;
	PlaystatsRaceToPointMissionDone=function(p0--[[@param p0 integer]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0xADDD1C754E2E2914,p0,p1,p2,p3)end;
	PlaystatsAcquiredHiddenPackage=function(p0--[[@param p0 any]])return InvokeVoid(0x79AB33F0FBFAC40C,p0)end;
	PlaystatsWebsiteVisited=function(scaleformHash--[[@param scaleformHash integer]],p1--[[@param p1 integer]])return InvokeVoid(0xDDF24D535060F811,scaleformHash,p1)end;
	PlaystatsFriendActivity=function(p0--[[@param p0 integer]],p1--[[@param p1 boolean]])return InvokeVoid(0x0F71DE29AB2258F1,p0,p1)end;
	--[=[This native does absolutely nothing, just a nullsub]=]
	PlaystatsOddjobDone=function(totalTimeMs--[[@param totalTimeMs integer]],p1--[[@param p1 integer]],p2--[[@param p2 boolean]])return InvokeVoid(0x69DEA3E9DB727B4C,totalTimeMs,p1,p2)end;
	PlaystatsPropChange=function(p0--[[@param p0 integer]],p1--[[@param p1 integer]],p2--[[@param p2 integer]],p3--[[@param p3 integer]])return InvokeVoid(0xBA739D6D5A05D6E7,p0,p1,p2,p3)end;
	PlaystatsClothChange=function(p0--[[@param p0 integer]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]])return InvokeVoid(0x34B973047A2268B9,p0,p1,p2,p3,p4)end;
	--[=[This is a typo made by R*. It's supposed to be called PLAYSTATS_WEAPON_MOD_CHANGE.]=]
	PlaystatsWeaponModeChange=function(weaponHash--[[@param weaponHash integer]],componentHashTo--[[@param componentHashTo integer]],componentHashFrom--[[@param componentHashFrom integer]])return InvokeVoid(0xE95C8A1875A02CA4,weaponHash,componentHashTo,componentHashFrom)end;
	PlaystatsCheatApplied=function(cheat--[[@param cheat string]])return InvokeVoid(0x6058665D72302D3F,cheat)end;
	PlaystatsJobActivityEnd=function(p0--[[@param p0 any*]],p1--[[@param p1 any*]],p2--[[@param p2 any*]],p3--[[@param p3 any*]])return InvokeVoid(0xF8C54A461C3E11DC,p0,p1,p2,p3)end;
	PlaystatsJobBend=function(p0--[[@param p0 any*]],p1--[[@param p1 any*]],p2--[[@param p2 any*]],p3--[[@param p3 any*]])return InvokeVoid(0xF5BB8DAC426A52C0,p0,p1,p2,p3)end;
	PlaystatsJobLtsEnd=function(p0--[[@param p0 any*]],p1--[[@param p1 any*]],p2--[[@param p2 any*]],p3--[[@param p3 any*]])return InvokeVoid(0xA736CF7FB7C5BFF4,p0,p1,p2,p3)end;
	PlaystatsJobLtsRoundEnd=function(p0--[[@param p0 any*]],p1--[[@param p1 any*]],p2--[[@param p2 any*]],p3--[[@param p3 any*]])return InvokeVoid(0x14E0B2D1AD1044E0,p0,p1,p2,p3)end;
	PlaystatsQuickfixTool=function(element--[[@param element integer]],item--[[@param item string]])return InvokeVoid(0x90D0622866E80445,element,item)end;
	PlaystatsIdleKick=function(msStoodIdle--[[@param msStoodIdle integer]])return InvokeVoid(0x5DA3A8DE8CB6226F,msStoodIdle)end;
	PlaystatsSetJoinType=function(joinType--[[@param joinType integer]])return InvokeVoid(0xD1032E482629049E,joinType)end;
	PlaystatsHeistSaveCheat=function(hash--[[@param hash integer]],p1--[[@param p1 integer]])return InvokeVoid(0xF4FF020A08BC8863,hash,p1)end;
	PlaystatsAppendDirectorMetric=function(p0--[[@param p0 any*]])return InvokeVoid(0x46326E13DA4E0546,p0)end;
	PlaystatsAwardBadSport=function(id--[[@param id integer]])return InvokeVoid(0x47B32F5611E6E483,id)end;
	PlaystatsPegasusAsPersonalAircraft=function(modelHash--[[@param modelHash integer]])return InvokeVoid(0x9572BD4DD6B72122,modelHash)end;
	PlaystatsShopmenuNav=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0xF96E9EA876D9DC92,p0,p1,p2)end;
	PlaystatsFmEventChallenges=function(p0--[[@param p0 any]])return InvokeVoid(0x6A60E43998228229,p0)end;
	PlaystatsFmEventVehicletarget=function(p0--[[@param p0 any]])return InvokeVoid(0xBFAFDB5FAAA5C5AB,p0)end;
	PlaystatsFmEventUrbanwarfare=function(p0--[[@param p0 any]])return InvokeVoid(0x8C9D11605E59D955,p0)end;
	PlaystatsFmEventCheckpointcollection=function(p0--[[@param p0 any]])return InvokeVoid(0x3DE3AA516FB126A4,p0)end;
	PlaystatsFmEventAtob=function(p0--[[@param p0 any]])return InvokeVoid(0xBAA2F0490E146BE8,p0)end;
	PlaystatsFmEventPennedin=function(p0--[[@param p0 any]])return InvokeVoid(0x1A7CE7CD3E653485,p0)end;
	PlaystatsFmEventPasstheparcel=function(p0--[[@param p0 any]])return InvokeVoid(0x419615486BBF1956,p0)end;
	PlaystatsFmEventHotproperty=function(p0--[[@param p0 any]])return InvokeVoid(0x84DFC579C2FC214C,p0)end;
	PlaystatsFmEventDeaddrop=function(p0--[[@param p0 any]])return InvokeVoid(0x0A9C7F36E5D7B683,p0)end;
	PlaystatsFmEventKingofthecastle=function(p0--[[@param p0 any]])return InvokeVoid(0x164C5FF663790845,p0)end;
	PlaystatsFmEventCriminaldamage=function(p0--[[@param p0 any]])return InvokeVoid(0xEDBF6C9B0D2C65C8,p0)end;
	PlaystatsFmEventCompetitiveurbanwarfare=function(p0--[[@param p0 any]])return InvokeVoid(0x6551B1F7F6CD46EA,p0)end;
	PlaystatsFmEventHuntbeast=function(p0--[[@param p0 any]])return InvokeVoid(0x2CD90358F67D0AA8,p0)end;
	PlaystatsPimenuHideOptions=function(data--[[@param data any*]])return InvokeVoid(0x203B381133817079,data)end;
	LeaderboardsGetNumberOfColumns=function(p0--[[@param p0 integer]],p1--[[@param p1 any]])return InvokeInt(0x117B45156D7EFF2E,p0,p1)end;---@return integer
	LeaderboardsGetColumnId=function(p0--[[@param p0 integer]],p1--[[@param p1 integer]],p2--[[@param p2 integer]])return InvokeInt(0xC4B5467A1886EA7E,p0,p1,p2)end;---@return integer
	LeaderboardsGetColumnType=function(p0--[[@param p0 integer]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeInt(0xBF4FEF46DB7894D3,p0,p1,p2)end;---@return integer
	LeaderboardsReadClearAll=function()return InvokeInt(0xA34CB6E6F0DF4A0B)end;---@return integer
	LeaderboardsReadClear=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeInt(0x7CCE5C737A665701,p0,p1,p2)end;---@return integer
	LeaderboardsReadPending=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeBool(0xAC392C8483342AC2,p0,p1,p2)end;---@return boolean
	LeaderboardsReadAnyPending=function()return InvokeBool(0xA31FD15197B192BD)end;---@return boolean
	LeaderboardsReadSuccessful=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeBool(0x2FB19228983E832C,p0,p1,p2)end;---@return boolean
	Leaderboards2ReadFriendsByRow=function(p0--[[@param p0 any*]],p1--[[@param p1 any*]],p2--[[@param p2 any]],p3--[[@param p3 boolean]],p4--[[@param p4 any]],p5--[[@param p5 any]])return InvokeBool(0x918B101666F9CB83,p0,p1,p2,p3,p4,p5)end;---@return boolean
	Leaderboards2ReadByHandle=function(p0--[[@param p0 any*]],p1--[[@param p1 any*]])return InvokeBool(0xC30713A383BFBF0E,p0,p1)end;---@return boolean
	Leaderboards2ReadByRow=function(p0--[[@param p0 any*]],p1--[[@param p1 any*]],p2--[[@param p2 any]],p3--[[@param p3 any*]],p4--[[@param p4 any]],p5--[[@param p5 any*]],p6--[[@param p6 any]])return InvokeBool(0xA9CDB1E3F0A49883,p0,p1,p2,p3,p4,p5,p6)end;---@return boolean
	Leaderboards2ReadByRank=function(p0--[[@param p0 any*]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeBool(0xBA2C7DB0C129449A,p0,p1,p2)end;---@return boolean
	Leaderboards2ReadByRadius=function(p0--[[@param p0 any*]],p1--[[@param p1 any]],p2--[[@param p2 any*]])return InvokeBool(0x5CE587FB5A42C8C4,p0,p1,p2)end;---@return boolean
	Leaderboards2ReadByScoreInt=function(p0--[[@param p0 any*]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeBool(0x7EEC7E4F6984A16A,p0,p1,p2)end;---@return boolean
	Leaderboards2ReadByScoreFloat=function(p0--[[@param p0 any*]],p1--[[@param p1 number]],p2--[[@param p2 any]])return InvokeBool(0xE662C8B759D08F3C,p0,p1+.0,p2)end;---@return boolean
	Leaderboards2ReadRankPrediction=function(p0--[[@param p0 any*]],p1--[[@param p1 any*]],p2--[[@param p2 any*]])return InvokeBool(0xC38DC1E90D22547C,p0,p1,p2)end;---@return boolean
	Leaderboards2ReadByPlaform=function(p0--[[@param p0 any*]],gamerHandleCsv--[[@param gamerHandleCsv string]],platformName--[[@param platformName string]])return InvokeBool(0xF1AE5DCDBFCA2721,p0,gamerHandleCsv,platformName)end;---@return boolean
	Leaderboards2ReadGetRowDataStart=function(p0--[[@param p0 any*]])return InvokeBool(0xA0F93D5465B3094D,p0)end;---@return boolean
	Leaderboards2ReadGetRowDataEnd=function()return InvokeVoid(0x71B008056E5692D6)end;
	Leaderboards2ReadGetRowDataInfo=function(p0--[[@param p0 any]],p1--[[@param p1 any*]])return InvokeBool(0x34770B9CE0E03B91,p0,p1)end;---@return boolean
	Leaderboards2ReadGetRowDataInt=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeInt(0x88578F6EC36B4A3A,p0,p1)end;---@return integer
	Leaderboards2ReadGetRowDataFloat=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeFloat(0x38491439B6BA7F7D,p0,p1)end;---@return number
	Leaderboards2WriteData=function(p0--[[@param p0 any*]])return InvokeBool(0xAE2206545888AE49,p0)end;---@return boolean
	LeaderboardsWriteAddColumn=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 number]])return InvokeVoid(0x0BCA1D2C47B0D269,p0,p1,p2+.0)end;
	LeaderboardsWriteAddColumnLong=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0x2E65248609523599,p0,p1,p2)end;
	LeaderboardsCacheDataRow=function(p0--[[@param p0 any*]])return InvokeBool(0xB9BB18E2C40142ED,p0)end;---@return boolean
	LeaderboardsClearCacheData=function()return InvokeVoid(0xD4B02A6B476E1FDC)end;
	LeaderboardsClearCacheDataId=function(p0--[[@param p0 any]])return InvokeVoid(0x8EC74CEB042E7CFF,p0)end;
	LeaderboardsGetCacheExists=function(p0--[[@param p0 any]])return InvokeBool(0x9C51349BE6CDFE2C,p0)end;---@return boolean
	LeaderboardsGetCacheTime=function(p0--[[@param p0 any]])return InvokeInt(0xF04C1C27DA35F6C8,p0)end;---@return integer
	LeaderboardsGetCacheNumberOfRows=function(p0--[[@param p0 any]])return InvokeInt(0x58A651CD201D89AD,p0)end;---@return integer
	LeaderboardsGetCacheDataRow=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any*]])return InvokeBool(0x9120E8DBA3D69273,p0,p1,p2)end;---@return boolean
	PresenceEventUpdatestatInt=function(statHash--[[@param statHash integer]],value--[[@param value integer]],p2--[[@param p2 integer]])return InvokeVoid(0x11FF1C80276097ED,statHash,value,p2)end;
	PresenceEventUpdatestatFloat=function(statHash--[[@param statHash integer]],value--[[@param value number]],p2--[[@param p2 integer]])return InvokeVoid(0x30A6614C1F7799B8,statHash,value+.0,p2)end;
	PresenceEventUpdatestatIntWithString=function(statHash--[[@param statHash integer]],value--[[@param value integer]],p2--[[@param p2 integer]],string--[[@param string string]])return InvokeVoid(0x6483C25849031C4F,statHash,value,p2,string)end;
	GetPlayerHasDrivenAllVehicles=function()return InvokeBool(0x5EAD2BF6484852E4)end;---@return boolean
	SetHasPostedAllVehiclesDriven=function()return InvokeVoid(0xC141B8917E0017EC)end;
	SetProfileSettingPrologueComplete=function()return InvokeVoid(0xB475F27C6A994D65)end;
	--[=[Sets profile setting 939]=]
	SetProfileSettingSpChopMissionComplete=function()return InvokeVoid(0xC67E2DA1CBE759E2)end;
	--[=[Sets profile setting 933]=]
	SetProfileSettingCreatorRacesDone=function(value--[[@param value integer]])return InvokeVoid(0xF1A1803D3476F215,value)end;
	--[=[Sets profile setting 934]=]
	SetProfileSettingCreatorDmDone=function(value--[[@param value integer]])return InvokeVoid(0x38BAAA5DD4C9D19F,value)end;
	--[=[Sets profile setting 935]=]
	SetProfileSettingCreatorCtfDone=function(value--[[@param value integer]])return InvokeVoid(0x55384438FC55AD8E,value)end;
	SetJobActivityIdStarted=function(p0--[[@param p0 any]],characterSlot--[[@param characterSlot integer]])return InvokeVoid(0x723C1CE13FBFDB67,p0,characterSlot)end;
	SetFreemodePrologueDone=function(p0--[[@param p0 any]],characterSlot--[[@param characterSlot integer]])return InvokeVoid(0x0D01D20616FC73FB,p0,characterSlot)end;
	--[=[Sets profile setting 940 and 941]=]
	SetFreemodeStrandProgressionStatus=function(profileSetting--[[@param profileSetting integer]],settingValue--[[@param settingValue integer]])return InvokeVoid(0x79D310A861697CC9,profileSetting,settingValue)end;
	StatNetworkIncrementOnSuicide=function(p0--[[@param p0 any]],p1--[[@param p1 number]])return InvokeVoid(0x428EAF89E24F6C36,p0,p1+.0)end;
	StatSetCheatIsActive=function()return InvokeVoid(0x047CBED6F6F8B63C)end;
	Leaderboards2WriteDataForEventType=function(p0--[[@param p0 any*]],p1--[[@param p1 any*]])return InvokeBool(0xC980E62E33DF1D5C,p0,p1)end;---@return boolean
	ForceCloudMpStatsDownloadAndOverwriteLocalSave=function()return InvokeVoid(0x6F361B8889A792A3)end;
	StatMigrateClearForRestart=function()return InvokeVoid(0xC847B43F369AC0B5)end;
	--[=[platformName must be one of the following: ps3, xbox360, ps4, xboxone]=]
	StatMigrateSavegameStart=function(platformName--[[@param platformName string]])return InvokeBool(0xA5C80D8E768A9E66,platformName)end;---@return boolean
	StatMigrateSavegameGetStatus=function()return InvokeInt(0x9A62EC95AE10E011)end;---@return integer
	StatMigrateCheckAlreadyDone=function()return InvokeBool(0x4C89FE2BDEB3F169)end;---@return boolean
	StatMigrateCheckStart=function()return InvokeBool(0xC6E0E2616A7576BB)end;---@return boolean
	StatMigrateCheckGetIsPlatformAvailable=function(p0--[[@param p0 integer]])return InvokeInt(0x5BD5F255321C4AAF,p0)end;---@return integer
	StatMigrateCheckGetPlatformStatus=function(p0--[[@param p0 integer]],p1--[[@param p1 any*]])return InvokeInt(0xDEAAF77EB3687E97,p0,p1)end;---@return integer
	StatGetSaveMigrationStatus=function(data--[[@param data any*]])return InvokeInt(0x886913BBEACA68C1,data)end;---@return integer
	StatSaveMigrationCancelPendingOperation=function()return InvokeBool(0x4FEF53183C3C6414)end;---@return boolean
	StatGetCancelSaveMigrationStatus=function()return InvokeInt(0x567384DFA67029E6)end;---@return integer
	StatSaveMigrationConsumeContent=function(contentId--[[@param contentId integer]],srcPlatform--[[@param srcPlatform string]],srcGamerHandle--[[@param srcGamerHandle string]])return InvokeBool(0x3270F67EED31FBC1,contentId,srcPlatform,srcGamerHandle)end;---@return boolean
	StatGetSaveMigrationConsumeContentStatus=function(p0--[[@param p0 integer*]])return InvokeInt(0xCE5AA445ABA8DEE0,p0)end;---@return integer
	StatEnableStatsTracking=function()return InvokeVoid(0x98E2BC1CA26287C3)end;
	--[=[Prevents updates to CStatsMgr (e.g., STAT_SET_* natives)]=]
	StatDisableStatsTracking=function()return InvokeVoid(0x629526ABA383BCAA)end;
	StatIsStatsTrackingEnabled=function()return InvokeBool(0xBE3DB208333D9844)end;---@return boolean
	--[=[enum StatTrackingType
{
	LongestWheelie = 1,
	LongestStoppie = 2,
	NoCrashes = 3,
	HighestSpeed = 4,
	_MostFlips = 5,
	_LongestSpin = 6,
	_HighestJumpReached = 7,
	LongestJump = 8,
	_NearMissesNoCrash = 9,
	LongestFallSurvived = 10,
	LowestParachute = 11,
	ReverseDriving = 12,
	LongestFreefall = 13,
	VehiclesStolen = 14,
	_SomeCFireEventCount = 15,
	_Unk16 = 16,
	_LowFlyingTime = 17,
	LowFlying = 18,
	_InvertedFlyingTime = 19,
	InvertedFlying = 20,
	_PlaneSpinCount = 21,
	MeleeKills = 22, // Players
	_LongestSniperKill = 23,
	SniperSkills = 24, // Players
	DrivebyKills = 25, // Players
	HeadshotKills = 26, // Players
	LongestBail = 27,
	_TotalRammedByCar = 28,
	NearMissesPrecise = 29,
	_FreefallTime = 30,
	Unk31 = 31,
}

enum StatTrackingValueType
{
	Total,
	Max,
	Min
}]=]
	StatStartRecordStat=function(statType--[[@param statType integer]],valueType--[[@param valueType integer]])return InvokeBool(0x33D72899E24C3365,statType,valueType)end;---@return boolean
	StatStopRecordStat=function()return InvokeBool(0xA761D4AC6115623D)end;---@return boolean
	StatGetRecordedValue=function(value--[[@param value number*]])return InvokeBool(0xF11F01D98113536A,value)end;---@return boolean
	StatIsRecordingStat=function()return InvokeBool(0x8B9CDBD6C566C38C)end;---@return boolean
	--[=[Perform the most near misses with other vehicles in a land vehicle without crashing]=]
	StatGetCurrentNearMissNocrashPrecise=function()return InvokeInt(0xE8853FBCE7D8D0D6)end;---@return integer
	--[=[Perform the longest wheelie on a motorcycle]=]
	StatGetCurrentRearWheelDistance=function()return InvokeFloat(0xA943FD1722E11EFD)end;---@return number
	--[=[Perform the longest stoppie on a motorcycle]=]
	StatGetCurrentFrontWheelDistance=function()return InvokeFloat(0x84A810B375E69C0E)end;---@return number
	--[=[Perform the longest jump in a land vehicle]=]
	StatGetCurrentJumpDistance=function()return InvokeFloat(0x9EC8858184CD253A)end;---@return number
	--[=[Drive the furthest distance in a land vehicle without crashing]=]
	StatGetCurrentDriveNocrashDistance=function()return InvokeFloat(0xBA9749CC94C1FD85)end;---@return number
	--[=[Achieve the highest speed in a land vehicle]=]
	StatGetCurrentSpeed=function()return InvokeFloat(0x55A8BECAF28A4EB7)end;---@return number
	--[=[Reverse the longest distance without crashing]=]
	StatGetCurrentDrivingReverseDistance=function()return InvokeFloat(0x32CAC93C9DE73D32)end;---@return number
	--[=[Fall the longest distance with a parachute before opening it]=]
	StatGetCurrentSkydivingDistance=function()return InvokeFloat(0xAFF47709F1D5DCCE)end;---@return number
	--[=[Fly low to the ground for the longest distance]=]
	StatGetChallengeFlyingDist=function()return InvokeFloat(0x6E0A5253375C4584)end;---@return number
	StatGetFlyingAltitude=function(outValue--[[@param outValue number*]])return InvokeBool(0x1A8EA222F9C67DBB,outValue)end;---@return boolean
	--[=[Or non-flyable area]=]
	StatIsPlayerVehicleAboveOcean=function()return InvokeBool(0xF9F2922717B819EC)end;---@return boolean
	--[=[Travel the furthest distance when bailing from a vehicle]=]
	StatGetVehicleBailDistance=function()return InvokeFloat(0x0B8B7F74BF061C6D)end;---@return number
	--[=[This function is hard-coded to always return 1.]=]
	StatRollbackSaveMigration=function()return InvokeBool(0xB3DA2606774A8E2D)end;---@return boolean
	--[=[Sets profile setting 866]=]
	SetHasSpecialeditionContent=function(value--[[@param value integer]])return InvokeVoid(0xDAC073C7901F9E15,value)end;
	--[=[Sets profile setting 501]=]
	SetSaveMigrationTransactionIdWarning=function(transactionId--[[@param transactionId integer]])return InvokeVoid(0xF6792800AC95350D,transactionId)end;
	GetBossGoonUuid=function(characterSlot--[[@param characterSlot integer]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0x6BC0ACD0673ACEBE,characterSlot,p1,p2)end;
	PlaystatsBwBossonbossdeathmatch=function(p0--[[@param p0 any]])return InvokeVoid(0x8D8ADB562F09A245,p0)end;
	PlaystatsBwYatchattack=function(p0--[[@param p0 any]])return InvokeVoid(0xD1A1EE3B4FA8E760,p0)end;
	PlaystatsBwHuntTheBoss=function(p0--[[@param p0 any]])return InvokeVoid(0x88087EE1F28024AE,p0)end;
	PlaystatsBwSightseer=function(p0--[[@param p0 any]])return InvokeVoid(0xFCC228E07217FCAC,p0)end;
	PlaystatsBwAssault=function(p0--[[@param p0 any]])return InvokeVoid(0x678F86D8FC040BDB,p0)end;
	PlaystatsBwBellyOfTheBeast=function(p0--[[@param p0 any]])return InvokeVoid(0xA6F54BB2FFCA35EA,p0)end;
	PlaystatsBwHeadHunter=function(p0--[[@param p0 any]])return InvokeVoid(0x5FF2C33B13A02A11,p0)end;
	PlaystatsBwFragileGoods=function(p0--[[@param p0 any]])return InvokeVoid(0x282B6739644F4347,p0)end;
	PlaystatsBwAirFreight=function(p0--[[@param p0 any]])return InvokeVoid(0xF06A6F41CB445443,p0)end;
	PlaystatsBcCarJacking=function(p0--[[@param p0 any]])return InvokeVoid(0x7B18DA61F6BAE9D5,p0)end;
	PlaystatsBcSmashAndGrab=function(p0--[[@param p0 any]])return InvokeVoid(0x06EAF70AE066441E,p0)end;
	PlaystatsBcProtectionRacket=function(p0--[[@param p0 any]])return InvokeVoid(0x14EDA9EE27BD1626,p0)end;
	PlaystatsBcMostWanted=function(p0--[[@param p0 any]])return InvokeVoid(0x930F504203F561C9,p0)end;
	PlaystatsBcFindersKeepers=function(p0--[[@param p0 any]])return InvokeVoid(0xE3261D791EB44ACB,p0)end;
	PlaystatsBcPointToPoint=function(p0--[[@param p0 any]])return InvokeVoid(0x73001E34F85137F8,p0)end;
	PlaystatsBcCashing=function(p0--[[@param p0 any]])return InvokeVoid(0x53CAE13E9B426993,p0)end;
	PlaystatsBcSalvage=function(p0--[[@param p0 any]])return InvokeVoid(0x7D36291161859389,p0)end;
	PlaystatsSpentPiCustomLoadout=function(amount--[[@param amount integer]])return InvokeVoid(0xBE509B0A3693DE8B,amount)end;
	PlaystatsBuyContrabandMission=function(data--[[@param data any*]])return InvokeVoid(0xD6781E42755531F7,data)end;
	PlaystatsSellContrabandMission=function(data--[[@param data any*]])return InvokeVoid(0xC729991A9065376E,data)end;
	PlaystatsDefendContrabandMission=function(data--[[@param data any*]])return InvokeVoid(0x2605663BD4F23B5D,data)end;
	PlaystatsRecoverContrabandMission=function(data--[[@param data any*]])return InvokeVoid(0x04D90BA8207ADA2D,data)end;
	PlaystatsHitContrabandDestroyLimit=function(p0--[[@param p0 any]])return InvokeVoid(0x60EEDC12AF66E846,p0)end;
	StartBeingBoss=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x3EBEAC6C3F81F6BD,p0,p1)end;
	StartBeingGoon=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0x96E6D5150DBF1C09,p0,p1,p2)end;
	EndBeingBoss=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0xA3C53804BDB68ED2,p0,p1,p2)end;
	EndBeingGoon=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]])return InvokeVoid(0x6BCCF9948492FD85,p0,p1,p2,p3,p4)end;
	HiredLimo=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x792271AB35C356A4,p0,p1)end;
	OrderBossVehicle=function(p0--[[@param p0 any]],p1--[[@param p1 any]],vehicleHash--[[@param vehicleHash integer]])return InvokeVoid(0xCEA553E35C2246E1,p0,p1,vehicleHash)end;
	ChangeUniform=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0xD1C9B92BDD3F151D,p0,p1,p2)end;
	ChangeGoonLookingForWork=function(p0--[[@param p0 any]])return InvokeVoid(0x44919CC079BB60BF,p0)end;
	SendMetricGhostingToPlayer=function(p0--[[@param p0 any]])return InvokeVoid(0x7033EEFD9B28088E,p0)end;
	SendMetricVipPoach=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0xAA525DFF66BB82F5,p0,p1,p2)end;
	SendMetricPunishBodyguard=function(p0--[[@param p0 any]])return InvokeVoid(0x015B03EE1C43E6EC,p0)end;
	--[=[Allows CEventNetworkStuntPerformed to be triggered.]=]
	PlaystatsStartTrackingStunts=function()return InvokeVoid(0x928DBFB892638EF3)end;
	--[=[Disallows CEventNetworkStuntPerformed to be triggered.]=]
	PlaystatsStopTrackingStunts=function()return InvokeVoid(0x8A800DACCC0DA55D)end;
	PlaystatsMissionEnded=function(p0--[[@param p0 any]])return InvokeVoid(0xBF371CD2B64212FD,p0)end;
	PlaystatsImpexpMissionEnded=function(p0--[[@param p0 any]])return InvokeVoid(0x7D8BA05688AD64C7,p0)end;
	PlaystatsChangeMcRole=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],role--[[@param role integer]],p5--[[@param p5 integer]],p6--[[@param p6 any]])return InvokeVoid(0x0B565B0AAE56A0E8,p0,p1,p2,p3,role,p5,p6)end;
	PlaystatsChangeMcOutfit=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]])return InvokeVoid(0x28ECB8AC2F607DB2,p0,p1,p2,p3,p4)end;
	PlaystatsSwitchMcEmblem=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]])return InvokeVoid(0x0A50D2604E05CB94,p0,p1,p2,p3,p4)end;
	PlaystatsMcRequestBike=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]])return InvokeVoid(0xCC25A4553DFBF9EA,p0,p1,p2,p3,p4)end;
	PlaystatsMcKilledRivalMcMember=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]])return InvokeVoid(0xF534D94DFA2EAD26,p0,p1,p2,p3,p4)end;
	PlaystatsAbandonedMc=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]])return InvokeVoid(0xD558BEC0BBA7E8D2,p0,p1,p2,p3,p4)end;
	PlaystatsEarnedMcPoints=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]],p5--[[@param p5 any]])return InvokeVoid(0x501478855A6074CE,p0,p1,p2,p3,p4,p5)end;
	PlaystatsMcFormationEnds=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]],p5--[[@param p5 any]],p6--[[@param p6 any]])return InvokeVoid(0x03C2EEBB04B3FB72,p0,p1,p2,p3,p4,p5,p6)end;
	PlaystatsMcClubhouseActivity=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]],p5--[[@param p5 any]],p6--[[@param p6 any]],p7--[[@param p7 any]])return InvokeVoid(0x8989CBD7B4E82534,p0,p1,p2,p3,p4,p5,p6,p7)end;
	PlaystatsRivalBehavior=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]],p5--[[@param p5 any]],p6--[[@param p6 any]],p7--[[@param p7 any]],p8--[[@param p8 any]],p9--[[@param p9 any]])return InvokeVoid(0x27AA1C973CACFE63,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9)end;
	PlaystatsCopyRankIntoNewSlot=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]],p5--[[@param p5 any]],p6--[[@param p6 any]])return InvokeVoid(0xB7257BA2550EA10A,p0,p1,p2,p3,p4,p5,p6)end;
	PlaystatsDupeDetected=function(data--[[@param data any*]])return InvokeVoid(0x848B66100EE33B05,data)end;
	PlaystatsBanAlert=function(p0--[[@param p0 integer]])return InvokeVoid(0x516FC96EB88EEFE5,p0)end;
	PlaystatsGunrunningMissionEnded=function(data--[[@param data any*]])return InvokeVoid(0x0EACDF8487D5155A,data)end;
	PlaystatsGunrunningRnd=function(p0--[[@param p0 any]])return InvokeVoid(0xDAF80797FC534BEC,p0)end;
	PlaystatsBusinessBattleEnded=function(p0--[[@param p0 any]])return InvokeVoid(0x316DB59CD14C1774,p0)end;
	PlaystatsWarehouseMissionEnded=function(p0--[[@param p0 any]])return InvokeVoid(0x2D7A9B577E72385E,p0)end;
	PlaystatsNightclubMissionEnded=function(p0--[[@param p0 any]])return InvokeVoid(0x830C3A44EB3F2CF9,p0)end;
	PlaystatsDjUsage=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0xB26F670685631727,p0,p1)end;
	PlaystatsMinigameUsage=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0xC14BD9F5337219B2,p0,p1,p2)end;
	PlaystatsStoneHatchetEnded=function(data--[[@param data any*]])return InvokeVoid(0x35E39E5570358630,data)end;
	PlaystatsSmugglerMissionEnded=function(data--[[@param data any*]])return InvokeVoid(0x320C35147D5B5DDD,data)end;
	PlaystatsFmHeistPrepEnded=function(data--[[@param data any*]])return InvokeVoid(0xD8AFB345A9C5CCBB,data)end;
	PlaystatsInstancedHeistEnded=function(data--[[@param data any*]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x1E1497D0D2108115,data,p1,p2,p3)end;
	PlaystatsDarCheckpoint=function(data--[[@param data any*]])return InvokeVoid(0x0BC254FF3A911501,data)end;
	PlaystatsEnterSessionPack=function(data--[[@param data any*]])return InvokeVoid(0x878FF156D36E9956,data)end;
	PlaystatsDroneUsage=function(p0--[[@param p0 integer]],p1--[[@param p1 integer]],p2--[[@param p2 integer]])return InvokeVoid(0x66C7BB2416ED3FCE,p0,p1,p2)end;
	PlaystatsSpinWheel=function(p0--[[@param p0 integer]],p1--[[@param p1 integer]],p2--[[@param p2 integer]],p3--[[@param p3 integer]])return InvokeVoid(0x6731DE84A38BFAD0,p0,p1,p2,p3)end;
	PlaystatsArenaWarsSpectator=function(p0--[[@param p0 integer]],p1--[[@param p1 integer]],p2--[[@param p2 integer]],p3--[[@param p3 integer]],p4--[[@param p4 integer]])return InvokeVoid(0x6F4F599753F8200A,p0,p1,p2,p3,p4)end;
	PlaystatsArenaWarsEnded=function(data--[[@param data any*]])return InvokeVoid(0xB479D9F0D48A1BC5,data)end;
	PlaystatsSwitchPassiveMode=function(p0--[[@param p0 boolean]],p1--[[@param p1 integer]],p2--[[@param p2 integer]],p3--[[@param p3 integer]])return InvokeVoid(0x35EEC6C2BC821A71,p0,p1,p2,p3)end;
	PlaystatsCollectiblePickedUp=function(p0--[[@param p0 integer]],objectHash--[[@param objectHash integer]],p2--[[@param p2 any]],p3--[[@param p3 any]],moneyAmount--[[@param moneyAmount integer]],rpAmount--[[@param rpAmount integer]],chipsAmount--[[@param chipsAmount integer]],p7--[[@param p7 any]],p8--[[@param p8 integer]],p9--[[@param p9 any]],p10--[[@param p10 any]])return InvokeVoid(0xCD0A8A9338681CF2,p0,objectHash,p2,p3,moneyAmount,rpAmount,chipsAmount,p7,p8,p9,p10)end;
	PlaystatsCasinoStoryMissionEnded=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0xFCCCAC2BD3C1F180,p0,p1)end;
	PlaystatsCasinoChip=function(p0--[[@param p0 any]])return InvokeVoid(0x0999F3F090EC5012,p0)end;
	PlaystatsCasinoRoulette=function(p0--[[@param p0 any]])return InvokeVoid(0x95101C443A84E7F1,p0)end;
	PlaystatsCasinoBlackjack=function(p0--[[@param p0 any]])return InvokeVoid(0x3EAE97309727E7AD,p0)end;
	PlaystatsCasinoThreeCardPoker=function(p0--[[@param p0 any]])return InvokeVoid(0xF740FB339D471C35,p0)end;
	PlaystatsCasinoSlotMachine=function(p0--[[@param p0 any]])return InvokeVoid(0xEF5EC67D392B830A,p0)end;
	PlaystatsCasinoInsideTrack=function(p0--[[@param p0 any]])return InvokeVoid(0x049F059625058A86,p0)end;
	PlaystatsCasinoLuckySeven=function(p0--[[@param p0 any]])return InvokeVoid(0x0C432C1435F5E4FA,p0)end;
	PlaystatsCasinoRouletteLight=function(p0--[[@param p0 any]])return InvokeVoid(0x6572ABA3DE1197FC,p0)end;
	PlaystatsCasinoBlackjackLight=function(p0--[[@param p0 any]])return InvokeVoid(0xD5451C7BF151EB6F,p0)end;
	PlaystatsCasinoThreeCardPokerLight=function(p0--[[@param p0 any]])return InvokeVoid(0xC9001364B4388F22,p0)end;
	PlaystatsCasinoSlotMachineLight=function(p0--[[@param p0 any]])return InvokeVoid(0xE60054A0FAE8227F,p0)end;
	PlaystatsCasinoInsideTrackLight=function(p0--[[@param p0 any]])return InvokeVoid(0x23A3CBCD50D54E47,p0)end;
	PlaystatsArcadeGame=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]],p5--[[@param p5 any]],p6--[[@param p6 any]])return InvokeVoid(0x533A7D1EA58DF958,p0,p1,p2,p3,p4,p5,p6)end;
	PlaystatsArcadeLoveMatch=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x4FCDBD3F0A813C25,p0,p1)end;
	PlaystatsFreemodeCasinoMissionEnded=function(data--[[@param data any*]])return InvokeVoid(0x1A0D4A6C336B7BC5,data)end;
	PlaystatsHeist3Drone=function(p0--[[@param p0 any]])return InvokeVoid(0xDFBD93BF2943E29B,p0)end;
	PlaystatsHeist3Hack=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]],p5--[[@param p5 any]])return InvokeVoid(0x92FC0EEDFAC04A14,p0,p1,p2,p3,p4,p5)end;
	PlaystatsNpcPhone=function(p0--[[@param p0 any*]])return InvokeVoid(0x0077F15613D36993,p0)end;
	PlaystatsArcadeCabinet=function(p0--[[@param p0 any]])return InvokeVoid(0xF9096193DF1F99D4,p0)end;
	PlaystatsHeist3Finale=function(p0--[[@param p0 any]])return InvokeVoid(0x2E0259BABC27A327,p0)end;
	PlaystatsHeist3Prep=function(p0--[[@param p0 any]])return InvokeVoid(0x53C31853EC9531FF,p0)end;
	PlaystatsMasterControl=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x810B5FCC52EC7FF0,p0,p1,p2,p3)end;
	PlaystatsQuitMode=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]])return InvokeVoid(0x5BF29846C6527C54,p0,p1,p2,p3,p4)end;
	PlaystatsMissionVote=function(p0--[[@param p0 any]])return InvokeVoid(0xC03FAB2C2F92289B,p0)end;
	PlaystatsNjvsVote=function(p0--[[@param p0 any]])return InvokeVoid(0x5CDAED54B34B0ED0,p0)end;
	PlaystatsKillYourself=function()return InvokeVoid(0x4AFF7E02E485E92B)end;
	PlaystatsFmMissionEnd=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0x46A70777BE6CEAB9,p0,p1,p2)end;
	PlaystatsHeist4Prep=function(p0--[[@param p0 any]])return InvokeVoid(0xDFCDB14317A9B361,p0)end;
	PlaystatsHeist4Finale=function(p0--[[@param p0 any]])return InvokeVoid(0xC1E963C58664B556,p0)end;
	PlaystatsHeist4Hack=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]])return InvokeVoid(0x2FA3173480008493,p0,p1,p2,p3,p4)end;
	PlaystatsSubWeap=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0xD4367D310F079DB0,p0,p1,p2,p3)end;
	PlaystatsFastTrvl=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]],p5--[[@param p5 any]],p6--[[@param p6 any]],p7--[[@param p7 any]],p8--[[@param p8 any]],p9--[[@param p9 any]],p10--[[@param p10 any]])return InvokeVoid(0x4DC416F246A41FC8,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10)end;
	PlaystatsHubEntry=function(p0--[[@param p0 any]])return InvokeVoid(0x2818FF6638CB09DE,p0)end;
	PlaystatsDjMissionEnded=function(p0--[[@param p0 any]])return InvokeVoid(0xD6CA58B3B53A0F22,p0)end;
	PlaystatsRobberyPrep=function(p0--[[@param p0 any]])return InvokeVoid(0x1A67DFBF1F5C3835,p0)end;
	PlaystatsRobberyFinale=function(p0--[[@param p0 any]])return InvokeVoid(0xBBA55BE9AAAABF44,p0)end;
	PlaystatsExtraEvent=function(p0--[[@param p0 any]])return InvokeVoid(0xFA5B74BAB8A7EF99,p0)end;
	PlaystatsCarclubPoints=function(p0--[[@param p0 any]])return InvokeVoid(0xFF14D6FEEC507BBE,p0)end;
	PlaystatsCarclubChallenge=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x1187CB58D7F3BED7,p0,p1,p2,p3)end;
	PlaystatsCarclubPrize=function(p0--[[@param p0 integer]],vehicleModel--[[@param vehicleModel integer]])return InvokeVoid(0x69C922B677621428,p0,vehicleModel)end;
	PlaystatsAwardNav=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x70F52471E758EBAE,p0,p1,p2,p3)end;
	PlaystatsInstMissionEnd=function(p0--[[@param p0 any]])return InvokeVoid(0xFEA3F7E83C0610FA,p0)end;
	PlaystatsHubExit=function(p0--[[@param p0 any]])return InvokeVoid(0x5A46ACE5C4661132,p0)end;
	PlaystatsVehDel=function(bossId1--[[@param bossId1 integer]],bossId2--[[@param bossId2 integer]],bossType--[[@param bossType integer]],vehicleID--[[@param vehicleID integer]],reason--[[@param reason integer]])return InvokeVoid(0x10A691F5756416D0,bossId1,bossId2,bossType,vehicleID,reason)end;
	PlaystatsInventory=function(p0--[[@param p0 any]])return InvokeVoid(0x887DAD63CF5B7908,p0)end;
	PlaystatsAcidMissionEnd=function(p0--[[@param p0 any]])return InvokeVoid(0x8A23D1324F6B2BAC,p0)end;
	PlaystatsAcidRnd=function(p0--[[@param p0 any]])return InvokeVoid(0xCEACCF0550FDC5BA,p0)end;
	PlaystatsIdle=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0xEC9553A178E8F1D1,p0,p1,p2)end;
	PlaystatsPlayerStyle=function(p0--[[@param p0 any]])return InvokeVoid(0x48FAC5DC7AC6EA99,p0)end;
	PlaystatsRandomEvent=function(p0--[[@param p0 any]])return InvokeVoid(0x7EA06F970F999394,p0)end;
	PlaystatsAttritionStageEnd=function(p0--[[@param p0 any]])return InvokeVoid(0xBD642335A732F1A8,p0)end;
	PlaystatsShowroomNav=function(p0--[[@param p0 any]],p1--[[@param p1 any]],entity--[[@param entity integer]])return InvokeVoid(0x961D4157B9B428DB,p0,p1,entity)end;
	--[=[Data struct contains various tunables related to test drives at Simeons Showroom or Luxury Showcase.]=]
	PlaystatsShowroomOverview=function(data--[[@param data any*]])return InvokeVoid(0x151D6C04C9E2742F,data)end;
}
_G.Streaming={
	LoadAllObjectsNow=function()return InvokeVoid(0xBD6E84632DD4CB3F)end;
	LoadScene=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0x4448EB75B4904BDB,x+.0,y+.0,z+.0)end;
	NetworkUpdateLoadScene=function()return InvokeBool(0xC4582015556D1C46)end;---@return boolean
	IsNetworkLoadingScene=function()return InvokeBool(0x41CA5A33160EA4AB)end;---@return boolean
	SetInteriorActive=function(interiorID--[[@param interiorID integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xE37B76C387BE28ED,interiorID,toggle)end;
	--[=[Request a model to be loaded into memory.
]=]
	RequestModel=function(model--[[@param model integer]])return InvokeVoid(0x963D27A58DF860AC,model)end;
	RequestMenuPedModel=function(model--[[@param model integer]])return InvokeVoid(0xA0261AEF7ACFC51E,model)end;
	--[=[Checks if the specified model has loaded into memory.]=]
	HasModelLoaded=function(model--[[@param model integer]])return InvokeBool(0x98A4EB5D89A0C952,model)end;---@return boolean
	--[=[STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "V_FIB01_cur_elev");
STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "limbo");
STREAMING::REQUEST_MODELS_IN_ROOM(l_13BB, "V_Office_gnd_lifts");
STREAMING::REQUEST_MODELS_IN_ROOM(l_13BB, "limbo");
STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "v_fib01_jan_elev");
STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "limbo");]=]
	RequestModelsInRoom=function(interior--[[@param interior integer]],roomName--[[@param roomName string]])return InvokeVoid(0x8A7A40100EDFEC58,interior,roomName)end;
	--[=[Unloads model from memory]=]
	SetModelAsNoLongerNeeded=function(model--[[@param model integer]])return InvokeVoid(0xE532F5D78798DAAB,model)end;
	--[=[Check if model is in cdimage(rpf)]=]
	IsModelInCdimage=function(model--[[@param model integer]])return InvokeBool(0x35B9E0803292B641,model)end;---@return boolean
	--[=[Returns whether the specified model exists in the game.]=]
	IsModelValid=function(model--[[@param model integer]])return InvokeBool(0xC0296A2EDF545E92,model)end;---@return boolean
	IsModelAPed=function(model--[[@param model integer]])return InvokeBool(0x75816577FEA6DAD5,model)end;---@return boolean
	--[=[Returns whether the specified model represents a vehicle.]=]
	IsModelAVehicle=function(model--[[@param model integer]])return InvokeBool(0x19AAC8F07BFEC53E,model)end;---@return boolean
	RequestCollisionAtCoord=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0x07503F7948F491A7,x+.0,y+.0,z+.0)end;
	RequestCollisionForModel=function(model--[[@param model integer]])return InvokeVoid(0x923CB32A3B874FCB,model)end;
	HasCollisionForModelLoaded=function(model--[[@param model integer]])return InvokeBool(0x22CCA434E368F03A,model)end;---@return boolean
	--[=[Alias of REQUEST_COLLISION_AT_COORD.]=]
	RequestAdditionalCollisionAtCoord=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0xC9156DC11411A9EA,x+.0,y+.0,z+.0)end;
	--[=[Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json]=]
	DoesAnimDictExist=function(animDict--[[@param animDict string]])return InvokeBool(0x2DA49C3B79856961,animDict)end;---@return boolean
	--[=[Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json]=]
	RequestAnimDict=function(animDict--[[@param animDict string]])return InvokeVoid(0xD3BD40951412FEF6,animDict)end;
	--[=[Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json]=]
	HasAnimDictLoaded=function(animDict--[[@param animDict string]])return InvokeBool(0xD031A9162D01088C,animDict)end;---@return boolean
	--[=[Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json]=]
	RemoveAnimDict=function(animDict--[[@param animDict string]])return InvokeVoid(0xF66A602F829E2A06,animDict)end;
	--[=[Starts loading the specified animation set. An animation set provides movement animations for a ped. See SET_PED_MOVEMENT_CLIPSET.

Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json

Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json]=]
	RequestAnimSet=function(animSet--[[@param animSet string]])return InvokeVoid(0x6EA47DAE7FAD0EED,animSet)end;
	--[=[Gets whether the specified animation set has finished loading. An animation set provides movement animations for a ped. See SET_PED_MOVEMENT_CLIPSET.

Animation set and clip set are synonymous.

Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json

Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json]=]
	HasAnimSetLoaded=function(animSet--[[@param animSet string]])return InvokeBool(0xC4EA073D86FB29B0,animSet)end;---@return boolean
	--[=[Unloads the specified animation set. An animation set provides movement animations for a ped. See SET_PED_MOVEMENT_CLIPSET.

Animation set and clip set are synonymous.

Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json

Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json]=]
	RemoveAnimSet=function(animSet--[[@param animSet string]])return InvokeVoid(0x16350528F93024B3,animSet)end;
	--[=[Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json

Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json]=]
	RequestClipSet=function(clipSet--[[@param clipSet string]])return InvokeVoid(0xD2A71E1A77418A49,clipSet)end;
	--[=[Alias for HAS_ANIM_SET_LOADED.

Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json

Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json]=]
	HasClipSetLoaded=function(clipSet--[[@param clipSet string]])return InvokeBool(0x318234F4F3738AF3,clipSet)end;---@return boolean
	--[=[Alias for REMOVE_ANIM_SET.

Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json

Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json]=]
	RemoveClipSet=function(clipSet--[[@param clipSet string]])return InvokeVoid(0x01F73A131C18CD94,clipSet)end;
	--[=[Exemple: REQUEST_IPL("TrevorsTrailerTrash");

Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json]=]
	RequestIpl=function(iplName--[[@param iplName string]])return InvokeVoid(0x41B4893843BBDB74,iplName)end;
	--[=[Removes an IPL from the map.

Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json

Example:
C#:
Function.Call(Hash.REMOVE_IPL, "trevorstrailertidy");

C++:
STREAMING::REMOVE_IPL("trevorstrailertidy");

iplName = Name of IPL you want to remove.]=]
	RemoveIpl=function(iplName--[[@param iplName string]])return InvokeVoid(0xEE6C5AD3ECE0A82D,iplName)end;
	--[=[Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json]=]
	IsIplActive=function(iplName--[[@param iplName string]])return InvokeBool(0x88A741E44A2B3495,iplName)end;---@return boolean
	SetStreaming=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x6E0C692677008888,toggle)end;
	--[=[0 - default
1 - HeistIsland]=]
	LoadGlobalWaterFile=function(waterType--[[@param waterType integer]])return InvokeVoid(0x7E3F55ED251B76D3,waterType)end;
	GetGlobalWaterFile=function()return InvokeInt(0xF741BD853611592D)end;---@return integer
	SetGamePausesForStreaming=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x717CD6E6FAEBBEDC,toggle)end;
	SetReducePedModelBudget=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x77B5F9A36BF96710,toggle)end;
	SetReduceVehicleModelBudget=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x80C527893080CCF3,toggle)end;
	--[=[This is a NOP function. It does nothing at all.]=]
	SetDitchPoliceModels=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x42CBE54462D92634,toggle)end;
	GetNumberOfStreamingRequests=function()return InvokeInt(0x4060057271CEBC89)end;---@return integer
	--[=[maps script name (thread + 0xD0) by lookup via scriptfx.dat - does nothing when script name is empty]=]
	RequestPtfxAsset=function()return InvokeVoid(0x944955FB2A3935C8)end;
	HasPtfxAssetLoaded=function()return InvokeBool(0xCA7D9B86ECA7481B)end;---@return boolean
	RemovePtfxAsset=function()return InvokeVoid(0x88C6814073DD4A73)end;
	--[=[ From the b678d decompiled scripts:

 STREAMING::REQUEST_NAMED_PTFX_ASSET("core_snow");
 STREAMING::REQUEST_NAMED_PTFX_ASSET("fm_mission_controler");
 STREAMING::REQUEST_NAMED_PTFX_ASSET("proj_xmas_firework");
 STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_apartment_mp");
 STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_biolab_heist");
 STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_fireworks");
 STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_parachute");
 STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_wheelsmoke");
 STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_mp_cig_plane");
 STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_mp_creator");
 STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_mp_tankbattle");
 STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_ornate_heist");
 STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_prison_break_heist_station");]=]
	RequestNamedPtfxAsset=function(fxName--[[@param fxName string]])return InvokeVoid(0xB80D8756B4668AB6,fxName)end;
	HasNamedPtfxAssetLoaded=function(fxName--[[@param fxName string]])return InvokeBool(0x8702416E512EC454,fxName)end;---@return boolean
	RemoveNamedPtfxAsset=function(fxName--[[@param fxName string]])return InvokeVoid(0x5F61EBBE1A00F96D,fxName)end;
	SetVehiclePopulationBudget=function(p0--[[@param p0 integer]])return InvokeVoid(0xCB9E1EB3BE2AF4E9,p0)end;
	--[=[Control how many new (ambient?) peds will spawn in the game world.
Range for p0 seems to be 0-3, where 0 is none and 3 is the normal level.]=]
	SetPedPopulationBudget=function(p0--[[@param p0 integer]])return InvokeVoid(0x8C95333CFC3340F3,p0)end;
	ClearFocus=function()return InvokeVoid(0x31B73D1EA9F01DA2)end;
	--[=[Override the area where the camera will render the terrain.
p3, p4 and p5 are usually set to 0.0
]=]
	SetFocusPosAndVel=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],offsetX--[[@param offsetX number]],offsetY--[[@param offsetY number]],offsetZ--[[@param offsetZ number]])return InvokeVoid(0xBB7454BAFF08FE25,x+.0,y+.0,z+.0,offsetX+.0,offsetY+.0,offsetZ+.0)end;
	--[=[It seems to make the entity's coords mark the point from which LOD-distances are measured. In my testing, setting a vehicle as the focus entity and moving that vehicle more than 300 distance units away from the player will make the level of detail around the player go down drastically (shadows disappear, textures go extremely low res, etc). The player seems to be the default focus entity.]=]
	SetFocusEntity=function(entity--[[@param entity integer]])return InvokeVoid(0x198F77705FA0931D,entity)end;
	IsEntityFocus=function(entity--[[@param entity integer]])return InvokeBool(0x2DDFF3FB9075D747,entity)end;---@return boolean
	SetRestoreFocusEntity=function(p0--[[@param p0 integer]])return InvokeVoid(0x0811381EF5062FEC,p0)end;
	--[=[Possible p0 values:

"prologue"
"Prologue_Main"]=]
	SetMapdatacullboxEnabled=function(name--[[@param name string]],toggle--[[@param toggle boolean]])return InvokeVoid(0xAF12610C644A35C9,name,toggle)end;
	--[=[This native does absolutely nothing, just a nullsub]=]
	SetAllMapdataCulled=function(p0--[[@param p0 any]])return InvokeVoid(0x4E52E752C76E7E7A,p0)end;
	--[=[Always returns zero.]=]
	StreamvolCreateSphere=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],rad--[[@param rad number]],p4--[[@param p4 any]],p5--[[@param p5 any]])return InvokeInt(0x219C7B8D53E429FD,x+.0,y+.0,z+.0,rad+.0,p4,p5)end;---@return integer
	--[=[Always returns zero.]=]
	StreamvolCreateFrustum=function(p0--[[@param p0 number]],p1--[[@param p1 number]],p2--[[@param p2 number]],p3--[[@param p3 number]],p4--[[@param p4 number]],p5--[[@param p5 number]],p6--[[@param p6 number]],p7--[[@param p7 any]],p8--[[@param p8 any]])return InvokeInt(0x1F3F018BC3AFA77C,p0+.0,p1+.0,p2+.0,p3+.0,p4+.0,p5+.0,p6+.0,p7,p8)end;---@return integer
	--[=[Always returns zero.]=]
	StreamvolCreateLine=function(p0--[[@param p0 number]],p1--[[@param p1 number]],p2--[[@param p2 number]],p3--[[@param p3 number]],p4--[[@param p4 number]],p5--[[@param p5 number]],p6--[[@param p6 any]])return InvokeInt(0x0AD9710CEE2F590F,p0+.0,p1+.0,p2+.0,p3+.0,p4+.0,p5+.0,p6)end;---@return integer
	StreamvolDelete=function(unused--[[@param unused any]])return InvokeVoid(0x1EE7D8DF4425F053,unused)end;
	StreamvolHasLoaded=function(unused--[[@param unused any]])return InvokeBool(0x7D41E9D2D17C5B2D,unused)end;---@return boolean
	StreamvolIsValid=function(unused--[[@param unused any]])return InvokeBool(0x07C313F94746702C,unused)end;---@return boolean
	IsStreamvolActive=function()return InvokeBool(0xBC9823AB80A3DCAC)end;---@return boolean
	--[=[`radius` value is usually between `3f` and `7000f` in original 1868 scripts.
`p7` is 0, 1, 2, 3 or 4 used in decompiled scripts, 0 is by far the most common.
Returns True if success, used only 7 times in decompiled scripts of 1868]=]
	NewLoadSceneStart=function(posX--[[@param posX number]],posY--[[@param posY number]],posZ--[[@param posZ number]],offsetX--[[@param offsetX number]],offsetY--[[@param offsetY number]],offsetZ--[[@param offsetZ number]],radius--[[@param radius number]],p7--[[@param p7 integer]])return InvokeBool(0x212A8D0D2BABFAC2,posX+.0,posY+.0,posZ+.0,offsetX+.0,offsetY+.0,offsetZ+.0,radius+.0,p7)end;---@return boolean
	NewLoadSceneStartSphere=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]],p4--[[@param p4 any]])return InvokeBool(0xACCFB4ACF53551B0,x+.0,y+.0,z+.0,radius+.0,p4)end;---@return boolean
	NewLoadSceneStop=function()return InvokeVoid(0xC197616D221FF4A4)end;
	IsNewLoadSceneActive=function()return InvokeBool(0xA41A05B6CB741B85)end;---@return boolean
	IsNewLoadSceneLoaded=function()return InvokeBool(0x01B8247A7A8B9AD1)end;---@return boolean
	IsSafeToStartPlayerSwitch=function()return InvokeBool(0x71E7B2E657449AAD)end;---@return boolean
	--[=[// this enum comes directly from R* so don't edit this
enum ePlayerSwitchTypes
{
  SWITCH_TYPE_AUTO,
 SWITCH_TYPE_LONG,
 SWITCH_TYPE_MEDIUM,
   SWITCH_TYPE_SHORT
};

Use GET_IDEAL_PLAYER_SWITCH_TYPE for the best switch type.

----------------------------------------------------

Examples from the decompiled scripts:

STREAMING::START_PLAYER_SWITCH(l_832._f3, PLAYER::PLAYER_PED_ID(), 0, 3);
STREAMING::START_PLAYER_SWITCH(l_832._f3, PLAYER::PLAYER_PED_ID(), 2050, 3);
STREAMING::START_PLAYER_SWITCH(PLAYER::PLAYER_PED_ID(), l_832._f3, 1024, 3);
STREAMING::START_PLAYER_SWITCH(g_141F27, PLAYER::PLAYER_PED_ID(), 513, v_14);

Note: DO NOT, use SWITCH_TYPE_LONG with flag 513. It leaves you stuck in the clouds. You'll have to call STOP_PLAYER_SWITCH() to return to your ped.

Flag 8 w/ SWITCH_TYPE_LONG will zoom out 3 steps, then zoom in 2/3 steps and stop on the 3rd and just hang there.
Flag 8 w/ SWITCH_TYPE_MEDIUM will zoom out 1 step, and just hang there.]=]
	StartPlayerSwitch=function(from--[[@param from integer]],to--[[@param to integer]],flags--[[@param flags integer]],switchType--[[@param switchType integer]])return InvokeVoid(0xFAA23F2CBA159D67,from,to,flags,switchType)end;
	StopPlayerSwitch=function()return InvokeVoid(0x95C0A5BBDC189AA1)end;
	--[=[Returns true if the player is currently switching, false otherwise.
(When the camera is in the sky moving from Trevor to Franklin for example)]=]
	IsPlayerSwitchInProgress=function()return InvokeBool(0xD9D2CFFF49FAB35F)end;---@return boolean
	GetPlayerSwitchType=function()return InvokeInt(0xB3C94A90D9FC9E62)end;---@return integer
	--[=[x1, y1, z1 -- Coords of your ped model
x2, y2, z2 -- Coords of the ped you want to switch to]=]
	GetIdealPlayerSwitchType=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]])return InvokeInt(0xB5D7B26B45720E05,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0)end;---@return integer
	GetPlayerSwitchState=function()return InvokeInt(0x470555300D10B2A5)end;---@return integer
	GetPlayerShortSwitchState=function()return InvokeInt(0x20F898A5D9782800)end;---@return integer
	SetPlayerShortSwitchStyle=function(p0--[[@param p0 integer]])return InvokeVoid(0x5F2013F8BC24EE69,p0)end;
	GetPlayerSwitchJumpCutIndex=function()return InvokeInt(0x78C0D93253149435)end;---@return integer
	SetPlayerSwitchOutro=function(cameraCoordX--[[@param cameraCoordX number]],cameraCoordY--[[@param cameraCoordY number]],cameraCoordZ--[[@param cameraCoordZ number]],camRotationX--[[@param camRotationX number]],camRotationY--[[@param camRotationY number]],camRotationZ--[[@param camRotationZ number]],camFov--[[@param camFov number]],camFarClip--[[@param camFarClip number]],rotationOrder--[[@param rotationOrder integer]])return InvokeVoid(0xC208B673CE446B61,cameraCoordX+.0,cameraCoordY+.0,cameraCoordZ+.0,camRotationX+.0,camRotationY+.0,camRotationZ+.0,camFov+.0,camFarClip+.0,rotationOrder)end;
	--[=[All names can be found in playerswitchestablishingshots.meta]=]
	SetPlayerSwitchEstablishingShot=function(name--[[@param name string]])return InvokeVoid(0x0FDE9DBFC0A6BC65,name)end;
	AllowPlayerSwitchPan=function()return InvokeVoid(0x43D1680C6D19A8E9)end;
	AllowPlayerSwitchOutro=function()return InvokeVoid(0x74DE2E8739086740)end;
	AllowPlayerSwitchAscent=function()return InvokeVoid(0x8E2A065ABDAE6994)end;
	AllowPlayerSwitchDescent=function()return InvokeVoid(0xAD5FDF34B81BFE79)end;
	IsSwitchReadyForDescent=function()return InvokeBool(0xDFA80CB25D0A19B3)end;---@return boolean
	EnableSwitchPauseBeforeDescent=function()return InvokeVoid(0xD4793DFF3AF2ABCD)end;
	DisableSwitchOutroFx=function()return InvokeVoid(0xBD605B8E0E18B3BB)end;
	--[=[doesn't act normally when used on mount chilliad
Flags is a bitflag:
2^n - Enabled Functionality:
0 - Skip camera rotate up
3 - Wait for SET_PLAYER_SWITCH_ESTABLISHING_SHOT / hang at last step. You will still need to run 0x74DE2E8739086740 to exit "properly" and then STOP_PLAYER_SWITCH
6 - Invert Switch Direction (false = out, true = in)
8 - Hang above ped

switchType: 0 - 3
0: 1 step towards ped
1: 3 steps out from ped
2: 1 step out from ped
3: 1 step towards ped]=]
	SwitchToMultiFirstpart=function(ped--[[@param ped integer]],flags--[[@param flags integer]],switchType--[[@param switchType integer]])return InvokeVoid(0xAAB3200ED59016BC,ped,flags,switchType)end;
	SwitchToMultiSecondpart=function(ped--[[@param ped integer]])return InvokeVoid(0xD8295AF639FD9CB8,ped)end;
	IsSwitchToMultiFirstpartFinished=function()return InvokeBool(0x933BBEEB8C61B5F4)end;---@return boolean
	GetPlayerSwitchInterpOutDuration=function()return InvokeInt(0x08C2D6C52A3104BB)end;---@return integer
	GetPlayerSwitchInterpOutCurrentTime=function()return InvokeInt(0x5B48A06DD0E792A5)end;---@return integer
	IsSwitchSkippingDescent=function()return InvokeBool(0x5B74EA8CFD5E3E7E)end;---@return boolean
	SetSceneStreamingTracksCamPosThisFrame=function()return InvokeVoid(0x1E9057A74FD73E23)end;
	GetLodscale=function()return InvokeFloat(0x0C15B0E443B2349D)end;---@return number
	--[=[This allows you to override "extended distance scaling" setting. Needs to be called each frame.
Max scaling seems to be 200.0, normal is 1.0
See https://gfycat.com/DetailedHauntingIncatern]=]
	OverrideLodscaleThisFrame=function(scaling--[[@param scaling number]])return InvokeVoid(0xA76359FC80B2438E,scaling+.0)end;
	RemapLodscaleRangeThisFrame=function(p0--[[@param p0 number]],p1--[[@param p1 number]],p2--[[@param p2 number]],p3--[[@param p3 number]])return InvokeVoid(0xBED8CA5FF5E04113,p0+.0,p1+.0,p2+.0,p3+.0)end;
	SuppressHdMapStreamingThisFrame=function()return InvokeVoid(0x472397322E92A856)end;
	SetRenderHdOnly=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x40AEFD1A244741F2,toggle)end;
	ForceAllowTimeBasedFadingThisFrame=function()return InvokeVoid(0x03F1A106BDA7DD3E)end;
	IplGroupSwapStart=function(iplName1--[[@param iplName1 string]],iplName2--[[@param iplName2 string]])return InvokeVoid(0x95A7DABDDBB78AE7,iplName1,iplName2)end;
	IplGroupSwapCancel=function()return InvokeVoid(0x63EB2B972A218CAC)end;
	IplGroupSwapIsReady=function()return InvokeBool(0xFB199266061F820A)end;---@return boolean
	IplGroupSwapFinish=function()return InvokeVoid(0xF4A0DADB70F57FA6)end;
	IplGroupSwapIsActive=function()return InvokeBool(0x5068F488DDB54DD8)end;---@return boolean
	--[=[This native is used to attribute the SRL that BEGIN_SRL is going to load. This is usually used for 'in-game' cinematics (not cutscenes but camera stuff) instead of SET_FOCUS_POS_AND_VEL because it loads a specific area of the map which is pretty useful when the camera moves from distant areas.
For instance, GTA:O opening cutscene.
https://pastebin.com/2EeKVeLA : a list of SRL found in srllist.meta
https://pastebin.com/zd9XYUWY here is the content of a SRL file opened with codewalker.]=]
	PrefetchSrl=function(srl--[[@param srl string]])return InvokeVoid(0x3D245789CE12982C,srl)end;
	--[=[Returns true when the srl from BEGIN_SRL is loaded.]=]
	IsSrlLoaded=function()return InvokeBool(0xD0263801A4C5B0BB)end;---@return boolean
	BeginSrl=function()return InvokeVoid(0x9BADDC94EF83B823)end;
	--[=[Clear the current srl and stop rendering the area selected by PREFETCH_SRL and started with BEGIN_SRL.]=]
	EndSrl=function()return InvokeVoid(0x0A41540E63C9EE17)end;
	SetSrlTime=function(p0--[[@param p0 number]])return InvokeVoid(0xA74A541C6884E7B8,p0+.0)end;
	SetSrlPostCutsceneCamera=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]],p5--[[@param p5 any]])return InvokeVoid(0xEF39EE20C537E98C,p0,p1,p2,p3,p4,p5)end;
	SetSrlReadaheadTimes=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0xBEB2D9A1D9A8F55A,p0,p1,p2,p3)end;
	SetSrlLongJumpMode=function(p0--[[@param p0 boolean]])return InvokeVoid(0x20C6C7E4EB082A7F,p0)end;
	SetSrlForcePrestream=function(p0--[[@param p0 any]])return InvokeVoid(0xF8155A7F03DDFC8E,p0)end;
	SetHdArea=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]])return InvokeVoid(0xB85F26619073E775,x+.0,y+.0,z+.0,radius+.0)end;
	ClearHdArea=function()return InvokeVoid(0xCE58B1CFB9290813)end;
	InitCreatorBudget=function()return InvokeVoid(0xB5A4DB34FE89B88A)end;
	ShutdownCreatorBudget=function()return InvokeVoid(0xCCE26000E9A6FAD7)end;
	AddModelToCreatorBudget=function(modelHash--[[@param modelHash integer]])return InvokeBool(0x0BC3144DEB678666,modelHash)end;---@return boolean
	RemoveModelFromCreatorBudget=function(modelHash--[[@param modelHash integer]])return InvokeVoid(0xF086AD9354FAC3A3,modelHash)end;
	--[=[0.0 = no memory used
1.0 = all memory used

Maximum model memory (as defined in common\data\missioncreatordata.meta) is 100 MiB]=]
	GetUsedCreatorBudget=function()return InvokeFloat(0x3D3D8B3BE5A83D35)end;---@return number
	--[=[Enables the specified island. For more information, see islandhopper.meta]=]
	SetIslandEnabled=function(name--[[@param name string]],toggle--[[@param toggle boolean]])return InvokeVoid(0x9A9D1BA639675CF1,name,toggle)end;
}
_G.Task={
	--[=[Stand still (?)]=]
	TaskPause=function(ped--[[@param ped integer]],ms--[[@param ms integer]])return InvokeVoid(0xE73A266DB0CA9042,ped,ms)end;
	--[=[Makes the specified ped stand still for (time) milliseconds.]=]
	TaskStandStill=function(ped--[[@param ped integer]],time--[[@param time integer]])return InvokeVoid(0x919BE13EED931959,ped,time)end;
	--[=[Definition is wrong. This has 4 parameters (Not sure when they were added. v350 has 2, v678 has 4).

v350: Ped ped, bool unused
v678: Ped ped, bool unused, bool flag1, bool flag2

flag1 = super jump, flag2 = do nothing if flag1 is false and doubles super jump height if flag1 is true.]=]
	TaskJump=function(ped--[[@param ped integer]],usePlayerLaunchForce--[[@param usePlayerLaunchForce boolean]],doSuperJump--[[@param doSuperJump boolean]],useFullSuperJumpForce--[[@param useFullSuperJumpForce boolean]])return InvokeVoid(0x0AE4086104E067B1,ped,usePlayerLaunchForce,doSuperJump,useFullSuperJumpForce)end;
	TaskCower=function(ped--[[@param ped integer]],duration--[[@param duration integer]])return InvokeVoid(0x3EB1FE9E8E908E15,ped,duration)end;
	--[=[In the scripts, p3 was always -1.

p3 seems to be duration or timeout of turn animation.
Also facingPed can be 0 or -1 so ped will just raise hands up.]=]
	TaskHandsUp=function(ped--[[@param ped integer]],duration--[[@param duration integer]],facingPed--[[@param facingPed integer]],timeToFacePed--[[@param timeToFacePed integer]],flags--[[@param flags integer]])return InvokeVoid(0xF2EAB31979A7F910,ped,duration,facingPed,timeToFacePed,flags)end;
	UpdateTaskHandsUpDuration=function(ped--[[@param ped integer]],duration--[[@param duration integer]])return InvokeVoid(0xA98FCAFD7893C834,ped,duration)end;
	--[=[The given ped will try to open the nearest door to 'seat'.
Example: telling the ped to open the door for the driver seat does not necessarily mean it will open the driver door, it may choose to open the passenger door instead if that one is closer.]=]
	TaskOpenVehicleDoor=function(ped--[[@param ped integer]],vehicle--[[@param vehicle integer]],timeOut--[[@param timeOut integer]],seat--[[@param seat integer]],speed--[[@param speed number]])return InvokeVoid(0x965791A9A488A062,ped,vehicle,timeOut,seat,speed+.0)end;
	--[=[speed 1.0 = walk, 2.0 = run
p5 1 = normal, 3 = teleport to vehicle, 16 = teleport directly into vehicle
p6 is always 0

Usage of seat 
-1 = driver
0 = passenger
1 = left back seat
2 = right back seat
3 = outside left
4 = outside right]=]
	TaskEnterVehicle=function(ped--[[@param ped integer]],vehicle--[[@param vehicle integer]],timeout--[[@param timeout integer]],seat--[[@param seat integer]],speed--[[@param speed number]],flag--[[@param flag integer]],overrideEntryClipsetName--[[@param overrideEntryClipsetName string]])return InvokeVoid(0xC20E50AA46D09CA8,ped,vehicle,timeout,seat,speed+.0,flag,overrideEntryClipsetName)end;
	--[=[Flags from decompiled scripts:
0 = normal exit and closes door.
1 = normal exit and closes door.
16 = teleports outside, door kept closed.
64 = normal exit and closes door, maybe a bit slower animation than 0.
256 = normal exit but does not close the door.
4160 = ped is throwing himself out, even when the vehicle is still.
262144 = ped moves to passenger seat first, then exits normally

Others to be tried out: 320, 512, 131072.]=]
	TaskLeaveVehicle=function(ped--[[@param ped integer]],vehicle--[[@param vehicle integer]],flags--[[@param flags integer]])return InvokeVoid(0xD3DBCE61A490BE02,ped,vehicle,flags)end;
	TaskGetOffBoat=function(ped--[[@param ped integer]],boat--[[@param boat integer]])return InvokeVoid(0x9C00E77AF14B2DFF,ped,boat)end;
	TaskSkyDive=function(ped--[[@param ped integer]],instant--[[@param instant boolean]])return InvokeVoid(0x601736CFE536B0A0,ped,instant)end;
	--[=[Second parameter is unused.

second parameter was for jetpack in the early stages of gta and the hard coded code is now removed]=]
	TaskParachute=function(ped--[[@param ped integer]],giveParachuteItem--[[@param giveParachuteItem boolean]],instant--[[@param instant boolean]])return InvokeVoid(0xD2F1C53C97EE81AB,ped,giveParachuteItem,instant)end;
	--[=[makes ped parachute to coords x y z. Works well with PATHFIND::GET_SAFE_COORD_FOR_PED]=]
	TaskParachuteToTarget=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0xB33E291AFA6BD03A,ped,x+.0,y+.0,z+.0)end;
	SetParachuteTaskTarget=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0xC313379AF0FCEDA7,ped,x+.0,y+.0,z+.0)end;
	SetParachuteTaskThrust=function(ped--[[@param ped integer]],thrust--[[@param thrust number]])return InvokeVoid(0x0729BAC1B8C64317,ped,thrust+.0)end;
	--[=[minHeightAboveGround: the minimum height above ground the heli must be at before the ped can start rappelling

Only appears twice in the scripts.

TASK::TASK_RAPPEL_FROM_HELI(PLAYER::PLAYER_PED_ID(), 10.0f);
TASK::TASK_RAPPEL_FROM_HELI(a_0, 10.0f);]=]
	TaskRappelFromHeli=function(ped--[[@param ped integer]],minHeightAboveGround--[[@param minHeightAboveGround number]])return InvokeVoid(0x09693B0312F91649,ped,minHeightAboveGround+.0)end;
	--[=[info about driving modes: https://gtaforums.com/topic/822314-guide-driving-styles/]=]
	TaskVehicleDriveToCoord=function(ped--[[@param ped integer]],vehicle--[[@param vehicle integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],speed--[[@param speed number]],p6--[[@param p6 any]],vehicleModel--[[@param vehicleModel integer]],drivingMode--[[@param drivingMode integer]],stopRange--[[@param stopRange number]],straightLineDistance--[[@param straightLineDistance number]])return InvokeVoid(0xE2A2AA2F659D77A7,ped,vehicle,x+.0,y+.0,z+.0,speed+.0,p6,vehicleModel,drivingMode,stopRange+.0,straightLineDistance+.0)end;
	TaskVehicleDriveToCoordLongrange=function(ped--[[@param ped integer]],vehicle--[[@param vehicle integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],speed--[[@param speed number]],driveMode--[[@param driveMode integer]],stopRange--[[@param stopRange number]])return InvokeVoid(0x158BB33F920D360C,ped,vehicle,x+.0,y+.0,z+.0,speed+.0,driveMode,stopRange+.0)end;
	TaskVehicleDriveWander=function(ped--[[@param ped integer]],vehicle--[[@param vehicle integer]],speed--[[@param speed number]],drivingStyle--[[@param drivingStyle integer]])return InvokeVoid(0x480142959D337D00,ped,vehicle,speed+.0,drivingStyle)end;
	--[=[p6 always -1
p7 always 10.0
p8 always 1]=]
	TaskFollowToOffsetOfEntity=function(ped--[[@param ped integer]],entity--[[@param entity integer]],offsetX--[[@param offsetX number]],offsetY--[[@param offsetY number]],offsetZ--[[@param offsetZ number]],movementSpeed--[[@param movementSpeed number]],timeout--[[@param timeout integer]],stoppingRange--[[@param stoppingRange number]],persistFollowing--[[@param persistFollowing boolean]])return InvokeVoid(0x304AE42E357B8C7E,ped,entity,offsetX+.0,offsetY+.0,offsetZ+.0,movementSpeed+.0,timeout,stoppingRange+.0,persistFollowing)end;
	TaskGoStraightToCoord=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],speed--[[@param speed number]],timeout--[[@param timeout integer]],targetHeading--[[@param targetHeading number]],distanceToSlide--[[@param distanceToSlide number]])return InvokeVoid(0xD76B57B44F1E6F8B,ped,x+.0,y+.0,z+.0,speed+.0,timeout,targetHeading+.0,distanceToSlide+.0)end;
	TaskGoStraightToCoordRelativeToEntity=function(ped--[[@param ped integer]],entity--[[@param entity integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],moveBlendRatio--[[@param moveBlendRatio number]],time--[[@param time integer]])return InvokeVoid(0x61E360B7E040D12E,ped,entity,x+.0,y+.0,z+.0,moveBlendRatio+.0,time)end;
	--[=[Makes the specified ped achieve the specified heading.

pedHandle: The handle of the ped to assign the task to.
heading: The desired heading.
timeout: The time, in milliseconds, to allow the task to complete. If the task times out, it is cancelled, and the ped will stay at the heading it managed to reach in the time.]=]
	TaskAchieveHeading=function(ped--[[@param ped integer]],heading--[[@param heading number]],timeout--[[@param timeout integer]])return InvokeVoid(0x93B93A37987F1F3D,ped,heading+.0,timeout)end;
	--[=[MulleKD19: Clears the current point route. Call this before TASK_EXTEND_ROUTE and TASK_FOLLOW_POINT_ROUTE.]=]
	TaskFlushRoute=function()return InvokeVoid(0x841142A1376E9006)end;
	--[=[MulleKD19: Adds a new point to the current point route. Call TASK_FLUSH_ROUTE before the first call to this. Call TASK_FOLLOW_POINT_ROUTE to make the Ped go the route.

A maximum of 8 points can be added.]=]
	TaskExtendRoute=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0x1E7889778264843A,x+.0,y+.0,z+.0)end;
	--[=[MulleKD19: Makes the ped go on the created point route.

ped: The ped to give the task to.
speed: The speed to move at in m/s.
int: Unknown. Can be 0, 1, 2 or 3.

Example:
TASK_FLUSH_ROUTE();
TASK_EXTEND_ROUTE(0f, 0f, 70f);
TASK_EXTEND_ROUTE(10f, 0f, 70f);
TASK_EXTEND_ROUTE(10f, 10f, 70f);
TASK_FOLLOW_POINT_ROUTE(GET_PLAYER_PED(), 1f, 0);]=]
	TaskFollowPointRoute=function(ped--[[@param ped integer]],speed--[[@param speed number]],mode--[[@param mode integer]])return InvokeVoid(0x595583281858626E,ped,speed+.0,mode)end;
	--[=[The entity will move towards the target until time is over (duration) or get in target's range (distance). p5 and p6 are unknown, but you could leave p5 = 1073741824 or 100 or even 0 (didn't see any difference but on the decompiled scripts, they use 1073741824 mostly) and p6 = 0

Note: I've only tested it on entity -> ped and target -> vehicle. It could work differently on other entities, didn't try it yet.

Example: TASK::TASK_GO_TO_ENTITY(pedHandle, vehicleHandle, 5000, 4.0, 100, 1073741824, 0)

Ped will run towards the vehicle for 5 seconds and stop when time is over or when he gets 4 meters(?) around the vehicle (with duration = -1, the task duration will be ignored).

enum EGOTO_ENTITY_SCRIPT_FLAGS
{
	EGOTO_ENTITY_NEVER_SLOW_FOR_PATH_LENGTH = 0x01,
};]=]
	TaskGoToEntity=function(entity--[[@param entity integer]],target--[[@param target integer]],duration--[[@param duration integer]],distance--[[@param distance number]],moveBlendRatio--[[@param moveBlendRatio number]],slowDownDistance--[[@param slowDownDistance number]],flags--[[@param flags integer]])return InvokeVoid(0x6A071245EB0D1882,entity,target,duration,distance+.0,moveBlendRatio+.0,slowDownDistance+.0,flags)end;
	--[=[Makes the specified ped flee the specified distance from the specified position.]=]
	TaskSmartFleeCoord=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],distance--[[@param distance number]],time--[[@param time integer]],preferPavements--[[@param preferPavements boolean]],quitIfOutOfRange--[[@param quitIfOutOfRange boolean]])return InvokeVoid(0x94587F17E9C365D5,ped,x+.0,y+.0,z+.0,distance+.0,time,preferPavements,quitIfOutOfRange)end;
	--[=[Makes a ped run away from another ped (fleeTarget).

distance = ped will flee this distance.
fleeTime = ped will flee for this amount of time, set to "-1" to flee forever]=]
	TaskSmartFleePed=function(ped--[[@param ped integer]],fleeTarget--[[@param fleeTarget integer]],safeDistance--[[@param safeDistance number]],fleeTime--[[@param fleeTime integer]],preferPavements--[[@param preferPavements boolean]],updateToNearestHatedPed--[[@param updateToNearestHatedPed boolean]])return InvokeVoid(0x22B0D0E37CCB840D,ped,fleeTarget,safeDistance+.0,fleeTime,preferPavements,updateToNearestHatedPed)end;
	TaskReactAndFleePed=function(ped--[[@param ped integer]],fleeTarget--[[@param fleeTarget integer]])return InvokeVoid(0x72C896464915D1B1,ped,fleeTarget)end;
	TaskShockingEventReact=function(ped--[[@param ped integer]],eventHandle--[[@param eventHandle integer]])return InvokeVoid(0x452419CBD838065B,ped,eventHandle)end;
	TaskWanderInArea=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]],minimalLength--[[@param minimalLength number]],timeBetweenWalks--[[@param timeBetweenWalks number]])return InvokeVoid(0xE054346CA3A0F315,ped,x+.0,y+.0,z+.0,radius+.0,minimalLength+.0,timeBetweenWalks+.0)end;
	--[=[Makes ped walk around the area.

set p1 to 10.0f and p2 to 10 if you want the ped to walk anywhere without a duration.]=]
	TaskWanderStandard=function(ped--[[@param ped integer]],heading--[[@param heading number]],flags--[[@param flags integer]])return InvokeVoid(0xBB9CE077274F6A1B,ped,heading+.0,flags)end;
	TaskWanderSpecific=function(ped--[[@param ped integer]],conditionalAnimGroupStr--[[@param conditionalAnimGroupStr string]],conditionalAnimStr--[[@param conditionalAnimStr string]],heading--[[@param heading number]])return InvokeVoid(0x6919A2F136426098,ped,conditionalAnimGroupStr,conditionalAnimStr,heading+.0)end;
	--[=[Modes:
0 - ignore heading
1 - park forward
2 - park backwards

Depending on the angle of approach, the vehicle can park at the specified heading or at its exact opposite (-180) angle.

Radius seems to define how close the vehicle has to be -after parking- to the position for this task considered completed. If the value is too small, the vehicle will try to park again until it's exactly where it should be. 20.0 Works well but lower values don't, like the radius is measured in centimeters or something.]=]
	TaskVehiclePark=function(ped--[[@param ped integer]],vehicle--[[@param vehicle integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],heading--[[@param heading number]],mode--[[@param mode integer]],radius--[[@param radius number]],keepEngineOn--[[@param keepEngineOn boolean]])return InvokeVoid(0x0F3E34E968EA374E,ped,vehicle,x+.0,y+.0,z+.0,heading+.0,mode,radius+.0,keepEngineOn)end;
	--[=[known "killTypes" are: "AR_stealth_kill_knife" and "AR_stealth_kill_a".]=]
	TaskStealthKill=function(killer--[[@param killer integer]],target--[[@param target integer]],stealthKillActionResultHash--[[@param stealthKillActionResultHash integer]],desiredMoveBlendRatio--[[@param desiredMoveBlendRatio number]],stealthFlags--[[@param stealthFlags integer]])return InvokeVoid(0xAA5DC05579D60BD9,killer,target,stealthKillActionResultHash,desiredMoveBlendRatio+.0,stealthFlags)end;
	TaskPlantBomb=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],heading--[[@param heading number]])return InvokeVoid(0x965FEC691D55E9BF,ped,x+.0,y+.0,z+.0,heading+.0)end;
	--[=[If no timeout, set timeout to -1.]=]
	TaskFollowNavMeshToCoord=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],moveBlendRatio--[[@param moveBlendRatio number]],time--[[@param time integer]],targetRadius--[[@param targetRadius number]],flags--[[@param flags integer]],targetHeading--[[@param targetHeading number]])return InvokeVoid(0x15D3A79D4E44B913,ped,x+.0,y+.0,z+.0,moveBlendRatio+.0,time,targetRadius+.0,flags,targetHeading+.0)end;
	TaskFollowNavMeshToCoordAdvanced=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],moveBlendRatio--[[@param moveBlendRatio number]],time--[[@param time integer]],targetRadius--[[@param targetRadius number]],flags--[[@param flags integer]],slideToCoordHeading--[[@param slideToCoordHeading number]],maxSlopeNavigable--[[@param maxSlopeNavigable number]],clampMaxSearchDistance--[[@param clampMaxSearchDistance number]],targetHeading--[[@param targetHeading number]])return InvokeVoid(0x17F58B88D085DBAC,ped,x+.0,y+.0,z+.0,moveBlendRatio+.0,time,targetRadius+.0,flags,slideToCoordHeading+.0,maxSlopeNavigable+.0,clampMaxSearchDistance+.0,targetHeading+.0)end;
	SetPedPathCanUseClimbovers=function(ped--[[@param ped integer]],Toggle--[[@param Toggle boolean]])return InvokeVoid(0x8E06A6FE76C9EFF4,ped,Toggle)end;
	SetPedPathCanUseLadders=function(ped--[[@param ped integer]],Toggle--[[@param Toggle boolean]])return InvokeVoid(0x77A5B103C87F476E,ped,Toggle)end;
	SetPedPathCanDropFromHeight=function(ped--[[@param ped integer]],Toggle--[[@param Toggle boolean]])return InvokeVoid(0xE361C5C71C431A4F,ped,Toggle)end;
	--[=[Default modifier is 1.0, minimum is 0.0 and maximum is 10.0.]=]
	SetPedPathClimbCostModifier=function(ped--[[@param ped integer]],modifier--[[@param modifier number]])return InvokeVoid(0x88E32DB8C1A4AA4B,ped,modifier+.0)end;
	SetPedPathMayEnterWater=function(ped--[[@param ped integer]],mayEnterWater--[[@param mayEnterWater boolean]])return InvokeVoid(0xF35425A4204367EC,ped,mayEnterWater)end;
	SetPedPathPreferToAvoidWater=function(ped--[[@param ped integer]],avoidWater--[[@param avoidWater boolean]])return InvokeVoid(0x38FE1EC73743793C,ped,avoidWater)end;
	SetPedPathAvoidFire=function(ped--[[@param ped integer]],avoidFire--[[@param avoidFire boolean]])return InvokeVoid(0x4455517B28441E60,ped,avoidFire)end;
	--[=[Needs to be looped! And yes, it does work and is not a hash collision.
Birds will try to reach the given height.]=]
	SetGlobalMinBirdFlightHeight=function(height--[[@param height number]])return InvokeVoid(0x6C6B148586F934F7,height+.0)end;
	--[=[Looks like the last parameter returns true if the path has been calculated, while the first returns the remaining distance to the end of the path.
Return value of native is the same as GET_NAVMESH_ROUTE_RESULT
Looks like the native returns an int for the path's state:
1 - ???
2 - ???
3 - Finished Generating ]=]
	GetNavmeshRouteDistanceRemaining=function(ped--[[@param ped integer]],distanceRemaining--[[@param distanceRemaining number*]],isPathReady--[[@param isPathReady boolean*]])return InvokeInt(0xC6F5C0BCDC74D62D,ped,distanceRemaining,isPathReady)end;---@return integer
	--[=[See GET_NAVMESH_ROUTE_DISTANCE_REMAINING for more details.]=]
	GetNavmeshRouteResult=function(ped--[[@param ped integer]])return InvokeInt(0x632E831F382A0FA8,ped)end;---@return integer
	IsControlledVehicleUnableToGetToRoad=function(ped--[[@param ped integer]])return InvokeBool(0x3E38E28A1D80DDF6,ped)end;---@return boolean
	--[=[example from fm_mission_controller

TASK::TASK_GO_TO_COORD_ANY_MEANS(l_649, sub_f7e86(-1, 0), 1.0, 0, 0, 786603, 0xbf800000);
 ]=]
	TaskGoToCoordAnyMeans=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],moveBlendRatio--[[@param moveBlendRatio number]],vehicle--[[@param vehicle integer]],useLongRangeVehiclePathing--[[@param useLongRangeVehiclePathing boolean]],drivingFlags--[[@param drivingFlags integer]],maxRangeToShootTargets--[[@param maxRangeToShootTargets number]])return InvokeVoid(0x5BC448CB78FA3E88,ped,x+.0,y+.0,z+.0,moveBlendRatio+.0,vehicle,useLongRangeVehiclePathing,drivingFlags,maxRangeToShootTargets+.0)end;
	TaskGoToCoordAnyMeansExtraParams=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],moveBlendRatio--[[@param moveBlendRatio number]],vehicle--[[@param vehicle integer]],useLongRangeVehiclePathing--[[@param useLongRangeVehiclePathing boolean]],drivingFlags--[[@param drivingFlags integer]],maxRangeToShootTargets--[[@param maxRangeToShootTargets number]],extraVehToTargetDistToPreferVehicle--[[@param extraVehToTargetDistToPreferVehicle number]],driveStraightLineDistance--[[@param driveStraightLineDistance number]],extraFlags--[[@param extraFlags integer]],warpTimerMS--[[@param warpTimerMS number]])return InvokeVoid(0x1DD45F9ECFDB1BC9,ped,x+.0,y+.0,z+.0,moveBlendRatio+.0,vehicle,useLongRangeVehiclePathing,drivingFlags,maxRangeToShootTargets+.0,extraVehToTargetDistToPreferVehicle+.0,driveStraightLineDistance+.0,extraFlags,warpTimerMS+.0)end;
	TaskGoToCoordAnyMeansExtraParamsWithCruiseSpeed=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],moveBlendRatio--[[@param moveBlendRatio number]],vehicle--[[@param vehicle integer]],useLongRangeVehiclePathing--[[@param useLongRangeVehiclePathing boolean]],drivingFlags--[[@param drivingFlags integer]],maxRangeToShootTargets--[[@param maxRangeToShootTargets number]],extraVehToTargetDistToPreferVehicle--[[@param extraVehToTargetDistToPreferVehicle number]],driveStraightLineDistance--[[@param driveStraightLineDistance number]],extraFlags--[[@param extraFlags integer]],cruiseSpeed--[[@param cruiseSpeed number]],targetArriveDist--[[@param targetArriveDist number]])return InvokeVoid(0xB8ECD61F531A7B02,ped,x+.0,y+.0,z+.0,moveBlendRatio+.0,vehicle,useLongRangeVehiclePathing,drivingFlags,maxRangeToShootTargets+.0,extraVehToTargetDistToPreferVehicle+.0,driveStraightLineDistance+.0,extraFlags,cruiseSpeed+.0,targetArriveDist+.0)end;
	--[=[Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json

float speed > normal speed is 8.0f
----------------------

float speedMultiplier > multiply the playback speed
----------------------

int duration: time in millisecond
----------------------
-1 _ _ _ _ _ _ _> Default (see flag)
0 _ _ _ _ _ _ _ > Not play at all
Small value _ _ > Slow down animation speed
Other _ _ _ _ _ > freeze player control until specific time (ms) has 
_ _ _ _ _ _ _ _ _ passed. (No effect if flag is set to be 
_ _ _ _ _ _ _ _ _ controllable.)

int flag:
----------------------
enum eAnimationFlags
{
 ANIM_FLAG_NORMAL = 0,
   ANIM_FLAG_REPEAT = 1,
   ANIM_FLAG_STOP_LAST_FRAME = 2,
   ANIM_FLAG_UPPERBODY = 16,
   ANIM_FLAG_ENABLE_PLAYER_CONTROL = 32,
   ANIM_FLAG_CANCELABLE = 120,
};
Odd number : loop infinitely
Even number : Freeze at last frame
Multiple of 4: Freeze at last frame but controllable

01 to 15 > Full body
10 to 31 > Upper body
32 to 47 > Full body > Controllable
48 to 63 > Upper body > Controllable
...
001 to 255 > Normal
256 to 511 > Garbled
...

playbackRate:

values are between 0.0 and 1.0


lockX:  

0 in most cases 1 for rcmepsilonism8 and rcmpaparazzo_3
> 1 for mini@sprunk
 

lockY:

0 in most cases 
1 for missfam5_yoga, missfra1mcs_2_crew_react


lockZ: 

    0 for single player 
    Can be 1 but only for MP ]=]
	TaskPlayAnim=function(ped--[[@param ped integer]],animDictionary--[[@param animDictionary string]],animationName--[[@param animationName string]],blendInSpeed--[[@param blendInSpeed number]],blendOutSpeed--[[@param blendOutSpeed number]],duration--[[@param duration integer]],flag--[[@param flag integer]],playbackRate--[[@param playbackRate number]],lockX--[[@param lockX boolean]],lockY--[[@param lockY boolean]],lockZ--[[@param lockZ boolean]])return InvokeVoid(0xEA47FE3719165B94,ped,animDictionary,animationName,blendInSpeed+.0,blendOutSpeed+.0,duration,flag,playbackRate+.0,lockX,lockY,lockZ)end;
	--[=[It's similar to TASK_PLAY_ANIM, except the first 6 floats let you specify the initial position and rotation of the task. (Ped gets teleported to the position).

Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json]=]
	TaskPlayAnimAdvanced=function(ped--[[@param ped integer]],animDict--[[@param animDict string]],animName--[[@param animName string]],posX--[[@param posX number]],posY--[[@param posY number]],posZ--[[@param posZ number]],rotX--[[@param rotX number]],rotY--[[@param rotY number]],rotZ--[[@param rotZ number]],animEnterSpeed--[[@param animEnterSpeed number]],animExitSpeed--[[@param animExitSpeed number]],duration--[[@param duration integer]],flag--[[@param flag any]],animTime--[[@param animTime number]],rotOrder--[[@param rotOrder integer]],ikFlags--[[@param ikFlags integer]])return InvokeVoid(0x83CDB10EA29B370B,ped,animDict,animName,posX+.0,posY+.0,posZ+.0,rotX+.0,rotY+.0,rotZ+.0,animEnterSpeed+.0,animExitSpeed+.0,duration,flag,animTime+.0,rotOrder,ikFlags)end;
	--[=[Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json]=]
	StopAnimTask=function(entity--[[@param entity integer]],animDictionary--[[@param animDictionary string]],animationName--[[@param animationName string]],blendDelta--[[@param blendDelta number]])return InvokeVoid(0x97FF36A1D40EA00A,entity,animDictionary,animationName,blendDelta+.0)end;
	--[=[From fm_mission_controller.c:
reserve_network_mission_objects(get_num_reserved_mission_objects(0) + 1);
           vVar28 = {0.094f, 0.02f, -0.005f};
            vVar29 = {-92.24f, 63.64f, 150.24f};
          func_253(&uVar30, joaat("prop_ld_case_01"), Global_1592429.imm_34757[iParam1 <268>], 1, 1, 0, 1);
         set_entity_lod_dist(net_to_ent(uVar30), 500);
         attach_entity_to_entity(net_to_ent(uVar30), iParam0, get_ped_bone_index(iParam0, 28422), vVar28, vVar29, 1, 0, 0, 0, 2, 1);
           Var31.imm_4 = 1065353216;
         Var31.imm_5 = 1065353216;
         Var31.imm_9 = 1065353216;
         Var31.imm_10 = 1065353216;
            Var31.imm_14 = 1065353216;
            Var31.imm_15 = 1065353216;
            Var31.imm_17 = 1040187392;
            Var31.imm_18 = 1040187392;
            Var31.imm_19 = -1;
            Var32.imm_4 = 1065353216;
         Var32.imm_5 = 1065353216;
         Var32.imm_9 = 1065353216;
         Var32.imm_10 = 1065353216;
            Var32.imm_14 = 1065353216;
            Var32.imm_15 = 1065353216;
            Var32.imm_17 = 1040187392;
            Var32.imm_18 = 1040187392;
            Var32.imm_19 = -1;
            Var31 = 1;
            Var31.imm_1 = "weapons@misc@jerrycan@mp_male";
          Var31.imm_2 = "idle";
           Var31.imm_20 = 1048633;
           Var31.imm_4 = 0.5f;
           Var31.imm_16 = get_hash_key("BONEMASK_ARMONLY_R");
          task_scripted_animation(iParam0, &Var31, &Var32, &Var32, 0f, 0.25f);
          set_model_as_no_longer_needed(joaat("prop_ld_case_01"));
            remove_anim_dict("anim@heists@biolab@");]=]
	TaskScriptedAnimation=function(ped--[[@param ped integer]],priorityLowData--[[@param priorityLowData integer*]],priorityMidData--[[@param priorityMidData integer*]],priorityHighData--[[@param priorityHighData integer*]],blendInDelta--[[@param blendInDelta number]],blendOutDelta--[[@param blendOutDelta number]])return InvokeVoid(0x126EF75F1E17ABE5,ped,priorityLowData,priorityMidData,priorityHighData,blendInDelta+.0,blendOutDelta+.0)end;
	PlayEntityScriptedAnim=function(entity--[[@param entity integer]],priorityLowData--[[@param priorityLowData integer*]],priorityMidData--[[@param priorityMidData integer*]],priorityHighData--[[@param priorityHighData integer*]],blendInDelta--[[@param blendInDelta number]],blendOutDelta--[[@param blendOutDelta number]])return InvokeVoid(0x77A1EEC547E7FCF1,entity,priorityLowData,priorityMidData,priorityHighData,blendInDelta+.0,blendOutDelta+.0)end;
	--[=[Looks like p1 may be a flag, still need to do some research, though.]=]
	StopAnimPlayback=function(entity--[[@param entity integer]],priority--[[@param priority integer]],secondary--[[@param secondary boolean]])return InvokeVoid(0xEE08C992D238C5D1,entity,priority,secondary)end;
	SetAnimWeight=function(entity--[[@param entity integer]],weight--[[@param weight number]],priority--[[@param priority integer]],index--[[@param index integer]],secondary--[[@param secondary boolean]])return InvokeVoid(0x207F1A47C0342F48,entity,weight+.0,priority,index,secondary)end;
	SetAnimPhase=function(entity--[[@param entity integer]],phase--[[@param phase number]],priority--[[@param priority integer]],secondary--[[@param secondary boolean]])return InvokeVoid(0xDDF3CB5A0A4C0B49,entity,phase+.0,priority,secondary)end;
	SetAnimRate=function(entity--[[@param entity integer]],rate--[[@param rate number]],priority--[[@param priority integer]],secondary--[[@param secondary boolean]])return InvokeVoid(0x032D49C5E359C847,entity,rate+.0,priority,secondary)end;
	SetAnimLooped=function(entity--[[@param entity integer]],looped--[[@param looped boolean]],priority--[[@param priority integer]],secondary--[[@param secondary boolean]])return InvokeVoid(0x70033C3CC29A1FF4,entity,looped,priority,secondary)end;
	--[=[Example from the scripts:
TASK::TASK_PLAY_PHONE_GESTURE_ANIMATION(PLAYER::PLAYER_PED_ID(), v_3, v_2, v_4, 0.25, 0.25, 0, 0);

=========================================================
^^ No offense, but Idk how that would really help anyone.

As for the animDict & animation, they're both store in a global in all 5 scripts. So if anyone would be so kind as to read that global and comment what strings they use. Thanks.

Known boneMaskTypes'
"BONEMASK_HEADONLY"
"BONEMASK_HEAD_NECK_AND_ARMS"
"BONEMASK_HEAD_NECK_AND_L_ARM"
"BONEMASK_HEAD_NECK_AND_R_ARM"

p4 known args - 0.0f, 0.5f, 0.25f
p5 known args - 0.0f, 0.25f
p6 known args - 1 if a global if check is passed.
p7 known args - 1 if a global if check is passed.

The values found above, I found within the 5 scripts this is ever called in. (fmmc_launcher, fm_deathmatch_controller, fm_impromptu_dm_controller, fm_mission_controller, and freemode).
=========================================================

Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json]=]
	TaskPlayPhoneGestureAnimation=function(ped--[[@param ped integer]],animDict--[[@param animDict string]],animation--[[@param animation string]],boneMaskType--[[@param boneMaskType string]],blendInDuration--[[@param blendInDuration number]],blendOutDuration--[[@param blendOutDuration number]],isLooping--[[@param isLooping boolean]],holdLastFrame--[[@param holdLastFrame boolean]])return InvokeVoid(0x8FBB6758B3B3E9EC,ped,animDict,animation,boneMaskType,blendInDuration+.0,blendOutDuration+.0,isLooping,holdLastFrame)end;
	TaskStopPhoneGestureAnimation=function(ped--[[@param ped integer]],blendOutOverride--[[@param blendOutOverride number]])return InvokeVoid(0x3FA00D4F4641BFAE,ped,blendOutOverride+.0)end;
	IsPlayingPhoneGestureAnim=function(ped--[[@param ped integer]])return InvokeBool(0xB8EBB1E9D3588C10,ped)end;---@return boolean
	GetPhoneGestureAnimCurrentTime=function(ped--[[@param ped integer]])return InvokeFloat(0x47619ABE8B268C60,ped)end;---@return number
	GetPhoneGestureAnimTotalTime=function(ped--[[@param ped integer]])return InvokeFloat(0x1EE0F68A7C25DEC6,ped)end;---@return number
	--[=[Most probably plays a specific animation on vehicle. For example getting chop out of van etc...

Here's how its used - 

TASK::TASK_VEHICLE_PLAY_ANIM(l_325, "rcmnigel1b", "idle_speedo");

TASK::TASK_VEHICLE_PLAY_ANIM(l_556[0/*1*/], "missfra0_chop_drhome", "InCar_GetOutofBack_Speedo");

FYI : Speedo is the name of van in which chop was put in the mission.]=]
	TaskVehiclePlayAnim=function(vehicle--[[@param vehicle integer]],animationSet--[[@param animationSet string]],animationName--[[@param animationName string]])return InvokeVoid(0x69F5C3BD0F3EBD89,vehicle,animationSet,animationName)end;
	--[=[enum eScriptLookatFlags
{
	SLF_SLOW_TURN_RATE            = 1,    // turn the head toward the target slowly
	SLF_FAST_TURN_RATE            = 2,    // turn the head toward the target quickly
	SLF_EXTEND_YAW_LIMIT        = 4,    // wide yaw head limits
	SLF_EXTEND_PITCH_LIMIT        = 8,    // wide pitch head limit
	SLF_WIDEST_YAW_LIMIT        = 16,   // widest yaw head limit
	SLF_WIDEST_PITCH_LIMIT        = 32,   // widest pitch head limit
	SLF_NARROW_YAW_LIMIT        = 64,   // narrow yaw head limits
	SLF_NARROW_PITCH_LIMIT        = 128,  // narrow pitch head limit
	SLF_NARROWEST_YAW_LIMIT        = 256,  // narrowest yaw head limit
	SLF_NARROWEST_PITCH_LIMIT    = 512,  // narrowest pitch head limit
	SLF_USE_TORSO                = 1024, // use the torso aswell as the neck and head (currently disabled)
	SLF_WHILE_NOT_IN_FOV        = 2048, // keep tracking the target even if they are not in the hard coded FOV
	SLF_USE_CAMERA_FOCUS        = 4096, // use the camera as the target
	SLF_USE_EYES_ONLY            = 8192, // only track the target with the eyes  
	SLF_USE_LOOK_DIR            = 16384, // use information in look dir DOF
	SLF_FROM_SCRIPT                = 32768, // internal use only
	SLF_USE_REF_DIR_ABSOLUTE    = 65536  // use absolute reference direction mode for solver
};]=]
	TaskLookAtCoord=function(entity--[[@param entity integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],duration--[[@param duration integer]],flags--[[@param flags integer]],priority--[[@param priority integer]])return InvokeVoid(0x6FA46612594F7973,entity,x+.0,y+.0,z+.0,duration,flags,priority)end;
	--[=[For flags, please refer to TASK_LOOK_AT_COORD.]=]
	TaskLookAtEntity=function(ped--[[@param ped integer]],lookAt--[[@param lookAt integer]],duration--[[@param duration integer]],flags--[[@param flags integer]],priority--[[@param priority integer]])return InvokeVoid(0x69F4BE8C8CC4796C,ped,lookAt,duration,flags,priority)end;
	TaskClearLookAt=function(ped--[[@param ped integer]])return InvokeVoid(0x0F804F1DB19B9689,ped)end;
	OpenSequenceTask=function(taskSequenceId--[[@param taskSequenceId integer*]])return InvokeVoid(0xE8854A4326B9E12B,taskSequenceId)end;
	CloseSequenceTask=function(taskSequenceId--[[@param taskSequenceId integer]])return InvokeVoid(0x39E72BC99E6360CB,taskSequenceId)end;
	TaskPerformSequence=function(ped--[[@param ped integer]],taskSequenceId--[[@param taskSequenceId integer]])return InvokeVoid(0x5ABA3986D90D8A3B,ped,taskSequenceId)end;
	TaskPerformSequenceLocally=function(ped--[[@param ped integer]],taskSequenceId--[[@param taskSequenceId integer]])return InvokeVoid(0x8C33220C8D78CA0D,ped,taskSequenceId)end;
	ClearSequenceTask=function(taskSequenceId--[[@param taskSequenceId integer*]])return InvokeVoid(0x3841422E9C488D8C,taskSequenceId)end;
	SetSequenceToRepeat=function(taskSequenceId--[[@param taskSequenceId integer]],repeat_--[[@param repeat_ boolean]])return InvokeVoid(0x58C70CF3A41E4AE7,taskSequenceId,repeat_)end;
	--[=[returned values:
0 to 7 = task that's currently in progress, 0 meaning the first one.
-1 no task sequence in progress.]=]
	GetSequenceProgress=function(ped--[[@param ped integer]])return InvokeInt(0x00A9010CFE1E3533,ped)end;---@return integer
	--[=[Task index enum: https://alloc8or.re/gta5/doc/enums/eTaskTypeIndex.txt]=]
	GetIsTaskActive=function(ped--[[@param ped integer]],taskIndex--[[@param taskIndex integer]])return InvokeBool(0xB0760331C7AA4155,ped,taskIndex)end;---@return boolean
	--[=[Gets the status of a script-assigned task.
taskHash: https://alloc8or.re/gta5/doc/enums/eScriptTaskHash.txt]=]
	GetScriptTaskStatus=function(ped--[[@param ped integer]],taskHash--[[@param taskHash integer]])return InvokeInt(0x77F1BEB8863288D5,ped,taskHash)end;---@return integer
	--[=[https://alloc8or.re/gta5/doc/enums/eVehicleMissionType.txt]=]
	GetActiveVehicleMissionType=function(vehicle--[[@param vehicle integer]])return InvokeInt(0x534AEBA6E5ED4CAB,vehicle)end;---@return integer
	--[=[Flags are the same flags used in TASK_LEAVE_VEHICLE]=]
	TaskLeaveAnyVehicle=function(ped--[[@param ped integer]],delayTime--[[@param delayTime integer]],flags--[[@param flags integer]])return InvokeVoid(0x504D54DF3F6F2247,ped,delayTime,flags)end;
	TaskAimGunScripted=function(ped--[[@param ped integer]],scriptTask--[[@param scriptTask integer]],disableBlockingClip--[[@param disableBlockingClip boolean]],instantBlendToAim--[[@param instantBlendToAim boolean]])return InvokeVoid(0x7A192BE16D373D00,ped,scriptTask,disableBlockingClip,instantBlendToAim)end;
	TaskAimGunScriptedWithTarget=function(ped--[[@param ped integer]],target--[[@param target integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],gunTaskType--[[@param gunTaskType integer]],disableBlockingClip--[[@param disableBlockingClip boolean]],forceAim--[[@param forceAim boolean]])return InvokeVoid(0x8605AF0DE8B3A5AC,ped,target,x+.0,y+.0,z+.0,gunTaskType,disableBlockingClip,forceAim)end;
	UpdateTaskAimGunScriptedTarget=function(ped--[[@param ped integer]],target--[[@param target integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],disableBlockingClip--[[@param disableBlockingClip boolean]])return InvokeVoid(0x9724FB59A3E72AD0,ped,target,x+.0,y+.0,z+.0,disableBlockingClip)end;
	GetClipSetForScriptedGunTask=function(gunTaskType--[[@param gunTaskType integer]])return InvokeString(0x3A8CADC7D37AACC5,gunTaskType)end;---@return string
	--[=[duration: the amount of time in milliseconds to do the task.  -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped]=]
	TaskAimGunAtEntity=function(ped--[[@param ped integer]],entity--[[@param entity integer]],duration--[[@param duration integer]],instantBlendToAim--[[@param instantBlendToAim boolean]])return InvokeVoid(0x9B53BB6E8943AF53,ped,entity,duration,instantBlendToAim)end;
	--[=[duration: the amount of time in milliseconds to do the task. -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped]=]
	TaskTurnPedToFaceEntity=function(ped--[[@param ped integer]],entity--[[@param entity integer]],duration--[[@param duration integer]])return InvokeVoid(0x5AD23D40115353AC,ped,entity,duration)end;
	TaskAimGunAtCoord=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],time--[[@param time integer]],instantBlendToAim--[[@param instantBlendToAim boolean]],playAnimIntro--[[@param playAnimIntro boolean]])return InvokeVoid(0x6671F3EEC681BDA1,ped,x+.0,y+.0,z+.0,time,instantBlendToAim,playAnimIntro)end;
	--[=[Firing Pattern Hash Information: https://pastebin.com/Px036isB]=]
	TaskShootAtCoord=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],duration--[[@param duration integer]],firingPattern--[[@param firingPattern integer]])return InvokeVoid(0x46A6CC01E0826106,ped,x+.0,y+.0,z+.0,duration,firingPattern)end;
	--[=[Makes the specified ped shuffle to the next vehicle seat.
The ped MUST be in a vehicle and the vehicle parameter MUST be the ped's current vehicle.]=]
	TaskShuffleToNextVehicleSeat=function(ped--[[@param ped integer]],vehicle--[[@param vehicle integer]],useAlternateShuffle--[[@param useAlternateShuffle boolean]])return InvokeVoid(0x7AA80209BDA643EB,ped,vehicle,useAlternateShuffle)end;
	ClearPedTasks=function(ped--[[@param ped integer]])return InvokeVoid(0xE1EF3C1216AFF2CD,ped)end;
	ClearPedSecondaryTask=function(ped--[[@param ped integer]])return InvokeVoid(0x176CECF6F920D707,ped)end;
	TaskEveryoneLeaveVehicle=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0x7F93691AB4B92272,vehicle)end;
	--[=[enum ESEEK_ENTITY_OFFSET_FLAGS
{
	ESEEK_OFFSET_ORIENTATES_WITH_ENTITY = 0x01,
	ESEEK_KEEP_TO_PAVEMENTS = 0x02
};]=]
	TaskGotoEntityOffset=function(ped--[[@param ped integer]],entity--[[@param entity integer]],time--[[@param time integer]],seekRadius--[[@param seekRadius number]],seekAngleDeg--[[@param seekAngleDeg number]],moveBlendRatio--[[@param moveBlendRatio number]],gotoEntityOffsetFlags--[[@param gotoEntityOffsetFlags integer]])return InvokeVoid(0xE39B4FF4FDEBDE27,ped,entity,time,seekRadius+.0,seekAngleDeg+.0,moveBlendRatio+.0,gotoEntityOffsetFlags)end;
	TaskGotoEntityOffsetXy=function(ped--[[@param ped integer]],entity--[[@param entity integer]],duration--[[@param duration integer]],targetRadius--[[@param targetRadius number]],offsetX--[[@param offsetX number]],offsetY--[[@param offsetY number]],moveBlendRatio--[[@param moveBlendRatio number]],gotoEntityOffsetFlags--[[@param gotoEntityOffsetFlags integer]])return InvokeVoid(0x338E7EF52B6095A9,ped,entity,duration,targetRadius+.0,offsetX+.0,offsetY+.0,moveBlendRatio+.0,gotoEntityOffsetFlags)end;
	--[=[duration in milliseconds]=]
	TaskTurnPedToFaceCoord=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],duration--[[@param duration integer]])return InvokeVoid(0x1DDA930A0AC38571,ped,x+.0,y+.0,z+.0,duration)end;
	--[=['1 - brake
'3 - brake + reverse
'4 - turn left 90 + braking
'5 - turn right 90 + braking
'6 - brake strong (handbrake?) until time ends
'7 - turn left + accelerate
'8 - turn right + accelerate
'9 - weak acceleration
'10 - turn left + restore wheel pos to center in the end
'11 - turn right + restore wheel pos to center in the end
'13 - turn left + go reverse
'14 - turn left + go reverse
'16 - crash the game after like 2 seconds :)
'17 - keep actual state, game crashed after few tries
'18 - game crash
'19 - strong brake + turn left/right
'20 - weak brake + turn left then turn right
'21 - weak brake + turn right then turn left
'22 - brake + reverse
'23 - accelerate fast
'24 - brake
'25 - brake turning left then when almost stopping it turns left more
'26 - brake turning right then when almost stopping it turns right more
'27 - brake until car stop or until time ends
'28 - brake + strong reverse acceleration
'30 - performs a burnout (brake until stop + brake and accelerate)
'31 - accelerate + handbrake
'32 - accelerate very strong

Seems to be this:
Works on NPCs, but overrides their current task. If inside a task sequence (and not being the last task), "time" will work, otherwise the task will be performed forever until tasked with something else]=]
	TaskVehicleTempAction=function(driver--[[@param driver integer]],vehicle--[[@param vehicle integer]],action--[[@param action integer]],time--[[@param time integer]])return InvokeVoid(0xC429DCEEB339E129,driver,vehicle,action,time)end;
	--[=[missionType: https://alloc8or.re/gta5/doc/enums/eVehicleMissionType.txt]=]
	TaskVehicleMission=function(driver--[[@param driver integer]],vehicle--[[@param vehicle integer]],vehicleTarget--[[@param vehicleTarget integer]],missionType--[[@param missionType integer]],cruiseSpeed--[[@param cruiseSpeed number]],drivingStyle--[[@param drivingStyle integer]],targetReached--[[@param targetReached number]],straightLineDistance--[[@param straightLineDistance number]],DriveAgainstTraffic--[[@param DriveAgainstTraffic boolean]])return InvokeVoid(0x659427E0EF36BCDE,driver,vehicle,vehicleTarget,missionType,cruiseSpeed+.0,drivingStyle,targetReached+.0,straightLineDistance+.0,DriveAgainstTraffic)end;
	--[=[See TASK_VEHICLE_MISSION]=]
	TaskVehicleMissionPedTarget=function(ped--[[@param ped integer]],vehicle--[[@param vehicle integer]],pedTarget--[[@param pedTarget integer]],missionType--[[@param missionType integer]],maxSpeed--[[@param maxSpeed number]],drivingStyle--[[@param drivingStyle integer]],minDistance--[[@param minDistance number]],straightLineDistance--[[@param straightLineDistance number]],DriveAgainstTraffic--[[@param DriveAgainstTraffic boolean]])return InvokeVoid(0x9454528DF15D657A,ped,vehicle,pedTarget,missionType,maxSpeed+.0,drivingStyle,minDistance+.0,straightLineDistance+.0,DriveAgainstTraffic)end;
	--[=[See TASK_VEHICLE_MISSION]=]
	TaskVehicleMissionCoorsTarget=function(ped--[[@param ped integer]],vehicle--[[@param vehicle integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],mission--[[@param mission integer]],cruiseSpeed--[[@param cruiseSpeed number]],drivingStyle--[[@param drivingStyle integer]],targetReached--[[@param targetReached number]],straightLineDistance--[[@param straightLineDistance number]],DriveAgainstTraffic--[[@param DriveAgainstTraffic boolean]])return InvokeVoid(0xF0AF20AA7731F8C3,ped,vehicle,x+.0,y+.0,z+.0,mission,cruiseSpeed+.0,drivingStyle,targetReached+.0,straightLineDistance+.0,DriveAgainstTraffic)end;
	--[=[Makes a ped follow the targetVehicle with <minDistance> in between.

note: minDistance is ignored if drivingstyle is avoiding traffic, but Rushed is fine.

Mode: The mode defines the relative position to the targetVehicle. The ped will try to position its vehicle there.
-1 = behind
0 = ahead
1 = left
2 = right
3 = back left
4 = back right

if the target is closer than noRoadsDistance, the driver will ignore pathing/roads and follow you directly.

Driving Styles guide: gtaforums.com/topic/822314-guide-driving-styles/]=]
	TaskVehicleEscort=function(ped--[[@param ped integer]],vehicle--[[@param vehicle integer]],targetVehicle--[[@param targetVehicle integer]],mode--[[@param mode integer]],speed--[[@param speed number]],drivingStyle--[[@param drivingStyle integer]],minDistance--[[@param minDistance number]],minHeightAboveTerrain--[[@param minHeightAboveTerrain integer]],noRoadsDistance--[[@param noRoadsDistance number]])return InvokeVoid(0x0FA6E4B75F302400,ped,vehicle,targetVehicle,mode,speed+.0,drivingStyle,minDistance+.0,minHeightAboveTerrain,noRoadsDistance+.0)end;
	--[=[Makes a ped in a vehicle follow an entity (ped, vehicle, etc.)

drivingStyle: http://gtaforums.com/topic/822314-guide-driving-styles/]=]
	TaskVehicleFollow=function(driver--[[@param driver integer]],vehicle--[[@param vehicle integer]],targetEntity--[[@param targetEntity integer]],speed--[[@param speed number]],drivingStyle--[[@param drivingStyle integer]],minDistance--[[@param minDistance integer]])return InvokeVoid(0xFC545A9F0626E3B6,driver,vehicle,targetEntity,speed+.0,drivingStyle,minDistance)end;
	--[=[chases targetEnt fast and aggressively
--
Makes ped (needs to be in vehicle) chase targetEnt.]=]
	TaskVehicleChase=function(driver--[[@param driver integer]],targetEnt--[[@param targetEnt integer]])return InvokeVoid(0x3C08A8E30363B353,driver,targetEnt)end;
	--[=[pilot, vehicle and altitude are rather self-explanatory.

p4: is unused variable in the function.

entityToFollow: you can provide a Vehicle entity or a Ped entity, the heli will protect them.

'targetSpeed':  The pilot will dip the nose AS MUCH AS POSSIBLE so as to reach this value AS FAST AS POSSIBLE.  As such, you'll want to modulate it as opposed to calling it via a hard-wired, constant #.

'radius' isn't just "stop within radius of X of target" like with ground vehicles.  In this case, the pilot will fly an entire circle around 'radius' and continue to do so.

NOT CONFIRMED:  p7 appears to be a FlyingStyle enum.  Still investigating it as of this writing, but playing around with values here appears to result in different -behavior- as opposed to offsetting coordinates, altitude, target speed, etc.

NOTE: If the pilot finds enemies, it will engage them until it kills them, but will return to protect the ped/vehicle given shortly thereafter.]=]
	TaskVehicleHeliProtect=function(pilot--[[@param pilot integer]],vehicle--[[@param vehicle integer]],entityToFollow--[[@param entityToFollow integer]],targetSpeed--[[@param targetSpeed number]],drivingFlags--[[@param drivingFlags integer]],radius--[[@param radius number]],altitude--[[@param altitude integer]],heliFlags--[[@param heliFlags integer]])return InvokeVoid(0x1E09C32048FEFD1C,pilot,vehicle,entityToFollow,targetSpeed+.0,drivingFlags,radius+.0,altitude,heliFlags)end;
	--[=[Flag 8: Medium-aggressive boxing tactic with a bit of PIT
Flag 1: Aggressive ramming of suspect
Flag 2: Ram attempts
Flag 32: Stay back from suspect, no tactical contact. Convoy-like.
Flag 16: Ramming, seems to be slightly less aggressive than 1-2.]=]
	SetTaskVehicleChaseBehaviorFlag=function(ped--[[@param ped integer]],flag--[[@param flag integer]],set--[[@param set boolean]])return InvokeVoid(0xCC665AAC360D31E7,ped,flag,set)end;
	SetTaskVehicleChaseIdealPursuitDistance=function(ped--[[@param ped integer]],distance--[[@param distance number]])return InvokeVoid(0x639B642FACBE4EDD,ped,distance+.0)end;
	--[=[Ped pilot should be in a heli.
EntityToFollow can be a vehicle or Ped.

x,y,z appear to be how close to the EntityToFollow the heli should be. Scripts use 0.0, 0.0, 80.0. Then the heli tries to position itself 80 units above the EntityToFollow. If you reduce it to -5.0, it tries to go below (if the EntityToFollow is a heli or plane)


NOTE: If the pilot finds enemies, it will engage them, then remain there idle, not continuing to chase the Entity given.]=]
	TaskHeliChase=function(pilot--[[@param pilot integer]],entityToFollow--[[@param entityToFollow integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0xAC83B1DB38D0ADA0,pilot,entityToFollow,x+.0,y+.0,z+.0)end;
	TaskPlaneChase=function(pilot--[[@param pilot integer]],entityToFollow--[[@param entityToFollow integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0x2D2386F273FF7A25,pilot,entityToFollow,x+.0,y+.0,z+.0)end;
	TaskPlaneLand=function(pilot--[[@param pilot integer]],plane--[[@param plane integer]],runwayStartX--[[@param runwayStartX number]],runwayStartY--[[@param runwayStartY number]],runwayStartZ--[[@param runwayStartZ number]],runwayEndX--[[@param runwayEndX number]],runwayEndY--[[@param runwayEndY number]],runwayEndZ--[[@param runwayEndZ number]])return InvokeVoid(0xBF19721FA34D32C0,pilot,plane,runwayStartX+.0,runwayStartY+.0,runwayStartZ+.0,runwayEndX+.0,runwayEndY+.0,runwayEndZ+.0)end;
	ClearDefaultPrimaryTask=function(ped--[[@param ped integer]])return InvokeVoid(0x6100B3CEFD43452E,ped)end;
	--[=[This native is very useful when switching the player to a ped inside a vehicle that has a task assigned prior to the player switch.
It is necessary to clear the ped's tasks AND call this native with the vehicle the player is switching into in order to allow the player to control the vehicle after the player switches.]=]
	ClearPrimaryVehicleTask=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0xDBBC7A2432524127,vehicle)end;
	ClearVehicleCrashTask=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0x53DDC75BC3AC0A90,vehicle)end;
	TaskPlaneGotoPreciseVtol=function(ped--[[@param ped integer]],vehicle--[[@param vehicle integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],flightHeight--[[@param flightHeight integer]],minHeightAboveTerrain--[[@param minHeightAboveTerrain integer]],useDesiredOrientation--[[@param useDesiredOrientation boolean]],desiredOrientation--[[@param desiredOrientation number]],autopilot--[[@param autopilot boolean]])return InvokeVoid(0xF7F9DCCA89E7505B,ped,vehicle,x+.0,y+.0,z+.0,flightHeight,minHeightAboveTerrain,useDesiredOrientation,desiredOrientation+.0,autopilot)end;
	--[=[Used in am_vehicle_spawn.ysc and am_mp_submarine.ysc.

p0 is always 0, p5 is always 1

p1 is the vehicle handle of the submarine. Submarine must have a driver, but the ped handle is not passed to the native.

Speed can be set by calling SET_DRIVE_TASK_CRUISE_SPEED after]=]
	TaskSubmarineGotoAndStop=function(ped--[[@param ped integer]],submarine--[[@param submarine integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],autopilot--[[@param autopilot boolean]])return InvokeVoid(0xC22B40579A498CA4,ped,submarine,x+.0,y+.0,z+.0,autopilot)end;
	--[=[Must have targetVehicle, targetPed, OR destination X/Y/Z set
Will follow targeted vehicle/ped, or fly to destination
Set whichever is not being used to 0


Mission mode type:
 - 4, 7: Forces heli to snap to the heading if set, flies to destination or tracks specified entity (mode 4 only works for coordinates, 7 works for coordinates OR ped/vehicle)
 - 6: Attacks the target ped/vehicle with mounted weapons. If radius is set, will maintain that distance from target.
 - 8: Makes the heli flee from the ped/vehicle/coordinate
 - 9: Circles around target ped/vehicle, snaps to angle if set. Behavior flag (last parameter) of 2048 switches from counter-clockwise to clockwise circling. Does not work with coordinate destination.
 - 10, 11: Follows ped/vehicle target and imitates target heading. Only works with ped/vehicle target, not coord target
 - 19: Heli lands at specified coordinate, ignores heading (lands facing whatever direction it is facing when the task is started)
 - 20: Makes the heli land when near target ped. It won't resume chasing.
 - 21: Emulates a helicopter crash
 - 23: makes the heli circle erratically around ped


Heli will fly at maxSpeed (up to actual maximum speed defined by the model's handling config)
You can use SET_DRIVE_TASK_CRUISE_SPEED to modulate the speed based on distance to the target without having to re-invoke the task native. Setting to 8.0 when close to the destination results in a much smoother approach.

If minHeight and maxHeight are set, heli will fly between those specified elevations, relative to ground level and any obstructions/buildings below. You can specify -1 for either if you only want to specify one. Usually it is easiest to leave maxHeight at -1, and specify a reasonable minHeight to ensure clearance over any obstacles. Note this MUST be passed as an INT, not a FLOAT. 

Radius affects how closely the heli will follow tracked ped/vehicle, and when circling (mission type 9) sets the radius (in meters) that it will circle the target from

Heading is -1.0 for default behavior, which will point the nose of the helicopter towards the destination. Set a heading and the heli will lock to that direction when near its destination/target, but may still turn towards the destination when flying at higher speed from a further distance.

Behavior Flags is a bitwise value that modifies the AI behavior. Not clear what all flags do, but here are some guesses/notes:
   1: Forces heading to face E
   2: Unknown
   4: Tight circles around coordinate destination
   8: Unknown
  16: Circles around coordinate destination facing towards destination
  32: Flys to normally, then lands at coordinate destination and stays on the ground (using mission type 4)
  64: Ignores obstacles when flying, will follow at specified minHeight above ground level but will not avoid buildings, vehicles, etc.
 128: Unknown
 256: Unknown
 512: Unknown
1024: Unknown 
2048: Reverses direction of circling (mission type 9) to clockwise
4096: Hugs closer to the ground, maintains minHeight from ground generally, but barely clears buildings and dips down more between buildings instead of taking a more efficient/safe route
8192: Unknown

Unk3 is a float value, you may see -1082130432 for this value in decompiled native scripts, this is the equivalent to -1.0f. Seems to affect acceleration/aggressiveness, but not sure exactly how it works. Higher value seems to result in lower acceleration/less aggressive flying. Almost always -1.0 in native scripts, occasionally 20.0 or 50.0. Setting to 400.0 seems to work well for making the pilot not overshoot the destination when using coordinate destination.

Notes updated by PNWParksFan, May 2021
]=]
	TaskHeliMission=function(pilot--[[@param pilot integer]],aircraft--[[@param aircraft integer]],targetVehicle--[[@param targetVehicle integer]],targetPed--[[@param targetPed integer]],destinationX--[[@param destinationX number]],destinationY--[[@param destinationY number]],destinationZ--[[@param destinationZ number]],missionFlag--[[@param missionFlag integer]],maxSpeed--[[@param maxSpeed number]],radius--[[@param radius number]],targetHeading--[[@param targetHeading number]],maxHeight--[[@param maxHeight integer]],minHeight--[[@param minHeight integer]],slowDownDistance--[[@param slowDownDistance number]],behaviorFlags--[[@param behaviorFlags integer]])return InvokeVoid(0xDAD029E187A2BEB4,pilot,aircraft,targetVehicle,targetPed,destinationX+.0,destinationY+.0,destinationZ+.0,missionFlag,maxSpeed+.0,radius+.0,targetHeading+.0,maxHeight,minHeight,slowDownDistance+.0,behaviorFlags)end;
	TaskHeliEscortHeli=function(pilot--[[@param pilot integer]],heli1--[[@param heli1 integer]],heli2--[[@param heli2 integer]],offsetX--[[@param offsetX number]],offsetY--[[@param offsetY number]],offsetZ--[[@param offsetZ number]])return InvokeVoid(0xB385523325077210,pilot,heli1,heli2,offsetX+.0,offsetY+.0,offsetZ+.0)end;
	--[=[EXAMPLE USAGE:

Fly around target (Precautiously, keeps high altitude):
Function.Call(Hash.TASK_PLANE_MISSION, pilot, selectedAirplane, 0, 0, Target.X, Target.Y, Target.Z, 4, 100f, 0f, 90f, 0, 200f);

Fly around target (Dangerously, keeps VERY low altitude):
Function.Call(Hash.TASK_PLANE_MISSION, pilot, selectedAirplane, 0, 0, Target.X, Target.Y, Target.Z, 4, 100f, 0f, 90f, 0, -500f);

Fly directly into target:
Function.Call(Hash.TASK_PLANE_MISSION, pilot, selectedAirplane, 0, 0, Target.X, Target.Y, Target.Z, 4, 100f, 0f, 90f, 0, -5000f);

EXPANDED INFORMATION FOR ADVANCED USAGE (custom pilot)

'physicsSpeed': (THIS IS NOT YOUR ORDINARY SPEED PARAMETER: READ!!)
Think of this -first- as a radius value, not a true speed value.  The ACTUAL effective speed of the plane will be that of the maximum speed permissible to successfully fly in a -circle- with a radius of 'physicsSpeed'.  This also means that the plane must complete a circle before it can begin its "bombing run", its straight line pass towards the target.  p9 appears to influence the angle at which a "bombing run" begins, although I can't confirm yet.

VERY IMPORTANT: A "bombing run" will only occur if a plane can successfully determine a possible navigable route (the slower the value of 'physicsSpeed', the more precise the pilot can be due to less influence of physics on flightpath).  Otherwise, the pilot will continue to patrol around Destination (be it a dynamic Entity position vector or a fixed world coordinate vector.)

0 = Plane's physics are almost entirely frozen, plane appears to "orbit" around precise destination point
1-299 = Blend of "frozen, small radius" vs. normal vs. "accelerated, hyperfast, large radius"
300+ =  Vehicle behaves entirely like a normal gameplay plane.

'patrolBlend' (The lower the value, the more the Destination is treated as a "fly AT" rather than a "fly AROUND point".)

Scenario: Destination is an Entity on ground level, wide open field
-5000 = Pilot kamikazes directly into Entity
-1000 = Pilot flies extremely low -around- Entity, very prone to crashing
-200 = Pilot flies lower than average around Entity.
0 = Pilot flies around Entity, normal altitude
200 = Pilot flies an extra eighty units or so higher than 0 while flying around Destination (this doesn't seem to correlate directly into distance units.)

-- Valid mission types found in the exe: --

0 = None
1 = Unk
2 = CTaskVehicleRam
3 = CTaskVehicleBlock
4 = CTaskVehicleGoToPlane
5 = CTaskVehicleStop
6 = CTaskVehicleAttack
7 = CTaskVehicleFollow
8 = CTaskVehicleFleeAirborne
9= CTaskVehicleCircle
10 = CTaskVehicleEscort
15 = CTaskVehicleFollowRecording
16 = CTaskVehiclePoliceBehaviour
17 = CTaskVehicleCrash]=]
	TaskPlaneMission=function(pilot--[[@param pilot integer]],aircraft--[[@param aircraft integer]],targetVehicle--[[@param targetVehicle integer]],targetPed--[[@param targetPed integer]],destinationX--[[@param destinationX number]],destinationY--[[@param destinationY number]],destinationZ--[[@param destinationZ number]],missionFlag--[[@param missionFlag integer]],angularDrag--[[@param angularDrag number]],targetReached--[[@param targetReached number]],targetHeading--[[@param targetHeading number]],maxZ--[[@param maxZ number]],minZ--[[@param minZ number]],precise--[[@param precise boolean]])return InvokeVoid(0x23703CD154E83B88,pilot,aircraft,targetVehicle,targetPed,destinationX+.0,destinationY+.0,destinationZ+.0,missionFlag,angularDrag+.0,targetReached+.0,targetHeading+.0,maxZ+.0,minZ+.0,precise)end;
	TaskPlaneTaxi=function(pilot--[[@param pilot integer]],aircraft--[[@param aircraft integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],cruiseSpeed--[[@param cruiseSpeed number]],targetReached--[[@param targetReached number]])return InvokeVoid(0x92C360B5F15D2302,pilot,aircraft,x+.0,y+.0,z+.0,cruiseSpeed+.0,targetReached+.0)end;
	--[=[You need to call PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS after TASK_BOAT_MISSION in order for the task to execute.

Working example
float vehicleMaxSpeed = VEHICLE::GET_VEHICLE_ESTIMATED_MAX_SPEED(ENTITY::GET_ENTITY_MODEL(pedVehicle));
TASK::TASK_BOAT_MISSION(pedDriver, pedVehicle, 0, 0, waypointCoord.x, waypointCoord.y, waypointCoord.z, 4, vehicleMaxSpeed, 786469, -1.0, 7);
PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(pedDriver, 1);

P8 appears to be driving style flag - see gtaforums.com/topic/822314-guide-driving-styles/ for documentation]=]
	TaskBoatMission=function(pedDriver--[[@param pedDriver integer]],vehicle--[[@param vehicle integer]],targetVehicle--[[@param targetVehicle integer]],targetPed--[[@param targetPed integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],mission--[[@param mission integer]],maxSpeed--[[@param maxSpeed number]],drivingStyle--[[@param drivingStyle integer]],targetReached--[[@param targetReached number]],boatFlags--[[@param boatFlags any]])return InvokeVoid(0x15C86013127CE63F,pedDriver,vehicle,targetVehicle,targetPed,x+.0,y+.0,z+.0,mission,maxSpeed+.0,drivingStyle,targetReached+.0,boatFlags)end;
	--[=[Example:

TASK::TASK_DRIVE_BY(l_467[1/*22*/], PLAYER::PLAYER_PED_ID(), 0, 0.0, 0.0, 2.0, 300.0, 100, 0, ${firing_pattern_burst_fire_driveby});




Needs working example. Doesn't seem to do anything.

I marked p2 as targetVehicle as all these shooting related tasks seem to have that in common.
I marked p6 as distanceToShoot as if you think of GTA's Logic with the native SET_VEHICLE_SHOOT natives, it won't shoot till it gets within a certain distance of the target.
I marked p7 as pedAccuracy as it seems it's mostly 100 (Completely Accurate), 75, 90, etc. Although this could be the ammo count within the gun, but I highly doubt it. I will change this comment once I find out if it's ammo count or not.]=]
	TaskDriveBy=function(driverPed--[[@param driverPed integer]],targetPed--[[@param targetPed integer]],targetVehicle--[[@param targetVehicle integer]],targetX--[[@param targetX number]],targetY--[[@param targetY number]],targetZ--[[@param targetZ number]],distanceToShoot--[[@param distanceToShoot number]],pedAccuracy--[[@param pedAccuracy integer]],pushUnderneathDrivingTaskIfDriving--[[@param pushUnderneathDrivingTaskIfDriving boolean]],firingPattern--[[@param firingPattern integer]])return InvokeVoid(0x2F8AF0E82773A171,driverPed,targetPed,targetVehicle,targetX+.0,targetY+.0,targetZ+.0,distanceToShoot+.0,pedAccuracy,pushUnderneathDrivingTaskIfDriving,firingPattern)end;
	--[=[For p1 & p2 (Ped, Vehicle). I could be wrong, as the only time this native is called in scripts is once and both are 0, but I assume this native will work like SET_MOUNTED_WEAPON_TARGET in which has the same exact amount of parameters and the 1st and last 3 parameters are right and the same for both natives.]=]
	SetDrivebyTaskTarget=function(shootingPed--[[@param shootingPed integer]],targetPed--[[@param targetPed integer]],targetVehicle--[[@param targetVehicle integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0xE5B302114D8162EE,shootingPed,targetPed,targetVehicle,x+.0,y+.0,z+.0)end;
	ClearDrivebyTaskUnderneathDrivingTask=function(ped--[[@param ped integer]])return InvokeVoid(0xC35B5CDB2824CF69,ped)end;
	IsDrivebyTaskUnderneathDrivingTask=function(ped--[[@param ped integer]])return InvokeBool(0x8785E6E40C7A8818,ped)end;---@return boolean
	--[=[Forces the ped to use the mounted weapon.
Returns false if task is not possible.]=]
	ControlMountedWeapon=function(ped--[[@param ped integer]])return InvokeBool(0xDCFE42068FE0135A,ped)end;---@return boolean
	--[=[Note: Look in decompiled scripts and the times that p1 and p2 aren't 0. They are filled with vars. If you look through out that script what other natives those vars are used in, you can tell p1 is a ped and p2 is a vehicle. Which most likely means if you want the mounted weapon to target a ped set targetVehicle to 0 or vice-versa.]=]
	SetMountedWeaponTarget=function(shootingPed--[[@param shootingPed integer]],targetPed--[[@param targetPed integer]],targetVehicle--[[@param targetVehicle integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],taskMode--[[@param taskMode integer]],ignoreTargetVehDeadCheck--[[@param ignoreTargetVehDeadCheck boolean]])return InvokeVoid(0xCCD892192C6D2BB9,shootingPed,targetPed,targetVehicle,x+.0,y+.0,z+.0,taskMode,ignoreTargetVehDeadCheck)end;
	IsMountedWeaponTaskUnderneathDrivingTask=function(ped--[[@param ped integer]])return InvokeBool(0xA320EF046186FA3B,ped)end;---@return boolean
	--[=[Actually has 3 params, not 2.

p0: Ped
p1: int (or bool?)
p2: int]=]
	TaskUseMobilePhone=function(ped--[[@param ped integer]],usePhone--[[@param usePhone boolean]],desiredPhoneMode--[[@param desiredPhoneMode integer]])return InvokeVoid(0xBD2A8EC3AF4DE7DB,ped,usePhone,desiredPhoneMode)end;
	TaskUseMobilePhoneTimed=function(ped--[[@param ped integer]],duration--[[@param duration integer]])return InvokeVoid(0x5EE02954A14C69DB,ped,duration)end;
	--[=[p2 tend to be 16, 17 or 1
p3 to p7 tend to be 0.0]=]
	TaskChatToPed=function(ped--[[@param ped integer]],target--[[@param target integer]],flags--[[@param flags integer]],goToLocationX--[[@param goToLocationX number]],goToLocationY--[[@param goToLocationY number]],goToLocationZ--[[@param goToLocationZ number]],headingDegs--[[@param headingDegs number]],idleTime--[[@param idleTime number]])return InvokeVoid(0x8C338E0263E4FD19,ped,target,flags,goToLocationX+.0,goToLocationY+.0,goToLocationZ+.0,headingDegs+.0,idleTime+.0)end;
	--[=[Seat Numbers
-------------------------------
Driver = -1
Any = -2
Left-Rear = 1
Right-Front = 0
Right-Rear = 2
Extra seats = 3-14(This may differ from vehicle type e.g. Firetruck Rear Stand, Ambulance Rear)]=]
	TaskWarpPedIntoVehicle=function(ped--[[@param ped integer]],vehicle--[[@param vehicle integer]],seat--[[@param seat integer]])return InvokeVoid(0x9A7D091411C5F684,ped,vehicle,seat)end;
	--[=[//this part of the code is to determine at which entity the player is aiming, for example if you want to create a mod where you give orders to peds
Entity aimedentity;
Player player = PLAYER::PLAYER_ID();
PLAYER::_GET_AIMED_ENTITY(player, &aimedentity);

//bg is an array of peds
TASK::TASK_SHOOT_AT_ENTITY(bg[i], aimedentity, 5000, MISC::GET_HASH_KEY("FIRING_PATTERN_FULL_AUTO"));

in practical usage, getting the entity the player is aiming at and then task the peds to shoot at the entity, at a button press event would be better.

Firing Pattern Hash Information: https://pastebin.com/Px036isB]=]
	TaskShootAtEntity=function(entity--[[@param entity integer]],target--[[@param target integer]],duration--[[@param duration integer]],firingPattern--[[@param firingPattern integer]])return InvokeVoid(0x08DA95E8298AE772,entity,target,duration,firingPattern)end;
	--[=[Climbs or vaults the nearest thing.
usePlayerLaunchForce is unused.]=]
	TaskClimb=function(ped--[[@param ped integer]],usePlayerLaunchForce--[[@param usePlayerLaunchForce boolean]])return InvokeVoid(0x89D9FCC2435112F1,ped,usePlayerLaunchForce)end;
	TaskClimbLadder=function(ped--[[@param ped integer]],fast--[[@param fast boolean]])return InvokeVoid(0xB6C987F9285A3814,ped,fast)end;
	--[=[Attaches a ped to a rope and allows player control to rappel down a wall. Disables all collisions while on the rope.
p10: Usually 1 in the scripts, clipSet: Clipset to use for the task, minZ: Minimum Z that the player can descend to, ropeHandle: Rope to attach this task to created with ADD_ROPE]=]
	TaskRappelDownWallUsingClipsetOverride=function(ped--[[@param ped integer]],x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],minZ--[[@param minZ number]],ropeHandle--[[@param ropeHandle integer]],clipSet--[[@param clipSet string]],p10--[[@param p10 any]])return InvokeVoid(0xEAF66ACDDC794793,ped,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,minZ+.0,ropeHandle,clipSet,p10)end;
	GetTaskRappelDownWallState=function(ped--[[@param ped integer]])return InvokeInt(0x9D252648778160DF,ped)end;---@return integer
	--[=[Immediately stops the pedestrian from whatever it's doing. They stop fighting, animations, etc. they forget what they were doing.]=]
	ClearPedTasksImmediately=function(ped--[[@param ped integer]])return InvokeVoid(0xAAA34F8A7CB32098,ped)end;
	TaskPerformSequenceFromProgress=function(ped--[[@param ped integer]],taskIndex--[[@param taskIndex integer]],progress1--[[@param progress1 integer]],progress2--[[@param progress2 integer]])return InvokeVoid(0x89221B16730234F0,ped,taskIndex,progress1,progress2)end;
	--[=[This native does absolutely nothing, just a nullsub

R* Comment:
SET_NEXT_DESIRED_MOVE_STATE - Function is deprecated - do not use anymore]=]
	SetNextDesiredMoveState=function(nextMoveState--[[@param nextMoveState number]])return InvokeVoid(0xF1B9F16E89E2C93A,nextMoveState+.0)end;
	SetPedDesiredMoveBlendRatio=function(ped--[[@param ped integer]],newMoveBlendRatio--[[@param newMoveBlendRatio number]])return InvokeVoid(0x1E982AC8716912C5,ped,newMoveBlendRatio+.0)end;
	GetPedDesiredMoveBlendRatio=function(ped--[[@param ped integer]])return InvokeFloat(0x8517D4A6CA8513ED,ped)end;---@return number
	--[=[eg

 TASK::TASK_GOTO_ENTITY_AIMING(v_2, PLAYER::PLAYER_PED_ID(), 5.0, 25.0);

ped = Ped you want to perform this task.
target = the Entity they should aim at.
distanceToStopAt = distance from the target, where the ped should stop to aim.
StartAimingDist = distance where the ped should start to aim.]=]
	TaskGotoEntityAiming=function(ped--[[@param ped integer]],target--[[@param target integer]],distanceToStopAt--[[@param distanceToStopAt number]],StartAimingDist--[[@param StartAimingDist number]])return InvokeVoid(0xA9DA48FAB8A76C12,ped,target,distanceToStopAt+.0,StartAimingDist+.0)end;
	--[=[p1 is always GET_HASH_KEY("empty") in scripts, for the rare times this is used]=]
	TaskSetDecisionMaker=function(ped--[[@param ped integer]],decisionMakerId--[[@param decisionMakerId integer]])return InvokeVoid(0xEB8517DDA73720DA,ped,decisionMakerId)end;
	TaskSetSphereDefensiveArea=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]])return InvokeVoid(0x933C06518B52A9A4,ped,x+.0,y+.0,z+.0,radius+.0)end;
	TaskClearDefensiveArea=function(ped--[[@param ped integer]])return InvokeVoid(0x95A6C46A31D1917D,ped)end;
	TaskPedSlideToCoord=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],heading--[[@param heading number]],speed--[[@param speed number]])return InvokeVoid(0xD04FE6765D990A06,ped,x+.0,y+.0,z+.0,heading+.0,speed+.0)end;
	TaskPedSlideToCoordHdgRate=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],heading--[[@param heading number]],speed--[[@param speed number]],headingChangeRate--[[@param headingChangeRate number]])return InvokeVoid(0x5A4A6A6D3DC64F52,ped,x+.0,y+.0,z+.0,heading+.0,speed+.0,headingChangeRate+.0)end;
	AddCoverPoint=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],direction--[[@param direction number]],usage--[[@param usage integer]],height--[[@param height integer]],arc--[[@param arc integer]],isPriority--[[@param isPriority boolean]])return InvokeInt(0xD5C12A75C7B9497F,x+.0,y+.0,z+.0,direction+.0,usage,height,arc,isPriority)end;---@return integer
	RemoveCoverPoint=function(coverpoint--[[@param coverpoint integer]])return InvokeVoid(0xAE287C923D891715,coverpoint)end;
	--[=[Checks if there is a cover point at position]=]
	DoesScriptedCoverPointExistAtCoords=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeBool(0xA98B8E3C088E5A31,x+.0,y+.0,z+.0)end;---@return boolean
	GetScriptedCoverPointCoords=function(coverpoint--[[@param coverpoint integer]])return InvokeV3(0x594A1028FC2A3E85,coverpoint)end;---@return V3
	AddScriptedCoverArea=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]])return InvokeVoid(0x28B7B9BFDAF274AA,x+.0,y+.0,z+.0,radius+.0)end;
	--[=[Makes the specified ped attack the target ped.
p2 should be 0
p3 should be 16]=]
	TaskCombatPed=function(ped--[[@param ped integer]],targetPed--[[@param targetPed integer]],combatFlags--[[@param combatFlags integer]],threatResponseFlags--[[@param threatResponseFlags integer]])return InvokeVoid(0xF166E48407BAC484,ped,targetPed,combatFlags,threatResponseFlags)end;
	TaskCombatPedTimed=function(ped--[[@param ped integer]],target--[[@param target integer]],time--[[@param time integer]],flags--[[@param flags integer]])return InvokeVoid(0x944F30DCB7096BDE,ped,target,time,flags)end;
	TaskSeekCoverFromPos=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],duration--[[@param duration integer]],allowPeekingAndFiring--[[@param allowPeekingAndFiring boolean]])return InvokeVoid(0x75AC2B60386D89F2,ped,x+.0,y+.0,z+.0,duration,allowPeekingAndFiring)end;
	TaskSeekCoverFromPed=function(ped--[[@param ped integer]],target--[[@param target integer]],duration--[[@param duration integer]],allowPeekingAndFiring--[[@param allowPeekingAndFiring boolean]])return InvokeVoid(0x84D32B3BEC531324,ped,target,duration,allowPeekingAndFiring)end;
	--[=[p5 is always -1]=]
	TaskSeekCoverToCoverPoint=function(ped--[[@param ped integer]],coverpoint--[[@param coverpoint integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],time--[[@param time integer]],allowPeekingAndFiring--[[@param allowPeekingAndFiring boolean]])return InvokeVoid(0xD43D95C7A869447F,ped,coverpoint,x+.0,y+.0,z+.0,time,allowPeekingAndFiring)end;
	--[=[p8 causes the ped to take the shortest route to the cover position. It may have something to do with navmesh or pathfinding mechanics.

from michael2:
TASK::TASK_SEEK_COVER_TO_COORDS(ped, 967.5164794921875, -2121.603515625, 30.479299545288086, 978.94677734375, -2125.84130859375, 29.4752, -1, 1);


appears to be shorter variation
from michael3:
TASK::TASK_SEEK_COVER_TO_COORDS(ped, -2231.011474609375, 263.6326599121094, 173.60195922851562, -1, 0);]=]
	TaskSeekCoverToCoords=function(ped--[[@param ped integer]],x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],timeout--[[@param timeout integer]],shortRoute--[[@param shortRoute boolean]])return InvokeVoid(0x39246A6958EF072C,ped,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,timeout,shortRoute)end;
	TaskPutPedDirectlyIntoCover=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],time--[[@param time integer]],allowPeekingAndFiring--[[@param allowPeekingAndFiring boolean]],blendInDuration--[[@param blendInDuration number]],forceInitialFacingDirection--[[@param forceInitialFacingDirection boolean]],forceFaceLeft--[[@param forceFaceLeft boolean]],identifier--[[@param identifier integer]],doEntry--[[@param doEntry boolean]])return InvokeVoid(0x4172393E6BE1FECE,ped,x+.0,y+.0,z+.0,time,allowPeekingAndFiring,blendInDuration+.0,forceInitialFacingDirection,forceFaceLeft,identifier,doEntry)end;
	TaskWarpPedDirectlyIntoCover=function(ped--[[@param ped integer]],time--[[@param time integer]],allowPeekingAndFiring--[[@param allowPeekingAndFiring boolean]],forceInitialFacingDirection--[[@param forceInitialFacingDirection boolean]],forceFaceLeft--[[@param forceFaceLeft boolean]],identifier--[[@param identifier integer]])return InvokeVoid(0x6E01E9E8D89F8276,ped,time,allowPeekingAndFiring,forceInitialFacingDirection,forceFaceLeft,identifier)end;
	--[=[p1 is 1, 2, or 3 in scripts]=]
	TaskExitCover=function(ped--[[@param ped integer]],exitType--[[@param exitType integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0x79B258E397854D29,ped,exitType,x+.0,y+.0,z+.0)end;
	--[=[from armenian3.c4

TASK::TASK_PUT_PED_DIRECTLY_INTO_MELEE(PlayerPed, armenianPed, 0.0, -1.0, 0.0, 0);
]=]
	TaskPutPedDirectlyIntoMelee=function(ped--[[@param ped integer]],meleeTarget--[[@param meleeTarget integer]],blendInDuration--[[@param blendInDuration number]],timeInMelee--[[@param timeInMelee number]],strafePhaseSync--[[@param strafePhaseSync number]],aiCombatFlags--[[@param aiCombatFlags integer]])return InvokeVoid(0x1C6CD14A876FFE39,ped,meleeTarget,blendInDuration+.0,timeInMelee+.0,strafePhaseSync+.0,aiCombatFlags)end;
	--[=[used in sequence task

both parameters seems to be always 0]=]
	TaskToggleDuck=function(ped--[[@param ped integer]],toggleType--[[@param toggleType integer]])return InvokeVoid(0xAC96609B9995EDF8,ped,toggleType)end;
	--[=[From re_prisonvanbreak:

TASK::TASK_GUARD_CURRENT_POSITION(l_DD, 35.0, 35.0, 1);]=]
	TaskGuardCurrentPosition=function(ped--[[@param ped integer]],maxPatrolProximity--[[@param maxPatrolProximity number]],defensiveAreaRadius--[[@param defensiveAreaRadius number]],setDefensiveArea--[[@param setDefensiveArea boolean]])return InvokeVoid(0x4A58A47A72E3FCB4,ped,maxPatrolProximity+.0,defensiveAreaRadius+.0,setDefensiveArea)end;
	TaskGuardAssignedDefensiveArea=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],heading--[[@param heading number]],maxPatrolProximity--[[@param maxPatrolProximity number]],timer--[[@param timer integer]])return InvokeVoid(0xD2A207EEBDF9889B,ped,x+.0,y+.0,z+.0,heading+.0,maxPatrolProximity+.0,timer)end;
	TaskGuardSphereDefensiveArea=function(ped--[[@param ped integer]],defendPositionX--[[@param defendPositionX number]],defendPositionY--[[@param defendPositionY number]],defendPositionZ--[[@param defendPositionZ number]],heading--[[@param heading number]],maxPatrolProximity--[[@param maxPatrolProximity number]],time--[[@param time integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],defensiveAreaRadius--[[@param defensiveAreaRadius number]])return InvokeVoid(0xC946FE14BE0EB5E2,ped,defendPositionX+.0,defendPositionY+.0,defendPositionZ+.0,heading+.0,maxPatrolProximity+.0,time,x+.0,y+.0,z+.0,defensiveAreaRadius+.0)end;
	--[=[scenarioName example: "WORLD_HUMAN_GUARD_STAND"]=]
	TaskStandGuard=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],heading--[[@param heading number]],scenarioName--[[@param scenarioName string]])return InvokeVoid(0xAE032F8BBA959E90,ped,x+.0,y+.0,z+.0,heading+.0,scenarioName)end;
	SetDriveTaskCruiseSpeed=function(driver--[[@param driver integer]],cruiseSpeed--[[@param cruiseSpeed number]])return InvokeVoid(0x5C9B84BD7D31D908,driver,cruiseSpeed+.0)end;
	SetDriveTaskMaxCruiseSpeed=function(ped--[[@param ped integer]],speed--[[@param speed number]])return InvokeVoid(0x404A5AA9B9F0B746,ped,speed+.0)end;
	--[=[This native is used to set the driving style for specific ped.

Driving styles id seems to be:
786468
262144
786469

http://gtaforums.com/topic/822314-guide-driving-styles/]=]
	SetDriveTaskDrivingStyle=function(ped--[[@param ped integer]],drivingStyle--[[@param drivingStyle integer]])return InvokeVoid(0xDACE1BE37D88AF67,ped,drivingStyle)end;
	AddCoverBlockingArea=function(startX--[[@param startX number]],startY--[[@param startY number]],startZ--[[@param startZ number]],endX--[[@param endX number]],endY--[[@param endY number]],endZ--[[@param endZ number]],blockObjects--[[@param blockObjects boolean]],blockVehicles--[[@param blockVehicles boolean]],blockMap--[[@param blockMap boolean]],blockPlayer--[[@param blockPlayer boolean]])return InvokeVoid(0x45C597097DD7CB81,startX+.0,startY+.0,startZ+.0,endX+.0,endY+.0,endZ+.0,blockObjects,blockVehicles,blockMap,blockPlayer)end;
	RemoveAllCoverBlockingAreas=function()return InvokeVoid(0xDB6708C0B46F56D8)end;
	RemoveCoverBlockingAreasAtPosition=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0xFA83CA6776038F64,x+.0,y+.0,z+.0)end;
	RemoveSpecificCoverBlockingAreas=function(startX--[[@param startX number]],startY--[[@param startY number]],startZ--[[@param startZ number]],endX--[[@param endX number]],endY--[[@param endY number]],endZ--[[@param endZ number]],blockObjects--[[@param blockObjects boolean]],blockVehicles--[[@param blockVehicles boolean]],blockMap--[[@param blockMap boolean]],blockPlayer--[[@param blockPlayer boolean]])return InvokeVoid(0x1F351CF1C6475734,startX+.0,startY+.0,startZ+.0,endX+.0,endY+.0,endZ+.0,blockObjects,blockVehicles,blockMap,blockPlayer)end;
	--[=[Plays a scenario on a Ped at their current location.

unkDelay - Usually 0 or -1, doesn't seem to have any effect. Might be a delay between sequences.
playEnterAnim - Plays the "Enter" anim if true, otherwise plays the "Exit" anim. Scenarios that don't have any "Enter" anims won't play if this is set to true.

----

From "am_hold_up.ysc.c4" at line 339:

TASK::TASK_START_SCENARIO_IN_PLACE(NETWORK::NET_TO_PED(l_8D._f4), sub_adf(), 0, 1);

I'm unsure of what the last two parameters are, however sub_adf() randomly returns 1 of 3 scenarios, those being:
WORLD_HUMAN_SMOKING
WORLD_HUMAN_HANG_OUT_STREET
WORLD_HUMAN_STAND_MOBILE

This makes sense, as these are what I commonly see when going by a liquor store.
-------------------------
List of scenarioNames: https://pastebin.com/6mrYTdQv
(^ Thank you so fucking much for this)

Also these:
WORLD_FISH_FLEE
DRIVE
WORLD_HUMAN_HIKER
WORLD_VEHICLE_ATTRACTOR
WORLD_VEHICLE_BICYCLE_MOUNTAIN
WORLD_VEHICLE_BIKE_OFF_ROAD_RACE
WORLD_VEHICLE_BIKER
WORLD_VEHICLE_CONSTRUCTION_PASSENGERS
WORLD_VEHICLE_CONSTRUCTION_SOLO
WORLD_VEHICLE_DRIVE_PASSENGERS
WORLD_VEHICLE_DRIVE_SOLO
WORLD_VEHICLE_EMPTY
WORLD_VEHICLE_PARK_PARALLEL
WORLD_VEHICLE_PARK_PERPENDICULAR_NOSE_IN
WORLD_VEHICLE_POLICE_BIKE
WORLD_VEHICLE_POLICE_CAR
WORLD_VEHICLE_POLICE_NEXT_TO_CAR
WORLD_VEHICLE_SALTON_DIRT_BIKE
WORLD_VEHICLE_TRUCK_LOGS

Full list of ped scenarios by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json]=]
	TaskStartScenarioInPlace=function(ped--[[@param ped integer]],scenarioName--[[@param scenarioName string]],unkDelay--[[@param unkDelay integer]],playEnterAnim--[[@param playEnterAnim boolean]])return InvokeVoid(0x142A02425FF02BD9,ped,scenarioName,unkDelay,playEnterAnim)end;
	--[=[Full list of ped scenarios by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json

Also a few more listed at TASK::TASK_START_SCENARIO_IN_PLACE just above.
---------------
The first parameter in every scenario has always been a Ped of some sort. The second like TASK_START_SCENARIO_IN_PLACE is the name of the scenario. 

The next 4 parameters were harder to decipher. After viewing "hairdo_shop_mp.ysc.c4", and being confused from seeing the case in other scripts, they passed the first three of the arguments as one array from a function, and it looked like it was obviously x, y, and z.

I haven't seen the sixth parameter go to or over 360, making me believe that it is rotation, but I really can't confirm anything.

I have no idea what the last 3 parameters are, but I'll try to find out.

-going on the last 3 parameters, they appear to always be "0, 0, 1"

p6 -1 also used in scrips

p7 used for sitting scenarios

p8 teleports ped to position]=]
	TaskStartScenarioAtPosition=function(ped--[[@param ped integer]],scenarioName--[[@param scenarioName string]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],heading--[[@param heading number]],duration--[[@param duration integer]],sittingScenario--[[@param sittingScenario boolean]],teleport--[[@param teleport boolean]])return InvokeVoid(0xFA4EFC79F69D4F07,ped,scenarioName,x+.0,y+.0,z+.0,heading+.0,duration,sittingScenario,teleport)end;
	--[=[Updated variables

An alternative to TASK::TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP. Makes the ped walk to the scenario instead.]=]
	TaskUseNearestScenarioToCoord=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],distance--[[@param distance number]],duration--[[@param duration integer]])return InvokeVoid(0x277F471BA9DB000B,ped,x+.0,y+.0,z+.0,distance+.0,duration)end;
	TaskUseNearestScenarioToCoordWarp=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]],timeToLeave--[[@param timeToLeave integer]])return InvokeVoid(0x58E2E0F23F6B76C3,ped,x+.0,y+.0,z+.0,radius+.0,timeToLeave)end;
	--[=[p5 is always 0 in scripts]=]
	TaskUseNearestScenarioChainToCoord=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],maxRange--[[@param maxRange number]],timeToLeave--[[@param timeToLeave integer]])return InvokeVoid(0x9FDA1B3D7E7028B3,ped,x+.0,y+.0,z+.0,maxRange+.0,timeToLeave)end;
	--[=[p5 is always -1 or 0 in scripts]=]
	TaskUseNearestScenarioChainToCoordWarp=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]],timeToLeave--[[@param timeToLeave integer]])return InvokeVoid(0x97A28E63F0BA5631,ped,x+.0,y+.0,z+.0,radius+.0,timeToLeave)end;
	DoesScenarioExistInArea=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]],mustBeFree--[[@param mustBeFree boolean]])return InvokeBool(0x5A59271FFADD33C1,x+.0,y+.0,z+.0,radius+.0,mustBeFree)end;---@return boolean
	DoesScenarioOfTypeExistInArea=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],scenarioName--[[@param scenarioName string]],radius--[[@param radius number]],mustBeFree--[[@param mustBeFree boolean]])return InvokeBool(0x0A9D0C2A3BBC86C1,x+.0,y+.0,z+.0,scenarioName,radius+.0,mustBeFree)end;---@return boolean
	IsScenarioOccupied=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],maxRange--[[@param maxRange number]],onlyUsersActuallyAtScenario--[[@param onlyUsersActuallyAtScenario boolean]])return InvokeBool(0x788756D73AC2E07C,x+.0,y+.0,z+.0,maxRange+.0,onlyUsersActuallyAtScenario)end;---@return boolean
	PedHasUseScenarioTask=function(ped--[[@param ped integer]])return InvokeBool(0x295E3CCEC879CCD7,ped)end;---@return boolean
	--[=[Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json]=]
	PlayAnimOnRunningScenario=function(ped--[[@param ped integer]],animDict--[[@param animDict string]],animName--[[@param animName string]])return InvokeVoid(0x748040460F8DF5DC,ped,animDict,animName)end;
	--[=[Full list of scenario groups used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenarioGroupNames.json
Occurrences in the b617d scripts:

"ARMY_GUARD",
"ARMY_HELI",
"Cinema_Downtown",
"Cinema_Morningwood",
"Cinema_Textile",
"City_Banks",
"Countryside_Banks",
"DEALERSHIP",
"GRAPESEED_PLANES",
"KORTZ_SECURITY",
"LOST_BIKERS",
"LSA_Planes",
"LSA_Planes",
"MP_POLICE",
"Observatory_Bikers", 
"POLICE_POUND1",
"POLICE_POUND2",
"POLICE_POUND3",
"POLICE_POUND4",
"POLICE_POUND5"
"QUARRY",
"SANDY_PLANES",
"SCRAP_SECURITY",
"SEW_MACHINE",
"SOLOMON_GATE",
"Triathlon_1_Start", 
"Triathlon_2_Start", 
"Triathlon_3_Start"

Sometimes used with IS_SCENARIO_GROUP_ENABLED:
if (TASK::DOES_SCENARIO_GROUP_EXIST("Observatory_Bikers") && (!TASK::IS_SCENARIO_GROUP_ENABLED("Observatory_Bikers"))) {
else if (TASK::IS_SCENARIO_GROUP_ENABLED("BLIMP")) {
]=]
	DoesScenarioGroupExist=function(scenarioGroup--[[@param scenarioGroup string]])return InvokeBool(0xF9034C136C9E00D3,scenarioGroup)end;---@return boolean
	--[=[Full list of scenario groups used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenarioGroupNames.json
Occurrences in the b617d scripts: 

 "ARMY_GUARD",
 "ARMY_HELI",
 "BLIMP",
 "Cinema_Downtown",
 "Cinema_Morningwood",
 "Cinema_Textile",
 "City_Banks",
 "Countryside_Banks",
 "DEALERSHIP",
 "KORTZ_SECURITY",
 "LSA_Planes",
 "MP_POLICE",
 "Observatory_Bikers",
 "POLICE_POUND1",
 "POLICE_POUND2",
 "POLICE_POUND3",
 "POLICE_POUND4",
 "POLICE_POUND5",
 "Rampage1",
 "SANDY_PLANES",
 "SCRAP_SECURITY",
 "SEW_MACHINE",
 "SOLOMON_GATE"

Sometimes used with DOES_SCENARIO_GROUP_EXIST:
if (TASK::DOES_SCENARIO_GROUP_EXIST("Observatory_Bikers") &&   (!TASK::IS_SCENARIO_GROUP_ENABLED("Observatory_Bikers"))) {
else if (TASK::IS_SCENARIO_GROUP_ENABLED("BLIMP")) {]=]
	IsScenarioGroupEnabled=function(scenarioGroup--[[@param scenarioGroup string]])return InvokeBool(0x367A09DED4E05B99,scenarioGroup)end;---@return boolean
	--[=[Full list of scenario groups used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenarioGroupNames.json
Occurrences in the b617d scripts: https://pastebin.com/Tvg2PRHU]=]
	SetScenarioGroupEnabled=function(scenarioGroup--[[@param scenarioGroup string]],enabled--[[@param enabled boolean]])return InvokeVoid(0x02C8E5B49848664E,scenarioGroup,enabled)end;
	ResetScenarioGroupsEnabled=function()return InvokeVoid(0xDD902D0349AFAD3A)end;
	--[=[Full list of scenario groups used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenarioGroupNames.json
Groups found in the scripts used with this native:

"AMMUNATION",
"QUARRY",
"Triathlon_1",
"Triathlon_2",
"Triathlon_3"]=]
	SetExclusiveScenarioGroup=function(scenarioGroup--[[@param scenarioGroup string]])return InvokeVoid(0x535E97E1F7FC0C6A,scenarioGroup)end;
	ResetExclusiveScenarioGroup=function()return InvokeVoid(0x4202BBCB8684563D)end;
	--[=[Full list of scenario types used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
Occurrences in the b617d scripts:
"PROP_HUMAN_SEAT_CHAIR",
"WORLD_HUMAN_DRINKING",
"WORLD_HUMAN_HANG_OUT_STREET",
"WORLD_HUMAN_SMOKING",
"WORLD_MOUNTAIN_LION_WANDER",
"WORLD_HUMAN_DRINKING"

Sometimes used together with MISC::IS_STRING_NULL_OR_EMPTY in the scripts.

scenarioType could be the same as scenarioName, used in for example TASK::TASK_START_SCENARIO_AT_POSITION.
]=]
	IsScenarioTypeEnabled=function(scenarioType--[[@param scenarioType string]])return InvokeBool(0x3A815DB3EA088722,scenarioType)end;---@return boolean
	--[=[Full list of scenario types used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
seems to enable/disable specific scenario-types from happening in the game world.

Here are some scenario types from the scripts:
"WORLD_MOUNTAIN_LION_REST"                                             
"WORLD_MOUNTAIN_LION_WANDER"                                            
"DRIVE"                                                                  
"WORLD_VEHICLE_POLICE_BIKE"                                             
"WORLD_VEHICLE_POLICE_CAR"                                             
"WORLD_VEHICLE_POLICE_NEXT_TO_CAR"                                        
"WORLD_VEHICLE_DRIVE_SOLO"                                                 
"WORLD_VEHICLE_BIKER"                                                      
"WORLD_VEHICLE_DRIVE_PASSENGERS"                                           
"WORLD_VEHICLE_SALTON_DIRT_BIKE"                                           
"WORLD_VEHICLE_BICYCLE_MOUNTAIN"                                           
"PROP_HUMAN_SEAT_CHAIR"                                             
"WORLD_VEHICLE_ATTRACTOR"                                             
"WORLD_HUMAN_LEANING"                                                 
"WORLD_HUMAN_HANG_OUT_STREET"                                        
"WORLD_HUMAN_DRINKING"                                                
"WORLD_HUMAN_SMOKING"                                                
"WORLD_HUMAN_GUARD_STAND"                                            
"WORLD_HUMAN_CLIPBOARD"                                              
"WORLD_HUMAN_HIKER"                                                  
"WORLD_VEHICLE_EMPTY"                                                      
"WORLD_VEHICLE_BIKE_OFF_ROAD_RACE"                                      
"WORLD_HUMAN_PAPARAZZI"                                               
"WORLD_VEHICLE_PARK_PERPENDICULAR_NOSE_IN"                            
"WORLD_VEHICLE_PARK_PARALLEL"                                              
"WORLD_VEHICLE_CONSTRUCTION_SOLO"                               
"WORLD_VEHICLE_CONSTRUCTION_PASSENGERS"                                                                    
"WORLD_VEHICLE_TRUCK_LOGS"

scenarioType could be the same as scenarioName, used in for example TASK::TASK_START_SCENARIO_AT_POSITION.]=]
	SetScenarioTypeEnabled=function(scenarioType--[[@param scenarioType string]],toggle--[[@param toggle boolean]])return InvokeVoid(0xEB47EC4E34FB7EE1,scenarioType,toggle)end;
	ResetScenarioTypesEnabled=function()return InvokeVoid(0x0D40EE2A7F2B2D6D)end;
	IsPedActiveInScenario=function(ped--[[@param ped integer]])return InvokeBool(0xAA135F9482C82CC3,ped)end;---@return boolean
	--[=[Used only once (am_mp_property_int)

ped was PLAYER_PED_ID()

Related to CTaskAmbientClips.]=]
	IsPedPlayingBaseClipInScenario=function(ped--[[@param ped integer]])return InvokeBool(0x621C6E4729388E41,ped)end;---@return boolean
	--[=[Appears only in fm_mission_controller and used only 3 times.

ped was always PLAYER_PED_ID()
p1 was always true
p2 was always true]=]
	SetPedCanPlayAmbientIdles=function(ped--[[@param ped integer]],blockIdleClips--[[@param blockIdleClips boolean]],removeIdleClipIfPlaying--[[@param removeIdleClipIfPlaying boolean]])return InvokeVoid(0x8FD89A6240813FD0,ped,blockIdleClips,removeIdleClipIfPlaying)end;
	--[=[Despite its name, it only attacks ONE hated target. The one closest to the specified position.]=]
	TaskCombatHatedTargetsInArea=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]],combatFlags--[[@param combatFlags integer]])return InvokeVoid(0x4CF5F55DAC3280A0,ped,x+.0,y+.0,z+.0,radius+.0,combatFlags)end;
	--[=[Despite its name, it only attacks ONE hated target. The one closest hated target.

p2 seems to be always 0]=]
	TaskCombatHatedTargetsAroundPed=function(ped--[[@param ped integer]],radius--[[@param radius number]],combatFlags--[[@param combatFlags integer]])return InvokeVoid(0x7BF835BB9E2698C8,ped,radius+.0,combatFlags)end;
	TaskCombatHatedTargetsAroundPedTimed=function(ped--[[@param ped integer]],radius--[[@param radius number]],time--[[@param time integer]],combatFlags--[[@param combatFlags integer]])return InvokeVoid(0x2BBA30B854534A0C,ped,radius+.0,time,combatFlags)end;
	--[=[In every case of this native, I've only seen the first parameter passed as 0, although I believe it's a Ped after seeing tasks around it using 0. That's because it's used in a Sequence Task.

The last 3 parameters are definitely coordinates after seeing them passed in other scripts, and even being used straight from the player's coordinates.
---
It seems that - in the decompiled scripts - this native was used on a ped who was in a vehicle to throw a projectile out the window at the player. This is something any ped will naturally do if they have a throwable and they are doing driveby-combat (although not very accurately).
It is possible, however, that this is how SWAT throws smoke grenades at the player when in cover.
----------------------------------------------------
The first comment is right it definately is the ped as if you look in script finale_heist2b.c line 59628 in Xbox Scripts atleast you will see task_throw_projectile and the first param is Local_559[2 <14>] if you look above it a little bit line 59622 give_weapon_to_ped uses the same exact param Local_559[2 <14>] and we all know the first param of that native is ped. So it guaranteed has to be ped. 0 just may mean to use your ped by default for some reason.]=]
	TaskThrowProjectile=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],ignoreCollisionEntityIndex--[[@param ignoreCollisionEntityIndex integer]],createInvincibleProjectile--[[@param createInvincibleProjectile boolean]])return InvokeVoid(0x7285951DBF6B5A51,ped,x+.0,y+.0,z+.0,ignoreCollisionEntityIndex,createInvincibleProjectile)end;
	TaskSwapWeapon=function(ped--[[@param ped integer]],drawWeapon--[[@param drawWeapon boolean]])return InvokeVoid(0xA21C51255B205245,ped,drawWeapon)end;
	--[=[The 2nd param (drawWeapon) is not implemented.

-----------------------------------------------------------------------

The only occurrence I found in a R* script ("assassin_construction.ysc.c4"):

            if (((v_3 < v_4) && (TASK::GET_SCRIPT_TASK_STATUS(PLAYER::PLAYER_PED_ID(), 0x6a67a5cc) != 1)) && (v_5 > v_3)) {
                TASK::TASK_RELOAD_WEAPON(PLAYER::PLAYER_PED_ID(), 1);
            }]=]
	TaskReloadWeapon=function(ped--[[@param ped integer]],drawWeapon--[[@param drawWeapon boolean]])return InvokeVoid(0x62D2916F56B9CD2D,ped,drawWeapon)end;
	IsPedGettingUp=function(ped--[[@param ped integer]])return InvokeBool(0x2A74E1D5F2F00EEC,ped)end;---@return boolean
	--[=[EX: Function.Call(Ped1, Ped2, Time, 0);

The last parameter is always 0 for some reason I do not know. The first parameter is the pedestrian who will writhe to the pedestrian in the other parameter. The third paremeter is how long until the Writhe task ends. When the task ends, the ped will die. If set to -1, he will not die automatically, and the task will continue until something causes it to end. This can be being touched by an entity, being shot, explosion, going into ragdoll, having task cleared. Anything that ends the current task will kill the ped at this point.



Third parameter does not appear to be time. The last parameter is not implemented (It's not used, regardless of value).]=]
	TaskWrithe=function(ped--[[@param ped integer]],target--[[@param target integer]],minFireLoops--[[@param minFireLoops integer]],startState--[[@param startState integer]],forceShootOnGround--[[@param forceShootOnGround boolean]],shootFromGroundTimer--[[@param shootFromGroundTimer integer]])return InvokeVoid(0xCDDC2B77CE54AC6E,ped,target,minFireLoops,startState,forceShootOnGround,shootFromGroundTimer)end;
	--[=[This native checks if a ped is on the ground, in pain from a (gunshot) wound.
Returns `true` if the ped is in writhe, `false` otherwise.]=]
	IsPedInWrithe=function(ped--[[@param ped integer]])return InvokeBool(0xDEB6D52126E7D640,ped)end;---@return boolean
	--[=[ patrolRoutes found in the b617d scripts:
 "miss_Ass0",
 "miss_Ass1",
 "miss_Ass2",
 "miss_Ass3",
 "miss_Ass4",
 "miss_Ass5",
 "miss_Ass6",
 "MISS_PATROL_6",
 "MISS_PATROL_7",
 "MISS_PATROL_8",
 "MISS_PATROL_9",
 "miss_Tower_01",
 "miss_Tower_02",
 "miss_Tower_03",
 "miss_Tower_04",
 "miss_Tower_05",
 "miss_Tower_06",
 "miss_Tower_07",
 "miss_Tower_08",
 "miss_Tower_10"]=]
	OpenPatrolRoute=function(patrolRoute--[[@param patrolRoute string]])return InvokeVoid(0xA36BFB5EE89F3D82,patrolRoute)end;
	ClosePatrolRoute=function()return InvokeVoid(0xB043ECA801B8CBC1)end;
	--[=[Example: 
TASK::ADD_PATROL_ROUTE_NODE(2, "WORLD_HUMAN_GUARD_STAND", -193.4915, -2378.864990234375, 10.9719, -193.4915, -2378.864990234375, 10.9719, 3000);

p0 is between 0 and 4 in the scripts.

p1 is "WORLD_HUMAN_GUARD_STAND" or "StandGuard".

p2, p3 and p4 is only one parameter sometimes in the scripts. Most likely a Vector3 hence p2, p3 and p4 are coordinates. 
Examples: 
TASK::ADD_PATROL_ROUTE_NODE(1, "WORLD_HUMAN_GUARD_STAND", l_739[7/*3*/], 0.0, 0.0, 0.0, 0);

TASK::ADD_PATROL_ROUTE_NODE(1, "WORLD_HUMAN_GUARD_STAND", l_B0[17/*44*/]._f3, l_B0[17/*44*/]._f3, 2000);

p5, p6 and p7 are for example set to: 1599.0406494140625, 2713.392578125, 44.4309.

p8 is an int, often random set to for example: MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000).]=]
	AddPatrolRouteNode=function(nodeId--[[@param nodeId integer]],nodeType--[[@param nodeType string]],posX--[[@param posX number]],posY--[[@param posY number]],posZ--[[@param posZ number]],headingX--[[@param headingX number]],headingY--[[@param headingY number]],headingZ--[[@param headingZ number]],duration--[[@param duration integer]])return InvokeVoid(0x8EDF950167586B7C,nodeId,nodeType,posX+.0,posY+.0,posZ+.0,headingX+.0,headingY+.0,headingZ+.0,duration)end;
	AddPatrolRouteLink=function(nodeId1--[[@param nodeId1 integer]],nodeId2--[[@param nodeId2 integer]])return InvokeVoid(0x23083260DEC3A551,nodeId1,nodeId2)end;
	CreatePatrolRoute=function()return InvokeVoid(0xAF8A443CCC8018DC)end;
	--[=[From the b617d scripts:

TASK::DELETE_PATROL_ROUTE("miss_merc0");
TASK::DELETE_PATROL_ROUTE("miss_merc1");
TASK::DELETE_PATROL_ROUTE("miss_merc2");
TASK::DELETE_PATROL_ROUTE("miss_dock");]=]
	DeletePatrolRoute=function(patrolRoute--[[@param patrolRoute string]])return InvokeVoid(0x7767DD9D65E91319,patrolRoute)end;
	GetPatrolTaskInfo=function(ped--[[@param ped integer]],timeLeftAtNode--[[@param timeLeftAtNode integer*]],nodeId--[[@param nodeId integer*]])return InvokeBool(0x52F734CEBE20DFBA,ped,timeLeftAtNode,nodeId)end;---@return boolean
	--[=[After looking at some scripts the second parameter seems to be an id of some kind. Here are some I found from some R* scripts:

"miss_Tower_01" (this went from 01 - 10)
"miss_Ass0" (0, 4, 6, 3)
"MISS_PATROL_8"

I think they're patrol routes, but I'm not sure. And I believe the 3rd parameter is a BOOL, but I can't confirm other than only seeing 0 and 1 being passed.


As far as I can see the patrol routes names such as "miss_Ass0" have been defined earlier in the scripts. This leads me to believe we can defined our own new patrol routes by following the same approach. 
From the scripts

    TASK::OPEN_PATROL_ROUTE("miss_Ass0");
    TASK::ADD_PATROL_ROUTE_NODE(0, "WORLD_HUMAN_GUARD_STAND", l_738[0/*3*/], -139.4076690673828, -993.4732055664062, 26.2754, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));
    TASK::ADD_PATROL_ROUTE_NODE(1, "WORLD_HUMAN_GUARD_STAND", l_738[1/*3*/], -116.1391830444336, -987.4984130859375, 26.38541030883789, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));
    TASK::ADD_PATROL_ROUTE_NODE(2, "WORLD_HUMAN_GUARD_STAND", l_738[2/*3*/], -128.46847534179688, -979.0340576171875, 26.2754, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));
    TASK::ADD_PATROL_ROUTE_LINK(0, 1);
    TASK::ADD_PATROL_ROUTE_LINK(1, 2);
    TASK::ADD_PATROL_ROUTE_LINK(2, 0);
    TASK::CLOSE_PATROL_ROUTE();
    TASK::CREATE_PATROL_ROUTE();

]=]
	TaskPatrol=function(ped--[[@param ped integer]],patrolRouteName--[[@param patrolRouteName string]],alertState--[[@param alertState integer]],canChatToPeds--[[@param canChatToPeds boolean]],useHeadLookAt--[[@param useHeadLookAt boolean]])return InvokeVoid(0xBDA5DF49D080FE4E,ped,patrolRouteName,alertState,canChatToPeds,useHeadLookAt)end;
	--[=[Makes the ped run to take cover]=]
	TaskStayInCover=function(ped--[[@param ped integer]])return InvokeVoid(0xE5DA8615A6180789,ped)end;
	--[=[x, y, z: offset in world coords from some entity.]=]
	AddVehicleSubtaskAttackCoord=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0x5CF0D8F9BBA0DD75,ped,x+.0,y+.0,z+.0)end;
	AddVehicleSubtaskAttackPed=function(ped--[[@param ped integer]],target--[[@param target integer]])return InvokeVoid(0x85F462BADC7DA47F,ped,target)end;
	TaskVehicleShootAtPed=function(ped--[[@param ped integer]],target--[[@param target integer]],fireTolerance--[[@param fireTolerance number]])return InvokeVoid(0x10AB107B887214D8,ped,target,fireTolerance+.0)end;
	TaskVehicleAimAtPed=function(ped--[[@param ped integer]],target--[[@param target integer]])return InvokeVoid(0xE41885592B08B097,ped,target)end;
	TaskVehicleShootAtCoord=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],fireTolerance--[[@param fireTolerance number]])return InvokeVoid(0x5190796ED39C9B6D,ped,x+.0,y+.0,z+.0,fireTolerance+.0)end;
	TaskVehicleAimAtCoord=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0x447C1E9EF844BC0F,ped,x+.0,y+.0,z+.0)end;
	--[=[Differs from TASK_VEHICLE_DRIVE_TO_COORDS in that it will pick the shortest possible road route without taking one-way streets and other "road laws" into consideration.

WARNING:
A behaviorFlag value of 0 will result in a clunky, stupid driver!

Recommended settings:
speed = 30.0f,
behaviorFlag = 156, 
stoppingRange = 5.0f;

If you simply want to have your driver move to a fixed location, call it only once, or, when necessary in the event of interruption. 

If using this to continually follow a Ped who is on foot:  You will need to run this in a tick loop.  Call it in with the Ped's updated coordinates every 20 ticks or so and you will have one hell of a smart, fast-reacting NPC driver -- provided he doesn't get stuck.  If your update frequency is too fast, the Ped may not have enough time to figure his way out of being stuck, and thus, remain stuck.  One way around this would be to implement an "anti-stuck" mechanism, which allows the driver to realize he's stuck, temporarily pause the tick, unstuck, then resume the tick.

EDIT:  This is being discussed in more detail at http://gtaforums.com/topic/818504-any-idea-on-how-to-make-peds-clever-and-insanely-fast-c/  ]=]
	TaskVehicleGotoNavmesh=function(ped--[[@param ped integer]],vehicle--[[@param vehicle integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],speed--[[@param speed number]],behaviorFlag--[[@param behaviorFlag integer]],stoppingRange--[[@param stoppingRange number]])return InvokeVoid(0x195AEEB13CEFE2EE,ped,vehicle,x+.0,y+.0,z+.0,speed+.0,behaviorFlag,stoppingRange+.0)end;
	--[=[movement_speed: mostly 2f, but also 1/1.2f, etc.
p8: always false
p9: 2f
p10: 0.5f
p11: true
p12: 0 / 512 / 513, etc.
p13: 0
firing_pattern: ${firing_pattern_full_auto}, 0xC6EE6B4C]=]
	TaskGoToCoordWhileAimingAtCoord=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],aimAtX--[[@param aimAtX number]],aimAtY--[[@param aimAtY number]],aimAtZ--[[@param aimAtZ number]],moveBlendRatio--[[@param moveBlendRatio number]],shoot--[[@param shoot boolean]],targetRadius--[[@param targetRadius number]],slowDistance--[[@param slowDistance number]],useNavMesh--[[@param useNavMesh boolean]],navFlags--[[@param navFlags integer]],instantBlendToAim--[[@param instantBlendToAim boolean]],firingPattern--[[@param firingPattern integer]])return InvokeVoid(0x11315AB3385B8AC0,ped,x+.0,y+.0,z+.0,aimAtX+.0,aimAtY+.0,aimAtZ+.0,moveBlendRatio+.0,shoot,targetRadius+.0,slowDistance+.0,useNavMesh,navFlags,instantBlendToAim,firingPattern)end;
	TaskGoToCoordWhileAimingAtEntity=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],aimAtID--[[@param aimAtID integer]],moveBlendRatio--[[@param moveBlendRatio number]],shoot--[[@param shoot boolean]],targetRadius--[[@param targetRadius number]],slowDistance--[[@param slowDistance number]],useNavMesh--[[@param useNavMesh boolean]],navFlags--[[@param navFlags integer]],instantBlendToAim--[[@param instantBlendToAim boolean]],firingPattern--[[@param firingPattern integer]],time--[[@param time integer]])return InvokeVoid(0xB2A16444EAD9AE47,ped,x+.0,y+.0,z+.0,aimAtID,moveBlendRatio+.0,shoot,targetRadius+.0,slowDistance+.0,useNavMesh,navFlags,instantBlendToAim,firingPattern,time)end;
	--[=[The ped will walk or run towards goToLocation, aiming towards goToLocation or focusLocation (depending on the aimingFlag) and shooting if shootAtEnemies = true to any enemy in his path.

If the ped is closer than noRoadsDistance, the ped will ignore pathing/navmesh and go towards goToLocation directly. This could cause the ped to get stuck behind tall walls if the goToLocation is on the other side. To avoid this, use 0.0f and the ped will always use pathing/navmesh to reach his destination.

If the speed is set to 0.0f, the ped will just stand there while aiming, if set to 1.0f he will walk while aiming, 2.0f will run while aiming.

The ped will stop aiming when he is closer than distanceToStopAt to goToLocation.

I still can't figure out what unkTrue is used for. I don't notice any difference if I set it to false but in the decompiled scripts is always true.

I think that unkFlag, like the driving styles, could be a flag that "work as a list of 32 bits converted to a decimal integer. Each bit acts as a flag, and enables or disables a function". What leads me to this conclusion is the fact that in the decompiled scripts, unkFlag takes values like: 0, 1, 5 (101 in binary) and 4097 (4096 + 1 or 1000000000001 in binary). For now, I don't know what behavior enable or disable this possible flag so I leave it at 0.

Note: After some testing, using unkFlag = 16 (0x10) enables the use of sidewalks while moving towards goToLocation.

The aimingFlag takes 2 values: 0 to aim at the focusLocation, 1 to aim at where the ped is heading (goToLocation).

Example:

enum AimFlag
{
   AimAtFocusLocation,
   AimAtGoToLocation
};

Vector3 goToLocation1 = { 996.2867f, 0, -2143.044f, 0, 28.4763f, 0 }; // remember the padding.

Vector3 goToLocation2 = { 990.2867f, 0, -2140.044f, 0, 28.4763f, 0 }; // remember the padding.

Vector3 focusLocation = { 994.3478f, 0, -2136.118f, 0, 29.2463f, 0 }; // the coord z should be a little higher, around +1.0f to avoid aiming at the ground

// 1st example
TASK::TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(pedHandle, goToLocation1.x, goToLocation1.y, goToLocation1.z, focusLocation.x, focusLocation.y, focusLocation.z, 2.0f /*run*/, true /*shoot*/, 3.0f /*stop at*/, 0.0f /*noRoadsDistance*/, true /*always true*/, 0 /*possible flag*/, AimFlag::AimAtGoToLocation, -957453492 /*FullAuto pattern*/);

// 2nd example
TASK::TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(pedHandle, goToLocation2.x, goToLocation2.y, goToLocation2.z, focusLocation.x, focusLocation.y, focusLocation.z, 1.0f /*walk*/, false /*don't shoot*/, 3.0f /*stop at*/, 0.0f /*noRoadsDistance*/, true /*always true*/, 0 /*possible flag*/, AimFlag::AimAtFocusLocation, -957453492 /*FullAuto pattern*/);


1st example: The ped (pedhandle) will run towards goToLocation1. While running and aiming towards goToLocation1, the ped will shoot on sight to any enemy in his path, using "FullAuto" firing pattern. The ped will stop once he is closer than distanceToStopAt to goToLocation1.

2nd example: The ped will walk towards goToLocation2. This time, while walking towards goToLocation2 and aiming at focusLocation, the ped will point his weapon on sight to any enemy in his path without shooting. The ped will stop once he is closer than distanceToStopAt to goToLocation2.]=]
	TaskGoToCoordAndAimAtHatedEntitiesNearCoord=function(pedHandle--[[@param pedHandle integer]],goToLocationX--[[@param goToLocationX number]],goToLocationY--[[@param goToLocationY number]],goToLocationZ--[[@param goToLocationZ number]],focusLocationX--[[@param focusLocationX number]],focusLocationY--[[@param focusLocationY number]],focusLocationZ--[[@param focusLocationZ number]],speed--[[@param speed number]],shootAtEnemies--[[@param shootAtEnemies boolean]],distanceToStopAt--[[@param distanceToStopAt number]],noRoadsDistance--[[@param noRoadsDistance number]],useNavMesh--[[@param useNavMesh boolean]],navFlags--[[@param navFlags integer]],taskFlags--[[@param taskFlags integer]],firingPattern--[[@param firingPattern integer]])return InvokeVoid(0xA55547801EB331FC,pedHandle,goToLocationX+.0,goToLocationY+.0,goToLocationZ+.0,focusLocationX+.0,focusLocationY+.0,focusLocationZ+.0,speed+.0,shootAtEnemies,distanceToStopAt+.0,noRoadsDistance+.0,useNavMesh,navFlags,taskFlags,firingPattern)end;
	TaskGoToEntityWhileAimingAtCoord=function(ped--[[@param ped integer]],entity--[[@param entity integer]],aimX--[[@param aimX number]],aimY--[[@param aimY number]],aimZ--[[@param aimZ number]],moveBlendRatio--[[@param moveBlendRatio number]],shoot--[[@param shoot boolean]],targetRadius--[[@param targetRadius number]],slowDistance--[[@param slowDistance number]],useNavMesh--[[@param useNavMesh boolean]],instantBlendToAim--[[@param instantBlendToAim boolean]],firingPattern--[[@param firingPattern integer]])return InvokeVoid(0x04701832B739DCE5,ped,entity,aimX+.0,aimY+.0,aimZ+.0,moveBlendRatio+.0,shoot,targetRadius+.0,slowDistance+.0,useNavMesh,instantBlendToAim,firingPattern)end;
	--[=[shootatEntity:
If true, peds will shoot at Entity till it is dead.
If false, peds will just walk till they reach the entity and will cease shooting.]=]
	TaskGoToEntityWhileAimingAtEntity=function(ped--[[@param ped integer]],entityToWalkTo--[[@param entityToWalkTo integer]],entityToAimAt--[[@param entityToAimAt integer]],speed--[[@param speed number]],shootatEntity--[[@param shootatEntity boolean]],targetRadius--[[@param targetRadius number]],slowDistance--[[@param slowDistance number]],useNavMesh--[[@param useNavMesh boolean]],instantBlendToAim--[[@param instantBlendToAim boolean]],firingPattern--[[@param firingPattern integer]])return InvokeVoid(0x97465886D35210E9,ped,entityToWalkTo,entityToAimAt,speed+.0,shootatEntity,targetRadius+.0,slowDistance+.0,useNavMesh,instantBlendToAim,firingPattern)end;
	--[=[Makes the ped ragdoll like when falling from a great height]=]
	SetHighFallTask=function(ped--[[@param ped integer]],minTime--[[@param minTime integer]],maxTime--[[@param maxTime integer]],entryType--[[@param entryType integer]])return InvokeVoid(0x8C825BDC7741D37C,ped,minTime,maxTime,entryType)end;
	--[=[Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
For a full list of the points, see here: goo.gl/wIH0vn

Max number of loaded recordings is 32.]=]
	RequestWaypointRecording=function(name--[[@param name string]])return InvokeVoid(0x9EEFB62EB27B5792,name)end;
	--[=[Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json]=]
	GetIsWaypointRecordingLoaded=function(name--[[@param name string]])return InvokeBool(0xCB4E8BE8A0063C5D,name)end;---@return boolean
	--[=[Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json]=]
	RemoveWaypointRecording=function(name--[[@param name string]])return InvokeVoid(0xFF1B8B4AA1C25DC8,name)end;
	--[=[Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
For a full list of the points, see here: goo.gl/wIH0vn]=]
	WaypointRecordingGetNumPoints=function(name--[[@param name string]],points--[[@param points integer*]])return InvokeBool(0x5343532C01A07234,name,points)end;---@return boolean
	--[=[Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
For a full list of the points, see here: goo.gl/wIH0vn]=]
	WaypointRecordingGetCoord=function(name--[[@param name string]],point--[[@param point integer]],coord--[[@param coord V3*]])return InvokeBool(0x2FB897405C90B361,name,point,coord)end;---@return boolean
	--[=[Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json]=]
	WaypointRecordingGetSpeedAtPoint=function(name--[[@param name string]],point--[[@param point integer]])return InvokeFloat(0x005622AEBC33ACA9,name,point)end;---@return number
	--[=[Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
For a full list of the points, see here: goo.gl/wIH0vn]=]
	WaypointRecordingGetClosestWaypoint=function(name--[[@param name string]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],point--[[@param point integer*]])return InvokeBool(0xB629A298081F876F,name,x+.0,y+.0,z+.0,point)end;---@return boolean
	TaskFollowWaypointRecording=function(ped--[[@param ped integer]],name--[[@param name string]],p2--[[@param p2 integer]],p3--[[@param p3 integer]],p4--[[@param p4 integer]])return InvokeVoid(0x0759591819534F7B,ped,name,p2,p3,p4)end;
	IsWaypointPlaybackGoingOnForPed=function(ped--[[@param ped integer]])return InvokeBool(0xE03B3F2D3DC59B64,ped)end;---@return boolean
	GetPedWaypointProgress=function(ped--[[@param ped integer]])return InvokeInt(0x2720AAA75001E094,ped)end;---@return integer
	GetPedWaypointDistance=function(p0--[[@param p0 any]])return InvokeFloat(0xE6A877C64CAF1BC5,p0)end;---@return number
	SetPedWaypointRouteOffset=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeBool(0xED98E10B0AFCE4B4,ped,x+.0,y+.0,z+.0)end;---@return boolean
	GetWaypointDistanceAlongRoute=function(name--[[@param name string]],point--[[@param point integer]])return InvokeFloat(0xA5B769058763E497,name,point)end;---@return number
	WaypointPlaybackGetIsPaused=function(p0--[[@param p0 any]])return InvokeBool(0x701375A7D43F01CB,p0)end;---@return boolean
	WaypointPlaybackPause=function(p0--[[@param p0 any]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0x0F342546AA06FED5,p0,p1,p2)end;
	WaypointPlaybackResume=function(p0--[[@param p0 any]],p1--[[@param p1 boolean]],p2--[[@param p2 any]],p3--[[@param p3 any]])return InvokeVoid(0x244F70C84C547D2D,p0,p1,p2,p3)end;
	WaypointPlaybackOverrideSpeed=function(p0--[[@param p0 any]],p1--[[@param p1 number]],p2--[[@param p2 boolean]])return InvokeVoid(0x7D7D2B47FA788E85,p0,p1+.0,p2)end;
	WaypointPlaybackUseDefaultSpeed=function(p0--[[@param p0 any]])return InvokeVoid(0x6599D834B12D0800,p0)end;
	UseWaypointRecordingAsAssistedMovementRoute=function(name--[[@param name string]],p1--[[@param p1 boolean]],p2--[[@param p2 number]],p3--[[@param p3 number]])return InvokeVoid(0x5A353B8E6B1095B5,name,p1,p2+.0,p3+.0)end;
	WaypointPlaybackStartAimingAtPed=function(ped--[[@param ped integer]],target--[[@param target integer]],p2--[[@param p2 boolean]])return InvokeVoid(0x20E330937C399D29,ped,target,p2)end;
	WaypointPlaybackStartAimingAtCoord=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],p4--[[@param p4 boolean]])return InvokeVoid(0x8968400D900ED8B3,ped,x+.0,y+.0,z+.0,p4)end;
	WaypointPlaybackStartShootingAtPed=function(ped--[[@param ped integer]],ped2--[[@param ped2 integer]],p2--[[@param p2 boolean]],p3--[[@param p3 boolean]])return InvokeVoid(0xE70BA7B90F8390DC,ped,ped2,p2,p3)end;
	WaypointPlaybackStartShootingAtCoord=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],p4--[[@param p4 boolean]],firingPattern--[[@param firingPattern integer]])return InvokeVoid(0x057A25CFCC9DB671,ped,x+.0,y+.0,z+.0,p4,firingPattern)end;
	WaypointPlaybackStopAimingOrShooting=function(ped--[[@param ped integer]])return InvokeVoid(0x47EFA040EBB8E2EA,ped)end;
	--[=[Routes: "1_FIBStairs", "2_FIBStairs", "3_FIBStairs", "4_FIBStairs", "5_FIBStairs", "5_TowardsFire", "6a_FIBStairs", "7_FIBStairs", "8_FIBStairs", "Aprtmnt_1", "AssAfterLift", "ATM_1", "coroner2", "coroner_stairs", "f5_jimmy1", "fame1", "family5b", "family5c", "Family5d", "family5d", "FIB_Glass1", "FIB_Glass2", "FIB_Glass3", "finaBroute1A", "finalb1st", "finalB1sta", "finalbround", "finalbroute2", "Hairdresser1", "jan_foyet_ft_door", "Jo_3", "Lemar1", "Lemar2", "mansion_1", "Mansion_1", "pols_1", "pols_2", "pols_3", "pols_4", "pols_5", "pols_6", "pols_7", "pols_8", "Pro_S1", "Pro_S1a", "Pro_S2", "Towards_case", "trev_steps", "tunrs1", "tunrs2", "tunrs3", "Wave01457s"]=]
	AssistedMovementRequestRoute=function(route--[[@param route string]])return InvokeVoid(0x817268968605947A,route)end;
	AssistedMovementRemoveRoute=function(route--[[@param route string]])return InvokeVoid(0x3548536485DD792B,route)end;
	AssistedMovementIsRouteLoaded=function(route--[[@param route string]])return InvokeBool(0x60F9A4393A21F741,route)end;---@return boolean
	AssistedMovementSetRouteProperties=function(route--[[@param route string]],props--[[@param props integer]])return InvokeVoid(0xD5002D78B7162E1B,route,props)end;
	AssistedMovementOverrideLoadDistanceThisFrame=function(dist--[[@param dist number]])return InvokeVoid(0x13945951E16EF912,dist+.0)end;
	--[=[

p2 = Waypoint recording string (found in update\update.rpf\x64\levels\gta5\waypointrec.rpf
p3 = 786468
p4 = 0
p5 = 16
p6 = -1 (angle?)
p7/8/9 = usually v3.zero
p10 = bool (repeat?)
p11 = 1073741824

Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json]=]
	TaskVehicleFollowWaypointRecording=function(ped--[[@param ped integer]],vehicle--[[@param vehicle integer]],WPRecording--[[@param WPRecording string]],p3--[[@param p3 integer]],p4--[[@param p4 integer]],p5--[[@param p5 integer]],p6--[[@param p6 integer]],p7--[[@param p7 number]],p8--[[@param p8 boolean]],p9--[[@param p9 number]])return InvokeVoid(0x3123FAA6DB1CF7ED,ped,vehicle,WPRecording,p3,p4,p5,p6,p7+.0,p8,p9+.0)end;
	IsWaypointPlaybackGoingOnForVehicle=function(vehicle--[[@param vehicle integer]])return InvokeBool(0xF5134943EA29868C,vehicle)end;---@return boolean
	GetVehicleWaypointProgress=function(vehicle--[[@param vehicle integer]])return InvokeInt(0x9824CFF8FC66E159,vehicle)end;---@return integer
	GetVehicleWaypointTargetPoint=function(vehicle--[[@param vehicle integer]])return InvokeInt(0x416B62AC8B9E5BBD,vehicle)end;---@return integer
	VehicleWaypointPlaybackPause=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0x8A4E6AC373666BC5,vehicle)end;
	VehicleWaypointPlaybackResume=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0xDC04FCAA7839D492,vehicle)end;
	VehicleWaypointPlaybackUseDefaultSpeed=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0x5CEB25A7D2848963,vehicle)end;
	VehicleWaypointPlaybackOverrideSpeed=function(vehicle--[[@param vehicle integer]],speed--[[@param speed number]])return InvokeVoid(0x121F0593E0A431D7,vehicle,speed+.0)end;
	--[=[I cant believe I have to define this, this is one of the best natives.

It makes the ped ignore basically all shocking events around it. Occasionally the ped may comment or gesture, but other than that they just continue their daily activities. This includes shooting and wounding the ped. And - most importantly - they do not flee.

Since it is a task, every time the native is called the ped will stop for a moment. ]=]
	TaskSetBlockingOfNonTemporaryEvents=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x90D2156198831D69,ped,toggle)end;
	--[=[p2 always false

[30/03/2017] ins1de :

See FORCE_PED_MOTION_STATE]=]
	TaskForceMotionState=function(ped--[[@param ped integer]],state--[[@param state integer]],forceRestart--[[@param forceRestart boolean]])return InvokeVoid(0x4F056E1AFFEF17AB,ped,state,forceRestart)end;
	--[=[Example:
TASK::TASK_MOVE_NETWORK_BY_NAME(PLAYER::PLAYER_PED_ID(), "arm_wrestling_sweep_paired_a_rev3", 0.0f, true, "mini@arm_wrestling", 0);]=]
	TaskMoveNetworkByName=function(ped--[[@param ped integer]],task--[[@param task string]],multiplier--[[@param multiplier number]],allowOverrideCloneUpdate--[[@param allowOverrideCloneUpdate boolean]],animDict--[[@param animDict string]],flags--[[@param flags integer]])return InvokeVoid(0x2D537BA194896636,ped,task,multiplier+.0,allowOverrideCloneUpdate,animDict,flags)end;
	--[=[Example:
TASK::TASK_MOVE_NETWORK_ADVANCED_BY_NAME(PLAYER::PLAYER_PED_ID(), "minigame_tattoo_michael_parts", 324.13f, 181.29f, 102.6f, 0.0f, 0.0f, 22.32f, 2, 0, false, 0, 0);]=]
	TaskMoveNetworkAdvancedByName=function(ped--[[@param ped integer]],network--[[@param network string]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],rotX--[[@param rotX number]],rotY--[[@param rotY number]],rotZ--[[@param rotZ number]],rotOrder--[[@param rotOrder integer]],blendDuration--[[@param blendDuration number]],allowOverrideCloneUpdate--[[@param allowOverrideCloneUpdate boolean]],animDict--[[@param animDict string]],flags--[[@param flags integer]])return InvokeVoid(0xD5B35BEA41919ACB,ped,network,x+.0,y+.0,z+.0,rotX+.0,rotY+.0,rotZ+.0,rotOrder,blendDuration+.0,allowOverrideCloneUpdate,animDict,flags)end;
	--[=[Used only once in the scripts (am_mp_nightclub)]=]
	TaskMoveNetworkByNameWithInitParams=function(ped--[[@param ped integer]],network--[[@param network string]],initialParameters--[[@param initialParameters integer*]],blendDuration--[[@param blendDuration number]],allowOverrideCloneUpdate--[[@param allowOverrideCloneUpdate boolean]],animDict--[[@param animDict string]],flags--[[@param flags integer]])return InvokeVoid(0x3D45B0B355C5E0C9,ped,network,initialParameters,blendDuration+.0,allowOverrideCloneUpdate,animDict,flags)end;
	TaskMoveNetworkAdvancedByNameWithInitParams=function(ped--[[@param ped integer]],network--[[@param network string]],initialParameters--[[@param initialParameters integer*]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],rotX--[[@param rotX number]],rotY--[[@param rotY number]],rotZ--[[@param rotZ number]],rotOrder--[[@param rotOrder integer]],blendDuration--[[@param blendDuration number]],allowOverrideCloneUpdate--[[@param allowOverrideCloneUpdate boolean]],dictionary--[[@param dictionary string]],flags--[[@param flags integer]])return InvokeVoid(0x29682E2CCF21E9B5,ped,network,initialParameters,x+.0,y+.0,z+.0,rotX+.0,rotY+.0,rotZ+.0,rotOrder,blendDuration+.0,allowOverrideCloneUpdate,dictionary,flags)end;
	IsTaskMoveNetworkActive=function(ped--[[@param ped integer]])return InvokeBool(0x921CE12C489C4C41,ped)end;---@return boolean
	IsTaskMoveNetworkReadyForTransition=function(ped--[[@param ped integer]])return InvokeBool(0x30ED88D5E0C56A37,ped)end;---@return boolean
	RequestTaskMoveNetworkStateTransition=function(ped--[[@param ped integer]],name--[[@param name string]])return InvokeBool(0xD01015C7316AE176,ped,name)end;---@return boolean
	--[=[Used only once in the scripts (fm_mission_controller) like so:

TASK::SET_EXPECTED_CLONE_NEXT_TASK_MOVE_NETWORK_STATE(iLocal_3160, "Cutting");]=]
	SetExpectedCloneNextTaskMoveNetworkState=function(ped--[[@param ped integer]],state--[[@param state string]])return InvokeBool(0xAB13A5565480B6D9,ped,state)end;---@return boolean
	GetTaskMoveNetworkState=function(ped--[[@param ped integer]])return InvokeString(0x717E4D1F2048376D,ped)end;---@return string
	SetTaskMoveNetworkAnimSet=function(ped--[[@param ped integer]],clipSet--[[@param clipSet integer]],variableClipSet--[[@param variableClipSet integer]])return InvokeVoid(0x8423541E8B3A1589,ped,clipSet,variableClipSet)end;
	--[=[signalName - "Phase", "Wobble", "x_axis","y_axis","introphase","speed".
p2 - From what i can see it goes up to 1f (maybe).

Example: TASK::SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT(PLAYER::PLAYER_PED_ID(), "Phase", 0.5);]=]
	SetTaskMoveNetworkSignalFloat=function(ped--[[@param ped integer]],signalName--[[@param signalName string]],value--[[@param value number]])return InvokeVoid(0xD5BB4025AE449A4E,ped,signalName,value+.0)end;
	SetTaskMoveNetworkSignalLocalFloat=function(ped--[[@param ped integer]],signalName--[[@param signalName string]],value--[[@param value number]])return InvokeVoid(0x373EF409B82697A3,ped,signalName,value+.0)end;
	SetTaskMoveNetworkSignalFloatLerpRate=function(ped--[[@param ped integer]],signalName--[[@param signalName string]],value--[[@param value number]])return InvokeVoid(0x8634CEF2522D987B,ped,signalName,value+.0)end;
	SetTaskMoveNetworkSignalBool=function(ped--[[@param ped integer]],signalName--[[@param signalName string]],value--[[@param value boolean]])return InvokeVoid(0xB0A6CFD2C69C1088,ped,signalName,value)end;
	GetTaskMoveNetworkSignalFloat=function(ped--[[@param ped integer]],signalName--[[@param signalName string]])return InvokeFloat(0x44AB0B3AFECCE242,ped,signalName)end;---@return number
	GetTaskMoveNetworkSignalBool=function(ped--[[@param ped integer]],signalName--[[@param signalName string]])return InvokeBool(0xA7FFBA498E4AAF67,ped,signalName)end;---@return boolean
	GetTaskMoveNetworkEvent=function(ped--[[@param ped integer]],eventName--[[@param eventName string]])return InvokeBool(0xB4F47213DF45A64C,ped,eventName)end;---@return boolean
	--[=[Doesn't actually return anything.]=]
	SetTaskMoveNetworkEnableCollisionOnNetworkCloneWhenFixed=function(ped--[[@param ped integer]],enable--[[@param enable boolean]])return InvokeBool(0x0FFB3C758E8C07B9,ped,enable)end;---@return boolean
	IsMoveBlendRatioStill=function(ped--[[@param ped integer]])return InvokeBool(0x349CE7B56DAFD95C,ped)end;---@return boolean
	IsMoveBlendRatioWalking=function(ped--[[@param ped integer]])return InvokeBool(0xF133BBBE91E1691F,ped)end;---@return boolean
	IsMoveBlendRatioRunning=function(ped--[[@param ped integer]])return InvokeBool(0xD4D8636C0199A939,ped)end;---@return boolean
	IsMoveBlendRatioSprinting=function(ped--[[@param ped integer]])return InvokeBool(0x24A2AD74FA9814E2,ped)end;---@return boolean
	IsPedStill=function(ped--[[@param ped integer]])return InvokeBool(0xAC29253EEF8F0180,ped)end;---@return boolean
	IsPedWalking=function(ped--[[@param ped integer]])return InvokeBool(0xDE4C184B2B9B071A,ped)end;---@return boolean
	IsPedRunning=function(ped--[[@param ped integer]])return InvokeBool(0xC5286FFC176F28A2,ped)end;---@return boolean
	IsPedSprinting=function(ped--[[@param ped integer]])return InvokeBool(0x57E457CD2C0FC168,ped)end;---@return boolean
	--[=[What's strafing?]=]
	IsPedStrafing=function(ped--[[@param ped integer]])return InvokeBool(0xE45B7F222DE47E09,ped)end;---@return boolean
	--[=[ TASK::TASK_SYNCHRONIZED_SCENE(ped, scene, "creatures@rottweiler@in_vehicle@std_car", "get_in", 1000.0, -8.0, 4, 0, 0x447a0000, 0);

Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json]=]
	TaskSynchronizedScene=function(ped--[[@param ped integer]],scene--[[@param scene integer]],animDictionary--[[@param animDictionary string]],animationName--[[@param animationName string]],blendIn--[[@param blendIn number]],blendOut--[[@param blendOut number]],flags--[[@param flags integer]],ragdollBlockingFlags--[[@param ragdollBlockingFlags integer]],moverBlendDelta--[[@param moverBlendDelta number]],ikFlags--[[@param ikFlags integer]])return InvokeVoid(0xEEA929141F699854,ped,scene,animDictionary,animationName,blendIn+.0,blendOut+.0,flags,ragdollBlockingFlags,moverBlendDelta+.0,ikFlags)end;
	TaskAgitatedActionConfrontResponse=function(ped--[[@param ped integer]],ped2--[[@param ped2 integer]])return InvokeVoid(0x19D1B791CB3670FE,ped,ped2)end;
	--[=[This function is called on peds in vehicles.

anim: animation name
p2, p3, p4: "sweep_low", "sweep_med" or "sweep_high"
p5: no idea what it does but is usually -1]=]
	TaskSweepAimEntity=function(ped--[[@param ped integer]],animDict--[[@param animDict string]],lowAnimName--[[@param lowAnimName string]],medAnimName--[[@param medAnimName string]],hiAnimName--[[@param hiAnimName string]],runtime--[[@param runtime integer]],targetEntity--[[@param targetEntity integer]],turnRate--[[@param turnRate number]],blendInDuration--[[@param blendInDuration number]])return InvokeVoid(0x2047C02158D6405A,ped,animDict,lowAnimName,medAnimName,hiAnimName,runtime,targetEntity,turnRate+.0,blendInDuration+.0)end;
	UpdateTaskSweepAimEntity=function(ped--[[@param ped integer]],entity--[[@param entity integer]])return InvokeVoid(0xE4973DBDBE6E44B3,ped,entity)end;
	TaskSweepAimPosition=function(ped--[[@param ped integer]],animDict--[[@param animDict string]],lowAnimName--[[@param lowAnimName string]],medAnimName--[[@param medAnimName string]],hiAnimName--[[@param hiAnimName string]],runtime--[[@param runtime integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],turnRate--[[@param turnRate number]],blendInDuration--[[@param blendInDuration number]])return InvokeVoid(0x7AFE8FDC10BC07D2,ped,animDict,lowAnimName,medAnimName,hiAnimName,runtime,x+.0,y+.0,z+.0,turnRate+.0,blendInDuration+.0)end;
	UpdateTaskSweepAimPosition=function(ped--[[@param ped integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0xBB106883F5201FC4,ped,x+.0,y+.0,z+.0)end;
	--[=[Example from "me_amanda1.ysc.c4":
TASK::TASK_ARREST_PED(l_19F /* This is a Ped */ , PLAYER::PLAYER_PED_ID());

Example from "armenian1.ysc.c4":
if (!PED::IS_PED_INJURED(l_B18[0/*1*/])) {
    TASK::TASK_ARREST_PED(l_B18[0/*1*/], PLAYER::PLAYER_PED_ID());
}

I would love to have time to experiment to see if a player Ped can arrest another Ped. Might make for a good cop mod.


Looks like only the player can be arrested this way. Peds react and try to arrest you if you task them, but the player charater doesn't do anything if tasked to arrest another ped.]=]
	TaskArrestPed=function(ped--[[@param ped integer]],target--[[@param target integer]])return InvokeVoid(0xF3B9A78A178572B1,ped,target)end;
	IsPedRunningArrestTask=function(ped--[[@param ped integer]])return InvokeBool(0x3DC52677769B4AE0,ped)end;---@return boolean
	--[=[This function is hard-coded to always return 0.]=]
	IsPedBeingArrested=function(ped--[[@param ped integer]])return InvokeBool(0x90A09F3A45FED688,ped)end;---@return boolean
	UncuffPed=function(ped--[[@param ped integer]])return InvokeVoid(0x67406F2C8F87FC4F,ped)end;
	IsPedCuffed=function(ped--[[@param ped integer]])return InvokeBool(0x74E559B3BC910685,ped)end;---@return boolean
}
_G.Vehicle={
	--[=[p7 when set to true allows you to spawn vehicles under -100 z.
Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json]=]
	CreateVehicle=function(modelHash--[[@param modelHash integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],heading--[[@param heading number]],isNetwork--[[@param isNetwork boolean]],bScriptHostVeh--[[@param bScriptHostVeh boolean]],p7--[[@param p7 boolean]])return InvokeInt(0xAF35D0D2583051B0,modelHash,x+.0,y+.0,z+.0,heading+.0,isNetwork,bScriptHostVeh,p7)end;---@return integer
	--[=[Deletes a vehicle.
The vehicle must be a mission entity to delete, so call this before deleting: SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);

eg how to use:
SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);
DELETE_VEHICLE(&vehicle);

Deletes the specified vehicle, then sets the handle pointed to by the pointer to NULL.]=]
	DeleteVehicle=function(vehicle--[[@param vehicle integer*]])return InvokeVoid(0xEA386986E786A54F,vehicle)end;
	SetVehicleAllowHomingMissleLockon=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0x7D6F9A3EF26136A0,vehicle,toggle,p2)end;
	SetVehicleAllowHomingMissleLockonSynced=function(vehicle--[[@param vehicle integer]],canBeLockedOn--[[@param canBeLockedOn boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0x1DDA078D12879EEE,vehicle,canBeLockedOn,p2)end;
	--[=[Makes the vehicle accept no passengers.]=]
	SetVehicleAllowNoPassengersLockon=function(veh--[[@param veh integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x5D14D4154BFE7B2C,veh,toggle)end;
	--[=[Returns a value depending on the lock-on state of vehicle weapons.
0: not locked on
1: locking on
2: locked on]=]
	GetVehicleHomingLockonState=function(vehicle--[[@param vehicle integer]])return InvokeInt(0xE6B0E8CFC3633BF0,vehicle)end;---@return integer
	GetVehicleHomingLockedontoState=function(p0--[[@param p0 any]])return InvokeInt(0x6EAAEFC76ACC311F,p0)end;---@return integer
	SetVehicleHomingLockedontoState=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x407DC5E97DB1A4D3,p0,p1)end;
	IsVehicleModel=function(vehicle--[[@param vehicle integer]],model--[[@param model integer]])return InvokeBool(0x423E8DE37D934D89,vehicle,model)end;---@return boolean
	DoesScriptVehicleGeneratorExist=function(vehicleGenerator--[[@param vehicleGenerator integer]])return InvokeBool(0xF6086BC836400876,vehicleGenerator)end;---@return boolean
	--[=[Creates a script vehicle generator at the given coordinates. Most parameters after the model hash are unknown.

Parameters:
x/y/z - Generator position
heading - Generator heading
p4 - Unknown (always 5.0)
p5 - Unknown (always 3.0)
modelHash - Vehicle model hash
p7/8/9/10 - Unknown (always -1)
p11 - Unknown (usually TRUE, only one instance of FALSE)
p12/13 - Unknown (always FALSE)
p14 - Unknown (usally FALSE, only two instances of TRUE)
p15 - Unknown (always TRUE)
p16 - Unknown (always -1)

Vector3 coords = GET_ENTITY_COORDS(PLAYER_PED_ID(), 0);    CREATE_SCRIPT_VEHICLE_GENERATOR(coords.x, coords.y, coords.z, 1.0f, 5.0f, 3.0f, GET_HASH_KEY("adder"), -1. -1, -1, -1, -1, true, false, false, false, true, -1);]=]
	CreateScriptVehicleGenerator=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],heading--[[@param heading number]],p4--[[@param p4 number]],p5--[[@param p5 number]],modelHash--[[@param modelHash integer]],p7--[[@param p7 integer]],p8--[[@param p8 integer]],p9--[[@param p9 integer]],p10--[[@param p10 integer]],p11--[[@param p11 boolean]],p12--[[@param p12 boolean]],p13--[[@param p13 boolean]],p14--[[@param p14 boolean]],p15--[[@param p15 boolean]],p16--[[@param p16 integer]])return InvokeInt(0x9DEF883114668116,x+.0,y+.0,z+.0,heading+.0,p4+.0,p5+.0,modelHash,p7,p8,p9,p10,p11,p12,p13,p14,p15,p16)end;---@return integer
	DeleteScriptVehicleGenerator=function(vehicleGenerator--[[@param vehicleGenerator integer]])return InvokeVoid(0x22102C9ABFCF125D,vehicleGenerator)end;
	--[=[Only called once in the decompiled scripts. Presumably activates the specified generator.]=]
	SetScriptVehicleGenerator=function(vehicleGenerator--[[@param vehicleGenerator integer]],enabled--[[@param enabled boolean]])return InvokeVoid(0xD9D620E0AC6DC4B0,vehicleGenerator,enabled)end;
	--[=[When p6 is true, vehicle generators are active.
p7 seems to always be true in story mode scripts, but it's sometimes false in online scripts.]=]
	SetAllVehicleGeneratorsActiveInArea=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],toggle--[[@param toggle boolean]],p7--[[@param p7 boolean]])return InvokeVoid(0xC12321827687FE4D,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,toggle,p7)end;
	SetAllVehicleGeneratorsActive=function()return InvokeVoid(0x34AD89078831A4BC)end;
	SetAllLowPriorityVehicleGeneratorsActive=function(active--[[@param active boolean]])return InvokeVoid(0x608207E7A8FB787C,active)end;
	--[=[Related to car generators & CPlayerSwitchMgrLong]=]
	SetVehicleGeneratorAreaOfInterest=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]])return InvokeVoid(0x9A75585FB2E54FAD,x+.0,y+.0,z+.0,radius+.0)end;
	ClearVehicleGeneratorAreaOfInterest=function()return InvokeVoid(0x0A436B8643716D14)end;
	--[=[Sets a vehicle on the ground on all wheels.  Returns whether or not the operation was successful.

sfink: This has an additional param(Vehicle vehicle, float p1) which is always set to 5.0f in the b944 scripts.]=]
	SetVehicleOnGroundProperly=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 number]])return InvokeBool(0x49733E92263139D1,vehicle,p1+.0)end;---@return boolean
	SetVehicleUseCutsceneWheelCompression=function(p0--[[@param p0 integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],p3--[[@param p3 boolean]])return InvokeBool(0xE023E8AC4EF7C117,p0,p1,p2,p3)end;---@return boolean
	IsVehicleStuckOnRoof=function(vehicle--[[@param vehicle integer]])return InvokeBool(0xB497F06B288DCFDF,vehicle)end;---@return boolean
	AddVehicleUpsidedownCheck=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0xB72E26D81006005B,vehicle)end;
	RemoveVehicleUpsidedownCheck=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0xC53EB42A499A7E90,vehicle)end;
	--[=[Returns true if the vehicle's current speed is less than, or equal to 0.0025f.

For some vehicles it returns true if the current speed is <= 0.00039999999.]=]
	IsVehicleStopped=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x5721B434AD84D57A,vehicle)end;---@return boolean
	--[=[Gets the number of passengers.

This native was modified in b2545 to take two additional parameters, allowing you to include the driver or exclude dead passengers.

To keep it working like before b2545, set includeDriver to false and includeDeadOccupants to true.]=]
	GetVehicleNumberOfPassengers=function(vehicle--[[@param vehicle integer]],includeDriver--[[@param includeDriver boolean]],includeDeadOccupants--[[@param includeDeadOccupants boolean]])return InvokeInt(0x24CB2137731FFE89,vehicle,includeDriver,includeDeadOccupants)end;---@return integer
	GetVehicleMaxNumberOfPassengers=function(vehicle--[[@param vehicle integer]])return InvokeInt(0xA7C4F2C6E744A550,vehicle)end;---@return integer
	--[=[Returns max number of passengers (including the driver) for the specified vehicle model.

Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json]=]
	GetVehicleModelNumberOfSeats=function(modelHash--[[@param modelHash integer]])return InvokeInt(0x2AD93716F184EDA4,modelHash)end;---@return integer
	IsSeatWarpOnly=function(vehicle--[[@param vehicle integer]],seatIndex--[[@param seatIndex integer]])return InvokeBool(0xF7F203E31F96F6A1,vehicle,seatIndex)end;---@return boolean
	IsTurretSeat=function(vehicle--[[@param vehicle integer]],seatIndex--[[@param seatIndex integer]])return InvokeBool(0xE33FFA906CE74880,vehicle,seatIndex)end;---@return boolean
	--[=[Returns true if the vehicle has the FLAG_ALLOWS_RAPPEL flag set.]=]
	DoesVehicleAllowRappel=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x4E417C547182C84D,vehicle)end;---@return boolean
	--[=[Use this native inside a looped function.
Values:
- `0.0` = no vehicles on streets
- `1.0` = normal vehicles on streets]=]
	SetVehicleDensityMultiplierThisFrame=function(multiplier--[[@param multiplier number]])return InvokeVoid(0x245A6883D966D537,multiplier+.0)end;
	SetRandomVehicleDensityMultiplierThisFrame=function(multiplier--[[@param multiplier number]])return InvokeVoid(0xB3B3359379FE77D3,multiplier+.0)end;
	SetParkedVehicleDensityMultiplierThisFrame=function(multiplier--[[@param multiplier number]])return InvokeVoid(0xEAE6DCC7EEE3DB1D,multiplier+.0)end;
	SetDisableRandomTrainsThisFrame=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xD4B8E3D1917BC86B,toggle)end;
	SetAmbientVehicleRangeMultiplierThisFrame=function(value--[[@param value number]])return InvokeVoid(0x90B6DA738A9A25DA,value+.0)end;
	SetFarDrawVehicles=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x26324F33423F3CC3,toggle)end;
	SetNumberOfParkedVehicles=function(value--[[@param value integer]])return InvokeVoid(0xCAA15F13EBD417FF,value)end;
	--[=[enum eVehicleLockState
{
	VEHICLELOCK_NONE,
	VEHICLELOCK_UNLOCKED,
	VEHICLELOCK_LOCKED,
	VEHICLELOCK_LOCKOUT_PLAYER_ONLY,
	VEHICLELOCK_LOCKED_PLAYER_INSIDE,
	VEHICLELOCK_LOCKED_INITIALLY,
	VEHICLELOCK_FORCE_SHUT_DOORS,
	VEHICLELOCK_LOCKED_BUT_CAN_BE_DAMAGED,
	VEHICLELOCK_LOCKED_BUT_BOOT_UNLOCKED,
	VEHICLELOCK_LOCKED_NO_PASSENGERS,
	VEHICLELOCK_CANNOT_ENTER	
};]=]
	SetVehicleDoorsLocked=function(vehicle--[[@param vehicle integer]],doorLockStatus--[[@param doorLockStatus integer]])return InvokeVoid(0xB664292EAECF7FA6,vehicle,doorLockStatus)end;
	--[=[doorId: see SET_VEHICLE_DOOR_SHUT]=]
	SetVehicleIndividualDoorsLocked=function(vehicle--[[@param vehicle integer]],doorId--[[@param doorId integer]],doorLockStatus--[[@param doorLockStatus integer]])return InvokeVoid(0xBE70724027F85BCD,vehicle,doorId,doorLockStatus)end;
	--[=[If set to true, prevents vehicle sirens from having sound, leaving only the lights.]=]
	SetVehicleHasMutedSirens=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xD8050E0EB60CF274,vehicle,toggle)end;
	SetVehicleDoorsLockedForPlayer=function(vehicle--[[@param vehicle integer]],player--[[@param player integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x517AAF684BB50CD1,vehicle,player,toggle)end;
	GetVehicleDoorsLockedForPlayer=function(vehicle--[[@param vehicle integer]],player--[[@param player integer]])return InvokeBool(0xF6AF6CB341349015,vehicle,player)end;---@return boolean
	--[=[After some analysis, I've decided that these are what the parameters are.

We can see this being used in R* scripts such as "am_mp_property_int.ysc.c4":
l_11A1 = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 1);
...
VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(l_11A1, 1);]=]
	SetVehicleDoorsLockedForAllPlayers=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xA2F80B8D040727CC,vehicle,toggle)end;
	SetVehicleDoorsLockedForNonScriptPlayers=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x9737A37136F07E75,vehicle,toggle)end;
	SetVehicleDoorsLockedForTeam=function(vehicle--[[@param vehicle integer]],team--[[@param team integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xB81F6D4A8F5EEBA8,vehicle,team,toggle)end;
	SetVehicleDoorsLockedForAllTeams=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x203B527D1B77904C,vehicle,toggle)end;
	SetVehicleDontTerminateTaskWhenAchieved=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0x76D26A22750E849E,vehicle)end;
	--[=[Explodes a selected vehicle.

Vehicle vehicle = Vehicle you want to explode.
BOOL isAudible = If explosion makes a sound.
BOOL isInvisible = If the explosion is invisible or not.

First BOOL does not give any visual explosion, the vehicle just falls apart completely but slowly and starts to burn.]=]
	ExplodeVehicle=function(vehicle--[[@param vehicle integer]],isAudible--[[@param isAudible boolean]],isInvisible--[[@param isInvisible boolean]])return InvokeVoid(0xBA71116ADF5B514C,vehicle,isAudible,isInvisible)end;
	--[=[Tested on the player's current vehicle. Unless you kill the driver, the vehicle doesn't loose control, however, if enabled, explodeOnImpact is still active. The moment you crash, boom.]=]
	SetVehicleOutOfControl=function(vehicle--[[@param vehicle integer]],killDriver--[[@param killDriver boolean]],explodeOnImpact--[[@param explodeOnImpact boolean]])return InvokeVoid(0xF19D095E42D430CC,vehicle,killDriver,explodeOnImpact)end;
	SetVehicleTimedExplosion=function(vehicle--[[@param vehicle integer]],ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x2E0A74E1002380B1,vehicle,ped,toggle)end;
	AddVehiclePhoneExplosiveDevice=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0x99AD4CCCB128CBC9,vehicle)end;
	ClearVehiclePhoneExplosiveDevice=function()return InvokeVoid(0xAA3F739ABDDCF21F)end;
	HasVehiclePhoneExplosiveDevice=function()return InvokeBool(0x6ADAABD3068C5235)end;---@return boolean
	DetonateVehiclePhoneExplosiveDevice=function()return InvokeVoid(0xEF49CF0270307CBE)end;
	HaveVehicleRearDoorsBeenBlownOpenByStickybomb=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x6B407F2525E93644,vehicle)end;---@return boolean
	--[=[This is not tested - it's just an assumption.
- Nac

Doesn't seem to work.  I'll try with an int instead. --JT

Read the scripts, im dumpass. 

                            if (!VEHICLE::IS_TAXI_LIGHT_ON(l_115)) {
                                VEHICLE::SET_TAXI_LIGHTS(l_115, 1);
                            }]=]
	SetTaxiLights=function(vehicle--[[@param vehicle integer]],state--[[@param state boolean]])return InvokeVoid(0x598803E85E8448D9,vehicle,state)end;
	IsTaxiLightOn=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x7504C0F113AB50FC,vehicle)end;---@return boolean
	--[=[garageName example "Michael - Beverly Hills"

Full list of garages by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/garages.json]=]
	IsVehicleInGarageArea=function(garageName--[[@param garageName string]],vehicle--[[@param vehicle integer]])return InvokeBool(0xCEE4490CD57BB3C2,garageName,vehicle)end;---@return boolean
	--[=[colorPrimary & colorSecondary are the paint index for the vehicle.
For a list of valid paint indexes, view: https://pastebin.com/pwHci0xK
-------------------------------------------------------------------------
Note: minimum color index is 0, maximum color index is (numColorIndices - 1)

Full list of vehicle colors by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json]=]
	SetVehicleColours=function(vehicle--[[@param vehicle integer]],colorPrimary--[[@param colorPrimary integer]],colorSecondary--[[@param colorSecondary integer]])return InvokeVoid(0x4F1D4BE3A7F24601,vehicle,colorPrimary,colorSecondary)end;
	--[=[It switch to highbeam when p1 is set to true.]=]
	SetVehicleFullbeam=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x8B7FD87F0DDB421E,vehicle,toggle)end;
	--[=[p1 (toggle) was always 1 (true) except in one case in the b678 scripts.]=]
	SetVehicleIsRacing=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x07116E24E9D1929D,vehicle,toggle)end;
	--[=[p1, p2, p3 are RGB values for color (255,0,0 for Red, ect)]=]
	SetVehicleCustomPrimaryColour=function(vehicle--[[@param vehicle integer]],r--[[@param r integer]],g--[[@param g integer]],b--[[@param b integer]])return InvokeVoid(0x7141766F91D15BEA,vehicle,r,g,b)end;
	GetVehicleCustomPrimaryColour=function(vehicle--[[@param vehicle integer]],r--[[@param r integer*]],g--[[@param g integer*]],b--[[@param b integer*]])return InvokeVoid(0xB64CF2CCA9D95F52,vehicle,r,g,b)end;
	ClearVehicleCustomPrimaryColour=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0x55E1D2758F34E437,vehicle)end;
	GetIsVehiclePrimaryColourCustom=function(vehicle--[[@param vehicle integer]])return InvokeBool(0xF095C0405307B21B,vehicle)end;---@return boolean
	--[=[p1, p2, p3 are RGB values for color (255,0,0 for Red, ect)]=]
	SetVehicleCustomSecondaryColour=function(vehicle--[[@param vehicle integer]],r--[[@param r integer]],g--[[@param g integer]],b--[[@param b integer]])return InvokeVoid(0x36CED73BFED89754,vehicle,r,g,b)end;
	GetVehicleCustomSecondaryColour=function(vehicle--[[@param vehicle integer]],r--[[@param r integer*]],g--[[@param g integer*]],b--[[@param b integer*]])return InvokeVoid(0x8389CD56CA8072DC,vehicle,r,g,b)end;
	ClearVehicleCustomSecondaryColour=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0x5FFBDEEC3E8E2009,vehicle)end;
	--[=[Check if Vehicle Secondary is avaliable for customize]=]
	GetIsVehicleSecondaryColourCustom=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x910A32E7AAD2656C,vehicle)end;---@return boolean
	--[=[The parameter fade is a value from 0-1, where 0 is fresh paint.]=]
	SetVehicleEnveffScale=function(vehicle--[[@param vehicle integer]],fade--[[@param fade number]])return InvokeVoid(0x3AFDC536C3D01674,vehicle,fade+.0)end;
	--[=[The result is a value from 0-1, where 0 is fresh paint.]=]
	GetVehicleEnveffScale=function(vehicle--[[@param vehicle integer]])return InvokeFloat(0xA82819CAC9C4C403,vehicle)end;---@return number
	--[=[Hardcoded to not work in multiplayer.]=]
	SetCanResprayVehicle=function(vehicle--[[@param vehicle integer]],state--[[@param state boolean]])return InvokeVoid(0x52BBA29D5EC69356,vehicle,state)end;
	--[=[Used for GTAO CEO/Associate spawned vehicles.]=]
	SetGoonBossVehicle=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xAB31EF4DE6800CE9,vehicle,toggle)end;
	SetOpenRearDoorsOnExplosion=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x1B212B26DD3C04DF,vehicle,toggle)end;
	ForceSubmarineSurfaceMode=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x33506883545AC0DF,vehicle,toggle)end;
	ForceSubmarineNeurtalBuoyancy=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0xC67DB108A9ADE3BE,p0,p1)end;
	SetSubmarineCrushDepths=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 boolean]],depth1--[[@param depth1 number]],depth2--[[@param depth2 number]],depth3--[[@param depth3 number]])return InvokeVoid(0xC59872A5134879C7,vehicle,p1,depth1+.0,depth2+.0,depth3+.0)end;
	GetSubmarineIsUnderDesignDepth=function(submarine--[[@param submarine integer]])return InvokeBool(0x3E71D0B300B7AA79,submarine)end;---@return boolean
	GetSubmarineNumberOfAirLeaks=function(submarine--[[@param submarine integer]])return InvokeInt(0x093D6DDCA5B8FBAE,submarine)end;---@return integer
	SetBoatIgnoreLandProbes=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0xED5EDE9E676643C9,p0,p1)end;
	--[=[Use the vehicle bounds (instead of viewport) when deciding if a vehicle is sufficiently above the water (waterheight.dat), bypassing wave simulation checks]=]
	SetBoundsAffectWaterProbes=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x85FC953F6C6CBDE1,vehicle,toggle)end;
	SetBoatAnchor=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x75DBEC174AEEAD10,vehicle,toggle)end;
	CanAnchorBoatHere=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x26C10ECBDA5D043B,vehicle)end;---@return boolean
	CanAnchorBoatHereIgnorePlayers=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x24F4121D07579880,vehicle)end;---@return boolean
	SetBoatRemainsAnchoredWhilePlayerIsDriver=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xE3EBAAE484798530,vehicle,toggle)end;
	--[=[No observed effect.]=]
	SetForceLowLodAnchorMode=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 boolean]])return InvokeVoid(0xB28B1FE5BFADD7F5,vehicle,p1)end;
	SetBoatLowLodAnchorDistance=function(vehicle--[[@param vehicle integer]],value--[[@param value number]])return InvokeVoid(0xE842A9398079BD82,vehicle,value+.0)end;
	IsBoatAnchored=function(vehicle--[[@param vehicle integer]])return InvokeBool(0xB0AD1238A709B1A2,vehicle)end;---@return boolean
	SetBoatSinksWhenWrecked=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x8F719973E1445BA2,vehicle,toggle)end;
	SetBoatWrecked=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0xBD32E46AA95C1DD2,vehicle)end;
	--[=[Activate siren on vehicle (Only works if the vehicle has a siren).]=]
	SetVehicleSiren=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xF4924635A19EB37D,vehicle,toggle)end;
	IsVehicleSirenOn=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x4C9BF537BE2634B2,vehicle)end;---@return boolean
	IsVehicleSirenAudioOn=function(vehicle--[[@param vehicle integer]])return InvokeBool(0xB5CC40FBCB586380,vehicle)end;---@return boolean
	--[=[If set to true, vehicle will not take crash damage, but is still susceptible to damage from bullets and explosives]=]
	SetVehicleStrong=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x3E8C8727991A8A0B,vehicle,toggle)end;
	RemoveVehicleStuckCheck=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0x8386BFB614D06749,vehicle)end;
	GetVehicleColours=function(vehicle--[[@param vehicle integer]],colorPrimary--[[@param colorPrimary integer*]],colorSecondary--[[@param colorSecondary integer*]])return InvokeVoid(0xA19435F193E081AC,vehicle,colorPrimary,colorSecondary)end;
	--[=[Check if a vehicle seat is free.

seatIndex  = -1 being the driver seat.
Use GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle) - 1 for last seat index.
isTaskRunning = on true the function returns already false while a task on the target seat is running (TASK_ENTER_VEHICLE/TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT) - on false only when a ped is finally sitting in the seat.]=]
	IsVehicleSeatFree=function(vehicle--[[@param vehicle integer]],seatIndex--[[@param seatIndex integer]],isTaskRunning--[[@param isTaskRunning boolean]])return InvokeBool(0x22AC59A870E6A669,vehicle,seatIndex,isTaskRunning)end;---@return boolean
	--[=[If there is no ped in the seat, and the game considers the vehicle as ambient population, this will create a random occupant ped in the seat, which may be cleaned up by the game fairly soon if not marked as script-owned mission entity.

Seat indexes:
-1 = Driver
0 = Front Right Passenger
1 = Back Left Passenger
2 = Back Right Passenger
3 = Further Back Left Passenger (vehicles > 4 seats)
4 = Further Back Right Passenger (vehicles > 4 seats)
etc.

If p2 is true it uses a different GetOccupant function.]=]
	GetPedInVehicleSeat=function(vehicle--[[@param vehicle integer]],seatIndex--[[@param seatIndex integer]],p2--[[@param p2 boolean]])return InvokeInt(0xBB40DD2270B65366,vehicle,seatIndex,p2)end;---@return integer
	GetLastPedInVehicleSeat=function(vehicle--[[@param vehicle integer]],seatIndex--[[@param seatIndex integer]])return InvokeInt(0x83F969AA1EE2A664,vehicle,seatIndex)end;---@return integer
	GetVehicleLightsState=function(vehicle--[[@param vehicle integer]],lightsOn--[[@param lightsOn boolean*]],highbeamsOn--[[@param highbeamsOn boolean*]])return InvokeBool(0xB91B4C20085BD12F,vehicle,lightsOn,highbeamsOn)end;---@return boolean
	--[=[wheelID used for 4 wheelers seem to be (0, 1, 4, 5)
completely - is to check if tire completely gone from rim.

'0 = wheel_lf / bike, plane or jet front
'1 = wheel_rf
'2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left
'3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right
'4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left
'5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right
'45 = 6 wheels trailer mid wheel left
'47 = 6 wheels trailer mid wheel right]=]
	IsVehicleTyreBurst=function(vehicle--[[@param vehicle integer]],wheelID--[[@param wheelID integer]],completely--[[@param completely boolean]])return InvokeBool(0xBA291848A0815CA9,vehicle,wheelID,completely)end;---@return boolean
	--[=[SCALE: Setting the speed to 30 would result in a speed of roughly 60mph, according to speedometer.

Speed is in meters per second
You can convert meters/s to mph here:
http://www.calculateme.com/Speed/MetersperSecond/ToMilesperHour.htm]=]
	SetVehicleForwardSpeed=function(vehicle--[[@param vehicle integer]],speed--[[@param speed number]])return InvokeVoid(0xAB54A438726D25D5,vehicle,speed+.0)end;
	--[=[Seems to be identical to SET_VEHICLE_FORWARD_SPEED]=]
	SetVehicleForwardSpeedXy=function(vehicle--[[@param vehicle integer]],speed--[[@param speed number]])return InvokeVoid(0x6501129C9E0FFA05,vehicle,speed+.0)end;
	--[=[This native makes the vehicle stop immediately, as happens when we enter a MP garage.

. distance defines how far it will travel until stopping. Garage doors use 3.0.

. If killEngine is set to 1, you cannot resume driving the vehicle once it stops. This looks like is a bitmapped integer.]=]
	BringVehicleToHalt=function(vehicle--[[@param vehicle integer]],distance--[[@param distance number]],duration--[[@param duration integer]],p3--[[@param p3 boolean]])return InvokeVoid(0x260BE8F09E326A20,vehicle,distance+.0,duration,p3)end;
	SetVehicleSteerForBuildings=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 any]])return InvokeVoid(0xDCE97BDF8A0EABC8,vehicle,p1)end;
	SetVehicleCausesSwerving=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x9849DE24FCF23CCC,vehicle,toggle)end;
	SetIgnorePlanesSmallPitchChange=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x8664170EF165C4A6,p0,p1)end;
	--[=[Stops CTaskBringVehicleToHalt]=]
	StopBringingVehicleToHalt=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0x7C06330BFDDA182E,vehicle)end;
	--[=[Returns true if vehicle is halted by BRING_VEHICLE_TO_HALT]=]
	IsVehicleBeingBroughtToHalt=function(vehicle--[[@param vehicle integer]])return InvokeBool(0xC69BB1D832A710EF,vehicle)end;---@return boolean
	LowerForkliftForks=function(forklift--[[@param forklift integer]])return InvokeVoid(0x923A293361DF44E5,forklift)end;
	--[=[0.0 = Lowest 1.0 = Highest. This is best to be used if you wanna pick-up a car since un-realistically on GTA V forklifts can't pick up much of anything due to vehicle mass. If you put this under a car then set it above 0.0 to a 'lifted-value' it will raise the car with no issue lol]=]
	SetForkliftForkHeight=function(vehicle--[[@param vehicle integer]],height--[[@param height number]])return InvokeVoid(0x37EBBF3117BD6A25,vehicle,height+.0)end;
	IsEntityAttachedToHandlerFrame=function(vehicle--[[@param vehicle integer]],entity--[[@param entity integer]])return InvokeBool(0x57715966069157AD,vehicle,entity)end;---@return boolean
	IsAnyEntityAttachedToHandlerFrame=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x62CA17B74C435651,vehicle)end;---@return boolean
	--[=[Finds the vehicle that is carrying this entity with a handler frame.
The model of the entity must be prop_contr_03b_ld or the function will return 0.]=]
	FindHandlerVehicleContainerIsAttachedTo=function(entity--[[@param entity integer]])return InvokeInt(0x375E7FC44F21C8AB,entity)end;---@return integer
	IsHandlerFrameLinedUpWithContainer=function(vehicle--[[@param vehicle integer]],entity--[[@param entity integer]])return InvokeBool(0x89D630CF5EA96D23,vehicle,entity)end;---@return boolean
	AttachContainerToHandlerFrameWhenLinedUp=function(vehicle--[[@param vehicle integer]],entity--[[@param entity integer]])return InvokeVoid(0x6A98C2ECF57FA5D4,vehicle,entity)end;
	DetachContainerFromHandlerFrame=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0x7C0043FDFF6436BC,vehicle)end;
	SetVehicleDisableHeightMapAvoidance=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 boolean]])return InvokeVoid(0x8AA9180DE2FEDD45,vehicle,p1)end;
	SetBoatDisableAvoidance=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 boolean]])return InvokeVoid(0x0A6A279F3AA4FD70,vehicle,p1)end;
	IsHeliLandingAreaBlocked=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x634148744F385576,vehicle)end;---@return boolean
	--[=[Used on helicopters and blimps during the CTaskVehicleLand task. Sets a value on the task to 10f]=]
	SetShortSlowdownForLanding=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0x107A473D7A6647A9,vehicle)end;
	SetHeliTurbulenceScalar=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 number]])return InvokeVoid(0xE6F13851780394DA,vehicle,p1+.0)end;
	--[=[Initially used in Max Payne 3, that's why we know the name.]=]
	SetCarBootOpen=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0xFC40CBF7B90CA77C,vehicle)end;
	--[=["To burst tyres VEHICLE::SET_VEHICLE_TYRE_BURST(vehicle, 0, true, 1000.0)
to burst all tyres type it 8 times where p1 = 0 to 7.

p3 seems to be how much damage it has taken. 0 doesn't deflate them, 1000 completely deflates them.

'0 = wheel_lf / bike, plane or jet front
'1 = wheel_rf
'2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left
'3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right
'4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left
'5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right
'45 = 6 wheels trailer mid wheel left
'47 = 6 wheels trailer mid wheel right]=]
	SetVehicleTyreBurst=function(vehicle--[[@param vehicle integer]],index--[[@param index integer]],onRim--[[@param onRim boolean]],p3--[[@param p3 number]])return InvokeVoid(0xEC6A202EE4960385,vehicle,index,onRim,p3+.0)end;
	--[=[Closes all doors of a vehicle:]=]
	SetVehicleDoorsShut=function(vehicle--[[@param vehicle integer]],closeInstantly--[[@param closeInstantly boolean]])return InvokeVoid(0x781B3D62BB013EF5,vehicle,closeInstantly)end;
	--[=[Allows you to toggle bulletproof tires.]=]
	SetVehicleTyresCanBurst=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xEB9DC3C7D8596C46,vehicle,toggle)end;
	GetVehicleTyresCanBurst=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x678B9BB8C3F58FEB,vehicle)end;---@return boolean
	SetVehicleWheelsCanBreak=function(vehicle--[[@param vehicle integer]],enabled--[[@param enabled boolean]])return InvokeVoid(0x29B18B4FD460CA8F,vehicle,enabled)end;
	--[=[doorId: see SET_VEHICLE_DOOR_SHUT]=]
	SetVehicleDoorOpen=function(vehicle--[[@param vehicle integer]],doorId--[[@param doorId integer]],loose--[[@param loose boolean]],openInstantly--[[@param openInstantly boolean]])return InvokeVoid(0x7C65DAC73C35C862,vehicle,doorId,loose,openInstantly)end;
	--[=[doorId: see SET_VEHICLE_DOOR_SHUT

Usually used alongside other vehicle door natives.]=]
	SetVehicleDoorAutoLock=function(vehicle--[[@param vehicle integer]],doorId--[[@param doorId integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x3B458DDB57038F08,vehicle,doorId,toggle)end;
	SetFleeingVehiclesUseSwitchedOffNodes=function(p0--[[@param p0 any]])return InvokeVoid(0xA247F9EF01D8082E,p0)end;
	--[=[windowIndex:
0 = Front Right Window
1 = Front Left Window
2 = Back Right Window
3 = Back Left Window
4 = Unknown
5 = Unknown
6 = Windscreen
7 = Rear Windscreen]=]
	RemoveVehicleWindow=function(vehicle--[[@param vehicle integer]],windowIndex--[[@param windowIndex integer]])return InvokeVoid(0xA711568EEDB43069,vehicle,windowIndex)end;
	--[=[Roll down all the windows of the vehicle passed through the first parameter.]=]
	RollDownWindows=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0x85796B0549DDE156,vehicle)end;
	--[=[windowIndex:
0 = Front Left Window
1 = Front Right Window
2 = Rear Left Window
3 = Rear Right Window
4 = Front Windscreen
5 = Rear Windscreen
6 = Mid Left
7 = Mid Right
8 = Invalid]=]
	RollDownWindow=function(vehicle--[[@param vehicle integer]],windowIndex--[[@param windowIndex integer]])return InvokeVoid(0x7AD9E6CE657D69E3,vehicle,windowIndex)end;
	--[=[windowIndex:
0 = Front Left Window
1 = Front Right Window
2 = Rear Left Window
3 = Rear Right Window
4 = Front Windscreen
5 = Rear Windscreen
6 = Mid Left
7 = Mid Right
8 = Invalid]=]
	RollUpWindow=function(vehicle--[[@param vehicle integer]],windowIndex--[[@param windowIndex integer]])return InvokeVoid(0x602E548F46E24D59,vehicle,windowIndex)end;
	--[=[windowIndex:
0 = Front Left Window
1 = Front Right Window
2 = Rear Left Window
3 = Rear Right Window
4 = Front Windscreen
5 = Rear Windscreen
6 = Mid Left
7 = Mid Right
8 = Invalid]=]
	SmashVehicleWindow=function(vehicle--[[@param vehicle integer]],windowIndex--[[@param windowIndex integer]])return InvokeVoid(0x9E5B5E4D2CCD2259,vehicle,windowIndex)end;
	--[=[windowIndex:
0 = Front Left Window
1 = Front Right Window
2 = Rear Left Window
3 = Rear Right Window
4 = Front Windscreen
5 = Rear Windscreen
6 = Mid Left
7 = Mid Right
8 = Invalid

Additional information: FIX_VEHICLE_WINDOW (0x140D0BB88) references an array of bone vehicle indices (0x141D4B3E0) { 2Ah, 2Bh, 2Ch, 2Dh, 2Eh, 2Fh, 28h, 29h } that correspond to: window_lf, window_rf, window_lr, window_rr, window_lm, window_rm, windscreen, windscreen_r. This array is used by most vehwindow natives.

Also, this function is coded to not work on vehicles of type: CBike, Bmx, CBoat, CTrain, and CSubmarine.]=]
	FixVehicleWindow=function(vehicle--[[@param vehicle integer]],windowIndex--[[@param windowIndex integer]])return InvokeVoid(0x772282EBEB95E682,vehicle,windowIndex)end;
	--[=[Detaches the vehicle's windscreen.
For further information, see : gtaforums.com/topic/859570-glass/#entry1068894566]=]
	PopOutVehicleWindscreen=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0x6D645D59FB5F5AD3,vehicle)end;
	--[=[Pops off the "roof" bone in the direction of the specified offset from the vehicle.]=]
	PopOffVehicleRoofWithImpulse=function(vehicle--[[@param vehicle integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0xE38CB9D7D39FDBCC,vehicle,x+.0,y+.0,z+.0)end;
	--[=[set's if the vehicle has lights or not.
not an on off toggle.
p1 = 0 ;vehicle normal lights, off then lowbeams, then highbeams
p1 = 1 ;vehicle doesn't have lights, always off
p1 = 2 ;vehicle has always on lights
p1 = 3 ;or even larger like 4,5,... normal lights like =1
note1: when using =2 on day it's lowbeam,highbeam
but at night it's lowbeam,lowbeam,highbeam
note2: when using =0 it's affected by day or night for highbeams don't exist in daytime.]=]
	SetVehicleLights=function(vehicle--[[@param vehicle integer]],state--[[@param state integer]])return InvokeVoid(0x34E710FF01247C5A,vehicle,state)end;
	SetVehicleUsePlayerLightSettings=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xC45C27EF50F36ADC,vehicle,toggle)end;
	--[=[p1 can be either 0, 1 or 2.

Determines how vehicle lights behave when toggled.

0 = Default (Lights can be toggled between off, normal and high beams)
1 = Lights Disabled (Lights are fully disabled, cannot be toggled)
2 = Always On (Lights can be toggled between normal and high beams)]=]
	SetVehicleHeadlightShadows=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 integer]])return InvokeVoid(0x1FD09E7390A74D54,vehicle,p1)end;
	SetVehicleAlarm=function(vehicle--[[@param vehicle integer]],state--[[@param state boolean]])return InvokeVoid(0xCDE5E70C1DDB954C,vehicle,state)end;
	StartVehicleAlarm=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0xB8FF7AB45305C345,vehicle)end;
	IsVehicleAlarmActivated=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x4319E335B71FFF34,vehicle)end;---@return boolean
	SetVehicleInteriorlight=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xBC2042F090AF6AD3,vehicle,toggle)end;
	--[=[Sets some bit of vehicle]=]
	SetVehicleForceInteriorlight=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x8821196D91FA2DE5,vehicle,toggle)end;
	--[=[multiplier = brightness of head lights.
this value isn't capped afaik.

multiplier = 0.0 no lights
multiplier = 1.0 default game value
]=]
	SetVehicleLightMultiplier=function(vehicle--[[@param vehicle integer]],multiplier--[[@param multiplier number]])return InvokeVoid(0xB385454F8791F57C,vehicle,multiplier+.0)end;
	AttachVehicleToTrailer=function(vehicle--[[@param vehicle integer]],trailer--[[@param trailer integer]],radius--[[@param radius number]])return InvokeVoid(0x3C7D42D58F770B54,vehicle,trailer,radius+.0)end;
	--[=[This is the proper way of attaching vehicles to the car carrier, it's what Rockstar uses. Video Demo: https://www.youtube.com/watch?v=2lVEIzf7bgo]=]
	AttachVehicleOnToTrailer=function(vehicle--[[@param vehicle integer]],trailer--[[@param trailer integer]],offsetX--[[@param offsetX number]],offsetY--[[@param offsetY number]],offsetZ--[[@param offsetZ number]],coordsX--[[@param coordsX number]],coordsY--[[@param coordsY number]],coordsZ--[[@param coordsZ number]],rotationX--[[@param rotationX number]],rotationY--[[@param rotationY number]],rotationZ--[[@param rotationZ number]],disableCollisions--[[@param disableCollisions number]])return InvokeVoid(0x16B5E274BDE402F8,vehicle,trailer,offsetX+.0,offsetY+.0,offsetZ+.0,coordsX+.0,coordsY+.0,coordsZ+.0,rotationX+.0,rotationY+.0,rotationZ+.0,disableCollisions+.0)end;
	StabiliseEntityAttachedToHeli=function(vehicle--[[@param vehicle integer]],entity--[[@param entity integer]],p2--[[@param p2 number]])return InvokeVoid(0x374706271354CB18,vehicle,entity,p2+.0)end;
	DetachVehicleFromTrailer=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0x90532EDF0D2BDD86,vehicle)end;
	IsVehicleAttachedToTrailer=function(vehicle--[[@param vehicle integer]])return InvokeBool(0xE7CF3C4F9F489F0C,vehicle)end;---@return boolean
	SetTrailerInverseMassScale=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 number]])return InvokeVoid(0x2A8F319B392E7B3F,vehicle,p1+.0)end;
	--[=[in the decompiled scripts, seems to be always called on the vehicle right after being attached to a trailer.]=]
	SetTrailerLegsRaised=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0x95CF53B3D687F9FA,vehicle)end;
	SetTrailerLegsLowered=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0x878C75C09FBDB942,vehicle)end;
	--[=[tyreIndex = 0 to 4 on normal vehicles

'0 = wheel_lf / bike, plane or jet front
'1 = wheel_rf
'2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left
'3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right
'4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left
'5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right
'45 = 6 wheels trailer mid wheel left
'47 = 6 wheels trailer mid wheel right]=]
	SetVehicleTyreFixed=function(vehicle--[[@param vehicle integer]],tyreIndex--[[@param tyreIndex integer]])return InvokeVoid(0x6E13FC662B882D1D,vehicle,tyreIndex)end;
	--[=[Sets a vehicle's license plate text.  8 chars maximum.

Example:
Ped playerPed = PLAYER::PLAYER_PED_ID();
Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);
char *plateText = "KING";
VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(veh, plateText);]=]
	SetVehicleNumberPlateText=function(vehicle--[[@param vehicle integer]],plateText--[[@param plateText string]])return InvokeVoid(0x95A88F0B409CDA47,vehicle,plateText)end;
	--[=[Returns the license plate text from a vehicle. 8 chars maximum.]=]
	GetVehicleNumberPlateText=function(vehicle--[[@param vehicle integer]])return InvokeString(0x7CE1CCB9B293020E,vehicle)end;---@return string
	--[=[Returns the number of *types* of licence plates, enumerated below in SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX.]=]
	GetNumberOfVehicleNumberPlates=function()return InvokeInt(0x4C4D6B2644F458CB)end;---@return integer
	--[=[Plates:
Blue/White - 0
Yellow/black - 1
Yellow/Blue - 2
Blue/White2 - 3
Blue/White3 - 4
Yankton - 5]=]
	SetVehicleNumberPlateTextIndex=function(vehicle--[[@param vehicle integer]],plateIndex--[[@param plateIndex integer]])return InvokeVoid(0x9088EB5A43FFB0A1,vehicle,plateIndex)end;
	--[=[Returns the PlateType of a vehicle
      Blue_on_White_1 = 3,
      Blue_on_White_2 = 0,
      Blue_on_White_3 = 4,
      Yellow_on_Blue = 2,
       Yellow_on_Black = 1,
      North_Yankton = 5,]=]
	GetVehicleNumberPlateTextIndex=function(vehicle--[[@param vehicle integer]])return InvokeInt(0xF11BC2DD9A3E7195,vehicle)end;---@return integer
	SetRandomTrains=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x80D9F74197EA47D9,toggle)end;
	--[=[Train models HAVE TO be loaded (requested) before you use this.
For variation 15 - request:

freight
freightcar
freightgrain
freightcont1
freightcont2
freighttrailer

]=]
	CreateMissionTrain=function(variation--[[@param variation integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],direction--[[@param direction boolean]],p5--[[@param p5 any]],p6--[[@param p6 any]])return InvokeInt(0x63C6CCA8E68AE8C8,variation,x+.0,y+.0,z+.0,direction,p5,p6)end;---@return integer
	--[=[Toggles whether ambient trains can spawn on the specified track or not

`trackId` is the internal id of the train track to switch.
`state` is whether ambient trains can spawn or not

trackIds
0 (`trains1.dat`) Main track around SA
1 (`trains2.dat`) Davis Quartz Quarry branch
2 (`trains3.dat`) Second track alongside live track along Roy Lewenstein Blv.
3 (`trains4.dat`) Metro track circuit
4 (`trains5.dat`) Branch in Mirror Park Railyard
5 (`trains6.dat`) Branch in Mirror Park Railyard
6 (`trains7.dat`) LS branch to Mirror Park Railyard
7 (`trains8.dat`) Overground part of metro track along Forum Dr.
8 (`trains9.dat`) Branch to Mirror Park Railyard
9 (`trains10.dat`) Yankton train
10 (`trains11.dat`) Part of metro track near mission row
11 (`trains12.dat`) Yankton prologue mission train
Full list of all train tracks + track nodes by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/traintracks.json]=]
	SwitchTrainTrack=function(trackId--[[@param trackId integer]],state--[[@param state boolean]])return InvokeVoid(0xFD813BB7DB977F20,trackId,state)end;
	--[=[Only called once inside main_persitant with the parameters p0 = 0, p1 = 120000

trackIndex: 0 - 26
Full list of all train tracks + track nodes by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/traintracks.json]=]
	SetTrainTrackSpawnFrequency=function(trackIndex--[[@param trackIndex integer]],frequency--[[@param frequency integer]])return InvokeVoid(0x21973BBF8D17EDFA,trackIndex,frequency)end;
	AllowTrainToBeRemovedByPopulation=function(p0--[[@param p0 any]])return InvokeVoid(0x2310A8F9421EBF43,p0)end;
	DeleteAllTrains=function()return InvokeVoid(0x736A718577F39C7D)end;
	SetTrainSpeed=function(train--[[@param train integer]],speed--[[@param speed number]])return InvokeVoid(0xAA0BC91BE0B796E3,train,speed+.0)end;
	SetTrainCruiseSpeed=function(train--[[@param train integer]],speed--[[@param speed number]])return InvokeVoid(0x16469284DB8C62B5,train,speed+.0)end;
	SetRandomBoats=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x84436EC293B1415F,toggle)end;
	SetRandomBoatsMp=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xDA5E12F728DB30CA,toggle)end;
	SetGarbageTrucks=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x2AFD795EEAC8D30D,toggle)end;
	--[=[Maximum amount of vehicles with vehicle stuck check appears to be 16.]=]
	DoesVehicleHaveStuckVehicleCheck=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x57E4C39DE5EE8470,vehicle)end;---@return boolean
	--[=[See REQUEST_VEHICLE_RECORDING]=]
	GetVehicleRecordingId=function(recording--[[@param recording integer]],script--[[@param script string]])return InvokeInt(0x21543C612379DB3C,recording,script)end;---@return integer
	--[=[Request the vehicle recording defined by the lowercase format string "%s%03d.yvr". For example, REQUEST_VEHICLE_RECORDING(1, "FBIs1UBER") corresponds to fbis1uber001.yvr.
For all vehicle recording/playback natives, "script" is a common prefix that usually corresponds to the script/mission the recording is used in, "recording" is its int suffix, and "id" (e.g., in native GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID) corresponds to a unique identifier within the recording streaming module.
Note that only 24 recordings (hardcoded in multiple places) can ever active at a given time before clobbering begins.]=]
	RequestVehicleRecording=function(recording--[[@param recording integer]],script--[[@param script string]])return InvokeVoid(0xAF514CABE74CBF15,recording,script)end;
	--[=[See REQUEST_VEHICLE_RECORDING]=]
	HasVehicleRecordingBeenLoaded=function(recording--[[@param recording integer]],script--[[@param script string]])return InvokeBool(0x300D614A4C785FC4,recording,script)end;---@return boolean
	--[=[See REQUEST_VEHICLE_RECORDING]=]
	RemoveVehicleRecording=function(recording--[[@param recording integer]],script--[[@param script string]])return InvokeVoid(0xF1160ACCF98A3FC8,recording,script)end;
	GetPositionOfVehicleRecordingIdAtTime=function(id--[[@param id integer]],time--[[@param time number]])return InvokeV3(0x92523B76657A517D,id,time+.0)end;---@return V3
	--[=[This native does no interpolation between pathpoints. The same position will be returned for all times up to the next pathpoint in the recording.

See REQUEST_VEHICLE_RECORDING]=]
	GetPositionOfVehicleRecordingAtTime=function(recording--[[@param recording integer]],time--[[@param time number]],script--[[@param script string]])return InvokeV3(0xD242728AA6F0FBA2,recording,time+.0,script)end;---@return V3
	GetRotationOfVehicleRecordingIdAtTime=function(id--[[@param id integer]],time--[[@param time number]])return InvokeV3(0xF0F2103EFAF8CBA7,id,time+.0)end;---@return V3
	--[=[This native does no interpolation between pathpoints. The same rotation will be returned for all times up to the next pathpoint in the recording.

See REQUEST_VEHICLE_RECORDING]=]
	GetRotationOfVehicleRecordingAtTime=function(recording--[[@param recording integer]],time--[[@param time number]],script--[[@param script string]])return InvokeV3(0x2058206FBE79A8AD,recording,time+.0,script)end;---@return V3
	GetTotalDurationOfVehicleRecordingId=function(id--[[@param id integer]])return InvokeFloat(0x102D125411A7B6E6,id)end;---@return number
	--[=[See REQUEST_VEHICLE_RECORDING]=]
	GetTotalDurationOfVehicleRecording=function(recording--[[@param recording integer]],script--[[@param script string]])return InvokeFloat(0x0E48D1C262390950,recording,script)end;---@return number
	--[=[Distance traveled in the vehicles current recording.]=]
	GetPositionInRecording=function(vehicle--[[@param vehicle integer]])return InvokeFloat(0x2DACD605FC681475,vehicle)end;---@return number
	--[=[Can be used with GET_TOTAL_DURATION_OF_VEHICLE_RECORDING{_ID} to compute a percentage.]=]
	GetTimePositionInRecording=function(vehicle--[[@param vehicle integer]])return InvokeFloat(0x5746F3A7AB7FE544,vehicle)end;---@return number
	--[=[p3 is some flag related to 'trailers' (invokes CVehicle::GetTrailer).

See REQUEST_VEHICLE_RECORDING]=]
	StartPlaybackRecordedVehicle=function(vehicle--[[@param vehicle integer]],recording--[[@param recording integer]],script--[[@param script string]],p3--[[@param p3 boolean]])return InvokeVoid(0x3F878F92B3A7A071,vehicle,recording,script,p3)end;
	--[=[flags requires further research, e.g., 0x4/0x8 are related to the AI driving task and 0x20 is internally set and interacts with dynamic entity components.

time, often zero and capped at 500, is related to SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER]=]
	StartPlaybackRecordedVehicleWithFlags=function(vehicle--[[@param vehicle integer]],recording--[[@param recording integer]],script--[[@param script string]],flags--[[@param flags integer]],time--[[@param time integer]],drivingStyle--[[@param drivingStyle integer]])return InvokeVoid(0x7D80FD645D4DA346,vehicle,recording,script,flags,time,drivingStyle)end;
	--[=[Often called after START_PLAYBACK_RECORDED_VEHICLE and SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE; similar in use to FORCE_ENTITY_AI_AND_ANIMATION_UPDATE.]=]
	ForcePlaybackRecordedVehicleUpdate=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 boolean]])return InvokeVoid(0x1F2E4E06DEA8992B,vehicle,p1)end;
	StopPlaybackRecordedVehicle=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0x54833611C17ABDEA,vehicle)end;
	PausePlaybackRecordedVehicle=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0x632A689BF42301B1,vehicle)end;
	UnpausePlaybackRecordedVehicle=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0x8879EE09268305D5,vehicle)end;
	IsPlaybackGoingOnForVehicle=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x1C8A4C2C19E68EEC,vehicle)end;---@return boolean
	IsPlaybackUsingAiGoingOnForVehicle=function(vehicle--[[@param vehicle integer]])return InvokeBool(0xAEA8FD591FAD4106,vehicle)end;---@return boolean
	GetCurrentPlaybackForVehicle=function(vehicle--[[@param vehicle integer]])return InvokeInt(0x42BC05C27A946054,vehicle)end;---@return integer
	SkipToEndAndStopPlaybackRecordedVehicle=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0xAB8E2EDA0C0A5883,vehicle)end;
	SetPlaybackSpeed=function(vehicle--[[@param vehicle integer]],speed--[[@param speed number]])return InvokeVoid(0x6683AB880E427778,vehicle,speed+.0)end;
	--[=[AI abides by the provided driving style (e.g., stopping at red lights or waiting behind traffic) while executing the specificed vehicle recording.

FORCE_PLAYBACK_RECORDED_VEHICLE_UPDATE is a related native that deals with the AI physics for such recordings.]=]
	StartPlaybackRecordedVehicleUsingAi=function(vehicle--[[@param vehicle integer]],recording--[[@param recording integer]],script--[[@param script string]],speed--[[@param speed number]],drivingStyle--[[@param drivingStyle integer]])return InvokeVoid(0x29DE5FA52D00428C,vehicle,recording,script,speed+.0,drivingStyle)end;
	--[=[SET_TIME_POSITION_IN_RECORDING can be emulated by: desired_time - GET_TIME_POSITION_IN_RECORDING(vehicle)]=]
	SkipTimeInPlaybackRecordedVehicle=function(vehicle--[[@param vehicle integer]],time--[[@param time number]])return InvokeVoid(0x9438F7AD68771A20,vehicle,time+.0)end;
	--[=[Identical to SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER with 0 as arguments for p1 and p3.]=]
	SetPlaybackToUseAi=function(vehicle--[[@param vehicle integer]],drivingStyle--[[@param drivingStyle integer]])return InvokeVoid(0xA549C3B37EA28131,vehicle,drivingStyle)end;
	--[=[Time is number of milliseconds before reverting, zero for indefinitely.]=]
	SetPlaybackToUseAiTryToRevertBackLater=function(vehicle--[[@param vehicle integer]],time--[[@param time integer]],drivingStyle--[[@param drivingStyle integer]],p3--[[@param p3 boolean]])return InvokeVoid(0x6E63860BBB190730,vehicle,time,drivingStyle,p3)end;
	SetAdditionalRotationForRecordedVehiclePlayback=function(vehicle--[[@param vehicle integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],p4--[[@param p4 any]])return InvokeVoid(0x5845066D8A1EA7F7,vehicle,x+.0,y+.0,z+.0,p4)end;
	SetPositionOffsetForRecordedVehiclePlayback=function(vehicle--[[@param vehicle integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0x796A877E459B99EA,vehicle,x+.0,y+.0,z+.0)end;
	SetGlobalPositionOffsetForRecordedVehiclePlayback=function(vehicle--[[@param vehicle integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0xFAF2A78061FD9EF4,vehicle,x+.0,y+.0,z+.0)end;
	--[=[A vehicle recording playback flag only used in jewelry_heist]=]
	SetShouldLerpFromAiToFullRecording=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 boolean]])return InvokeVoid(0x063AE2B2CC273588,vehicle,p1)end;
	ExplodeVehicleInCutscene=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 boolean]])return InvokeVoid(0x786A4EB67B01BF0B,vehicle,p1)end;
	AddVehicleStuckCheckWithWarp=function(p0--[[@param p0 any]],p1--[[@param p1 number]],p2--[[@param p2 any]],p3--[[@param p3 boolean]],p4--[[@param p4 boolean]],p5--[[@param p5 boolean]],p6--[[@param p6 any]])return InvokeVoid(0x2FA9923062DD396C,p0,p1+.0,p2,p3,p4,p5,p6)end;
	--[=[Makes the vehicle stop spawning naturally in traffic. Here's an essential example:

VEHICLE::SET_VEHICLE_MODEL_IS_SUPPRESSED(MISC::GET_HASH_KEY("taco"), true);

Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json]=]
	SetVehicleModelIsSuppressed=function(model--[[@param model integer]],suppressed--[[@param suppressed boolean]])return InvokeVoid(0x0FC2D89AC25A5814,model,suppressed)end;
	--[=[Gets a random vehicle in a sphere at the specified position, of the specified radius.

x: The X-component of the position of the sphere.
y: The Y-component of the position of the sphere.
z: The Z-component of the position of the sphere.
radius: The radius of the sphere. Max is 9999.9004.
modelHash: The vehicle model to limit the selection to. Pass 0 for any model.
flags: The bitwise flags that modifies the behaviour of this function.

Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json]=]
	GetRandomVehicleInSphere=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]],modelHash--[[@param modelHash integer]],flags--[[@param flags integer]])return InvokeInt(0x386F6CE5BAF6091C,x+.0,y+.0,z+.0,radius+.0,modelHash,flags)end;---@return integer
	GetRandomVehicleFrontBumperInSphere=function(p0--[[@param p0 number]],p1--[[@param p1 number]],p2--[[@param p2 number]],p3--[[@param p3 number]],p4--[[@param p4 integer]],p5--[[@param p5 integer]],p6--[[@param p6 integer]])return InvokeInt(0xC5574E0AEB86BA68,p0+.0,p1+.0,p2+.0,p3+.0,p4,p5,p6)end;---@return integer
	GetRandomVehicleBackBumperInSphere=function(p0--[[@param p0 number]],p1--[[@param p1 number]],p2--[[@param p2 number]],p3--[[@param p3 number]],p4--[[@param p4 integer]],p5--[[@param p5 integer]],p6--[[@param p6 integer]])return InvokeInt(0xB50807EABE20A8DC,p0+.0,p1+.0,p2+.0,p3+.0,p4,p5,p6)end;---@return integer
	--[=[Example usage
VEHICLE::GET_CLOSEST_VEHICLE(x, y, z, radius, hash, unknown leave at 70) 

x, y, z: Position to get closest vehicle to.
radius: Max radius to get a vehicle.
modelHash: Limit to vehicles with this model. 0 for any.
flags: The bitwise flags altering the function's behaviour.

Does not return police cars or helicopters.

It seems to return police cars for me, does not seem to return helicopters, planes or boats for some reason

Only returns non police cars and motorbikes with the flag set to 70 and modelHash to 0. ModelHash seems to always be 0 when not a modelHash in the scripts, as stated above. 

These flags were found in the b617d scripts: 0,2,4,6,7,23,127,260,2146,2175,12294,16384,16386,20503,32768,67590,67711,98309,100359.
Converted to binary, each bit probably represents a flag as explained regarding another native here: gtaforums.com/topic/822314-guide-driving-styles

Conversion of found flags to binary: https://pastebin.com/kghNFkRi

At exactly 16384 which is 0100000000000000 in binary and 4000 in hexadecimal only planes are returned. 

It's probably more convenient to use worldGetAllVehicles(int *arr, int arrSize) and check the shortest distance yourself and sort if you want by checking the vehicle type with for example VEHICLE::IS_THIS_MODEL_A_BOAT

-------------------------------------------------------------------------

Conclusion: This native is not worth trying to use. Use something like this instead: https://pastebin.com/xiFdXa7h

Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json]=]
	GetClosestVehicle=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]],modelHash--[[@param modelHash integer]],flags--[[@param flags integer]])return InvokeInt(0xF73EB622C4F1689B,x+.0,y+.0,z+.0,radius+.0,modelHash,flags)end;---@return integer
	--[=[Corrected p1. it's basically the 'carriage/trailer number'. So if the train has 3 trailers you'd call the native once with a var or 3 times with 1, 2, 3.]=]
	GetTrainCarriage=function(train--[[@param train integer]],trailerNumber--[[@param trailerNumber integer]])return InvokeInt(0x08AAFD0814722BC3,train,trailerNumber)end;---@return integer
	IsMissionTrain=function(train--[[@param train integer]])return InvokeBool(0xAD464F2E18836BFC,train)end;---@return boolean
	DeleteMissionTrain=function(train--[[@param train integer*]])return InvokeVoid(0x5B76B14AE875C795,train)end;
	--[=[p1 is always 0]=]
	SetMissionTrainAsNoLongerNeeded=function(train--[[@param train integer*]],p1--[[@param p1 boolean]])return InvokeVoid(0xBBE7648349B49BE8,train,p1)end;
	SetMissionTrainCoords=function(train--[[@param train integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0x591CA673AA6AB736,train,x+.0,y+.0,z+.0)end;
	IsThisModelABoat=function(model--[[@param model integer]])return InvokeBool(0x45A9187928F4B9E3,model)end;---@return boolean
	--[=[Checks if model is a boat, then checks for FLAG_IS_JETSKI.]=]
	IsThisModelAJetski=function(model--[[@param model integer]])return InvokeBool(0x9537097412CF75FE,model)end;---@return boolean
	IsThisModelAPlane=function(model--[[@param model integer]])return InvokeBool(0xA0948AB42D7BA0DE,model)end;---@return boolean
	IsThisModelAHeli=function(model--[[@param model integer]])return InvokeBool(0xDCE4334788AF94EA,model)end;---@return boolean
	--[=[To check if the model is an amphibious car, use IS_THIS_MODEL_AN_AMPHIBIOUS_CAR.]=]
	IsThisModelACar=function(model--[[@param model integer]])return InvokeBool(0x7F6DB52EEFC96DF8,model)end;---@return boolean
	IsThisModelATrain=function(model--[[@param model integer]])return InvokeBool(0xAB935175B22E822B,model)end;---@return boolean
	IsThisModelABike=function(model--[[@param model integer]])return InvokeBool(0xB50C0B0CEDC6CE84,model)end;---@return boolean
	IsThisModelABicycle=function(model--[[@param model integer]])return InvokeBool(0xBF94DD42F63BDED2,model)end;---@return boolean
	IsThisModelAQuadbike=function(model--[[@param model integer]])return InvokeBool(0x39DAC362EE65FA28,model)end;---@return boolean
	IsThisModelAnAmphibiousCar=function(model--[[@param model integer]])return InvokeBool(0x633F6F44A537EBB6,model)end;---@return boolean
	IsThisModelAnAmphibiousQuadbike=function(model--[[@param model integer]])return InvokeBool(0xA1A9FC1C76A6730D,model)end;---@return boolean
	--[=[Equivalent of SET_HELI_BLADES_SPEED(vehicleHandle, 1.0f);

this native works on planes to?]=]
	SetHeliBladesFullSpeed=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0xA178472EBB8AE60D,vehicle)end;
	--[=[Sets the speed of the helicopter blades in percentage of the full speed.

vehicleHandle: The helicopter.
speed: The speed in percentage, 0.0f being 0% and 1.0f being 100%.]=]
	SetHeliBladesSpeed=function(vehicle--[[@param vehicle integer]],speed--[[@param speed number]])return InvokeVoid(0xFD280B4D7F3ABC4D,vehicle,speed+.0)end;
	ForceSubThrottleForTime=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 number]],p2--[[@param p2 number]])return InvokeVoid(0x99CAD8E7AFDB60FA,vehicle,p1+.0,p2+.0)end;
	--[=[This has not yet been tested - it's just an assumption of what the types could be.]=]
	SetVehicleCanBeTargetted=function(vehicle--[[@param vehicle integer]],state--[[@param state boolean]])return InvokeVoid(0x3750146A28097A82,vehicle,state)end;
	SetDontAllowPlayerToEnterVehicleIfLockedForPlayer=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 boolean]])return InvokeVoid(0xDBC631F109350B8C,vehicle,p1)end;
	SetVehicleCanBeVisiblyDamaged=function(vehicle--[[@param vehicle integer]],state--[[@param state boolean]])return InvokeVoid(0x4C7028F78FFD3681,vehicle,state)end;
	SetVehicleHasUnbreakableLights=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x1AA8A837D2169D94,vehicle,toggle)end;
	SetVehicleRespectsLocksWhenHasDriver=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 boolean]])return InvokeVoid(0x2311DD7159F00582,vehicle,p1)end;
	SetVehicleCanEjectPassengersIfLocked=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x065D03A9D6B2C6B5,p0,p1)end;
	--[=[Dirt level does not become greater than 15.0]=]
	GetVehicleDirtLevel=function(vehicle--[[@param vehicle integer]])return InvokeFloat(0x8F17BC8BA08DA62B,vehicle)end;---@return number
	--[=[You can't use values greater than 15.0
Also, R* does (float)(rand() % 15) to get a random dirt level when generating a vehicle.]=]
	SetVehicleDirtLevel=function(vehicle--[[@param vehicle integer]],dirtLevel--[[@param dirtLevel number]])return InvokeVoid(0x79D3B596FE44EE8B,vehicle,dirtLevel+.0)end;
	--[=[Appears to return true if the vehicle has any damage, including cosmetically.]=]
	GetDoesVehicleHaveDamageDecals=function(vehicle--[[@param vehicle integer]])return InvokeBool(0xBCDC5017D3CE1E9E,vehicle)end;---@return boolean
	--[=[doorId: see SET_VEHICLE_DOOR_SHUT]=]
	IsVehicleDoorFullyOpen=function(vehicle--[[@param vehicle integer]],doorId--[[@param doorId integer]])return InvokeBool(0x3E933CFF7B111C22,vehicle,doorId)end;---@return boolean
	--[=[Starts or stops the engine on the specified vehicle.

vehicle: The vehicle to start or stop the engine on.
value: true to turn the vehicle on; false to turn it off.
instantly: if true, the vehicle will be set to the state immediately; otherwise, the current driver will physically turn on or off the engine.
disableAutoStart: If true, the system will prevent the engine from starting when the player got into it.

from what I've tested when I do this to a helicopter the propellers turn off after the engine has started. so is there any way to keep the heli propellers on?]=]
	SetVehicleEngineOn=function(vehicle--[[@param vehicle integer]],value--[[@param value boolean]],instantly--[[@param instantly boolean]],disableAutoStart--[[@param disableAutoStart boolean]])return InvokeVoid(0x2497C4717C8B881E,vehicle,value,instantly,disableAutoStart)end;
	SetVehicleUndriveable=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x8ABA6AF54B942B95,vehicle,toggle)end;
	SetVehicleProvidesCover=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x5AFEEDD9BB2899D7,vehicle,toggle)end;
	--[=[doorId: see SET_VEHICLE_DOOR_SHUT]=]
	SetVehicleDoorControl=function(vehicle--[[@param vehicle integer]],doorId--[[@param doorId integer]],speed--[[@param speed integer]],angle--[[@param angle number]])return InvokeVoid(0xF2BFA0430F0A0FCB,vehicle,doorId,speed,angle+.0)end;
	--[=[doorId: see SET_VEHICLE_DOOR_SHUT]=]
	SetVehicleDoorLatched=function(vehicle--[[@param vehicle integer]],doorId--[[@param doorId integer]],p2--[[@param p2 boolean]],p3--[[@param p3 boolean]],p4--[[@param p4 boolean]])return InvokeVoid(0xA5A9653A8D2CAF48,vehicle,doorId,p2,p3,p4)end;
	--[=[doorId: see SET_VEHICLE_DOOR_SHUT]=]
	GetVehicleDoorAngleRatio=function(vehicle--[[@param vehicle integer]],doorId--[[@param doorId integer]])return InvokeFloat(0xFE3F9C29F7B32BD5,vehicle,doorId)end;---@return number
	--[=[doorId: see SET_VEHICLE_DOOR_SHUT]=]
	GetPedUsingVehicleDoor=function(vehicle--[[@param vehicle integer]],doord--[[@param doord integer]])return InvokeInt(0x218297BF0CFD853B,vehicle,doord)end;---@return integer
	--[=[enum eDoorId
{
	VEH_EXT_DOOR_INVALID_ID = -1,
	VEH_EXT_DOOR_DSIDE_F,
	VEH_EXT_DOOR_DSIDE_R,
	VEH_EXT_DOOR_PSIDE_F,
	VEH_EXT_DOOR_PSIDE_R,
	VEH_EXT_BONNET,
	VEH_EXT_BOOT
};]=]
	SetVehicleDoorShut=function(vehicle--[[@param vehicle integer]],doorId--[[@param doorId integer]],closeInstantly--[[@param closeInstantly boolean]])return InvokeVoid(0x93D9BD300D7789E5,vehicle,doorId,closeInstantly)end;
	--[=[doorId: see SET_VEHICLE_DOOR_SHUT]=]
	SetVehicleDoorBroken=function(vehicle--[[@param vehicle integer]],doorId--[[@param doorId integer]],deleteDoor--[[@param deleteDoor boolean]])return InvokeVoid(0xD4D4F6A4AB575A33,vehicle,doorId,deleteDoor)end;
	SetVehicleCanBreak=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x59BF8C3D52C92F66,vehicle,toggle)end;
	DoesVehicleHaveRoof=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x8AC862B0B32C5B80,vehicle)end;---@return boolean
	SetVehicleRemoveAggressiveCarjackMission=function(p0--[[@param p0 any]])return InvokeVoid(0xC4B3347BD68BD609,p0)end;
	SetVehicleAvoidPlayerVehicleRiotVanMission=function(p0--[[@param p0 any]])return InvokeVoid(0xD3301660A57C9272,p0)end;
	SetCarjackMissionRemovalParameters=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0xB9562064627FF9DB,p0,p1)end;
	--[=[Returns true if MF_IS_BIG (strModelFlags 0x8) handling model flag is set.]=]
	IsBigVehicle=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x9F243D3919F442FE,vehicle)end;---@return boolean
	--[=[Returns the total amount of color combinations found in the vehicle's carvariations.meta entry.]=]
	GetNumberOfVehicleColours=function(vehicle--[[@param vehicle integer]])return InvokeInt(0x3B963160CD65D41E,vehicle)end;---@return integer
	--[=[Sets the selected vehicle's colors to the specified index of the color combination found in the vehicle's carvariations.meta entry.]=]
	SetVehicleColourCombination=function(vehicle--[[@param vehicle integer]],colorCombination--[[@param colorCombination integer]])return InvokeVoid(0x33E8CD3322E2FE31,vehicle,colorCombination)end;
	--[=[Returns the index of the color combination found in the vehicle's carvariations.meta entry.]=]
	GetVehicleColourCombination=function(vehicle--[[@param vehicle integer]])return InvokeInt(0x6A842D197F845D56,vehicle)end;---@return integer
	--[=[`color`: is the paint index for the vehicle.
Paint index goes from 0 to 12.
Be aware that it only works on xenon lights. Example: https://i.imgur.com/yV3cpG9.png
Full list of all vehicle xenon lights by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json]=]
	SetVehicleXenonLightColorIndex=function(vehicle--[[@param vehicle integer]],colorIndex--[[@param colorIndex integer]])return InvokeVoid(0xE41033B25D003A07,vehicle,colorIndex)end;
	--[=[Returns the headlight color index from the vehicle. Value between 0, 12.
Use SET_VEHICLE_XENON_LIGHT_COLOR_INDEX to set the headlights color for the vehicle.
Must enable xenon headlights before it'll take affect.

Returns an int, value between 0-12 or 255 if no color is set.]=]
	GetVehicleXenonLightColorIndex=function(vehicle--[[@param vehicle integer]])return InvokeInt(0x3DFF319A831E0CDB,vehicle)end;---@return integer
	--[=[Setting this to false, makes the specified vehicle to where if you press Y your character doesn't even attempt the animation to enter the vehicle. Hence it's not considered aka ignored.]=]
	SetVehicleIsConsideredByPlayer=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x31B927BBC44156CD,vehicle,toggle)end;
	SetVehicleWillForceOtherVehiclesToStop=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xBE5C1255A1830FF5,vehicle,toggle)end;
	SetVehicleActAsIfHasSirenOn=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 boolean]])return InvokeVoid(0x9BECD4B9FEF3F8A6,vehicle,p1)end;
	SetVehicleUseMoreRestrictiveSpawnChecks=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 boolean]])return InvokeVoid(0x88BC673CA9E0AE99,vehicle,p1)end;
	SetVehicleMayBeUsedByGotoPointAnyMeans=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 boolean]])return InvokeVoid(0xE851E480B814D4BA,vehicle,p1)end;
	--[=[Not present in the retail version! It's just a nullsub.

p0 always true (except in one case)
successIndicator: 0 if success, -1 if failed]=]
	GetRandomVehicleModelInMemory=function(p0--[[@param p0 boolean]],modelHash--[[@param modelHash integer*]],successIndicator--[[@param successIndicator integer*]])return InvokeVoid(0x055BF0AC0C34F4FD,p0,modelHash,successIndicator)end;
	--[=[enum VehicleLockStatus = {
    None = 0,
    Unlocked = 1,
    Locked = 2,
    LockedForPlayer = 3,
    StickPlayerInside = 4, -- Doesn't allow players to exit the vehicle with the exit vehicle key.
    CanBeBrokenInto = 7, -- Can be broken into the car. If the glass is broken, the value will be set to 1
    CanBeBrokenIntoPersist = 8, -- Can be broken into persist
    CannotBeTriedToEnter = 10, -- Cannot be tried to enter (Nothing happens when you press the vehicle enter key).
}]=]
	GetVehicleDoorLockStatus=function(vehicle--[[@param vehicle integer]])return InvokeInt(0x25BC98A59C2EA962,vehicle)end;---@return integer
	--[=[Returns vehicle door lock state previously set with SET_VEHICLE_INDIVIDUAL_DOORS_LOCKED]=]
	GetVehicleIndividualDoorLockStatus=function(vehicle--[[@param vehicle integer]],doorId--[[@param doorId integer]])return InvokeInt(0xCA4AC3EAAE46EC7B,vehicle,doorId)end;---@return integer
	--[=[doorID starts at 0, not seeming to skip any numbers. Four door vehicles intuitively range from 0 to 3.]=]
	IsVehicleDoorDamaged=function(veh--[[@param veh integer]],doorID--[[@param doorID integer]])return InvokeBool(0xB8E181E559464527,veh,doorID)end;---@return boolean
	--[=[doorId: see SET_VEHICLE_DOOR_SHUT]=]
	SetDoorAllowedToBeBrokenOff=function(vehicle--[[@param vehicle integer]],doorId--[[@param doorId integer]],isBreakable--[[@param isBreakable boolean]])return InvokeVoid(0x2FA133A4A9D37ED8,vehicle,doorId,isBreakable)end;
	IsVehicleBumperBouncing=function(vehicle--[[@param vehicle integer]],frontBumper--[[@param frontBumper boolean]])return InvokeBool(0x27B926779DEB502D,vehicle,frontBumper)end;---@return boolean
	IsVehicleBumperBrokenOff=function(vehicle--[[@param vehicle integer]],frontBumper--[[@param frontBumper boolean]])return InvokeBool(0x468056A6BB6F3846,vehicle,frontBumper)end;---@return boolean
	--[=[Usage:

public bool isCopInRange(Vector3 Location, float Range)
        {
            return Function.Call<bool>(Hash.IS_COP_PED_IN_AREA_3D, Location.X - Range, Location.Y - Range, Location.Z - Range, Location.X + Range, Location.Y + Range, Location.Z + Range);
        }]=]
	IsCopVehicleInArea3d=function(x1--[[@param x1 number]],x2--[[@param x2 number]],y1--[[@param y1 number]],y2--[[@param y2 number]],z1--[[@param z1 number]],z2--[[@param z2 number]])return InvokeBool(0x7EEF65D5F153E26A,x1+.0,x2+.0,y1+.0,y2+.0,z1+.0,z2+.0)end;---@return boolean
	--[=[ Public Function isVehicleOnAllWheels(vh As Vehicle) As Boolean
        Return Native.Function.Call(Of Boolean)(Hash.IS_VEHICLE_ON_ALL_WHEELS, vh)
    End Function
]=]
	IsVehicleOnAllWheels=function(vehicle--[[@param vehicle integer]])return InvokeBool(0xB104CD1BABF302E2,vehicle)end;---@return boolean
	--[=[Returns `nMonetaryValue` from handling.meta for specific model.]=]
	GetVehicleModelValue=function(vehicleModel--[[@param vehicleModel integer]])return InvokeInt(0x5873C14A52D74236,vehicleModel)end;---@return integer
	--[=[Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json]=]
	GetVehicleLayoutHash=function(vehicle--[[@param vehicle integer]])return InvokeInt(0x28D37D4F71AC5C58,vehicle)end;---@return integer
	GetInVehicleClipsetHashForSeat=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 integer]])return InvokeInt(0xA01BC64DD4BFBBAC,vehicle,p1)end;---@return integer
	--[=[Makes the train all jumbled up and derailed as it moves on the tracks (though that wont stop it from its normal operations)]=]
	SetRenderTrainAsDerailed=function(train--[[@param train integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x317B11A312DF5534,train,toggle)end;
	--[=[They use the same color indexs as SET_VEHICLE_COLOURS.]=]
	SetVehicleExtraColours=function(vehicle--[[@param vehicle integer]],pearlescentColor--[[@param pearlescentColor integer]],wheelColor--[[@param wheelColor integer]])return InvokeVoid(0x2036F561ADD12E33,vehicle,pearlescentColor,wheelColor)end;
	GetVehicleExtraColours=function(vehicle--[[@param vehicle integer]],pearlescentColor--[[@param pearlescentColor integer*]],wheelColor--[[@param wheelColor integer*]])return InvokeVoid(0x3BC4245933A166F7,vehicle,pearlescentColor,wheelColor)end;
	SetVehicleExtraColour5=function(vehicle--[[@param vehicle integer]],color--[[@param color integer]])return InvokeVoid(0xF40DD601A65F7F19,vehicle,color)end;
	GetVehicleExtraColour5=function(vehicle--[[@param vehicle integer]],color--[[@param color integer*]])return InvokeVoid(0x7D1464D472D32136,vehicle,color)end;
	SetVehicleExtraColour6=function(vehicle--[[@param vehicle integer]],color--[[@param color integer]])return InvokeVoid(0x6089CDF6A57F326C,vehicle,color)end;
	GetVehicleExtraColour6=function(vehicle--[[@param vehicle integer]],color--[[@param color integer*]])return InvokeVoid(0xB7635E80A5C31BFF,vehicle,color)end;
	StopAllGarageActivity=function()return InvokeVoid(0x0F87E938BDF29D66)end;
	--[=[This fixes a vehicle.
If the vehicle's engine's broken then you cannot fix it with this native.]=]
	SetVehicleFixed=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0x115722B1B9C14C1C,vehicle)end;
	--[=[This fixes the deformation of a vehicle but the vehicle health doesn't improve]=]
	SetVehicleDeformationFixed=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0x953DA1E1B12C0491,vehicle)end;
	SetVehicleCanEngineMissfire=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x206BC5DC9D1AC70A,vehicle,toggle)end;
	SetVehicleCanLeakOil=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x51BB2D88D31A914B,vehicle,toggle)end;
	SetVehicleCanLeakPetrol=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x192547247864DFDD,vehicle,toggle)end;
	SetDisableVehiclePetrolTankFires=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x465BF26AB9684352,vehicle,toggle)end;
	SetDisableVehiclePetrolTankDamage=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x37C8252A7C92D017,vehicle,toggle)end;
	SetDisableVehicleEngineFires=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x91A0BD635321F145,vehicle,toggle)end;
	SetVehicleLimitSpeedWhenPlayerInactive=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xC50CE861B55EAB8B,vehicle,toggle)end;
	--[=[sfink: sets bit in vehicle's structure, used by maintransition, fm_mission_controller, mission_race and a couple of other scripts. see dissassembly: 
CVehicle *__fastcall sub_140CDAA10(signed int a1, char a2)
{
    CVehicle *result; // rax@1

    result = EntityAsCVehicle(a1);
    if ( result )
    {
        result->field_886 &= 0xEFu;
        result->field_886 |= 16 * (a2 & 1);
    }
    return result;
}]=]
	SetVehicleStopInstantlyWhenPlayerInactive=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x6EBFB22D646FFC18,vehicle,toggle)end;
	SetDisablePretendOccupants=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x25367DE49D64CF16,vehicle,toggle)end;
	RemoveVehiclesFromGeneratorsInArea=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],p6--[[@param p6 any]])return InvokeVoid(0x46A1E1A299EC4BBA,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,p6)end;
	--[=[Locks the vehicle's steering to the desired angle, explained below.

Requires to be called onTick. Steering is unlocked the moment the function stops being called on the vehicle.

Steer bias:
-1.0 = full right
0.0 = centered steering
1.0 = full left]=]
	SetVehicleSteerBias=function(vehicle--[[@param vehicle integer]],value--[[@param value number]])return InvokeVoid(0x42A8EC77D5150CBE,vehicle,value+.0)end;
	IsVehicleExtraTurnedOn=function(vehicle--[[@param vehicle integer]],extraId--[[@param extraId integer]])return InvokeBool(0xD2E6822DBFD6C8BD,vehicle,extraId)end;---@return boolean
	--[=[Available extraIds are 1-14, however none of the vehicles have extras above 12.]=]
	SetVehicleExtra=function(vehicle--[[@param vehicle integer]],extraId--[[@param extraId integer]],disable--[[@param disable boolean]])return InvokeVoid(0x7EE3A3C5E4A40CC9,vehicle,extraId,disable)end;
	--[=[Checks via CVehicleModelInfo]=]
	DoesExtraExist=function(vehicle--[[@param vehicle integer]],extraId--[[@param extraId integer]])return InvokeBool(0x1262D55792428154,vehicle,extraId)end;---@return boolean
	--[=[Returns true if specified extra part is broken off. It only works for extras that can break off during collisions, non-breakable extras always return false. Also returns true if the breakable extra is toggled off through script.]=]
	IsExtraBrokenOff=function(vehicle--[[@param vehicle integer]],extraId--[[@param extraId integer]])return InvokeBool(0x534E36D4DB9ECC5D,vehicle,extraId)end;---@return boolean
	SetConvertibleRoof=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 boolean]])return InvokeVoid(0xF39C4F538B5124C2,vehicle,p1)end;
	LowerConvertibleRoof=function(vehicle--[[@param vehicle integer]],instantlyLower--[[@param instantlyLower boolean]])return InvokeVoid(0xDED51F703D0FA83D,vehicle,instantlyLower)end;
	RaiseConvertibleRoof=function(vehicle--[[@param vehicle integer]],instantlyRaise--[[@param instantlyRaise boolean]])return InvokeVoid(0x8F5FB35D7E88FC70,vehicle,instantlyRaise)end;
	--[=[0 -> up
1 -> lowering down
2 -> down
3 -> raising up]=]
	GetConvertibleRoofState=function(vehicle--[[@param vehicle integer]])return InvokeInt(0xF8C397922FC03F41,vehicle)end;---@return integer
	--[=[Returns true if the vehicle has a convertible roof.

p1 is false almost always. However, in launcher_carwash/carwash1/carwash2 scripts, p1 is true and is accompanied by DOES_VEHICLE_HAVE_ROOF. If p1 is true, it seems that every single vehicle will return true irrespective of being a convertible.]=]
	IsVehicleAConvertible=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 boolean]])return InvokeBool(0x52F357A30698BCCE,vehicle,p1)end;---@return boolean
	--[=[Transforms the `stormberg`/`toreador` to its "submarine" variant. If the vehicle is already in that state then the vehicle transformation audio will still play, but the vehicle won't change at all.]=]
	TransformToSubmarine=function(vehicle--[[@param vehicle integer]],noAnimation--[[@param noAnimation boolean]])return InvokeBool(0xBE4C854FFDB6EEBE,vehicle,noAnimation)end;---@return boolean
	--[=[Transforms the `stormberg`/`toreador` to its "road vehicle" variant. If the vehicle is already in that state then the vehicle transformation audio will still play, but the vehicle won't change at all.]=]
	TransformToCar=function(vehicle--[[@param vehicle integer]],noAnimation--[[@param noAnimation boolean]])return InvokeVoid(0x2A69FFD1B42BFF9E,vehicle,noAnimation)end;
	IsVehicleInSubmarineMode=function(vehicle--[[@param vehicle integer]])return InvokeBool(0xA77DC70BD689A1E5,vehicle)end;---@return boolean
	IsVehicleStoppedAtTrafficLights=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x2959F696AE390A99,vehicle)end;---@return boolean
	--[=[Apply damage to vehicle at a location. Location is relative to vehicle model (not world).

Radius of effect damage applied in a sphere at impact location
When `focusOnModel` set to `true`, the damage sphere will travel towards the vehicle from the given point, thus guaranteeing an impact]=]
	SetVehicleDamage=function(vehicle--[[@param vehicle integer]],xOffset--[[@param xOffset number]],yOffset--[[@param yOffset number]],zOffset--[[@param zOffset number]],damage--[[@param damage number]],radius--[[@param radius number]],focusOnModel--[[@param focusOnModel boolean]])return InvokeVoid(0xA1DD317EA8FD4F29,vehicle,xOffset+.0,yOffset+.0,zOffset+.0,damage+.0,radius+.0,focusOnModel)end;
	SetVehicleOccupantsTakeExplosiveDamage=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x35BB21DE06784373,vehicle,toggle)end;
	--[=[Returns 1000.0 if the function is unable to get the address of the specified vehicle or if it's not a vehicle.

Minimum: -4000
Maximum: 1000

-4000: Engine is destroyed
0 and below: Engine catches fire and health rapidly declines
300: Engine is smoking and losing functionality
1000: Engine is perfect]=]
	GetVehicleEngineHealth=function(vehicle--[[@param vehicle integer]])return InvokeFloat(0xC45D23BAF168AAB8,vehicle)end;---@return number
	--[=[1000 is max health
Begins leaking gas at around 650 health
Minimum: -4000
Maximum: 1000

-4000: Engine is destroyed
0 and below: Engine catches fire and health rapidly declines
300: Engine is smoking and losing functionality
1000: Engine is perfect]=]
	SetVehicleEngineHealth=function(vehicle--[[@param vehicle integer]],health--[[@param health number]])return InvokeVoid(0x45F6D8EEF34ABEF1,vehicle,health+.0)end;
	--[=[Works just like SET_VEHICLE_ENGINE_HEALTH, but only for planes.]=]
	SetPlaneEngineHealth=function(vehicle--[[@param vehicle integer]],health--[[@param health number]])return InvokeVoid(0x2A86A0475B6A1434,vehicle,health+.0)end;
	--[=[1000 is max health
Begins leaking gas at around 650 health
-999.90002441406 appears to be minimum health, although nothing special occurs]=]
	GetVehiclePetrolTankHealth=function(vehicle--[[@param vehicle integer]])return InvokeFloat(0x7D5DABE888D2D074,vehicle)end;---@return number
	--[=[1000 is max health
Begins leaking gas at around 650 health
-999.90002441406 appears to be minimum health, although nothing special occurs]=]
	SetVehiclePetrolTankHealth=function(vehicle--[[@param vehicle integer]],health--[[@param health number]])return InvokeVoid(0x70DB57649FA8D0D8,vehicle,health+.0)end;
	--[=[p1 can be anywhere from 0 to 3 in the scripts.
p2 being how long in milliseconds the vehicle has been stuck]=]
	IsVehicleStuckTimerUp=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 integer]],ms--[[@param ms integer]])return InvokeBool(0x679BE1DAF71DA874,vehicle,p1,ms)end;---@return boolean
	--[=[The inner function has a switch on the second parameter. It's the stuck timer index.

Here's some pseudo code I wrote for the inner function:
void __fastcall NATIVE_RESET_VEHICLE_STUCK_TIMER_INNER(CUnknown* unknownClassInVehicle, int timerIndex)
{
 switch (timerIndex)
   {
 case 0:
       unknownClassInVehicle->FirstStuckTimer = (WORD)0u;
 case 1:
       unknownClassInVehicle->SecondStuckTimer = (WORD)0u;
    case 2:
       unknownClassInVehicle->ThirdStuckTimer = (WORD)0u;
 case 3:
       unknownClassInVehicle->FourthStuckTimer = (WORD)0u;
    case 4:
       unknownClassInVehicle->FirstStuckTimer = (WORD)0u;
     unknownClassInVehicle->SecondStuckTimer = (WORD)0u;
        unknownClassInVehicle->ThirdStuckTimer = (WORD)0u;
     unknownClassInVehicle->FourthStuckTimer = (WORD)0u;
        break;
    };
}]=]
	ResetVehicleStuckTimer=function(vehicle--[[@param vehicle integer]],nullAttributes--[[@param nullAttributes integer]])return InvokeVoid(0xD7591B0065AFAA7A,vehicle,nullAttributes)end;
	--[=[p1 is always 0 in the scripts.

p1 = check if vehicle is on fire]=]
	IsVehicleDriveable=function(vehicle--[[@param vehicle integer]],isOnFireCheck--[[@param isOnFireCheck boolean]])return InvokeBool(0x4C241E39B23DF959,vehicle,isOnFireCheck)end;---@return boolean
	SetVehicleHasBeenOwnedByPlayer=function(vehicle--[[@param vehicle integer]],owned--[[@param owned boolean]])return InvokeVoid(0x2B5F9D2AF1F1722D,vehicle,owned)end;
	SetVehicleNeedsToBeHotwired=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xFBA550EA44404EE6,vehicle,toggle)end;
	SetVehicleBlipThrottleRandomly=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 boolean]])return InvokeVoid(0x9F3F689B814F2599,vehicle,p1)end;
	SetPoliceFocusWillTrackVehicle=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x4E74E62E0A97E901,vehicle,toggle)end;
	--[=[Sounds the horn for the specified vehicle.

vehicle: The vehicle to activate the horn for.
mode: The hash of "NORMAL" or "HELDDOWN". Can be 0.
duration: The duration to sound the horn, in milliseconds.

Note: If a player is in the vehicle, it will only sound briefly.]=]
	StartVehicleHorn=function(vehicle--[[@param vehicle integer]],duration--[[@param duration integer]],mode--[[@param mode integer]],forever--[[@param forever boolean]])return InvokeVoid(0x9C8C6504B5B63D2C,vehicle,duration,mode,forever)end;
	--[=[If set to TRUE, it seems to suppress door noises and doesn't allow the horn to be continuous.]=]
	SetVehicleInCarModShop=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x9D44FCCE98450843,vehicle,toggle)end;
	--[=[if true, axles won't bend.]=]
	SetVehicleHasStrongAxles=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x92F0CF722BC4202F,vehicle,toggle)end;
	--[=[Returns model name of vehicle in all caps. Needs to be displayed through localizing text natives to get proper display name.
-----------------------------------------------------------------------------------------------------------------------------------------
While often the case, this does not simply return the model name of the vehicle (which could be hashed to return the model hash). Variations of the same vehicle may also use the same display name.
-----------------------------------------------------------------------------------------------------------------------------------------

Returns "CARNOTFOUND" if the hash doesn't match a vehicle hash.

Using HUD::GET_FILENAME_FOR_AUDIO_CONVERSATION, you can get the localized name.

Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json]=]
	GetDisplayNameFromVehicleModel=function(modelHash--[[@param modelHash integer]])return InvokeString(0xB215AAC32D25D019,modelHash)end;---@return string
	--[=[Will return a vehicle's manufacturer display label.
Returns "CARNOTFOUND" if the hash doesn't match a vehicle hash.

Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json]=]
	GetMakeNameFromVehicleModel=function(modelHash--[[@param modelHash integer]])return InvokeString(0xF7AF4F159FF99F97,modelHash)end;---@return string
	--[=[The only example I can find of this function in the scripts, is this:

struct _s = VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(rPtr((A_0) + 4), 1.21f, 6.15f, 0.3f);

-----------------------------------------------------------------------------------------------------------------------------------------
PC scripts:

v_5/*{3}*/ = VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(a_0._f1, 1.21, 6.15, 0.3);]=]
	GetVehicleDeformationAtPos=function(vehicle--[[@param vehicle integer]],offsetX--[[@param offsetX number]],offsetY--[[@param offsetY number]],offsetZ--[[@param offsetZ number]])return InvokeV3(0x4EC6CFBC7B2E9536,vehicle,offsetX+.0,offsetY+.0,offsetZ+.0)end;---@return V3
	SetVehicleLivery=function(vehicle--[[@param vehicle integer]],livery--[[@param livery integer]])return InvokeVoid(0x60BF608F1B8CD1B6,vehicle,livery)end;
	--[=[-1 = no livery]=]
	GetVehicleLivery=function(vehicle--[[@param vehicle integer]])return InvokeInt(0x2BB9230590DA5E8A,vehicle)end;---@return integer
	--[=[Returns -1 if the vehicle has no livery]=]
	GetVehicleLiveryCount=function(vehicle--[[@param vehicle integer]])return InvokeInt(0x87B63E25A529D526,vehicle)end;---@return integer
	--[=[Used to set the secondary livery (the roof on Tornado Custom being one such example.)

Livery value is dependent on the amount of liveries present in the vehicle's texture dictionary, for Tornado Custom this would be 0-6.]=]
	SetVehicleLivery2=function(vehicle--[[@param vehicle integer]],livery--[[@param livery integer]])return InvokeVoid(0xA6D3A8750DC73270,vehicle,livery)end;
	--[=[Returns index of the current vehicle's secondary livery. A getter for SET_VEHICLE_LIVERY2.]=]
	GetVehicleLivery2=function(vehicle--[[@param vehicle integer]])return InvokeInt(0x60190048C0764A26,vehicle)end;---@return integer
	--[=[Returns a number of available secondary liveries, or -1 if vehicle has no secondary liveries available.]=]
	GetVehicleLivery2Count=function(vehicle--[[@param vehicle integer]])return InvokeInt(0x5ECB40269053C0D4,vehicle)end;---@return integer
	--[=[This will return false if the window is broken, or rolled down.
Window indexes:
0 = Front Right Window
1 = Front Left Window
2 = Back Right Window
3 = Back Left Window


Those numbers go on for vehicles that have more than 4 doors with windows.]=]
	IsVehicleWindowIntact=function(vehicle--[[@param vehicle integer]],windowIndex--[[@param windowIndex integer]])return InvokeBool(0x46E571A0E20D01F1,vehicle,windowIndex)end;---@return boolean
	--[=[Appears to return false if any window is broken.]=]
	AreAllVehicleWindowsIntact=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x11D862A3E977A9EF,vehicle)end;---@return boolean
	--[=[Returns false if every seat is occupied.]=]
	AreAnyVehicleSeatsFree=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x2D34FC3BC4ADB780,vehicle)end;---@return boolean
	ResetVehicleWheels=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x21D2E5662C1F6FED,vehicle,toggle)end;
	IsHeliPartBroken=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]],p3--[[@param p3 boolean]])return InvokeBool(0xBC74B4BE25EB6C8A,vehicle,p1,p2,p3)end;---@return boolean
	--[=[Max 1000.
At 0 the main rotor will stall.]=]
	GetHeliMainRotorHealth=function(vehicle--[[@param vehicle integer]])return InvokeFloat(0xE4CB7541F413D2C5,vehicle)end;---@return number
	--[=[Max 1000.
At 0 the tail rotor will stall.]=]
	GetHeliTailRotorHealth=function(vehicle--[[@param vehicle integer]])return InvokeFloat(0xAE8CE82A4219AC8C,vehicle)end;---@return number
	--[=[Max 1000.
At -100 both helicopter rotors will stall.]=]
	GetHeliTailBoomHealth=function(vehicle--[[@param vehicle integer]])return InvokeFloat(0xAC51915D27E4A5F7,vehicle)end;---@return number
	SetHeliMainRotorHealth=function(vehicle--[[@param vehicle integer]],health--[[@param health number]])return InvokeVoid(0x4056EA1105F5ABD7,vehicle,health+.0)end;
	SetHeliTailRotorHealth=function(vehicle--[[@param vehicle integer]],health--[[@param health number]])return InvokeVoid(0xFE205F38AAA58E5B,vehicle,health+.0)end;
	SetHeliTailBoomCanBreakOff=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeBool(0x3EC8BF18AA453FE9,vehicle,toggle)end;---@return boolean
	--[=[NOTE: Debugging functions are not present in the retail version of the game.]=]
	SetVehicleNameDebug=function(vehicle--[[@param vehicle integer]],name--[[@param name string]])return InvokeVoid(0xBFDF984E2C22B94F,vehicle,name)end;
	--[=[Sets a vehicle to be strongly resistant to explosions. p0 is the vehicle; set p1 to false to toggle the effect on/off.]=]
	SetVehicleExplodesOnHighExplosionDamage=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x71B0892EC081D60A,vehicle,toggle)end;
	SetVehicleExplodesOnExplosionDamageAtZeroBodyHealth=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xD565F438137F0E10,vehicle,toggle)end;
	SetAllowVehicleExplodesOnContact=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x3441CAD2F2231923,vehicle,toggle)end;
	SetVehicleDisableTowing=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x2B6747FAA9DB9D6B,vehicle,toggle)end;
	GetVehicleHasLandingGear=function(vehicle--[[@param vehicle integer]])return InvokeBool(0xE43701C36CAFF1A4,vehicle)end;---@return boolean
	--[=[Works for vehicles with a retractable landing gear

Landing gear states:

0: Deployed
1: Closing
2: Opening
3: Retracted]=]
	ControlLandingGear=function(vehicle--[[@param vehicle integer]],state--[[@param state integer]])return InvokeVoid(0xCFC8BE9A5E1FE575,vehicle,state)end;
	--[=[Landing gear states:

0: Deployed
1: Closing (Retracting)
2: (Landing gear state 2 is never used.)
3: Opening (Deploying)
4: Retracted

Returns the current state of the vehicles landing gear.]=]
	GetLandingGearState=function(vehicle--[[@param vehicle integer]])return InvokeInt(0x9B0F3DCA3DB0F4CD,vehicle)end;---@return integer
	IsAnyVehicleNearPoint=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]])return InvokeBool(0x61E1DD6125A3EEE6,x+.0,y+.0,z+.0,radius+.0)end;---@return boolean
	RequestVehicleHighDetailModel=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0xA6E9FDCB2C76785E,vehicle)end;
	RemoveVehicleHighDetailModel=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0x00689CDE5F7C6787,vehicle)end;
	IsVehicleHighDetail=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x1F25887F3C104278,vehicle)end;---@return boolean
	--[=[REQUEST_VEHICLE_ASSET(GET_HASH_KEY(cargobob3), 3);

vehicle found that have asset's:
cargobob3
submersible
blazer]=]
	RequestVehicleAsset=function(vehicleHash--[[@param vehicleHash integer]],vehicleAsset--[[@param vehicleAsset integer]])return InvokeVoid(0x81A15811460FAB3A,vehicleHash,vehicleAsset)end;
	HasVehicleAssetLoaded=function(vehicleAsset--[[@param vehicleAsset integer]])return InvokeBool(0x1BBE0523B8DB9A21,vehicleAsset)end;---@return boolean
	RemoveVehicleAsset=function(vehicleAsset--[[@param vehicleAsset integer]])return InvokeVoid(0xACE699C71AB9DEB5,vehicleAsset)end;
	--[=[Sets how much the crane on the tow truck is raised, where 0.0 is fully lowered and 1.0 is fully raised.]=]
	SetVehicleTowTruckArmPosition=function(vehicle--[[@param vehicle integer]],position--[[@param position number]])return InvokeVoid(0xFE54B92A344583CA,vehicle,position+.0)end;
	--[=[HookOffset defines where the hook is attached. leave at 0 for default attachment.]=]
	AttachVehicleToTowTruck=function(towTruck--[[@param towTruck integer]],vehicle--[[@param vehicle integer]],rear--[[@param rear boolean]],hookOffsetX--[[@param hookOffsetX number]],hookOffsetY--[[@param hookOffsetY number]],hookOffsetZ--[[@param hookOffsetZ number]])return InvokeVoid(0x29A16F8D621C4508,towTruck,vehicle,rear,hookOffsetX+.0,hookOffsetY+.0,hookOffsetZ+.0)end;
	--[=[First two parameters swapped. Scripts verify that towTruck is the first parameter, not the second.]=]
	DetachVehicleFromTowTruck=function(towTruck--[[@param towTruck integer]],vehicle--[[@param vehicle integer]])return InvokeVoid(0xC2DB6B6708350ED8,towTruck,vehicle)end;
	DetachVehicleFromAnyTowTruck=function(vehicle--[[@param vehicle integer]])return InvokeBool(0xD0E9CE05A1E68CD8,vehicle)end;---@return boolean
	--[=[Scripts verify that towTruck is the first parameter, not the second.]=]
	IsVehicleAttachedToTowTruck=function(towTruck--[[@param towTruck integer]],vehicle--[[@param vehicle integer]])return InvokeBool(0x146DF9EC4C4B9FD4,towTruck,vehicle)end;---@return boolean
	GetEntityAttachedToTowTruck=function(towTruck--[[@param towTruck integer]])return InvokeInt(0xEFEA18DCF10F8F75,towTruck)end;---@return integer
	SetVehicleAutomaticallyAttaches=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 boolean]],p2--[[@param p2 any]])return InvokeInt(0x8BA6F76BC53A1493,vehicle,p1,p2)end;---@return integer
	--[=[Sets the arm position of a bulldozer. Position must be a value between 0.0 and 1.0. Ignored when `p2` is set to false, instead incrementing arm position by 0.1 (or 10%).]=]
	SetVehicleBulldozerArmPosition=function(vehicle--[[@param vehicle integer]],position--[[@param position number]],p2--[[@param p2 boolean]])return InvokeVoid(0xF8EBCCC96ADB9FB7,vehicle,position+.0,p2)end;
	SetVehicleTankTurretPosition=function(vehicle--[[@param vehicle integer]],position--[[@param position number]],p2--[[@param p2 boolean]])return InvokeVoid(0x56B94C6D7127DFBA,vehicle,position+.0,p2)end;
	SetVehicleTurretTarget=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 boolean]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],p5--[[@param p5 boolean]])return InvokeVoid(0x0581730AB9380412,vehicle,p1,x+.0,y+.0,z+.0,p5)end;
	SetVehicleTankStationary=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 boolean]])return InvokeVoid(0x737E398138550FFF,vehicle,p1)end;
	SetVehicleTurretSpeedThisFrame=function(vehicle--[[@param vehicle integer]],speed--[[@param speed number]])return InvokeVoid(0x1093408B4B9D1146,vehicle,speed+.0)end;
	DisableVehicleTurretMovementThisFrame=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0x32CAEDF24A583345,vehicle)end;
	SetVehicleFlightNozzlePosition=function(vehicle--[[@param vehicle integer]],angleRatio--[[@param angleRatio number]])return InvokeVoid(0x30D779DE7C4F6DD3,vehicle,angleRatio+.0)end;
	SetVehicleFlightNozzlePositionImmediate=function(vehicle--[[@param vehicle integer]],angle--[[@param angle number]])return InvokeVoid(0x9AA47FFF660CB932,vehicle,angle+.0)end;
	GetVehicleFlightNozzlePosition=function(plane--[[@param plane integer]])return InvokeFloat(0xDA62027C8BDB326E,plane)end;---@return number
	--[=[True stops vtols from switching modes. Doesn't stop the sound though.]=]
	SetDisableVerticalFlightModeTransition=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xCE2B43770B655F8F,vehicle,toggle)end;
	GenerateVehicleCreationPosFromPaths=function(outVec--[[@param outVec V3*]],p1--[[@param p1 any]],outVec1--[[@param outVec1 V3*]],p3--[[@param p3 any]],p4--[[@param p4 any]],p5--[[@param p5 any]],p6--[[@param p6 any]],p7--[[@param p7 any]],p8--[[@param p8 any]])return InvokeBool(0xA4822F1CF23F4810,outVec,p1,outVec1,p3,p4,p5,p6,p7,p8)end;---@return boolean
	--[=[On accelerating, spins the driven wheels with the others braked, so you don't go anywhere.]=]
	SetVehicleBurnout=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xFB8794444A7D60FB,vehicle,toggle)end;
	--[=[Returns whether the specified vehicle is currently in a burnout.


vb.net
Public Function isVehicleInBurnout(vh As Vehicle) As Boolean
        Return Native.Function.Call(Of Boolean)(Hash.IS_VEHICLE_IN_BURNOUT, vh)
    End Function]=]
	IsVehicleInBurnout=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x1297A88E081430EB,vehicle)end;---@return boolean
	--[=[Reduces grip significantly so it's hard to go anywhere.]=]
	SetVehicleReduceGrip=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x222FF6A823D122E2,vehicle,toggle)end;
	--[=[val is 0-3
Often used in conjunction with: SET_VEHICLE_REDUCE_GRIP]=]
	SetVehicleReduceGripLevel=function(vehicle--[[@param vehicle integer]],val--[[@param val integer]])return InvokeVoid(0x6DEE944E1EE90CFB,vehicle,val)end;
	--[=[Sets the turn signal enabled for a vehicle.
Set turnSignal to 1 for left light, 0 for right light.]=]
	SetVehicleIndicatorLights=function(vehicle--[[@param vehicle integer]],turnSignal--[[@param turnSignal integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xB5D45264751B7DF0,vehicle,turnSignal,toggle)end;
	SetVehicleBrakeLights=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x92B35082E0B42F66,vehicle,toggle)end;
	SetVehicleTailLights=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x5815BD2763178DF4,vehicle,toggle)end;
	SetVehicleHandbrake=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x684785568EF26A22,vehicle,toggle)end;
	SetVehicleBrake=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xE4E2FD323574965C,vehicle,toggle)end;
	InstantlyFillVehiclePopulation=function()return InvokeVoid(0x48ADC8A773564670)end;
	HasInstantFillVehiclePopulationFinished=function()return InvokeBool(0x91D6DD290888CBAB)end;---@return boolean
	NetworkEnableEmptyCrowdingVehiclesRemoval=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x51DB102F4A3BA5E0,toggle)end;
	--[=[Default:1000||This sets a value which is used when NETWORK_ENABLE_EMPTY_CROWDING_VEHICLES_REMOVAL(true) is called each frame.]=]
	NetworkCapEmptyCrowdingVehiclesRemoval=function(p0--[[@param p0 integer]])return InvokeVoid(0xA4A9A4C40E615885,p0)end;
	--[=[Gets the trailer of a vehicle and puts it into the trailer parameter.]=]
	GetVehicleTrailerVehicle=function(vehicle--[[@param vehicle integer]],trailer--[[@param trailer integer*]])return InvokeBool(0x1CDD6BADC297830D,vehicle,trailer)end;---@return boolean
	GetVehicleTrailerParentVehicle=function(trailer--[[@param trailer integer]])return InvokeInt(0x80D9D32636369C92,trailer)end;---@return integer
	--[=[vehicle must be a plane]=]
	SetVehicleUsesLargeRearRamp=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xCAC66558B944DA67,vehicle,toggle)end;
	SetVehicleRudderBroken=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x09606148B6C71DEF,vehicle,toggle)end;
	SetConvertibleRoofLatchState=function(vehicle--[[@param vehicle integer]],state--[[@param state boolean]])return InvokeVoid(0x1A78AD3D8240536F,vehicle,state)end;
	GetVehicleEstimatedMaxSpeed=function(vehicle--[[@param vehicle integer]])return InvokeFloat(0x53AF99BAA671CA47,vehicle)end;---@return number
	GetVehicleMaxBraking=function(vehicle--[[@param vehicle integer]])return InvokeFloat(0xAD7E85FC227197C4,vehicle)end;---@return number
	GetVehicleMaxTraction=function(vehicle--[[@param vehicle integer]])return InvokeFloat(0xA132FB5370554DB0,vehicle)end;---@return number
	--[=[static - max acceleration]=]
	GetVehicleAcceleration=function(vehicle--[[@param vehicle integer]])return InvokeFloat(0x5DD35C8D074E57AE,vehicle)end;---@return number
	--[=[Returns max speed (without mods) of the specified vehicle model in m/s.

Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json]=]
	GetVehicleModelEstimatedMaxSpeed=function(modelHash--[[@param modelHash integer]])return InvokeFloat(0xF417C2502FFFED43,modelHash)end;---@return number
	--[=[Returns max braking of the specified vehicle model.

Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json]=]
	GetVehicleModelMaxBraking=function(modelHash--[[@param modelHash integer]])return InvokeFloat(0xDC53FD41B4ED944C,modelHash)end;---@return number
	--[=[Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json]=]
	GetVehicleModelMaxBrakingMaxMods=function(modelHash--[[@param modelHash integer]])return InvokeFloat(0xBFBA3BA79CFF7EBF,modelHash)end;---@return number
	--[=[Returns max traction of the specified vehicle model.

Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json]=]
	GetVehicleModelMaxTraction=function(modelHash--[[@param modelHash integer]])return InvokeFloat(0x539DE94D44FDFD0D,modelHash)end;---@return number
	--[=[Returns the acceleration of the specified model.

Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json]=]
	GetVehicleModelAcceleration=function(modelHash--[[@param modelHash integer]])return InvokeFloat(0x8C044C5C84505B6A,modelHash)end;---@return number
	--[=[9.8 * thrust if air vehicle, else 0.38 + drive force?

Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json]=]
	GetVehicleModelAccelerationMaxMods=function(modelHash--[[@param modelHash integer]])return InvokeFloat(0x53409B5163D5B846,modelHash)end;---@return number
	--[=[Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json]=]
	GetFlyingVehicleModelAgility=function(modelHash--[[@param modelHash integer]])return InvokeFloat(0xC6AD107DDC9054CC,modelHash)end;---@return number
	--[=[Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json]=]
	GetBoatVehicleModelAgility=function(modelHash--[[@param modelHash integer]])return InvokeFloat(0x5AA3F878A178C4FC,modelHash)end;---@return number
	GetVehicleClassEstimatedMaxSpeed=function(vehicleClass--[[@param vehicleClass integer]])return InvokeFloat(0x00C09F246ABEDD82,vehicleClass)end;---@return number
	GetVehicleClassMaxTraction=function(vehicleClass--[[@param vehicleClass integer]])return InvokeFloat(0xDBC86D85C5059461,vehicleClass)end;---@return number
	GetVehicleClassMaxAgility=function(vehicleClass--[[@param vehicleClass integer]])return InvokeFloat(0x4F930AD022D6DE3B,vehicleClass)end;---@return number
	GetVehicleClassMaxAcceleration=function(vehicleClass--[[@param vehicleClass integer]])return InvokeFloat(0x2F83E7E45D9EA7AE,vehicleClass)end;---@return number
	GetVehicleClassMaxBraking=function(vehicleClass--[[@param vehicleClass integer]])return InvokeFloat(0x4BF54C16EC8FEC03,vehicleClass)end;---@return number
	AddRoadNodeSpeedZone=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]],speed--[[@param speed number]],p5--[[@param p5 boolean]])return InvokeInt(0x2CE544C68FB812A0,x+.0,y+.0,z+.0,radius+.0,speed+.0,p5)end;---@return integer
	RemoveRoadNodeSpeedZone=function(speedzone--[[@param speedzone integer]])return InvokeBool(0x1033371FC8E842A7,speedzone)end;---@return boolean
	OpenBombBayDoors=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0x87E7F24270732CB1,vehicle)end;
	CloseBombBayDoors=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0x3556041742A0DC74,vehicle)end;
	--[=[Returns true when the bomb bay doors of this plane are open. False if they're closed.]=]
	GetAreBombBayDoorsOpen=function(aircraft--[[@param aircraft integer]])return InvokeBool(0xD0917A423314BBA8,aircraft)end;---@return boolean
	--[=[Possibly: Returns whether the searchlight (found on police vehicles) is toggled on.

@Author Nac]=]
	IsVehicleSearchlightOn=function(vehicle--[[@param vehicle integer]])return InvokeBool(0xC0F97FCE55094987,vehicle)end;---@return boolean
	--[=[Only works during nighttime.]=]
	SetVehicleSearchlight=function(heli--[[@param heli integer]],toggle--[[@param toggle boolean]],canBeUsedByAI--[[@param canBeUsedByAI boolean]])return InvokeVoid(0x14E85C5EE7A4D542,heli,toggle,canBeUsedByAI)end;
	DoesVehicleHaveSearchlight=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x99015ED7DBEA5113,vehicle)end;---@return boolean
	--[=[Check if a vehicle seat is accessible. If you park your vehicle near a wall and the ped cannot enter/exit this side, the return value toggles from true (not blocked) to false (blocked).

seatIndex  = -1 being the driver seat.
Use GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle) - 1 for last seat index.
side = only relevant for bikes/motorcycles to check if the left (false)/right (true) side is blocked.
onEnter = check if you can enter (true) or exit (false) a vehicle.]=]
	IsEntryPointForSeatClear=function(ped--[[@param ped integer]],vehicle--[[@param vehicle integer]],seatIndex--[[@param seatIndex integer]],side--[[@param side boolean]],onEnter--[[@param onEnter boolean]])return InvokeBool(0x639431E895B9AA57,ped,vehicle,seatIndex,side,onEnter)end;---@return boolean
	--[=[doorId: see SET_VEHICLE_DOOR_SHUT]=]
	GetEntryPointPosition=function(vehicle--[[@param vehicle integer]],doorId--[[@param doorId integer]])return InvokeV3(0xC0572928C0ABFDA3,vehicle,doorId)end;---@return V3
	CanShuffleSeat=function(vehicle--[[@param vehicle integer]],seatIndex--[[@param seatIndex integer]])return InvokeBool(0x30785D90C956BF35,vehicle,seatIndex)end;---@return boolean
	GetNumModKits=function(vehicle--[[@param vehicle integer]])return InvokeInt(0x33F2E3FE70EAAE1D,vehicle)end;---@return integer
	--[=[Set modKit to 0 if you plan to call SET_VEHICLE_MOD. That's what the game does. Most body modifications through SET_VEHICLE_MOD will not take effect until this is set to 0.

Full list of vehicle mod kits and mods by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleModKits.json]=]
	SetVehicleModKit=function(vehicle--[[@param vehicle integer]],modKit--[[@param modKit integer]])return InvokeVoid(0x1F2AA07F00B3217A,vehicle,modKit)end;
	GetVehicleModKit=function(vehicle--[[@param vehicle integer]])return InvokeInt(0x6325D1A044AE510D,vehicle)end;---@return integer
	GetVehicleModKitType=function(vehicle--[[@param vehicle integer]])return InvokeInt(0xFC058F5121E54C32,vehicle)end;---@return integer
	--[=[Returns an int

Wheel Types:
0: Sport
1: Muscle
2: Lowrider
3: SUV
4: Offroad
5: Tuner
6: Bike Wheels
7: High End
8: Benny's Originals
9: Benny's Bespoke
10: Racing
11: Street
12: Track

Tested in Los Santos Customs]=]
	GetVehicleWheelType=function(vehicle--[[@param vehicle integer]])return InvokeInt(0xB3ED1BFB4BE636DC,vehicle)end;---@return integer
	--[=[0: Sport
1: Muscle
2: Lowrider
3: SUV
4: Offroad
5: Tuner
6: Bike Wheels
7: High End
8: Benny's Originals
9: Benny's Bespoke
10: Racing
11: Street
12: Track]=]
	SetVehicleWheelType=function(vehicle--[[@param vehicle integer]],WheelType--[[@param WheelType integer]])return InvokeVoid(0x487EB21CC7295BA1,vehicle,WheelType)end;
	--[=[paintType:
0: Normal
1: Metallic
2: Pearl
3: Matte
4: Metal
5: Chrome
6: Chameleon]=]
	GetNumModColors=function(paintType--[[@param paintType integer]],p1--[[@param p1 boolean]])return InvokeInt(0xA551BE18C11A476D,paintType,p1)end;---@return integer
	--[=[paintType:
0: Normal
1: Metallic
2: Pearl
3: Matte
4: Metal
5: Chrome
6: Chameleon

color: number of the color.

p3 seems to always be 0.

Full list of vehicle colors and vehicle plates by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json]=]
	SetVehicleModColor1=function(vehicle--[[@param vehicle integer]],paintType--[[@param paintType integer]],color--[[@param color integer]],pearlescentColor--[[@param pearlescentColor integer]])return InvokeVoid(0x43FEB945EE7F85B8,vehicle,paintType,color,pearlescentColor)end;
	--[=[Changes the secondary paint type and color
paintType:
0: Normal
1: Metallic
2: Pearl
3: Matte
4: Metal
5: Chrome
6: Chameleon

color: number of the color

Full list of vehicle colors and vehicle plates by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json]=]
	SetVehicleModColor2=function(vehicle--[[@param vehicle integer]],paintType--[[@param paintType integer]],color--[[@param color integer]])return InvokeVoid(0x816562BADFDEC83E,vehicle,paintType,color)end;
	GetVehicleModColor1=function(vehicle--[[@param vehicle integer]],paintType--[[@param paintType integer*]],color--[[@param color integer*]],pearlescentColor--[[@param pearlescentColor integer*]])return InvokeVoid(0xE8D65CA700C9A693,vehicle,paintType,color,pearlescentColor)end;
	GetVehicleModColor2=function(vehicle--[[@param vehicle integer]],paintType--[[@param paintType integer*]],color--[[@param color integer*]])return InvokeVoid(0x81592BE4E3878728,vehicle,paintType,color)end;
	--[=[Returns a string which is the codename of the vehicle's currently selected primary color

p1 is always 0]=]
	GetVehicleModColor1Name=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 boolean]])return InvokeString(0xB45085B721EFD38C,vehicle,p1)end;---@return string
	--[=[Returns a string which is the codename of the vehicle's currently selected secondary color]=]
	GetVehicleModColor2Name=function(vehicle--[[@param vehicle integer]])return InvokeString(0x4967A516ED23A5A1,vehicle)end;---@return string
	HaveVehicleModsStreamedIn=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x9A83F5F9963775EF,vehicle)end;---@return boolean
	--[=[Returns true for any mod part listed in GEN9_EXCLUSIVE_ASSETS_VEHICLES_FILE.]=]
	IsVehicleModGen9Exclusive=function(vehicle--[[@param vehicle integer]],modType--[[@param modType integer]],modIndex--[[@param modIndex integer]])return InvokeBool(0x00834EAC4A96E010,vehicle,modType,modIndex)end;---@return boolean
	--[=[In b944, there are 50 (0 - 49) mod types.

Sets the vehicle mod.
The vehicle must have a mod kit first.

Any out of range ModIndex is stock.

#Mod Type
Spoilers - 0
Front Bumper - 1
Rear Bumper - 2
Side Skirt - 3
Exhaust - 4
Frame - 5
Grille - 6
Hood - 7
Fender - 8
Right Fender - 9
Roof - 10
Engine - 11
Brakes - 12
Transmission - 13
Horns - 14 (modIndex from 0 to 51)
Suspension - 15
Armor - 16
Front Wheels - 23
Back Wheels - 24 //only for motocycles
Plate holders - 25
Trim Design - 27
Ornaments - 28
Dial Design - 30
Steering Wheel - 33
Shifter Leavers - 34
Plaques - 35
Hydraulics - 38
Livery - 48

ENUMS: https://pastebin.com/QzEAn02v]=]
	SetVehicleMod=function(vehicle--[[@param vehicle integer]],modType--[[@param modType integer]],modIndex--[[@param modIndex integer]],customTires--[[@param customTires boolean]])return InvokeVoid(0x6AF0636DDEDCB6DD,vehicle,modType,modIndex,customTires)end;
	--[=[In b944, there are 50 (0 - 49) mod types. See SET_VEHICLE_MOD for the list.

Returns -1 if the vehicle mod is stock]=]
	GetVehicleMod=function(vehicle--[[@param vehicle integer]],modType--[[@param modType integer]])return InvokeInt(0x772960298DA26FDB,vehicle,modType)end;---@return integer
	--[=[Only used for wheels(ModType = 23/24) Returns true if the wheels are custom wheels]=]
	GetVehicleModVariation=function(vehicle--[[@param vehicle integer]],modType--[[@param modType integer]])return InvokeInt(0xB3924ECD70E095DC,vehicle,modType)end;---@return integer
	--[=[Returns how many possible mods a vehicle has for a given mod type]=]
	GetNumVehicleMods=function(vehicle--[[@param vehicle integer]],modType--[[@param modType integer]])return InvokeInt(0xE38E9162A2500646,vehicle,modType)end;---@return integer
	RemoveVehicleMod=function(vehicle--[[@param vehicle integer]],modType--[[@param modType integer]])return InvokeVoid(0x92D619E420858204,vehicle,modType)end;
	--[=[Toggles:
UNK17 - 17
Turbo - 18
UNK19 - 19
Tire Smoke - 20
UNK21 - 21
Xenon Headlights - 22]=]
	ToggleVehicleMod=function(vehicle--[[@param vehicle integer]],modType--[[@param modType integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x2A1F4F37F95BAD08,vehicle,modType,toggle)end;
	IsToggleModOn=function(vehicle--[[@param vehicle integer]],modType--[[@param modType integer]])return InvokeBool(0x84B233A8C8FC8AE7,vehicle,modType)end;---@return boolean
	--[=[Returns the text label of a mod type for a given vehicle

Use GET_FILENAME_FOR_AUDIO_CONVERSATION to get the part name in the game's language]=]
	GetModTextLabel=function(vehicle--[[@param vehicle integer]],modType--[[@param modType integer]],modValue--[[@param modValue integer]])return InvokeString(0x8935624F8C5592CC,vehicle,modType,modValue)end;---@return string
	--[=[Returns the name for the type of vehicle mod(Armour, engine etc)
]=]
	GetModSlotName=function(vehicle--[[@param vehicle integer]],modType--[[@param modType integer]])return InvokeString(0x51F0FEB9F6AE98C0,vehicle,modType)end;---@return string
	--[=[Returns the text label of the vehicle's liveryIndex, as specified by the liveryNames section of the vehicle's modkit data in the carcols file.

example 

int count = VEHICLE::GET_VEHICLE_LIVERY_COUNT(veh);
for (int i = 0; i < count; i++)  
  {
     const char* LiveryName = VEHICLE::GET_LIVERY_NAME(veh, i);
  }


this example will work fine to fetch all names 
for example for Sanchez we get 

SANC_LV1
SANC_LV2
SANC_LV3
SANC_LV4
SANC_LV5


Use GET_FILENAME_FOR_AUDIO_CONVERSATION, to get the localized livery name.

Full list of vehicle mod kits and mods by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleModKits.json]=]
	GetLiveryName=function(vehicle--[[@param vehicle integer]],liveryIndex--[[@param liveryIndex integer]])return InvokeString(0xB4C7A93837C91A1F,vehicle,liveryIndex)end;---@return string
	GetVehicleModModifierValue=function(vehicle--[[@param vehicle integer]],modType--[[@param modType integer]],modIndex--[[@param modIndex integer]])return InvokeInt(0x90A38E9838E0A8C1,vehicle,modType,modIndex)end;---@return integer
	--[=[Can be used for IS_DLC_VEHICLE_MOD and GET_DLC_VEHICLE_MOD_LOCK_HASH]=]
	GetVehicleModIdentifierHash=function(vehicle--[[@param vehicle integer]],modType--[[@param modType integer]],modIndex--[[@param modIndex integer]])return InvokeInt(0x4593CF82AA179706,vehicle,modType,modIndex)end;---@return integer
	PreloadVehicleMod=function(vehicle--[[@param vehicle integer]],modType--[[@param modType integer]],modIndex--[[@param modIndex integer]])return InvokeVoid(0x758F49C24925568A,vehicle,modType,modIndex)end;
	HasPreloadModsFinished=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x06F43E5175EB6D96,vehicle)end;---@return boolean
	ReleasePreloadMods=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0x445D79F995508307,vehicle)end;
	--[=[Sets the tire smoke's color of this vehicle.

vehicle: The vehicle that is the target of this method.
r: The red level in the RGB color code.
g: The green level in the RGB color code.
b: The blue level in the RGB color code.

Note: setting r,g,b to 0 will give the car the "Patriot" tire smoke.]=]
	SetVehicleTyreSmokeColor=function(vehicle--[[@param vehicle integer]],r--[[@param r integer]],g--[[@param g integer]],b--[[@param b integer]])return InvokeVoid(0xB5BA80F839791C0F,vehicle,r,g,b)end;
	GetVehicleTyreSmokeColor=function(vehicle--[[@param vehicle integer]],r--[[@param r integer*]],g--[[@param g integer*]],b--[[@param b integer*]])return InvokeVoid(0xB635392A4938B3C3,vehicle,r,g,b)end;
	--[=[enum WindowTints
{
 WINDOWTINT_NONE,
  WINDOWTINT_PURE_BLACK,
    WINDOWTINT_DARKSMOKE,
 WINDOWTINT_LIGHTSMOKE,
    WINDOWTINT_STOCK,
 WINDOWTINT_LIMO,
  WINDOWTINT_GREEN
};
Full list of all vehicle window tints by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json]=]
	SetVehicleWindowTint=function(vehicle--[[@param vehicle integer]],tint--[[@param tint integer]])return InvokeVoid(0x57C51E6BAD752696,vehicle,tint)end;
	GetVehicleWindowTint=function(vehicle--[[@param vehicle integer]])return InvokeInt(0x0EE21293DAD47C95,vehicle)end;---@return integer
	GetNumVehicleWindowTints=function()return InvokeInt(0x9D1224004B3A6707)end;---@return integer
	--[=[What's this for? Primary and Secondary RGB have their own natives and this one doesn't seem specific.]=]
	GetVehicleColor=function(vehicle--[[@param vehicle integer]],r--[[@param r integer*]],g--[[@param g integer*]],b--[[@param b integer*]])return InvokeVoid(0xF3CC740D36221548,vehicle,r,g,b)end;
	--[=[Some kind of flags.]=]
	GetVehicleColoursWhichCanBeSet=function(vehicle--[[@param vehicle integer]])return InvokeInt(0xEEBFC7A7EFDC35B4,vehicle)end;---@return integer
	--[=[iVar3 = get_vehicle_cause_of_destruction(uLocal_248[iVar2]);
if (iVar3 == joaat("weapon_stickybomb"))
{
	func_171(726);
	iLocal_260 = 1;
}]=]
	GetVehicleCauseOfDestruction=function(vehicle--[[@param vehicle integer]])return InvokeInt(0xE495D1EF4C91FD20,vehicle)end;---@return integer
	--[=[Used for helis.]=]
	OverridePlaneDamageThrehsold=function(vehicle--[[@param vehicle integer]],health--[[@param health number]])return InvokeVoid(0x5EE5632F47AE9695,vehicle,health+.0)end;
	--[=[From the driver's perspective, is the left headlight broken.]=]
	GetIsLeftVehicleHeadlightDamaged=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x5EF77C9ADD3B11A3,vehicle)end;---@return boolean
	--[=[From the driver's perspective, is the right headlight broken.]=]
	GetIsRightVehicleHeadlightDamaged=function(vehicle--[[@param vehicle integer]])return InvokeBool(0xA7ECB73355EB2F20,vehicle)end;---@return boolean
	--[=[Returns true when both headlights are broken. This does not include extralights.]=]
	GetBothVehicleHeadlightsDamaged=function(vehicle--[[@param vehicle integer]])return InvokeBool(0xEC69ADF931AAE0C3,vehicle)end;---@return boolean
	ModifyVehicleTopSpeed=function(vehicle--[[@param vehicle integer]],value--[[@param value number]])return InvokeVoid(0x93A3996368C94158,vehicle,value+.0)end;
	--[=[To reset the max speed, set the `speed` value to `0.0` or lower.]=]
	SetVehicleMaxSpeed=function(vehicle--[[@param vehicle integer]],speed--[[@param speed number]])return InvokeVoid(0xBAA045B4E42F3C06,vehicle,speed+.0)end;
	--[=[Has something to do with trains. Always precedes SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED.
May be true that it can be used with trains not sure, but not specifically for trains. Go find Xbox360 decompiled scripts and search for 'func_1333' in freemode.c it isn't used just for trains. Thanks for the info tho.]=]
	SetVehicleStaysFrozenWhenCleanedUp=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x1CF38D529D7441D9,vehicle,toggle)end;
	SetVehicleActAsIfHighSpeedForFragSmashing=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 boolean]])return InvokeVoid(0x1F9FB66F3A3842D2,vehicle,p1)end;
	--[=[Sets some bit and float of vehicle. float is >= 0]=]
	SetPedsCanFallOffThisVehicleFromLargeFallDamage=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]],p2--[[@param p2 number]])return InvokeVoid(0x59C3757B3B7408E8,vehicle,toggle,p2+.0)end;
	AddVehicleCombatAngledAvoidanceArea=function(p0--[[@param p0 number]],p1--[[@param p1 number]],p2--[[@param p2 number]],p3--[[@param p3 number]],p4--[[@param p4 number]],p5--[[@param p5 number]],p6--[[@param p6 number]])return InvokeInt(0x54B0F614960F4A5F,p0+.0,p1+.0,p2+.0,p3+.0,p4+.0,p5+.0,p6+.0)end;---@return integer
	RemoveVehicleCombatAvoidanceArea=function(p0--[[@param p0 integer]])return InvokeVoid(0xE30524E1871F481D,p0)end;
	IsAnyPedRappellingFromHeli=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x291E373D483E7EE7,vehicle)end;---@return boolean
	--[=[<1.0 - Decreased torque
=1.0 - Default torque
>1.0 - Increased torque

Negative values will cause the vehicle to go backwards instead of forwards while accelerating.

value - is between 0.2 and 1.8 in the decompiled scripts. 

This needs to be called every frame to take effect.]=]
	SetVehicleCheatPowerIncrease=function(vehicle--[[@param vehicle integer]],value--[[@param value number]])return InvokeVoid(0xB59E4BD37AE292DB,vehicle,value+.0)end;
	SetVehicleInfluencesWantedLevel=function(p0--[[@param p0 any]],p1--[[@param p1 boolean]])return InvokeVoid(0x0AD9E8F87FF7C16F,p0,p1)end;
	--[=[Sets the wanted state of this vehicle.]=]
	SetVehicleIsWanted=function(vehicle--[[@param vehicle integer]],state--[[@param state boolean]])return InvokeVoid(0xF7EC25A3EBEEC726,vehicle,state)end;
	--[=[Sets the boat boom position for the `TR3` trailer.
Ratio value is between `0.0` and `1.0`, where `0.0` is 90 degrees to the left of the boat, and `1.0` is just slightly to the right/back of the boat.
To get the current boom position ratio, use GET_BOAT_BOOM_POSITION_RATIO]=]
	SwingBoatBoomToRatio=function(vehicle--[[@param vehicle integer]],ratio--[[@param ratio number]])return InvokeVoid(0xF488C566413B4232,vehicle,ratio+.0)end;
	--[=[Same call as ALLOW_BOAT_BOOM_TO_ANIMATE]=]
	SwingBoatBoomFreely=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xC1F981A6F74F0C23,vehicle,toggle)end;
	AllowBoatBoomToAnimate=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x0F3B4D4E43177236,vehicle,toggle)end;
	GetBoatBoomPositionRatio=function(vehicle--[[@param vehicle integer]])return InvokeFloat(0x6636C535F6CC2725,vehicle)end;---@return number
	DisablePlaneAileron=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0x23428FC53C60919C,vehicle,p1,p2)end;
	--[=[Returns true when in a vehicle, false whilst entering/exiting.]=]
	GetIsVehicleEngineRunning=function(vehicle--[[@param vehicle integer]])return InvokeBool(0xAE31E7DF9B5B132E,vehicle)end;---@return boolean
	SetVehicleUseAlternateHandling=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x1D97D1E3A70A649F,vehicle,toggle)end;
	--[=[Only works on bikes, both X and Y work in the -1 - 1 range.

X forces the bike to turn left or right (-1, 1)
Y forces the bike to lean to the left or to the right (-1, 1)

Example with X -1/Y 1
http://i.imgur.com/TgIuAPJ.jpg]=]
	SetBikeOnStand=function(vehicle--[[@param vehicle integer]],x--[[@param x number]],y--[[@param y number]])return InvokeVoid(0x9CFA4896C3A53CBB,vehicle,x+.0,y+.0)end;
	SetVehicleNotStealableAmbiently=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 boolean]])return InvokeVoid(0xAB04325045427AAE,vehicle,p1)end;
	LockDoorsWhenNoLongerNeeded=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0xCFD778E7904C255E,vehicle)end;
	SetLastDrivenVehicle=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0xACFB2463CC22BED2,vehicle)end;
	GetLastDrivenVehicle=function()return InvokeInt(0xB2D06FAEDE65B577)end;---@return integer
	ClearLastDrivenVehicle=function()return InvokeVoid(0xE01903C47C7AC89E)end;
	SetVehicleHasBeenDrivenFlag=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x02398B627547189C,vehicle,toggle)end;
	SetTaskVehicleGotoPlaneMinHeightAboveTerrain=function(plane--[[@param plane integer]],height--[[@param height integer]])return InvokeVoid(0xB893215D8D4C015B,plane,height)end;
	SetVehicleLodMultiplier=function(vehicle--[[@param vehicle integer]],multiplier--[[@param multiplier number]])return InvokeVoid(0x93AE6A61BE015BF1,vehicle,multiplier+.0)end;
	SetVehicleCanSaveInGarage=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x428BACCDF5E26EAD,vehicle,toggle)end;
	--[=[Also includes some "turnOffBones" when vehicle mods are installed.]=]
	GetVehicleNumOfBrokenOffParts=function(vehicle--[[@param vehicle integer]])return InvokeInt(0x42A4BEB35D372407,vehicle)end;---@return integer
	GetVehicleNumOfBrokenLoosenParts=function(vehicle--[[@param vehicle integer]])return InvokeInt(0x2C8CBFE1EA5FC631,vehicle)end;---@return integer
	SetForceVehicleEngineDamageByBullet=function(p0--[[@param p0 any]],p1--[[@param p1 boolean]])return InvokeVoid(0x4D9D109F63FEE1D4,p0,p1)end;
	--[=[Allows creation of CEventShockingPlaneFlyby, CEventShockingHelicopterOverhead, and other(?) Shocking events]=]
	SetVehicleGeneratesEngineShockingEvents=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x279D50DE5652D935,vehicle,toggle)end;
	--[=[Copies sourceVehicle's damage (broken bumpers, broken lights, etc.) to targetVehicle.]=]
	CopyVehicleDamages=function(sourceVehicle--[[@param sourceVehicle integer]],targetVehicle--[[@param targetVehicle integer]])return InvokeVoid(0xE44A982368A4AF23,sourceVehicle,targetVehicle)end;
	DisableVehicleExplosionBreakOffParts=function()return InvokeVoid(0xF25E02CB9C5818F8)end;
	SetLightsCutoffDistanceTweak=function(distance--[[@param distance number]])return InvokeVoid(0xBC3CCA5844452B06,distance+.0)end;
	--[=[Commands the driver of an armed vehicle (p0) to shoot its weapon at a target (p1). p3, p4 and p5 are the coordinates of the target. Example:

WEAPON::SET_CURRENT_PED_VEHICLE_WEAPON(pilot,MISC::GET_HASH_KEY("VEHICLE_WEAPON_PLANE_ROCKET"));                        VEHICLE::SET_VEHICLE_SHOOT_AT_TARGET(pilot, target, targPos.x, targPos.y, targPos.z);]=]
	SetVehicleShootAtTarget=function(driver--[[@param driver integer]],entity--[[@param entity integer]],xTarget--[[@param xTarget number]],yTarget--[[@param yTarget number]],zTarget--[[@param zTarget number]])return InvokeVoid(0x74CD9A9327A282EA,driver,entity,xTarget+.0,yTarget+.0,zTarget+.0)end;
	GetVehicleLockOnTarget=function(vehicle--[[@param vehicle integer]],entity--[[@param entity integer*]])return InvokeBool(0x8F5EBAB1F260CFCE,vehicle,entity)end;---@return boolean
	SetForceHdVehicle=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x97CE68CB032583F0,vehicle,toggle)end;
	SetVehicleCustomPathNodeStreamingRadius=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 number]])return InvokeVoid(0x182F266C2D9E2BEB,vehicle,p1+.0)end;
	GetVehiclePlateType=function(vehicle--[[@param vehicle integer]])return InvokeInt(0x9CCC9525BF2408E0,vehicle)end;---@return integer
	--[=[in script hook .net 

Vehicle v = ...;
Function.Call(Hash.TRACK_VEHICLE_VISIBILITY, v.Handle);]=]
	TrackVehicleVisibility=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0x64473AEFDCF47DCA,vehicle)end;
	--[=[must be called after TRACK_VEHICLE_VISIBILITY 

it's not instant so probabilly must pass an 'update' to see correct result.]=]
	IsVehicleVisible=function(vehicle--[[@param vehicle integer]])return InvokeBool(0xAA0A52D24FB98293,vehicle)end;---@return boolean
	SetVehicleGravity=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x89F149B6131E57DA,vehicle,toggle)end;
	--[=[Enable/Disables global slipstream physics]=]
	SetEnableVehicleSlipstreaming=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xE6C0C80B8C867537,toggle)end;
	SetVehicleSlipstreamingShouldTimeOut=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xF051D9BFB6BA39C0,toggle)end;
	--[=[Returns a float value between 0.0 and 3.0 related to its slipstream draft (boost/speedup).]=]
	GetVehicleCurrentTimeInSlipStream=function(vehicle--[[@param vehicle integer]])return InvokeFloat(0x36492C2F0D134C56,vehicle)end;---@return number
	--[=[Returns true if the vehicle is being slipstreamed by another vehicle]=]
	IsVehicleProducingSlipStream=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x48C633E94A8142A7,vehicle)end;---@return boolean
	SetVehicleInactiveDuringPlayback=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x06582AFF74894C75,vehicle,toggle)end;
	SetVehicleActiveDuringPlayback=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xDFFCEF48E511DB48,vehicle,toggle)end;
	--[=[Returns false if the vehicle has the FLAG_NO_RESPRAY flag set.]=]
	IsVehicleSprayable=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x8D474C8FAEFF6CDE,vehicle)end;---@return boolean
	SetVehicleEngineCanDegrade=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x983765856F2564F9,vehicle,toggle)end;
	--[=[Adds some kind of shadow to the vehicle.

p1 and p2 use values from 0-255 and both make the shadow darker the lower the value is. -1 disables the effect.]=]
	DisableVehcileDynamicAmbientScales=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 integer]],p2--[[@param p2 integer]])return InvokeVoid(0xF0E4BA16D1DB546C,vehicle,p1,p2)end;
	--[=[Remove the weird shadow applied by DISABLE_VEHCILE_DYNAMIC_AMBIENT_SCALES.]=]
	EnableVehicleDynamicAmbientScales=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0xF87D9F2301F7D206,vehicle)end;
	IsPlaneLandingGearIntact=function(plane--[[@param plane integer]])return InvokeBool(0x4198AB0022B15F87,plane)end;---@return boolean
	ArePlanePropellersIntact=function(plane--[[@param plane integer]])return InvokeBool(0x755D6D5267CBBD7E,plane)end;---@return boolean
	SetPlanePropellerHealth=function(plane--[[@param plane integer]],health--[[@param health number]])return InvokeBool(0x4C815EB175086F84,plane,health+.0)end;---@return boolean
	SetVehicleCanDeformWheels=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x0CDDA42F9E360CA6,vehicle,toggle)end;
	--[=[Only returns true if the vehicle was marked as stolen with SET_VEHICLE_IS_STOLEN.]=]
	IsVehicleStolen=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x4AF9BD80EEBEB453,vehicle)end;---@return boolean
	SetVehicleIsStolen=function(vehicle--[[@param vehicle integer]],isStolen--[[@param isStolen boolean]])return InvokeVoid(0x67B2C79AA7FF5738,vehicle,isStolen)end;
	--[=[This native sets the turbulence multiplier. It only works for planes.
0.0 = no turbulence at all.
1.0 = heavy turbulence.
Works by just calling it once, does not need to be called every tick.]=]
	SetPlaneTurbulenceMultiplier=function(vehicle--[[@param vehicle integer]],multiplier--[[@param multiplier number]])return InvokeVoid(0xAD2D28A1AFDFF131,vehicle,multiplier+.0)end;
	AreWingsOfPlaneIntact=function(plane--[[@param plane integer]])return InvokeBool(0x5991A01434CE9677,plane)end;---@return boolean
	--[=[This native doesn't seem to do anything, might be a debug-only native.

Confirmed, it is a debug native.]=]
	AllowAmbientVehiclesToAvoidAdverseConditions=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0xB264C4D2F2B0A78B,vehicle)end;
	DetachVehicleFromCargobob=function(vehicle--[[@param vehicle integer]],cargobob--[[@param cargobob integer]])return InvokeVoid(0x0E21D3DF1051399D,vehicle,cargobob)end;
	DetachVehicleFromAnyCargobob=function(vehicle--[[@param vehicle integer]])return InvokeBool(0xADF7BE450512C12F,vehicle)end;---@return boolean
	DetachEntityFromCargobob=function(cargobob--[[@param cargobob integer]],entity--[[@param entity integer]])return InvokeBool(0xAF03011701811146,cargobob,entity)end;---@return boolean
	IsVehicleAttachedToCargobob=function(cargobob--[[@param cargobob integer]],vehicleAttached--[[@param vehicleAttached integer]])return InvokeBool(0xD40148F22E81A1D9,cargobob,vehicleAttached)end;---@return boolean
	--[=[Returns attached vehicle (Vehicle in parameter must be cargobob)]=]
	GetVehicleAttachedToCargobob=function(cargobob--[[@param cargobob integer]])return InvokeInt(0x873B82D42AC2B9E5,cargobob)end;---@return integer
	GetEntityAttachedToCargobob=function(p0--[[@param p0 any]])return InvokeInt(0x99093F60746708CA,p0)end;---@return integer
	AttachVehicleToCargobob=function(cargobob--[[@param cargobob integer]],vehicle--[[@param vehicle integer]],p2--[[@param p2 integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0x4127F1D84E347769,cargobob,vehicle,p2,x+.0,y+.0,z+.0)end;
	AttachEntityToCargobob=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]],p5--[[@param p5 any]])return InvokeVoid(0xA1DD82F3CCF9A01E,p0,p1,p2,p3,p4,p5)end;
	--[=[Stops cargobob from being able to detach the attached vehicle.]=]
	SetCargobobForceDontDetachVehicle=function(cargobob--[[@param cargobob integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x571FEB383F629926,cargobob,toggle)end;
	SetCargobobExcludeFromPickupEntity=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x1F34B0626C594380,p0,p1)end;
	CanCargobobPickUpEntity=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeBool(0x2C1D8B3B19E517CC,p0,p1)end;---@return boolean
	--[=[Gets the position of the cargobob hook, in world coords.]=]
	GetAttachedPickUpHookPosition=function(cargobob--[[@param cargobob integer]])return InvokeV3(0xCBDB9B923CACC92D,cargobob)end;---@return V3
	--[=[Returns true only when the hook is active, will return false if the magnet is active]=]
	DoesCargobobHavePickUpRope=function(cargobob--[[@param cargobob integer]])return InvokeBool(0x1821D91AD4B56108,cargobob)end;---@return boolean
	--[=[Drops the Hook/Magnet on a cargobob

state
enum eCargobobHook
{
  CARGOBOB_HOOK = 0,
    CARGOBOB_MAGNET = 1,
};]=]
	CreatePickUpRopeForCargobob=function(cargobob--[[@param cargobob integer]],state--[[@param state integer]])return InvokeVoid(0x7BEB0C7A235F6F3B,cargobob,state)end;
	--[=[Retracts the hook on the cargobob.

Note: after you retract it the natives for dropping the hook no longer work]=]
	RemovePickUpRopeForCargobob=function(cargobob--[[@param cargobob integer]])return InvokeVoid(0x9768CF648F54C804,cargobob)end;
	--[=[min: 1.9f, max: 100.0f]=]
	SetPickupRopeLengthForCargobob=function(cargobob--[[@param cargobob integer]],length1--[[@param length1 number]],length2--[[@param length2 number]],p3--[[@param p3 boolean]])return InvokeVoid(0x877C1EAEAC531023,cargobob,length1+.0,length2+.0,p3)end;
	SetPickupRopeLengthWithoutCreatingRopeForCargobob=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0xC0ED6438E6D39BA8,p0,p1,p2)end;
	SetCargobobPickupRopeDampingMultiplier=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0xCF1182F682F65307,p0,p1)end;
	SetCargobobPickupRopeType=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x0D5F65A8F4EBDAB5,p0,p1)end;
	--[=[Returns true only when the magnet is active, will return false if the hook is active]=]
	DoesCargobobHavePickupMagnet=function(cargobob--[[@param cargobob integer]])return InvokeBool(0x6E08BF5B3722BAC9,cargobob)end;---@return boolean
	--[=[Won't attract or magnetize to any helicopters or planes of course, but that's common sense.]=]
	SetCargobobPickupMagnetActive=function(cargobob--[[@param cargobob integer]],isActive--[[@param isActive boolean]])return InvokeVoid(0x9A665550F8DA349B,cargobob,isActive)end;
	SetCargobobPickupMagnetStrength=function(cargobob--[[@param cargobob integer]],strength--[[@param strength number]])return InvokeVoid(0xBCBFCD9D1DAC19E2,cargobob,strength+.0)end;
	SetCargobobPickupMagnetFalloff=function(cargobob--[[@param cargobob integer]],p1--[[@param p1 number]])return InvokeVoid(0xA17BAD153B51547E,cargobob,p1+.0)end;
	SetCargobobPickupMagnetReducedStrength=function(cargobob--[[@param cargobob integer]],p1--[[@param p1 number]])return InvokeVoid(0x66979ACF5102FD2F,cargobob,p1+.0)end;
	SetCargobobPickupMagnetReducedFalloff=function(cargobob--[[@param cargobob integer]],p1--[[@param p1 number]])return InvokeVoid(0x6D8EAC07506291FB,cargobob,p1+.0)end;
	SetCargobobPickupMagnetPullStrength=function(cargobob--[[@param cargobob integer]],p1--[[@param p1 number]])return InvokeVoid(0xED8286F71A819BAA,cargobob,p1+.0)end;
	SetCargobobPickupMagnetPullRopeLength=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 number]])return InvokeVoid(0x685D5561680D088B,vehicle,p1+.0)end;
	SetCargobobPickupMagnetSetTargetedMode=function(vehicle--[[@param vehicle integer]],cargobob--[[@param cargobob integer]])return InvokeVoid(0xE301BD63E9E13CF0,vehicle,cargobob)end;
	SetCargobobPickupMagnetSetAmbientMode=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0x9BDDC73CC6A115D4,vehicle,p1,p2)end;
	SetCargobobPickupMagnetEnsurePickupEntityUpright=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 boolean]])return InvokeVoid(0x56EB5E94318D3FB6,vehicle,p1)end;
	DoesVehicleHaveWeapons=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x25ECB9F8017D98E0,vehicle)end;---@return boolean
	SetVehicleWillTellOthersToHurry=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 boolean]])return InvokeVoid(0x2C4A1590ABF43E8B,vehicle,p1)end;
	--[=[Full list of weapons by DurtyFree (Search for VEHICLE_*): https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	DisableVehicleWeapon=function(disabled--[[@param disabled boolean]],weaponHash--[[@param weaponHash integer]],vehicle--[[@param vehicle integer]],owner--[[@param owner integer]])return InvokeVoid(0xF4FC6A6F67D8D856,disabled,weaponHash,vehicle,owner)end;
	--[=[Full list of weapons by DurtyFree (Search for VEHICLE_*): https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	IsVehicleWeaponDisabled=function(weaponHash--[[@param weaponHash integer]],vehicle--[[@param vehicle integer]],owner--[[@param owner integer]])return InvokeBool(0x563B65A643ED072E,weaponHash,vehicle,owner)end;---@return boolean
	SetVehicleUsedForPilotSchool=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xE05DD0E9707003A3,vehicle,toggle)end;
	SetVehicleActiveForPedNavigation=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x21115BCD6E44656A,vehicle,toggle)end;
	--[=[Returns an int

Vehicle Classes:
0: Compacts
1: Sedans
2: SUVs
3: Coupes
4: Muscle
5: Sports Classics
6: Sports
7: Super
8: Motorcycles
9: Off-road
10: Industrial
11: Utility
12: Vans
13: Cycles
14: Boats
15: Helicopters
16: Planes
17: Service
18: Emergency
19: Military
20: Commercial
21: Trains

char buffer[128];
std::sprintf(buffer, "VEH_CLASS_%i", VEHICLE::GET_VEHICLE_CLASS(vehicle));

const char* className = HUD::GET_FILENAME_FOR_AUDIO_CONVERSATION(buffer);]=]
	GetVehicleClass=function(vehicle--[[@param vehicle integer]])return InvokeInt(0x29439776AAA00A62,vehicle)end;---@return integer
	--[=[char buffer[128];
std::sprintf(buffer, "VEH_CLASS_%i", VEHICLE::GET_VEHICLE_CLASS_FROM_NAME (hash));

const char* className = HUD::GET_FILENAME_FOR_AUDIO_CONVERSATION(buffer);

Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json]=]
	GetVehicleClassFromName=function(modelHash--[[@param modelHash integer]])return InvokeInt(0xDEDF1C8BD47C2200,modelHash)end;---@return integer
	SetPlayersLastVehicle=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0xBCDF8BAF56C87B6A,vehicle)end;
	SetVehicleCanBeUsedByFleeingPeds=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x300504B23BD3B711,vehicle,toggle)end;
	SetAircraftPilotSkillNoiseScalar=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 number]])return InvokeVoid(0xE5810AC70602F2F5,vehicle,p1+.0)end;
	--[=[Money pickups are created around cars when they explode. Only works when the vehicle model is a car. A single pickup is between 1 and 18 dollars in size. All car models seem to give the same amount of money.

youtu.be/3arlUxzHl5Y 
i.imgur.com/WrNpYFs.jpg]=]
	SetVehicleDropsMoneyWhenBlownUp=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x068F64F2470F9656,vehicle,toggle)end;
	SetVehicleKeepEngineOnWhenAbandoned=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xB8FBC8B1330CA9B4,vehicle,toggle)end;
	--[=[Seems to copy some values in vehicle]=]
	SetVehicleImpatienceTimer=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 any]])return InvokeVoid(0x6A973569BA094650,vehicle,p1)end;
	--[=[Use the "AIHandling" string found in handling.meta]=]
	SetVehicleHandlingOverride=function(vehicle--[[@param vehicle integer]],hash--[[@param hash integer]])return InvokeVoid(0x10655FAB9915623D,vehicle,hash)end;
	--[=[Max value is 32767]=]
	SetVehicleExtendedRemovalRange=function(vehicle--[[@param vehicle integer]],range--[[@param range integer]])return InvokeVoid(0x79DF7E806202CE01,vehicle,range)end;
	SetVehicleSteeringBiasScalar=function(p0--[[@param p0 any]],p1--[[@param p1 number]])return InvokeVoid(0x9007A2F21DC108D4,p0,p1+.0)end;
	--[=[value between 0.0 and 1.0]=]
	SetHeliControlLaggingRateScalar=function(helicopter--[[@param helicopter integer]],multiplier--[[@param multiplier number]])return InvokeVoid(0x6E0859B530A365CC,helicopter,multiplier+.0)end;
	--[=[Seems to be related to the metal parts, not tyres (like i was expecting lol)]=]
	SetVehicleFrictionOverride=function(vehicle--[[@param vehicle integer]],friction--[[@param friction number]])return InvokeVoid(0x1837AF7C627009BA,vehicle,friction+.0)end;
	SetVehicleWheelsCanBreakOffWhenBlowUp=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xA37B9A517B133349,vehicle,toggle)end;
	ArePlaneControlPanelsIntact=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 boolean]])return InvokeBool(0xF78F94D60248C737,vehicle,p1)end;---@return boolean
	SetVehicleCeilingHeight=function(vehicle--[[@param vehicle integer]],height--[[@param height number]])return InvokeVoid(0xA46413066687A328,vehicle,height+.0)end;
	SetVehicleNoExplosionDamageFromDriver=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x5E569EC46EC21CAE,vehicle,toggle)end;
	ClearVehicleRouteHistory=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0x6D6AF961B72728AE,vehicle)end;
	DoesVehicleExistWithDecorator=function(decorator--[[@param decorator string]])return InvokeInt(0x956B409B984D9BF7,decorator)end;---@return integer
	--[=[Used to be incorrectly named SET_VEHICLE_EXCLUSIVE_DRIVER
Toggles a flag related to SET_VEHICLE_EXCLUSIVE_DRIVER, however, doesn't enable that feature (or trigger script events related to it).]=]
	SetVehicleAiCanUseExclusiveSeats=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x41062318F23ED854,vehicle,toggle)end;
	--[=[index: 0 - 1

Used to be incorrectly named _SET_VEHICLE_EXCLUSIVE_DRIVER_2]=]
	SetVehicleExclusiveDriver=function(vehicle--[[@param vehicle integer]],ped--[[@param ped integer]],index--[[@param index integer]])return InvokeVoid(0xB5C51B5502E85E83,vehicle,ped,index)end;
	IsPedExclusiveDriverOfVehicle=function(ped--[[@param ped integer]],vehicle--[[@param vehicle integer]],outIndex--[[@param outIndex integer*]])return InvokeBool(0xB09D25E77C33EB3F,ped,vehicle,outIndex)end;---@return boolean
	DisableIndividualPlanePropeller=function(vehicle--[[@param vehicle integer]],propeller--[[@param propeller integer]])return InvokeVoid(0x500873A45724C863,vehicle,propeller)end;
	SetVehicleForceAfterburner=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xB055A34527CB8FD7,vehicle,toggle)end;
	--[=[R* used it to "remove" vehicle windows when "nightshark" had some mod, which adding some kind of armored windows. When enabled, you can't break vehicles glass. All your bullets wiil shoot through glass. You also will not able to break the glass with any other way (hitting and etc)]=]
	SetDontProcessVehicleGlass=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x1087BC8EC540DAEB,vehicle,toggle)end;
	SetDisableWantedConesResponse=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x4AD280EB48B2D8E6,vehicle,toggle)end;
	SetUseDesiredZCruiseSpeedForLanding=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xB68CFAF83A02768D,vehicle,toggle)end;
	SetArriveDistanceOverrideForVehiclePersuitAttack=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 number]])return InvokeVoid(0x0205F5365292D2EB,vehicle,p1+.0)end;
	SetVehicleReadyForCleanup=function(p0--[[@param p0 any]])return InvokeVoid(0xCF9159024555488C,p0)end;
	--[=[Toggles to render distant vehicles. They may not be vehicles but images to look like vehicles.]=]
	SetDistantCarsEnabled=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xF796359A959DF65D,toggle)end;
	--[=[Sets the color of the neon lights of the specified vehicle.]=]
	SetVehicleNeonColour=function(vehicle--[[@param vehicle integer]],r--[[@param r integer]],g--[[@param g integer]],b--[[@param b integer]])return InvokeVoid(0x8E0A582209A62695,vehicle,r,g,b)end;
	--[=[Index references CVehicleModelColor]=]
	SetVehicleNeonIndexColour=function(vehicle--[[@param vehicle integer]],index--[[@param index integer]])return InvokeVoid(0xB93B2867F7B479D1,vehicle,index)end;
	--[=[Gets the color of the neon lights of the specified vehicle.

See SET_VEHICLE_NEON_COLOUR (0x8E0A582209A62695) for more information]=]
	GetVehicleNeonColour=function(vehicle--[[@param vehicle integer]],r--[[@param r integer*]],g--[[@param g integer*]],b--[[@param b integer*]])return InvokeVoid(0x7619EEE8C886757F,vehicle,r,g,b)end;
	--[=[Sets the neon lights of the specified vehicle on/off.

Indices:
0 = Left
1 = Right
2 = Front
3 = Back]=]
	SetVehicleNeonEnabled=function(vehicle--[[@param vehicle integer]],index--[[@param index integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x2AA720E4287BF269,vehicle,index,toggle)end;
	--[=[indices:
0 = Left
1 = Right
2 = Front
3 = Back]=]
	GetVehicleNeonEnabled=function(vehicle--[[@param vehicle integer]],index--[[@param index integer]])return InvokeBool(0x8C4B92553E4766A5,vehicle,index)end;---@return boolean
	SetAmbientVehicleNeonEnabled=function(p0--[[@param p0 boolean]])return InvokeVoid(0x35E0654F4BAD7971,p0)end;
	SuppressNeonsOnVehicle=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x83F813570FF519DE,vehicle,toggle)end;
	SetDisableSuperdummy=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 boolean]])return InvokeVoid(0xB088E9A47AE6EDD5,vehicle,p1)end;
	RequestVehicleDial=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0xDBA3C090E3D74690,vehicle)end;
	--[=[Seems related to vehicle health, like the one in IV.
Max 1000, min 0.
Vehicle does not necessarily explode or become undrivable at 0.]=]
	GetVehicleBodyHealth=function(vehicle--[[@param vehicle integer]])return InvokeFloat(0xF271147EB7B40F12,vehicle)end;---@return number
	--[=[p2 often set to 1000.0 in the decompiled scripts.]=]
	SetVehicleBodyHealth=function(vehicle--[[@param vehicle integer]],value--[[@param value number]])return InvokeVoid(0xB77D05AC8C78AADB,vehicle,value+.0)end;
	--[=[Outputs 2 Vector3's.
Scripts check if out2.x - out1.x > someshit.x
Could be suspension related, as in max suspension height and min suspension height, considering the natives location.]=]
	GetVehicleSize=function(vehicle--[[@param vehicle integer]],out1--[[@param out1 V3*]],out2--[[@param out2 V3*]])return InvokeVoid(0xDF7E3EEB29642C38,vehicle,out1,out2)end;
	--[=[Gets the height of the vehicle's suspension.
The higher the value the lower the suspension. Each 0.002 corresponds with one more level lowered.
0.000 is the stock suspension.
0.008 is Ultra Suspension.]=]
	GetFakeSuspensionLoweringAmount=function(vehicle--[[@param vehicle integer]])return InvokeFloat(0x53952FD2BAA19F17,vehicle)end;---@return number
	SetCarHighSpeedBumpSeverityMultiplier=function(multiplier--[[@param multiplier number]])return InvokeVoid(0x84FD40F56075E816,multiplier+.0)end;
	GetNumberOfVehicleDoors=function(vehicle--[[@param vehicle integer]])return InvokeInt(0x92922A607497B14D,vehicle)end;---@return integer
	--[=[If false, lowers hydraulics (if raised) and disables hydraulics controls. If true, raises hydraulics and enables hydraulics controls.

Only used once in each carmod script, on a car that does not have hydraulics to begin with.]=]
	SetHydraulicsControl=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x28B18377EB6E25F6,vehicle,toggle)end;
	SetCanAdjustGroundClearance=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 boolean]])return InvokeVoid(0xA7DCDF4DED40A8F4,vehicle,p1)end;
	--[=[0 min 100 max
starts at 100
Seams to have health zones
Front of vehicle when damaged goes from 100-50 and stops at 50.
Rear can be damaged from 100-0
Only tested with two cars.

any idea how this differs from the first one?

--
May return the vehicle health on a scale of 0.0 - 100.0 (needs to be confirmed)

example:

v_F = ENTITY::GET_ENTITY_MODEL(v_3);
if (((v_F == ${tanker}) || (v_F == ${armytanker})) || (v_F == ${tanker2})) {
    if (VEHICLE::GET_VEHICLE_HEALTH_PERCENTAGE(v_3) <= 1.0) {
        NETWORK::NETWORK_EXPLODE_VEHICLE(v_3, 1, 1, -1);
    }
}]=]
	GetVehicleHealthPercentage=function(vehicle--[[@param vehicle integer]],maxEngineHealth--[[@param maxEngineHealth number]],maxPetrolTankHealth--[[@param maxPetrolTankHealth number]],maxBodyHealth--[[@param maxBodyHealth number]],maxMainRotorHealth--[[@param maxMainRotorHealth number]],maxTailRotorHealth--[[@param maxTailRotorHealth number]],maxUnkHealth--[[@param maxUnkHealth number]])return InvokeFloat(0xB8EF61207C2393A9,vehicle,maxEngineHealth+.0,maxPetrolTankHealth+.0,maxBodyHealth+.0,maxMainRotorHealth+.0,maxTailRotorHealth+.0,maxUnkHealth+.0)end;---@return number
	GetVehicleIsMercenary=function(vehicle--[[@param vehicle integer]])return InvokeBool(0xD4C4642CB7F50B5D,vehicle)end;---@return boolean
	SetVehicleBrokenPartsDontAffectAiHandling=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 boolean]])return InvokeVoid(0xC361AA040D6637A8,vehicle,p1)end;
	SetVehicleKersAllowed=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x99C82F8A139F3E4E,vehicle,toggle)end;
	--[=[Returns true if the vehicle has a HF_HAS_KERS (strHandlingFlags 0x4) handing flag set, for instance the lectro/vindicator bikes or the open wheelers.]=]
	GetVehicleHasKers=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x50634E348C8D44EF,vehicle)end;---@return boolean
	SetPlaneResistToExplosion=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xE16142B94664DEFD,vehicle,toggle)end;
	SetHeliResistToExplosion=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x8074CC1886802912,vehicle,toggle)end;
	SetDisableBmxExtraTrickForces=function(p0--[[@param p0 any]])return InvokeVoid(0x26D99D5A82FD18E8,p0)end;
	--[=[Works only on vehicles that support hydraulics.]=]
	SetHydraulicSuspensionRaiseFactor=function(vehicle--[[@param vehicle integer]],wheelId--[[@param wheelId integer]],value--[[@param value number]])return InvokeVoid(0x84EA99C62CB3EF0C,vehicle,wheelId,value+.0)end;
	GetHydraulicSuspensionRaiseFactor=function(vehicle--[[@param vehicle integer]],wheelId--[[@param wheelId integer]])return InvokeFloat(0x0BB5CBDDD0F25AE3,vehicle,wheelId)end;---@return number
	SetCanUseHydraulics=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x1201E8A3290A3B98,vehicle,toggle)end;
	--[=[States:
4 = raise
5 = lower
6 = jump]=]
	SetHydraulicVehicleState=function(vehicle--[[@param vehicle integer]],state--[[@param state integer]])return InvokeVoid(0x8EA86DF356801C7D,vehicle,state)end;
	--[=[Sets vehicle wheel hydraulic states transition. Known states:
0 - reset
1 - raise wheel (uses value arg, works just like _SET_VEHICLE_HYDRAULIC_WHEEL_VALUE)
2 - jump using wheel]=]
	SetHydraulicWheelState=function(vehicle--[[@param vehicle integer]],wheelId--[[@param wheelId integer]],state--[[@param state integer]],value--[[@param value number]],p4--[[@param p4 any]])return InvokeVoid(0xC24075310A8B9CD1,vehicle,wheelId,state,value+.0,p4)end;
	HasVehiclePetroltankSetOnFireByEntity=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeBool(0x5BA68A0840D546AC,p0,p1)end;---@return boolean
	ClearVehiclePetroltankFireCulprit=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0x4419966C9936071A,vehicle)end;
	--[=[Controls how fast bobbleheads and tsurikawas move on each axis.

p2 is probably z, but changing that value didn't seem to have a noticeable effect.]=]
	SetVehicleBobbleheadVelocity=function(x--[[@param x number]],y--[[@param y number]],p2--[[@param p2 number]])return InvokeVoid(0x870B8B7A766615C8,x+.0,y+.0,p2+.0)end;
	GetVehicleIsDummy=function(p0--[[@param p0 any]])return InvokeBool(0x8533CAFDE1F0F336,p0)end;---@return boolean
	SetVehicleDamageScale=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 number]])return InvokeBool(0x4E20D2A627011E8E,vehicle,p1+.0)end;---@return boolean
	SetVehicleWeaponDamageScale=function(vehicle--[[@param vehicle integer]],multiplier--[[@param multiplier number]])return InvokeBool(0x45A561A9421AB6AD,vehicle,multiplier+.0)end;---@return boolean
	SetDisableDamageWithPickedUpEntity=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeBool(0xD4196117AF7BB974,p0,p1)end;---@return boolean
	SetVehicleUsesMpPlayerDamageMultiplier=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0xBB2333BB87DDD87F,p0,p1)end;
	--[=[When enabled, the player won't fall off the bike when landing from large heights.]=]
	SetBikeEasyToLand=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x73561D4425A021A2,vehicle,toggle)end;
	--[=[Inverts vehicle's controls. So INPUT_VEH_ACCELERATE will be INPUT_VEH_BRAKE and vise versa (same for A/D controls)
Doesn't work for planes/helis.]=]
	SetInvertVehicleControls=function(vehicle--[[@param vehicle integer]],state--[[@param state boolean]])return InvokeVoid(0x5B91B229243351A8,vehicle,state)end;
	--[=[Disables the screen effects and sound effects when driving over a speed boost pad.]=]
	SetSpeedBoostEffectDisabled=function(disabled--[[@param disabled boolean]])return InvokeVoid(0x7BBE7FF626A591FE,disabled)end;
	--[=[Disables the screen effects and sound effects when driving over a slowdown pad.]=]
	SetSlowDownEffectDisabled=function(disabled--[[@param disabled boolean]])return InvokeVoid(0x65B080555EA48149,disabled)end;
	SetFormationLeader=function(vehicle--[[@param vehicle integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],p4--[[@param p4 number]])return InvokeVoid(0x428AD3E26C8D9EB0,vehicle,x+.0,y+.0,z+.0,p4+.0)end;
	--[=[Resets the effect of SET_FORMATION_LEADER]=]
	ResetFormationLeader=function()return InvokeVoid(0xE2F53F172B45EDE1)end;
	GetIsBoatCapsized=function(vehicle--[[@param vehicle integer]])return InvokeBool(0xBA91D045575699AD,vehicle)end;---@return boolean
	SetAllowRammingSoopOrRamp=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x80E3357FDEF45C21,p0,p1)end;
	SetScriptRampImpulseScale=function(vehicle--[[@param vehicle integer]],impulseScale--[[@param impulseScale number]])return InvokeVoid(0xEFC13B1CE30D755D,vehicle,impulseScale+.0)end;
	--[=[doorId: see SET_VEHICLE_DOOR_SHUT]=]
	GetIsDoorValid=function(vehicle--[[@param vehicle integer]],doorId--[[@param doorId integer]])return InvokeBool(0x645F4B6E8499F632,vehicle,doorId)end;---@return boolean
	SetScriptRocketBoostRechargeTime=function(vehicle--[[@param vehicle integer]],seconds--[[@param seconds number]])return InvokeVoid(0xE00F2AB100B76E89,vehicle,seconds+.0)end;
	GetHasRocketBoost=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x36D782F68B309BDA,vehicle)end;---@return boolean
	IsRocketBoostActive=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x3D34E80EED4AE3BE,vehicle)end;---@return boolean
	SetRocketBoostActive=function(vehicle--[[@param vehicle integer]],active--[[@param active boolean]])return InvokeVoid(0x81E1552E35DC3839,vehicle,active)end;
	GetHasRetractableWheels=function(vehicle--[[@param vehicle integer]])return InvokeBool(0xDCA174A42133F08C,vehicle)end;---@return boolean
	GetIsWheelsRetracted=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x1DA0DA9CB3F0C8BF,vehicle)end;---@return boolean
	SetWheelsExtendedInstantly=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0xF660602546D27BA8,vehicle)end;
	SetWheelsRetractedInstantly=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0x5335BE58C083E74E,vehicle)end;
	--[=[Returns true if the vehicle has the FLAG_JUMPING_CAR flag set.]=]
	GetCarHasJump=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x9078C0C5EF8C19E9,vehicle)end;---@return boolean
	--[=[Allows vehicles with the FLAG_JUMPING_CAR flag to jump higher (i.e. Ruiner 2000).]=]
	SetUseHigherCarJump=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xF06A16CA55D138D8,vehicle,toggle)end;
	SetClearFreezeWaitingOnCollisionOncePlayerEnters=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xB2E0C0D6922D31F2,vehicle,toggle)end;
	--[=[Set vehicle's primary mounted weapon 2 ammo. For example, use it on APC.
For example, you can "remove" any vehicle weapon from any vehicle.
ammoAmount -1 = infinite ammo (default value for any spawned vehicle tho)]=]
	SetVehicleWeaponRestrictedAmmo=function(vehicle--[[@param vehicle integer]],weaponIndex--[[@param weaponIndex integer]],capacity--[[@param capacity integer]])return InvokeVoid(0x44CD1F493DB2A0A6,vehicle,weaponIndex,capacity)end;
	GetVehicleWeaponRestrictedAmmo=function(vehicle--[[@param vehicle integer]],weaponIndex--[[@param weaponIndex integer]])return InvokeInt(0x8181CE2F25CB9BB7,vehicle,weaponIndex)end;---@return integer
	GetVehicleHasParachute=function(vehicle--[[@param vehicle integer]])return InvokeBool(0xBC9CFF381338CB4F,vehicle)end;---@return boolean
	GetVehicleCanDeployParachute=function(vehicle--[[@param vehicle integer]])return InvokeBool(0xA916396DF4154EE3,vehicle)end;---@return boolean
	VehicleStartParachuting=function(vehicle--[[@param vehicle integer]],active--[[@param active boolean]])return InvokeVoid(0x0BFFB028B3DD0A97,vehicle,active)end;
	IsVehicleParachuteDeployed=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x3DE51E9C80B116CF,vehicle)end;---@return boolean
	VehicleSetRampAndRammingCarsTakeDamage=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x28D034A93FE31BF5,vehicle,toggle)end;
	VehicleSetEnableRampCarSideImpulse=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x1BBAC99C0BC53656,p0,p1)end;
	VehicleSetEnableNormaliseRampCarVerticalVeloctiy=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x756AE6E962168A04,p0,p1)end;
	VehicleSetJetWashForceEnabled=function(p0--[[@param p0 any]])return InvokeVoid(0x9D30687C57BAA0BB,p0)end;
	SetVehicleWeaponCanTargetObjects=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x86B4B6212CB8B627,vehicle,toggle)end;
	--[=[Used for blazer5. Changes the quadbike-jetski transformation input from raise/lower convertible roof (hold H by default) to horn (press E by default.)]=]
	SetVehicleUseBoostButtonForWheelRetract=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x41290B40FA63E6DA,toggle)end;
	--[=[Parachute models:
- sr_prop_specraces_para_s_01
- imp_prop_impexp_para_s (SecuroServ; Default)
Plus, many more props can be used as vehicle parachutes, like umbrellas (prop_beach_parasol_03), and unlike SET_PLAYER_PARACHUTE_MODEL_OVERRIDE, you won't get stuck mid-air when using an umbrella.]=]
	VehicleSetParachuteModelOverride=function(vehicle--[[@param vehicle integer]],modelHash--[[@param modelHash integer]])return InvokeVoid(0x4D610C6B56031351,vehicle,modelHash)end;
	--[=[Variations available for the generic parachute (sr_prop_specraces_para_s_01):
- 0: Rainbow
- 1: Red
- 2: White, blue, yellow
- 3: Black, red, white
- 4: Red, white, blue
- 5: Blue
- 6: Black
- 7: Black, yellow]=]
	VehicleSetParachuteModelTintIndex=function(vehicle--[[@param vehicle integer]],textureVariation--[[@param textureVariation integer]])return InvokeVoid(0xA74AD2439468C883,vehicle,textureVariation)end;
	VehicleSetOverrideExtenableSideRatio=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeInt(0x0419B167EE128F33,p0,p1)end;---@return integer
	VehicleSetExtenableSideTargetRatio=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeInt(0xF3B0E0AED097A3F5,p0,p1)end;---@return integer
	VehicleSetOverrideSideRatio=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeInt(0xD3E51C0AB8C26EEE,p0,p1)end;---@return integer
	GetAllVehicles=function(vehsStruct--[[@param vehsStruct any*]])return InvokeInt(0x9B8E1BF04B51F2E8,vehsStruct)end;---@return integer
	SetCargobobExtaPickupRange=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x72BECCF4B829522E,p0,p1)end;
	SetOverrideVehicleDoorTorque=function(p0--[[@param p0 any]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0x66E3AAFACE2D1EB8,p0,p1,p2)end;
	--[=[Enables/disables the ability to wheelie on motorcycles.]=]
	SetWheelieEnabled=function(vehicle--[[@param vehicle integer]],enabled--[[@param enabled boolean]])return InvokeVoid(0x1312DDD8385AEE4E,vehicle,enabled)end;
	SetDisableHeliExplodeFromBodyDamage=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0xEDBC8405B3895CC9,p0,p1)end;
	SetDisableExplodeFromBodyDamageOnCollision=function(vehicle--[[@param vehicle integer]],value--[[@param value number]])return InvokeVoid(0x26E13D440E7F6064,vehicle,value+.0)end;
	SetTrailerAttachmentEnabled=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x2FA2494B47FDD009,p0,p1)end;
	SetRocketBoostFill=function(vehicle--[[@param vehicle integer]],percentage--[[@param percentage number]])return InvokeVoid(0xFEB2DDED3509562E,vehicle,percentage+.0)end;
	--[=[Set state to true to extend the wings, false to retract them.]=]
	SetGliderActive=function(vehicle--[[@param vehicle integer]],state--[[@param state boolean]])return InvokeVoid(0x544996C0081ABDEB,vehicle,state)end;
	--[=[Resets the vehicle's turret to its default position in scripted cameras. Doesn't seem to affect turrets that are occupied by a ped.]=]
	SetShouldResetTurretInScriptedCameras=function(vehicle--[[@param vehicle integer]],shouldReset--[[@param shouldReset boolean]])return InvokeVoid(0x78CEEE41F49F421F,vehicle,shouldReset)end;
	SetVehicleDisableCollisionUponCreation=function(vehicle--[[@param vehicle integer]],disable--[[@param disable boolean]])return InvokeVoid(0xAF60E6A2936F982A,vehicle,disable)end;
	SetGroundEffectReducesDrag=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x430A7631A84C9BE7,toggle)end;
	--[=[Disables collision for this vehicle (maybe it also supports other entities, not sure).
Only world/building/fixed world objects will have their collisions disabled, props, peds, or any other entity still collides with the vehicle.
Example: https://streamable.com/6n45d5
Not sure if there is a native (and if so, which one) that resets the collisions.]=]
	SetDisableMapCollision=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0x75627043C6AA90AD,vehicle)end;
	SetDisablePedStandOnTop=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x8235F1BEAD557629,vehicle,toggle)end;
	SetVehicleDamageScales=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 any]],p2--[[@param p2 any]],p3--[[@param p3 any]],p4--[[@param p4 any]])return InvokeVoid(0x9640E30A7F395E4B,vehicle,p1,p2,p3,p4)end;
	SetPlaneSectionDamageScale=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 any]],p2--[[@param p2 any]])return InvokeVoid(0x0BBB9A7A8FFE931B,vehicle,p1,p2)end;
	--[=[Stops the cargobob from being able to attach any vehicle]=]
	SetHeliCanPickupEntityThatHasPickUpDisabled=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x94A68DA412C4007D,vehicle,toggle)end;
	--[=[Sets the amount of bombs that this vehicle has. As far as I know, this does _not_ impact vehicle weapons or the ammo of those weapons in any way, it is just a way to keep track of the amount of bombs in a specific plane.]=]
	SetVehicleBombAmmo=function(vehicle--[[@param vehicle integer]],bombCount--[[@param bombCount integer]])return InvokeVoid(0xF4B2ED59DEB5D774,vehicle,bombCount)end;
	--[=[Gets the amount of bombs that this vehicle has. As far as I know, this does _not_ impact vehicle weapons or the ammo of those weapons in any way, it is just a way to keep track of the amount of bombs in a specific plane.]=]
	GetVehicleBombAmmo=function(vehicle--[[@param vehicle integer]])return InvokeInt(0xEA12BD130D7569A1,vehicle)end;---@return integer
	--[=[Similar to SET_VEHICLE_BOMB_AMMO, this sets the amount of countermeasures that are present on this vehicle.
Use GET_VEHICLE_BOMB_AMMO to get the current amount.]=]
	SetVehicleCountermeasureAmmo=function(vehicle--[[@param vehicle integer]],counterMeasureCount--[[@param counterMeasureCount integer]])return InvokeVoid(0x9BDA23BF666F0855,vehicle,counterMeasureCount)end;
	--[=[Similar to `GET_VEHICLE_BOMB_AMMO`, this gets the amount of countermeasures that are present on this vehicle.
Use SET_VEHICLE_COUNTERMEASURE_AMMO to set the current amount.]=]
	GetVehicleCountermeasureAmmo=function(vehicle--[[@param vehicle integer]])return InvokeInt(0xF846AA63DF56B804,vehicle)end;---@return integer
	SetHeliCombatOffset=function(vehicle--[[@param vehicle integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0x0A3F820A9A9A9AC5,vehicle,x+.0,y+.0,z+.0)end;
	--[=[Used in decompiled scripts in combination with GET_VEHICLE_SIZE
p7 is usually 2
p8 is usually 1]=]
	GetCanVehicleBePlacedHere=function(vehicle--[[@param vehicle integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],rotX--[[@param rotX number]],rotY--[[@param rotY number]],rotZ--[[@param rotZ number]],p7--[[@param p7 integer]],p8--[[@param p8 any]])return InvokeBool(0x51F30DB60626A20E,vehicle,x+.0,y+.0,z+.0,rotX+.0,rotY+.0,rotZ+.0,p7,p8)end;---@return boolean
	--[=[Sets a flag on heli and another vehicle type.]=]
	SetDisableAutomaticCrashTask=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x97841634EF7DF1D6,vehicle,toggle)end;
	--[=[Used in conjunction with SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO, in Rockstar's scripts. Using this will instantly transform the vehicle into hover mode starting from the given ratio (ranging from 0.0 to 1.0, values greater than 1.0 will put the vehicle into a glitched state.) If this is not used alongside SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO, the vehicle will automatically transform back into car mode.

Usable only with the deluxo and other vehicles with deluxo-like hover mode toggle, modded or otherwise. Does nothing when used on oppressor2.

Example:
Ped playerPed = PLAYER::PLAYER_PED_ID();
Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);
VEHICLE::SET_SPECIAL_FLIGHT_MODE_RATIO(veh, 0.7f);
VEHICLE::SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO(veh, 1.0f);]=]
	SetSpecialFlightModeRatio=function(vehicle--[[@param vehicle integer]],ratio--[[@param ratio number]])return InvokeVoid(0xD138FA15C9776837,vehicle,ratio+.0)end;
	--[=[Used in conjunction with SET_SPECIAL_FLIGHT_MODE_RATIO, in Rockstar's scripts. The vehicle will transform into the given targetRatio, starting from the vehicle's current hover mode transform ratio (which can also be manually set by SET_SPECIAL_FLIGHT_MODE_RATIO,) i.e. setting targetRatio to 0.0 while the vehicle is in hover mode will transform the vehicle into car mode, likewise setting targetRatio to 1.0 while the vehicle is in car mode will transform the vehicle into hover mode, and if the current transform ratio is set to 0.7 while targetRatio is 1.0 the vehicle will transform into hover mode starting from being already partially transformed.

targetRatio is recommended to always be 0.0 or 1.0, otherwise the vehicle will transform into a glitched state.

Usable only with the deluxo and other vehicles with deluxo-like hover mode toggle, modded or otherwise. Does nothing when used on oppressor2.

Example:
Ped playerPed = PLAYER::PLAYER_PED_ID();
Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);
VEHICLE::SET_SPECIAL_FLIGHT_MODE_RATIO(veh, 0.7f);
VEHICLE::SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO(veh, 1.0f);]=]
	SetSpecialFlightModeTargetRatio=function(vehicle--[[@param vehicle integer]],targetRatio--[[@param targetRatio number]])return InvokeVoid(0x438B3D7CA026FE91,vehicle,targetRatio+.0)end;
	--[=[It will override the ability to transform deluxo. For oppressor it will work just like SET_DISABLE_HOVER_MODE_FLIGHT]=]
	SetSpecialFlightModeAllowed=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xF1211889DF15A763,vehicle,toggle)end;
	--[=[Disables "wings" for some flying vehicles. Works only for oppressor _2_ and deluxo.
For deluxo it just immediately removes vehicle's "wings" and you will be not able to fly up.
For oppressor 2 it will remove wings right after you land. And you will not able to fly up anymore too.
But for opressor 2 you still can fly if you somehow get back in the air.]=]
	SetDisableHoverModeFlight=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x2D55FE374D5FDB91,vehicle,toggle)end;
	--[=[Checks if Chernobog's stabilizers are deployed or not.
These are the metal supports that allow it to fire.
This native only applies to the Chernobog.]=]
	GetOutriggersDeployed=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x3A9128352EAC9E85,vehicle)end;---@return boolean
	--[=[Native is significantly more complicated than simply generating a random vector & length.
The 'point' is either 400.0 or 250.0 units away from the Ped's current coordinates; and paths into functions like rage::grcViewport___IsSphereVisible]=]
	FindSpawnCoordinatesForHeli=function(ped--[[@param ped integer]])return InvokeV3(0x8DC9675797123522,ped)end;---@return V3
	--[=[Only used with the "akula" and "annihilator2" in the decompiled native scripts.]=]
	SetDeployFoldingWings=function(vehicle--[[@param vehicle integer]],deploy--[[@param deploy boolean]],p2--[[@param p2 boolean]])return InvokeVoid(0xB251E0B33E58B424,vehicle,deploy,p2)end;
	--[=[Only used with the "akula" and "annihilator2" in the decompiled native scripts.]=]
	AreFoldingWingsDeployed=function(vehicle--[[@param vehicle integer]])return InvokeBool(0xAEF12960FA943792,vehicle)end;---@return boolean
	SetDeployMissileBays=function(vehicle--[[@param vehicle integer]],deploy--[[@param deploy boolean]])return InvokeVoid(0x0C02468829E4AA65,vehicle,deploy)end;
	AreMissileBaysDeployed=function(vehicle--[[@param vehicle integer]])return InvokeBool(0xEA4743874D515F13,vehicle)end;---@return boolean
	SetDipStraightDownWhenCrashingPlane=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xAA653AE61924B0A0,vehicle,toggle)end;
	--[=[Toggles specific flag on turret]=]
	SetTurretHidden=function(vehicle--[[@param vehicle integer]],index--[[@param index integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xC60060EB0D8AC7B1,vehicle,index,toggle)end;
	SetHoverModeWingRatio=function(vehicle--[[@param vehicle integer]],ratio--[[@param ratio number]])return InvokeVoid(0x70A252F60A3E036B,vehicle,ratio+.0)end;
	--[=[Disables turret movement when called in a loop. You can still fire and aim. You cannot shoot backwards though.]=]
	SetDisableTurretMovement=function(vehicle--[[@param vehicle integer]],turretId--[[@param turretId integer]])return InvokeVoid(0xE615BB7A7752C76A,vehicle,turretId)end;
	SetForceFixLinkMatrices=function(vehicle--[[@param vehicle integer]])return InvokeVoid(0x887FA38787DE8C72,vehicle)end;
	--[=[Affects the playback speed of the submarine car conversion animations. Does not affect hardcoded animations such as the wheels being retracted.]=]
	SetTransformRateForAnimation=function(vehicle--[[@param vehicle integer]],transformRate--[[@param transformRate number]])return InvokeVoid(0x498218259FB7C72D,vehicle,transformRate+.0)end;
	--[=[When set to true, the key to transform a car to submarine mode changes from raise/lower convertible roof (hold H by default) to special vehicle transform (press X by default.)]=]
	SetTransformToSubmarineUsesAlternateInput=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x41B9FB92EDED32A6,vehicle,toggle)end;
	--[=[Does nothing. It's a nullsub.]=]
	SetVehicleCombatMode=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x36DE109527A2C0C4,toggle)end;
	--[=[Does nothing. It's a nullsub.]=]
	SetVehicleDetonationMode=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x82E0AC411E41A5B4,toggle)end;
	--[=[Does nothing. It's a nullsub.]=]
	SetVehicleShuntOnStick=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x99A05839C46CE316,toggle)end;
	GetIsVehicleShunting=function(vehicle--[[@param vehicle integer]])return InvokeBool(0xA2459F72C14E2E8D,vehicle)end;---@return boolean
	GetHasVehicleBeenHitByShunt=function(vehicle--[[@param vehicle integer]])return InvokeBool(0xE8718FAF591FD224,vehicle)end;---@return boolean
	--[=[Returns last vehicle that was rammed by the given vehicle using the shunt boost.]=]
	GetLastShuntVehicle=function(vehicle--[[@param vehicle integer]])return InvokeInt(0x04F2FA6E234162F7,vehicle)end;---@return integer
	SetDisableVehicleExplosionsDamage=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x143921E45EC44D62,toggle)end;
	SetOverrideNitrousLevel=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]],level--[[@param level number]],power--[[@param power number]],rechargeTime--[[@param rechargeTime number]],disableSound--[[@param disableSound boolean]])return InvokeVoid(0xC8E9B6B71B8E660D,vehicle,toggle,level+.0,power+.0,rechargeTime+.0,disableSound)end;
	SetIncreaseWheelCrushDamage=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x2970EAA18FD5E42F,vehicle,toggle)end;
	--[=[Sets some global vehicle related bool]=]
	SetDisableWeaponBladeForces=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x211E95CE9903940C,toggle)end;
	--[=[Changes the car jump control to require a double-tap to activate.]=]
	SetUseDoubleClickForCarJump=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x5BBCF35BF6E456F7,toggle)end;
	--[=[Returns true only if the "tombstone" bone is attached to the vehicle, irrespective of "FLAG_HAS_TOMBSTONE" being present or not. Detaching the tombstone will return false.]=]
	GetDoesVehicleHaveTombstone=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x71AFB258CCED3A27,vehicle)end;---@return boolean
	--[=[Disables detachable bumber from domnator4, dominator5, dominator6, see https://gfycat.com/SecondUnluckyGosling]=]
	HideTombstone=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xAE71FB656C600587,vehicle,toggle)end;
	--[=[Returns whether this vehicle is currently disabled by an EMP mine.]=]
	GetIsVehicleDisabledByEmp=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x0506ED94363AD905,vehicle)end;---@return boolean
	SetDisableRetractingWeaponBlades=function(toggle--[[@param toggle boolean]])return InvokeVoid(0x8F0D5BA1C2CC91D7,toggle)end;
	--[=[Usable wheels:
0: wheel_lf
1: wheel_rf
2: wheel_lm1
3: wheel_rm1
4: wheel_lr
5: wheel_rr]=]
	GetTyreHealth=function(vehicle--[[@param vehicle integer]],wheelIndex--[[@param wheelIndex integer]])return InvokeFloat(0x55EAB010FAEE9380,vehicle,wheelIndex)end;---@return number
	--[=[SET_TYRE_WEAR_RATE must be active, otherwise values set to <1000.0f will default to 350.0f

Usable wheels:
0: wheel_lf
1: wheel_rf
2: wheel_lm1
3: wheel_rm1
4: wheel_lr
5: wheel_rr]=]
	SetTyreHealth=function(vehicle--[[@param vehicle integer]],wheelIndex--[[@param wheelIndex integer]],health--[[@param health number]])return InvokeVoid(0x74C68EF97645E79D,vehicle,wheelIndex,health+.0)end;
	--[=[Returns the multiplier value from SET_TYRE_WEAR_RATE

Usable wheels:
0: wheel_lf
1: wheel_rf
2: wheel_lm1
3: wheel_rm1
4: wheel_lr
5: wheel_rr]=]
	GetTyreWearRate=function(vehicle--[[@param vehicle integer]],wheelIndex--[[@param wheelIndex integer]])return InvokeFloat(0x6E387895952F4F71,vehicle,wheelIndex)end;---@return number
	--[=[Needs to be run for tire wear to work. Multiplier affects the downforce and how fast the tires will wear out, higher values essentially make the vehicle slower on straights and its tires will wear down quicker when cornering. Value must be >0f.
Default value in Rockstar's Open Wheel Race JSON's ("owrtws", "owrtwm", "owrtwh") is 1.0

Usable wheels:
0: wheel_lf
1: wheel_rf
2: wheel_lm1
3: wheel_rm1
4: wheel_lr
5: wheel_rr]=]
	SetTyreWearRate=function(vehicle--[[@param vehicle integer]],wheelIndex--[[@param wheelIndex integer]],multiplier--[[@param multiplier number]])return InvokeVoid(0x01894E2EDE923CA2,vehicle,wheelIndex,multiplier+.0)end;
	--[=[Controls how fast the tires wear out.

Default values from Rockstar's Open Wheel Race JSON's:
"owrtss" (Soft): 2.2
"owrtsm" (Medium): 1.7
"owrtsh" (Hard): 1.2

Usable wheels:
0: wheel_lf
1: wheel_rf
2: wheel_lm1
3: wheel_rm1
4: wheel_lr
5: wheel_rr]=]
	SetTyreWearRateScale=function(vehicle--[[@param vehicle integer]],wheelIndex--[[@param wheelIndex integer]],multiplier--[[@param multiplier number]])return InvokeVoid(0x392183BB9EA57697,vehicle,wheelIndex,multiplier+.0)end;
	--[=[Controls how much traction the wheel loses.

Default values from Rockstar's Open Wheel Race JSON's:
"owrtds" (Soft): 0.05
"owrtdm" (Medium): 0.45
"owrtdh" (Hard): 0.8

Usable wheels:
0: wheel_lf
1: wheel_rf
2: wheel_lm1
3: wheel_rm1
4: wheel_lr
5: wheel_rr]=]
	SetTyreMaximumGripDifferenceDueToWearRate=function(vehicle--[[@param vehicle integer]],wheelIndex--[[@param wheelIndex integer]],multiplier--[[@param multiplier number]])return InvokeVoid(0xC970D0E0FC31D768,vehicle,wheelIndex,multiplier+.0)end;
	SetAircraftIgnoreHightmapOptimisation=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 integer]])return InvokeVoid(0xF8B49F5BA7F850E7,vehicle,p1)end;
	--[=[Lowers the vehicle's stance. Only works for vehicles that have strAdvancedFlags 0x8000 and 0x4000000 set.]=]
	SetReducedSuspensionForce=function(vehicle--[[@param vehicle integer]],enable--[[@param enable boolean]])return InvokeVoid(0x3A375167F5782A65,vehicle,enable)end;
	SetDriftTyres=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x5AC79C98C5C17F05,vehicle,toggle)end;
	GetDriftTyresSet=function(vehicle--[[@param vehicle integer]])return InvokeBool(0x2F5A72430E78C8D3,vehicle)end;---@return boolean
	--[=[Implemented only for trains.]=]
	NetworkUseHighPrecisionTrainBlending=function(vehicle--[[@param vehicle integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xEC0C1D4922AF9754,vehicle,toggle)end;
	--[=[Only used in R* Script fm_content_cargo]=]
	SetCheckForEnoughRoomForPed=function(vehicle--[[@param vehicle integer]],p1--[[@param p1 boolean]])return InvokeVoid(0xEF9D388F8D377F44,vehicle,p1)end;
}
_G.Water={
	--[=[This function set height to the value of z-axis of the water surface.

This function works with sea and lake. However it does not work with shallow rivers (e.g. raton canyon will return -100000.0f)

note: seems to return true when you are in water]=]
	GetWaterHeight=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],height--[[@param height number*]])return InvokeBool(0xF6829842C06AE524,x+.0,y+.0,z+.0,height)end;---@return boolean
	GetWaterHeightNoWaves=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],height--[[@param height number*]])return InvokeBool(0x8EE6B53CE13A9794,x+.0,y+.0,z+.0,height)end;---@return boolean
	TestProbeAgainstWater=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],result--[[@param result V3*]])return InvokeBool(0xFFA5D878809819DB,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,result)end;---@return boolean
	--[=[enum eScriptWaterTestResult
{
	SCRIPT_WATER_TEST_RESULT_NONE,
	SCRIPT_WATER_TEST_RESULT_WATER,
	SCRIPT_WATER_TEST_RESULT_BLOCKED,
};]=]
	TestProbeAgainstAllWater=function(x1--[[@param x1 number]],y1--[[@param y1 number]],z1--[[@param z1 number]],x2--[[@param x2 number]],y2--[[@param y2 number]],z2--[[@param z2 number]],flags--[[@param flags integer]],waterHeight--[[@param waterHeight number*]])return InvokeInt(0x8974647ED222EA5F,x1+.0,y1+.0,z1+.0,x2+.0,y2+.0,z2+.0,flags,waterHeight)end;---@return integer
	--[=[See TEST_PROBE_AGAINST_ALL_WATER.]=]
	TestVerticalProbeAgainstAllWater=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],flags--[[@param flags integer]],waterHeight--[[@param waterHeight number*]])return InvokeInt(0x2B3451FA1E3142E2,x+.0,y+.0,z+.0,flags,waterHeight)end;---@return integer
	--[=[Sets the water height for a given position and radius.
]=]
	ModifyWater=function(x--[[@param x number]],y--[[@param y number]],radius--[[@param radius number]],height--[[@param height number]])return InvokeVoid(0xC443FD757C3BA637,x+.0,y+.0,radius+.0,height+.0)end;
	AddExtraCalmingQuad=function(xLow--[[@param xLow number]],yLow--[[@param yLow number]],xHigh--[[@param xHigh number]],yHigh--[[@param yHigh number]],height--[[@param height number]])return InvokeInt(0xFDBF4CDBC07E1706,xLow+.0,yLow+.0,xHigh+.0,yHigh+.0,height+.0)end;---@return integer
	--[=[p0 is the handle returned from ADD_EXTRA_CALMING_QUAD]=]
	RemoveExtraCalmingQuad=function(calmingQuad--[[@param calmingQuad integer]])return InvokeVoid(0xB1252E3E59A82AAF,calmingQuad)end;
	--[=[Sets a value that determines how aggressive the ocean waves will be. Values of 2.0 or more make for very aggressive waves like you see during a thunderstorm.

Works only ~200 meters around the player.]=]
	SetDeepOceanScaler=function(intensity--[[@param intensity number]])return InvokeVoid(0xB96B00E976BE977F,intensity+.0)end;
	--[=[Gets the aggressiveness factor of the ocean waves.]=]
	GetDeepOceanScaler=function()return InvokeFloat(0x2B2A2CC86778B619)end;---@return number
	SetCalmedWaveHeightScaler=function(height--[[@param height number]])return InvokeVoid(0x547237AA71AB44DE,height+.0)end;
	--[=[Sets the waves intensity back to original (1.0 in most cases).]=]
	ResetDeepOceanScaler=function()return InvokeVoid(0x5E5E99285AE812DB)end;
}
_G.Weapon={
	--[=[Enables laser sight on any weapon.

It doesn't work. Neither on tick nor OnKeyDown]=]
	EnableLaserSightRendering=function(toggle--[[@param toggle boolean]])return InvokeVoid(0xC8B46D7727D864AA,toggle)end;
	GetWeaponComponentTypeModel=function(componentHash--[[@param componentHash integer]])return InvokeInt(0x0DB57B41EC1DB083,componentHash)end;---@return integer
	--[=[Returns the model of any weapon.

Can also take an ammo hash?
sub_6663a(&l_115B, WEAPON::GET_WEAPONTYPE_MODEL(${ammo_rpg}));]=]
	GetWeapontypeModel=function(weaponHash--[[@param weaponHash integer]])return InvokeInt(0xF46CDC33180FDA94,weaponHash)end;---@return integer
	GetWeapontypeSlot=function(weaponHash--[[@param weaponHash integer]])return InvokeInt(0x4215460B9B8B7FA0,weaponHash)end;---@return integer
	GetWeapontypeGroup=function(weaponHash--[[@param weaponHash integer]])return InvokeInt(0xC3287EE3050FB74C,weaponHash)end;---@return integer
	--[=[Returns the amount of extra components the specified component has.
Returns -1 if the component isn't of type CWeaponComponentVariantModel.]=]
	GetWeaponComponentVariantExtraCount=function(componentHash--[[@param componentHash integer]])return InvokeInt(0x6558AC7C17BFEF58,componentHash)end;---@return integer
	--[=[Returns the model hash of the extra component at specified index.]=]
	GetWeaponComponentVariantExtraModel=function(componentHash--[[@param componentHash integer]],extraComponentIndex--[[@param extraComponentIndex integer]])return InvokeInt(0x4D1CB8DC40208A17,componentHash,extraComponentIndex)end;---@return integer
	--[=[Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	SetCurrentPedWeapon=function(ped--[[@param ped integer]],weaponHash--[[@param weaponHash integer]],bForceInHand--[[@param bForceInHand boolean]])return InvokeVoid(0xADF692B254977C0C,ped,weaponHash,bForceInHand)end;
	--[=[The return value seems to indicate returns true if the hash of the weapon object weapon equals the weapon hash.
p2 seems to be 1 most of the time.





p2 is not implemented

disassembly said that?
]=]
	GetCurrentPedWeapon=function(ped--[[@param ped integer]],weaponHash--[[@param weaponHash integer*]],p2--[[@param p2 boolean]])return InvokeBool(0x3A87E44BB9A01D54,ped,weaponHash,p2)end;---@return boolean
	GetCurrentPedWeaponEntityIndex=function(ped--[[@param ped integer]],p1--[[@param p1 any]])return InvokeInt(0x3B390A939AF0B5FC,ped,p1)end;---@return integer
	--[=[p1 is always 0 in the scripts.]=]
	GetBestPedWeapon=function(ped--[[@param ped integer]],p1--[[@param p1 boolean]])return InvokeInt(0x8483E98E8B888AE2,ped,p1)end;---@return integer
	--[=[Full list of weapons by DurtyFree (Search for VEHICLE_*): https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	SetCurrentPedVehicleWeapon=function(ped--[[@param ped integer]],weaponHash--[[@param weaponHash integer]])return InvokeBool(0x75C55983C2C39DAA,ped,weaponHash)end;---@return boolean
	--[=[Example in VB

    Public Shared Function GetVehicleCurrentWeapon(Ped As Ped) As Integer
        Dim arg As New OutputArgument()
        Native.Function.Call(Hash.GET_CURRENT_PED_VEHICLE_WEAPON, Ped, arg)
        Return arg.GetResult(Of Integer)()
    End Function

Usage:
If GetVehicleCurrentWeapon(Game.Player.Character) = -821520672 Then ...Do something
Note: -821520672 = VEHICLE_WEAPON_PLANE_ROCKET]=]
	GetCurrentPedVehicleWeapon=function(ped--[[@param ped integer]],weaponHash--[[@param weaponHash integer*]])return InvokeBool(0x1017582BCD3832DC,ped,weaponHash)end;---@return boolean
	SetPedCycleVehicleWeaponsOnly=function(ped--[[@param ped integer]])return InvokeVoid(0x50276EF8172F5F12,ped)end;
	--[=[Checks if the ped is currently equipped with a weapon matching a bit specified using a bitwise-or in typeFlags.

Type flag bit values:
1 = Melee weapons
2 = Explosive weapons
4 = Any other weapons

Not specifying any bit will lead to the native *always* returning 'false', and for example specifying '4 | 2' will check for any weapon except fists and melee weapons.
7 returns true if you are equipped with any weapon except your fists.
6 returns true if you are equipped with any weapon except melee weapons.
5 returns true if you are equipped with any weapon except the Explosives weapon group.
4 returns true if you are equipped with any weapon except Explosives weapon group AND melee weapons.
3 returns true if you are equipped with either Explosives or Melee weapons (the exact opposite of 4).
2 returns true only if you are equipped with any weapon from the Explosives weapon group.
1 returns true only if you are equipped with any Melee weapon.
0 never returns true.

Note: When I say "Explosives weapon group", it does not include the Jerry can and Fire Extinguisher.]=]
	IsPedArmed=function(ped--[[@param ped integer]],typeFlags--[[@param typeFlags integer]])return InvokeBool(0x475768A975D5AD17,ped,typeFlags)end;---@return boolean
	--[=[Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	IsWeaponValid=function(weaponHash--[[@param weaponHash integer]])return InvokeBool(0x937C71165CF334B3,weaponHash)end;---@return boolean
	--[=[p2 should be FALSE, otherwise it seems to always return FALSE

Bool does not check if the weapon is current equipped, unfortunately.
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	HasPedGotWeapon=function(ped--[[@param ped integer]],weaponHash--[[@param weaponHash integer]],p2--[[@param p2 boolean]])return InvokeBool(0x8DECB02F88F428BC,ped,weaponHash,p2)end;---@return boolean
	IsPedWeaponReadyToShoot=function(ped--[[@param ped integer]])return InvokeBool(0xB80CA294F2F26749,ped)end;---@return boolean
	GetPedWeapontypeInSlot=function(ped--[[@param ped integer]],weaponSlot--[[@param weaponSlot integer]])return InvokeInt(0xEFFED78E9011134D,ped,weaponSlot)end;---@return integer
	--[=[WEAPON::GET_AMMO_IN_PED_WEAPON(PLAYER::PLAYER_PED_ID(), a_0)

From decompiled scripts
Returns total ammo in weapon

GTALua Example :
natives.WEAPON.GET_AMMO_IN_PED_WEAPON(plyPed, WeaponHash)
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	GetAmmoInPedWeapon=function(ped--[[@param ped integer]],weaponhash--[[@param weaponhash integer]])return InvokeInt(0x015A522136D7F951,ped,weaponhash)end;---@return integer
	--[=[Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	AddAmmoToPed=function(ped--[[@param ped integer]],weaponHash--[[@param weaponHash integer]],ammo--[[@param ammo integer]])return InvokeVoid(0x78F0424C34306220,ped,weaponHash,ammo)end;
	--[=[Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	SetPedAmmo=function(ped--[[@param ped integer]],weaponHash--[[@param weaponHash integer]],ammo--[[@param ammo integer]],p3--[[@param p3 boolean]])return InvokeVoid(0x14E56BC5B5DB6A19,ped,weaponHash,ammo,p3)end;
	--[=[Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	SetPedInfiniteAmmo=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]],weaponHash--[[@param weaponHash integer]])return InvokeVoid(0x3EDCB0505123623B,ped,toggle,weaponHash)end;
	SetPedInfiniteAmmoClip=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x183DADC6AA953186,ped,toggle)end;
	SetPedStunGunFiniteAmmo=function(p0--[[@param p0 any]],p1--[[@param p1 any]])return InvokeVoid(0x24C024BA8379A70A,p0,p1)end;
	--[=[Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	GiveWeaponToPed=function(ped--[[@param ped integer]],weaponHash--[[@param weaponHash integer]],ammoCount--[[@param ammoCount integer]],isHidden--[[@param isHidden boolean]],bForceInHand--[[@param bForceInHand boolean]])return InvokeVoid(0xBF0FD6E56C964FCB,ped,weaponHash,ammoCount,isHidden,bForceInHand)end;
	--[=[Gives a weapon to PED with a delay, example:

WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PED::PLAYER_PED_ID(), MISC::GET_HASH_KEY("WEAPON_PISTOL"), 1000, false)
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	GiveDelayedWeaponToPed=function(ped--[[@param ped integer]],weaponHash--[[@param weaponHash integer]],ammoCount--[[@param ammoCount integer]],bForceInHand--[[@param bForceInHand boolean]])return InvokeVoid(0xB282DC6EBD803C75,ped,weaponHash,ammoCount,bForceInHand)end;
	--[=[setting the last params to false it does that same so I would suggest its not a toggle]=]
	RemoveAllPedWeapons=function(ped--[[@param ped integer]],p1--[[@param p1 boolean]])return InvokeVoid(0xF25DF915FA38C5F3,ped,p1)end;
	--[=[This native removes a specified weapon from your selected ped.

Example:
C#:
Function.Call(Hash.REMOVE_WEAPON_FROM_PED, Game.Player.Character, 0x99B507EA);

C++:
WEAPON::REMOVE_WEAPON_FROM_PED(PLAYER::PLAYER_PED_ID(), 0x99B507EA);

The code above removes the knife from the player.
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	RemoveWeaponFromPed=function(ped--[[@param ped integer]],weaponHash--[[@param weaponHash integer]])return InvokeVoid(0x4899CB088EDF59B8,ped,weaponHash)end;
	--[=[Hides the players weapon during a cutscene.]=]
	HidePedWeaponForScriptedCutscene=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x6F6981D2253C208F,ped,toggle)end;
	--[=[Has 5 parameters since latest patches.]=]
	SetPedCurrentWeaponVisible=function(ped--[[@param ped integer]],visible--[[@param visible boolean]],deselectWeapon--[[@param deselectWeapon boolean]],p3--[[@param p3 boolean]],p4--[[@param p4 boolean]])return InvokeVoid(0x0725A4CCFDED9A70,ped,visible,deselectWeapon,p3,p4)end;
	SetPedDropsWeaponsWhenDead=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x476AE72C1D19D1A8,ped,toggle)end;
	--[=[It determines what weapons caused damage:

If you want to define only a specific weapon, second parameter=weapon hash code, third parameter=0
If you want to define any melee weapon, second parameter=0, third parameter=1.
If you want to identify any weapon (firearms, melee, rockets, etc.), second parameter=0, third parameter=2.
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	HasPedBeenDamagedByWeapon=function(ped--[[@param ped integer]],weaponHash--[[@param weaponHash integer]],weaponType--[[@param weaponType integer]])return InvokeBool(0x2D343D2219CD027A,ped,weaponHash,weaponType)end;---@return boolean
	--[=[Does NOT seem to work with HAS_PED_BEEN_DAMAGED_BY_WEAPON. Use CLEAR_ENTITY_LAST_WEAPON_DAMAGE and HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON instead.]=]
	ClearPedLastWeaponDamage=function(ped--[[@param ped integer]])return InvokeVoid(0x0E98F88A24C5F4B8,ped)end;
	--[=[It determines what weapons caused damage:

If you want to define only a specific weapon, second parameter=weapon hash code, third parameter=0
If you want to define any melee weapon, second parameter=0, third parameter=1.
If you want to identify any weapon (firearms, melee, rockets, etc.), second parameter=0, third parameter=2.
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	HasEntityBeenDamagedByWeapon=function(entity--[[@param entity integer]],weaponHash--[[@param weaponHash integer]],weaponType--[[@param weaponType integer]])return InvokeBool(0x131D401334815E94,entity,weaponHash,weaponType)end;---@return boolean
	ClearEntityLastWeaponDamage=function(entity--[[@param entity integer]])return InvokeVoid(0xAC678E40BE7C74D2,entity)end;
	SetPedDropsWeapon=function(ped--[[@param ped integer]])return InvokeVoid(0x6B7513D9966FBEC0,ped)end;
	--[=[Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	SetPedDropsInventoryWeapon=function(ped--[[@param ped integer]],weaponHash--[[@param weaponHash integer]],xOffset--[[@param xOffset number]],yOffset--[[@param yOffset number]],zOffset--[[@param zOffset number]],ammoCount--[[@param ammoCount integer]])return InvokeVoid(0x208A1888007FC0E6,ped,weaponHash,xOffset+.0,yOffset+.0,zOffset+.0,ammoCount)end;
	--[=[p2 is mostly 1 in the scripts.
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	GetMaxAmmoInClip=function(ped--[[@param ped integer]],weaponHash--[[@param weaponHash integer]],p2--[[@param p2 boolean]])return InvokeInt(0xA38DCFFCEA8962FA,ped,weaponHash,p2)end;---@return integer
	--[=[Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	GetAmmoInClip=function(ped--[[@param ped integer]],weaponHash--[[@param weaponHash integer]],ammo--[[@param ammo integer*]])return InvokeBool(0x2E1202248937775C,ped,weaponHash,ammo)end;---@return boolean
	--[=[Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	SetAmmoInClip=function(ped--[[@param ped integer]],weaponHash--[[@param weaponHash integer]],ammo--[[@param ammo integer]])return InvokeBool(0xDCD2A934D65CB497,ped,weaponHash,ammo)end;---@return boolean
	--[=[Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	GetMaxAmmo=function(ped--[[@param ped integer]],weaponHash--[[@param weaponHash integer]],ammo--[[@param ammo integer*]])return InvokeBool(0xDC16122C7A20C933,ped,weaponHash,ammo)end;---@return boolean
	--[=[Returns the max ammo for an ammo type. Ammo types: https://gist.github.com/root-cause/faf41f59f7a6d818b7db0b839bd147c1]=]
	GetMaxAmmoByType=function(ped--[[@param ped integer]],ammoTypeHash--[[@param ammoTypeHash integer]],ammo--[[@param ammo integer*]])return InvokeBool(0x585847C5E4E11709,ped,ammoTypeHash,ammo)end;---@return boolean
	--[=[Ammo types: https://gist.github.com/root-cause/faf41f59f7a6d818b7db0b839bd147c1]=]
	AddPedAmmoByType=function(ped--[[@param ped integer]],ammoTypeHash--[[@param ammoTypeHash integer]],ammo--[[@param ammo integer]])return InvokeVoid(0x2472622CE1F2D45F,ped,ammoTypeHash,ammo)end;
	--[=[Ammo types: https://gist.github.com/root-cause/faf41f59f7a6d818b7db0b839bd147c1]=]
	SetPedAmmoByType=function(ped--[[@param ped integer]],ammoTypeHash--[[@param ammoTypeHash integer]],ammo--[[@param ammo integer]])return InvokeVoid(0x5FD1E1F011E76D7E,ped,ammoTypeHash,ammo)end;
	GetPedAmmoByType=function(ped--[[@param ped integer]],ammoTypeHash--[[@param ammoTypeHash integer]])return InvokeInt(0x39D22031557946C1,ped,ammoTypeHash)end;---@return integer
	SetPedAmmoToDrop=function(ped--[[@param ped integer]],p1--[[@param p1 integer]])return InvokeVoid(0xA4EFEF9440A5B0EF,ped,p1)end;
	SetPickupAmmoAmountScaler=function(p0--[[@param p0 number]])return InvokeVoid(0xE620FD3512A04F18,p0+.0)end;
	--[=[Returns the current ammo type of the specified ped's specified weapon.
MkII magazines will change the return value, like Pistol MkII returning AMMO_PISTOL without any components and returning AMMO_PISTOL_TRACER after Tracer Rounds component is attached.
Use 0xF489B44DD5AF4BD9 if you always want AMMO_PISTOL.
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	GetPedAmmoTypeFromWeapon=function(ped--[[@param ped integer]],weaponHash--[[@param weaponHash integer]])return InvokeInt(0x7FEAD38B326B9F74,ped,weaponHash)end;---@return integer
	--[=[Returns the base/default ammo type of the specified ped's specified weapon.
Use GET_PED_AMMO_TYPE_FROM_WEAPON if you want current ammo type (like AMMO_MG_INCENDIARY/AMMO_MG_TRACER while using MkII magazines) and use this if you want base ammo type. (AMMO_MG)
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	GetPedOriginalAmmoTypeFromWeapon=function(ped--[[@param ped integer]],weaponHash--[[@param weaponHash integer]])return InvokeInt(0xF489B44DD5AF4BD9,ped,weaponHash)end;---@return integer
	--[=[Pass ped. Pass address of Vector3.
The coord will be put into the Vector3.
The return will determine whether there was a coord found or not.]=]
	GetPedLastWeaponImpactCoord=function(ped--[[@param ped integer]],coords--[[@param coords V3*]])return InvokeBool(0x6C4D0409BA1A2BC2,ped,coords)end;---@return boolean
	--[=[p1/gadgetHash was always 0xFBAB5776 ("GADGET_PARACHUTE").
p2 is always true.]=]
	SetPedGadget=function(ped--[[@param ped integer]],gadgetHash--[[@param gadgetHash integer]],p2--[[@param p2 boolean]])return InvokeVoid(0xD0D7B1E680ED4A1A,ped,gadgetHash,p2)end;
	--[=[gadgetHash - was always 0xFBAB5776 ("GADGET_PARACHUTE").]=]
	GetIsPedGadgetEquipped=function(ped--[[@param ped integer]],gadgetHash--[[@param gadgetHash integer]])return InvokeBool(0xF731332072F5156C,ped,gadgetHash)end;---@return boolean
	--[=[Returns the hash of the weapon. 

            var num7 = WEAPON::GET_SELECTED_PED_WEAPON(num4);
            sub_27D3(num7);
            switch (num7)
            {
                case 0x24B17070:

Also see WEAPON::GET_CURRENT_PED_WEAPON. Difference?

-------------------------------------------------------------------------

The difference is that GET_SELECTED_PED_WEAPON simply returns the ped's current weapon hash but GET_CURRENT_PED_WEAPON also checks the weapon object and returns true if the hash of the weapon object equals the weapon hash
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	GetSelectedPedWeapon=function(ped--[[@param ped integer]])return InvokeInt(0x0A6DB4965674D243,ped)end;---@return integer
	--[=[             WEAPON::EXPLODE_PROJECTILES(PLAYER::PLAYER_PED_ID(), func_221(0x00000003), 0x00000001);]=]
	ExplodeProjectiles=function(ped--[[@param ped integer]],weaponHash--[[@param weaponHash integer]],p2--[[@param p2 boolean]])return InvokeVoid(0xFC4BD125DE7611E4,ped,weaponHash,p2)end;
	--[=[If `explode` true, then removal is done through exploding the projectile. Basically the same as EXPLODE_PROJECTILES but without defining the owner ped.]=]
	RemoveAllProjectilesOfType=function(weaponHash--[[@param weaponHash integer]],explode--[[@param explode boolean]])return InvokeVoid(0xFC52E0F37E446528,weaponHash,explode)end;
	GetLockonDistanceOfCurrentPedWeapon=function(ped--[[@param ped integer]])return InvokeFloat(0x840F03E9041E2C9C,ped)end;---@return number
	GetMaxRangeOfCurrentPedWeapon=function(ped--[[@param ped integer]])return InvokeFloat(0x814C9D19DFD69679,ped)end;---@return number
	--[=[Fourth Parameter = unsure, almost always -1]=]
	HasVehicleGotProjectileAttached=function(driver--[[@param driver integer]],vehicle--[[@param vehicle integer]],weaponHash--[[@param weaponHash integer]],p3--[[@param p3 any]])return InvokeBool(0x717C8481234E3B88,driver,vehicle,weaponHash,p3)end;---@return boolean
	--[=[Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	GiveWeaponComponentToPed=function(ped--[[@param ped integer]],weaponHash--[[@param weaponHash integer]],componentHash--[[@param componentHash integer]])return InvokeVoid(0xD966D51AA5B28BB9,ped,weaponHash,componentHash)end;
	--[=[Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	RemoveWeaponComponentFromPed=function(ped--[[@param ped integer]],weaponHash--[[@param weaponHash integer]],componentHash--[[@param componentHash integer]])return InvokeVoid(0x1E8BE90C74FB4C09,ped,weaponHash,componentHash)end;
	--[=[Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	HasPedGotWeaponComponent=function(ped--[[@param ped integer]],weaponHash--[[@param weaponHash integer]],componentHash--[[@param componentHash integer]])return InvokeBool(0xC593212475FAE340,ped,weaponHash,componentHash)end;---@return boolean
	--[=[Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	IsPedWeaponComponentActive=function(ped--[[@param ped integer]],weaponHash--[[@param weaponHash integer]],componentHash--[[@param componentHash integer]])return InvokeBool(0x0D78DE0572D3969E,ped,weaponHash,componentHash)end;---@return boolean
	RefillAmmoInstantly=function(ped--[[@param ped integer]])return InvokeBool(0x8C0D57EA686FAD87,ped)end;---@return boolean
	--[=[Forces a ped to reload only if they are able to; if they have a full magazine, they will not reload.]=]
	MakePedReload=function(ped--[[@param ped integer]])return InvokeBool(0x20AE33F3AC9C0033,ped)end;---@return boolean
	--[=[Nearly every instance of p1 I found was 31. Nearly every instance of p2 I found was 0.

REQUEST_WEAPON_ASSET(iLocal_1888, 31, 26);]=]
	RequestWeaponAsset=function(weaponHash--[[@param weaponHash integer]],p1--[[@param p1 integer]],p2--[[@param p2 integer]])return InvokeVoid(0x5443438F033E29C3,weaponHash,p1,p2)end;
	HasWeaponAssetLoaded=function(weaponHash--[[@param weaponHash integer]])return InvokeBool(0x36E353271F0E90EE,weaponHash)end;---@return boolean
	RemoveWeaponAsset=function(weaponHash--[[@param weaponHash integer]])return InvokeVoid(0xAA08EF13F341C8FC,weaponHash)end;
	--[=[Now has 8 params.]=]
	CreateWeaponObject=function(weaponHash--[[@param weaponHash integer]],ammoCount--[[@param ammoCount integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],showWorldModel--[[@param showWorldModel boolean]],scale--[[@param scale number]],p7--[[@param p7 any]],p8--[[@param p8 any]],p9--[[@param p9 any]])return InvokeInt(0x9541D3CF0D398F36,weaponHash,ammoCount,x+.0,y+.0,z+.0,showWorldModel,scale+.0,p7,p8,p9)end;---@return integer
	--[=[componentHash:
(use WEAPON::GET_WEAPON_COMPONENT_TYPE_MODEL() to get hash value)
${component_at_ar_flsh}, ${component_at_ar_supp}, ${component_at_pi_flsh}, ${component_at_scope_large}, ${component_at_ar_supp_02}]=]
	GiveWeaponComponentToWeaponObject=function(weaponObject--[[@param weaponObject integer]],componentHash--[[@param componentHash integer]])return InvokeVoid(0x33E179436C0B31DB,weaponObject,componentHash)end;
	--[=[see DOES_WEAPON_TAKE_WEAPON_COMPONENT for full list of weapons & components]=]
	RemoveWeaponComponentFromWeaponObject=function(object--[[@param object integer]],componentHash--[[@param componentHash integer]])return InvokeVoid(0xF7D82B0D66777611,object,componentHash)end;
	--[=[see DOES_WEAPON_TAKE_WEAPON_COMPONENT for full list of weapons & components]=]
	HasWeaponGotWeaponComponent=function(weapon--[[@param weapon integer]],componentHash--[[@param componentHash integer]])return InvokeBool(0x76A18844E743BF91,weapon,componentHash)end;---@return boolean
	GiveWeaponObjectToPed=function(weaponObject--[[@param weaponObject integer]],ped--[[@param ped integer]])return InvokeVoid(0xB1FA61371AF7C4B7,weaponObject,ped)end;
	--[=[Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	DoesWeaponTakeWeaponComponent=function(weaponHash--[[@param weaponHash integer]],componentHash--[[@param componentHash integer]])return InvokeBool(0x5CEE3DF569CECAB0,weaponHash,componentHash)end;---@return boolean
	--[=[Drops the current weapon and returns the object

Unknown behavior when unarmed.]=]
	GetWeaponObjectFromPed=function(ped--[[@param ped integer]],p1--[[@param p1 boolean]])return InvokeInt(0xCAE1DC9A0E22A16D,ped,p1)end;---@return integer
	--[=[Gives the specified loadout to the specified ped. 
Loadouts are defined in common.rpf\data\ai\loadouts.meta]=]
	GiveLoadoutToPed=function(ped--[[@param ped integer]],loadoutHash--[[@param loadoutHash integer]])return InvokeVoid(0x68F8BE6AF5CDF8A6,ped,loadoutHash)end;
	--[=[tintIndex can be the following:

0 - Normal
1 - Green
2 - Gold
3 - Pink
4 - Army
5 - LSPD
6 - Orange
7 - Platinum
Full list of weapons, components & tint indexes by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	SetPedWeaponTintIndex=function(ped--[[@param ped integer]],weaponHash--[[@param weaponHash integer]],tintIndex--[[@param tintIndex integer]])return InvokeVoid(0x50969B9B89ED5738,ped,weaponHash,tintIndex)end;
	--[=[Full list of weapons, components & tint indexes by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	GetPedWeaponTintIndex=function(ped--[[@param ped integer]],weaponHash--[[@param weaponHash integer]])return InvokeInt(0x2B9EEDC07BD06B9F,ped,weaponHash)end;---@return integer
	--[=[Full list of weapons, components & tint indexes by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	SetWeaponObjectTintIndex=function(weapon--[[@param weapon integer]],tintIndex--[[@param tintIndex integer]])return InvokeVoid(0xF827589017D4E4A9,weapon,tintIndex)end;
	GetWeaponObjectTintIndex=function(weapon--[[@param weapon integer]])return InvokeInt(0xCD183314F7CD2E57,weapon)end;---@return integer
	--[=[Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	GetWeaponTintCount=function(weaponHash--[[@param weaponHash integer]])return InvokeInt(0x5DCF6C5CAB2E9BF7,weaponHash)end;---@return integer
	--[=[Colors:
0 = Gray
1 = Dark Gray
2 = Black
3 = White
4 = Blue
5 = Cyan
6 = Aqua
7 = Cool Blue
8 = Dark Blue
9 = Royal Blue
10 = Plum
11 = Dark Purple
12 = Purple
13 = Red
14 = Wine Red
15 = Magenta
16 = Pink
17 = Salmon
18 = Hot Pink
19 = Rust Orange
20 = Brown
21 = Earth
22 = Orange
23 = Light Orange
24 = Dark Yellow
25 = Yellow
26 = Light Brown
27 = Lime Green
28 = Olive
29 = Moss
30 = Turquoise
31 = Dark Green
Full list of weapons, components, tint indexes & weapon liveries by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	SetPedWeaponComponentTintIndex=function(ped--[[@param ped integer]],weaponHash--[[@param weaponHash integer]],camoComponentHash--[[@param camoComponentHash integer]],colorIndex--[[@param colorIndex integer]])return InvokeVoid(0x9FE5633880ECD8ED,ped,weaponHash,camoComponentHash,colorIndex)end;
	--[=[Returns -1 if camoComponentHash is invalid/not attached to the weapon.
Full list of weapons, components, tint indexes & weapon liveries by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	GetPedWeaponComponentTintIndex=function(ped--[[@param ped integer]],weaponHash--[[@param weaponHash integer]],camoComponentHash--[[@param camoComponentHash integer]])return InvokeInt(0xF0A60040BE558F2D,ped,weaponHash,camoComponentHash)end;---@return integer
	--[=[Colors:
0 = Gray
1 = Dark Gray
2 = Black
3 = White
4 = Blue
5 = Cyan
6 = Aqua
7 = Cool Blue
8 = Dark Blue
9 = Royal Blue
10 = Plum
11 = Dark Purple
12 = Purple
13 = Red
14 = Wine Red
15 = Magenta
16 = Pink
17 = Salmon
18 = Hot Pink
19 = Rust Orange
20 = Brown
21 = Earth
22 = Orange
23 = Light Orange
24 = Dark Yellow
25 = Yellow
26 = Light Brown
27 = Lime Green
28 = Olive
29 = Moss
30 = Turquoise
31 = Dark Green
Full list of weapons, components, tint indexes & weapon liveries by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	SetWeaponObjectComponentTintIndex=function(weaponObject--[[@param weaponObject integer]],camoComponentHash--[[@param camoComponentHash integer]],colorIndex--[[@param colorIndex integer]])return InvokeVoid(0x5DA825A85D0EA6E6,weaponObject,camoComponentHash,colorIndex)end;
	--[=[Returns -1 if camoComponentHash is invalid/not attached to the weapon object.
Full list of weapons, components, tint indexes & weapon liveries by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	GetWeaponObjectComponentTintIndex=function(weaponObject--[[@param weaponObject integer]],camoComponentHash--[[@param camoComponentHash integer]])return InvokeInt(0xB3EA4FEABF41464B,weaponObject,camoComponentHash)end;---@return integer
	GetPedWeaponCamoIndex=function(ped--[[@param ped integer]],weaponHash--[[@param weaponHash integer]])return InvokeInt(0xA2C9AC24B4061285,ped,weaponHash)end;---@return integer
	SetWeaponObjectCamoIndex=function(weaponObject--[[@param weaponObject integer]],p1--[[@param p1 integer]])return InvokeVoid(0x977CA98939E82E4B,weaponObject,p1)end;
	--[=[struct WeaponHudStatsData
{
    BYTE hudDamage; // 0x0000
    char _0x0001[0x7]; // 0x0001
    BYTE hudSpeed; // 0x0008
    char _0x0009[0x7]; // 0x0009
    BYTE hudCapacity; // 0x0010
    char _0x0011[0x7]; // 0x0011
    BYTE hudAccuracy; // 0x0018
    char _0x0019[0x7]; // 0x0019
    BYTE hudRange; // 0x0020
};

Usage:

WeaponHudStatsData data;
if (GET_WEAPON_HUD_STATS(weaponHash, (int *)&data))
{
    // BYTE damagePercentage = data.hudDamage and so on
}
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	GetWeaponHudStats=function(weaponHash--[[@param weaponHash integer]],outData--[[@param outData any*]])return InvokeBool(0xD92C739EE34C9EBA,weaponHash,outData)end;---@return boolean
	GetWeaponComponentHudStats=function(componentHash--[[@param componentHash integer]],outData--[[@param outData any*]])return InvokeBool(0xB3CAF387AE12E9F8,componentHash,outData)end;---@return boolean
	--[=[This native does not return damages of weapons from the melee and explosive group.
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	GetWeaponDamage=function(weaponHash--[[@param weaponHash integer]],componentHash--[[@param componentHash integer]])return InvokeFloat(0x3133B907D8B32053,weaponHash,componentHash)end;---@return number
	--[=[// Returns the size of the default weapon component clip.

Use it like this:

char cClipSize[32];
Hash cur;
if (WEAPON::GET_CURRENT_PED_WEAPON(playerPed, &cur, 1))
{
    if (WEAPON::IS_WEAPON_VALID(cur))
    {
        int iClipSize = WEAPON::GET_WEAPON_CLIP_SIZE(cur);
        sprintf_s(cClipSize, "ClipSize: %.d", iClipSize);
        vDrawString(cClipSize, 0.5f, 0.5f);
    }
}
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	GetWeaponClipSize=function(weaponHash--[[@param weaponHash integer]])return InvokeInt(0x583BE370B1EC6EB4,weaponHash)end;---@return integer
	--[=[Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	GetWeaponTimeBetweenShots=function(weaponHash--[[@param weaponHash integer]])return InvokeFloat(0x065D2AACAD8CF7A4,weaponHash)end;---@return number
	SetPedChanceOfFiringBlanks=function(ped--[[@param ped integer]],xBias--[[@param xBias number]],yBias--[[@param yBias number]])return InvokeVoid(0x8378627201D5497D,ped,xBias+.0,yBias+.0)end;
	--[=[Returns handle of the projectile.]=]
	SetPedShootOrdnanceWeapon=function(ped--[[@param ped integer]],p1--[[@param p1 number]])return InvokeInt(0xB4C8D77C80C0421E,ped,p1+.0)end;---@return integer
	RequestWeaponHighDetailModel=function(weaponObject--[[@param weaponObject integer]])return InvokeVoid(0x48164DBB970AC3F0,weaponObject)end;
	--[=[Changes the weapon damage output by the given multiplier value. Must be run every frame.
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	SetWeaponDamageModifier=function(weaponHash--[[@param weaponHash integer]],damageMultiplier--[[@param damageMultiplier number]])return InvokeVoid(0x4757F00BC6323CFE,weaponHash,damageMultiplier+.0)end;
	SetWeaponAoeModifier=function(weaponHash--[[@param weaponHash integer]],multiplier--[[@param multiplier number]])return InvokeVoid(0x4AE5AC8B852D642C,weaponHash,multiplier+.0)end;
	--[=[ex, WEAPON::SET_WEAPON_EFFECT_DURATION_MODIFIER(joaat("vehicle_weapon_mine_slick"), 1.0);]=]
	SetWeaponEffectDurationModifier=function(p0--[[@param p0 integer]],p1--[[@param p1 number]])return InvokeVoid(0xE6D2CEDD370FF98E,p0,p1+.0)end;
	--[=[This native returns a true or false value.

Ped ped = The ped whose weapon you want to check.]=]
	IsPedCurrentWeaponSilenced=function(ped--[[@param ped integer]])return InvokeBool(0x65F0C5AE05943EC7,ped)end;---@return boolean
	IsFlashLightOn=function(ped--[[@param ped integer]])return InvokeBool(0x4B7620C47217126C,ped)end;---@return boolean
	SetFlashLightFadeDistance=function(distance--[[@param distance number]])return InvokeBool(0xCEA66DAD478CD39B,distance+.0)end;---@return boolean
	--[=[Enables/disables flashlight on ped's weapon.]=]
	SetFlashLightActiveHistory=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0x988DB6FE9B3AC000,ped,toggle)end;
	--[=[Changes the selected ped aiming animation style. 
Note : You must use GET_HASH_KEY!

Strings to use with GET_HASH_KEY :

    "Ballistic",
    "Default",
  "Fat",
  "Female",
   "FirstPerson",
  "FirstPersonAiming",
    "FirstPersonFranklin",
  "FirstPersonFranklinAiming",
    "FirstPersonFranklinRNG",
   "FirstPersonFranklinScope",
 "FirstPersonMPFemale",
  "FirstPersonMichael",
   "FirstPersonMichaelAiming",
 "FirstPersonMichaelRNG",
    "FirstPersonMichaelScope",
  "FirstPersonRNG",
   "FirstPersonScope",
 "FirstPersonTrevor",
    "FirstPersonTrevorAiming",
  "FirstPersonTrevorRNG",
 "FirstPersonTrevorScope",
   "Franklin",
 "Gang",
 "Gang1H",
   "GangFemale",
   "Hillbilly",
    "MP_F_Freemode",
    "Michael",
  "SuperFat",
 "Trevor"]=]
	SetWeaponAnimationOverride=function(ped--[[@param ped integer]],animStyle--[[@param animStyle integer]])return InvokeVoid(0x1055AC3A667F09D9,ped,animStyle)end;
	--[=[enum class eDamageType
{
	UNKNOWN = 0,
	NONE = 1,
	MELEE = 2,
	BULLET = 3,
	BULLET_RUBBER = 4,
	EXPLOSIVE = 5,
	FIRE = 6,
	COLLISION = 7,
	FALL = 8,
	DROWN = 9,
	ELECTRIC = 10,
	BARBED_WIRE = 11,
	FIRE_EXTINGUISHER = 12,
	SMOKE = 13,
	WATER_CANNON = 14,
	TRANQUILIZER = 15,
};

Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	GetWeaponDamageType=function(weaponHash--[[@param weaponHash integer]])return InvokeInt(0x3BE0BB12D25FB305,weaponHash)end;---@return integer
	SetEqippedWeaponStartSpinningAtFullSpeed=function(ped--[[@param ped integer]])return InvokeVoid(0xE4DCEC7FD5B739A5,ped)end;
	--[=[this returns if you can use the weapon while using a parachute
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	CanUseWeaponOnParachute=function(weaponHash--[[@param weaponHash integer]])return InvokeBool(0xBC7BE5ABC0879F74,weaponHash)end;---@return boolean
	--[=[Both coordinates are from objects in the decompiled scripts. Native related to 0xECDC202B25E5CF48 p1 value. The only weapon hash used in the decompiled scripts is weapon_air_defence_gun. These two natives are used by the yacht script, decompiled scripts suggest it and the weapon hash used (valkyrie's rockets) are also used by yachts.]=]
	CreateAirDefenceSphere=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]],p4--[[@param p4 number]],p5--[[@param p5 number]],p6--[[@param p6 number]],weaponHash--[[@param weaponHash integer]])return InvokeInt(0x91EF34584710BE99,x+.0,y+.0,z+.0,radius+.0,p4+.0,p5+.0,p6+.0,weaponHash)end;---@return integer
	--[=[Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	CreateAirDefenceAngledArea=function(p0--[[@param p0 number]],p1--[[@param p1 number]],p2--[[@param p2 number]],p3--[[@param p3 number]],p4--[[@param p4 number]],p5--[[@param p5 number]],p6--[[@param p6 number]],p7--[[@param p7 number]],p8--[[@param p8 number]],radius--[[@param radius number]],weaponHash--[[@param weaponHash integer]])return InvokeInt(0x9DA58CDBF6BDBC08,p0+.0,p1+.0,p2+.0,p3+.0,p4+.0,p5+.0,p6+.0,p7+.0,p8+.0,radius+.0,weaponHash)end;---@return integer
	RemoveAirDefenceSphere=function(zoneId--[[@param zoneId integer]])return InvokeBool(0x0ABF535877897560,zoneId)end;---@return boolean
	RemoveAllAirDefenceSpheres=function()return InvokeVoid(0x1E45B34ADEBEE48E)end;
	SetPlayerTargettableForAirDefenceSphere=function(player--[[@param player integer]],zoneId--[[@param zoneId integer]],enable--[[@param enable boolean]])return InvokeVoid(0xECDC202B25E5CF48,player,zoneId,enable)end;
	IsAirDefenceSphereInArea=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]],radius--[[@param radius number]],outZoneId--[[@param outZoneId integer*]])return InvokeBool(0xDAB963831DBFD3F4,x+.0,y+.0,z+.0,radius+.0,outZoneId)end;---@return boolean
	FireAirDefenceSphereWeaponAtPosition=function(zoneId--[[@param zoneId integer]],x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeVoid(0x44F1012B69313374,zoneId,x+.0,y+.0,z+.0)end;
	DoesAirDefenceSphereExist=function(zoneId--[[@param zoneId integer]])return InvokeBool(0xCD79A550999D7D4F,zoneId)end;---@return boolean
	--[=[Disables selecting the given weapon. Ped isn't forced to put the gun away. However you can't reselect the weapon if you holster then unholster. Weapon is also grayed out on the weapon wheel.
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json]=]
	SetCanPedSelectInventoryWeapon=function(ped--[[@param ped integer]],weaponHash--[[@param weaponHash integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xB4771B9AAF4E68E4,ped,weaponHash,toggle)end;
	--[=[Disable all weapons. Does the same as 0xB4771B9AAF4E68E4 except for all weapons.]=]
	SetCanPedSelectAllWeapons=function(ped--[[@param ped integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xEFF296097FF1E509,ped,toggle)end;
}
_G.Zone={
	GetZoneAtCoords=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeInt(0x27040C25DE6CB2F4,x+.0,y+.0,z+.0)end;---@return integer
	--[=['zoneName' corresponds to an entry in 'popzone.ipl'.

AIRP = Los Santos International Airport
ALAMO = Alamo Sea
ALTA = Alta
ARMYB = Fort Zancudo
BANHAMC = Banham Canyon Dr
BANNING = Banning
BEACH = Vespucci Beach
BHAMCA = Banham Canyon
BRADP = Braddock Pass
BRADT = Braddock Tunnel
BURTON = Burton
CALAFB = Calafia Bridge
CANNY = Raton Canyon
CCREAK = Cassidy Creek
CHAMH = Chamberlain Hills
CHIL = Vinewood Hills
CHU = Chumash
CMSW = Chiliad Mountain State Wilderness
CYPRE = Cypress Flats
DAVIS = Davis
DELBE = Del Perro Beach
DELPE = Del Perro
DELSOL = La Puerta
DESRT = Grand Senora Desert
DOWNT = Downtown
DTVINE = Downtown Vinewood
EAST_V = East Vinewood
EBURO = El Burro Heights
ELGORL = El Gordo Lighthouse
ELYSIAN = Elysian Island
GALFISH = Galilee
GOLF = GWC and Golfing Society
GRAPES = Grapeseed
GREATC = Great Chaparral
HARMO = Harmony
HAWICK = Hawick
HORS = Vinewood Racetrack
HUMLAB = Humane Labs and Research
JAIL = Bolingbroke Penitentiary
KOREAT = Little Seoul
LACT = Land Act Reservoir
LAGO = Lago Zancudo
LDAM = Land Act Dam
LEGSQU = Legion Square
LMESA = La Mesa
LOSPUER = La Puerta
MIRR = Mirror Park
MORN = Morningwood
MOVIE = Richards Majestic
MTCHIL = Mount Chiliad
MTGORDO = Mount Gordo
MTJOSE = Mount Josiah
MURRI = Murrieta Heights
NCHU = North Chumash
NOOSE = N.O.O.S.E
OCEANA = Pacific Ocean
PALCOV = Paleto Cove
PALETO = Paleto Bay
PALFOR = Paleto Forest
PALHIGH = Palomino Highlands
PALMPOW = Palmer-Taylor Power Station
PBLUFF = Pacific Bluffs
PBOX = Pillbox Hill
PROCOB = Procopio Beach
RANCHO = Rancho
RGLEN = Richman Glen
RICHM = Richman
ROCKF = Rockford Hills
RTRAK = Redwood Lights Track
SANAND = San Andreas
SANCHIA = San Chianski Mountain Range
SANDY = Sandy Shores
SKID = Mission Row
SLAB = Stab City
STAD = Maze Bank Arena
STRAW = Strawberry
TATAMO = Tataviam Mountains
TERMINA = Terminal
TEXTI = Textile City
TONGVAH = Tongva Hills
TONGVAV = Tongva Valley
VCANA = Vespucci Canals
VESP = Vespucci
VINE = Vinewood
WINDF = Ron Alternates Wind Farm
WVINE = West Vinewood
ZANCUDO = Zancudo River
ZP_ORT = Port of South Los Santos
ZQ_UAR = Davis Quartz

Full list of zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/zones.json]=]
	GetZoneFromNameId=function(zoneName--[[@param zoneName string]])return InvokeInt(0x98CD1D2934B76CC1,zoneName)end;---@return integer
	GetZonePopschedule=function(zoneId--[[@param zoneId integer]])return InvokeInt(0x4334BC40AA0CB4BB,zoneId)end;---@return integer
	--[=[AIRP = Los Santos International Airport
ALAMO = Alamo Sea
ALTA = Alta
ARMYB = Fort Zancudo
BANHAMC = Banham Canyon Dr
BANNING = Banning
BEACH = Vespucci Beach
BHAMCA = Banham Canyon
BRADP = Braddock Pass
BRADT = Braddock Tunnel
BURTON = Burton
CALAFB = Calafia Bridge
CANNY = Raton Canyon
CCREAK = Cassidy Creek
CHAMH = Chamberlain Hills
CHIL = Vinewood Hills
CHU = Chumash
CMSW = Chiliad Mountain State Wilderness
CYPRE = Cypress Flats
DAVIS = Davis
DELBE = Del Perro Beach
DELPE = Del Perro
DELSOL = La Puerta
DESRT = Grand Senora Desert
DOWNT = Downtown
DTVINE = Downtown Vinewood
EAST_V = East Vinewood
EBURO = El Burro Heights
ELGORL = El Gordo Lighthouse
ELYSIAN = Elysian Island
GALFISH = Galilee
GOLF = GWC and Golfing Society
GRAPES = Grapeseed
GREATC = Great Chaparral
HARMO = Harmony
HAWICK = Hawick
HORS = Vinewood Racetrack
HUMLAB = Humane Labs and Research
JAIL = Bolingbroke Penitentiary
KOREAT = Little Seoul
LACT = Land Act Reservoir
LAGO = Lago Zancudo
LDAM = Land Act Dam
LEGSQU = Legion Square
LMESA = La Mesa
LOSPUER = La Puerta
MIRR = Mirror Park
MORN = Morningwood
MOVIE = Richards Majestic
MTCHIL = Mount Chiliad
MTGORDO = Mount Gordo
MTJOSE = Mount Josiah
MURRI = Murrieta Heights
NCHU = North Chumash
NOOSE = N.O.O.S.E
OCEANA = Pacific Ocean
PALCOV = Paleto Cove
PALETO = Paleto Bay
PALFOR = Paleto Forest
PALHIGH = Palomino Highlands
PALMPOW = Palmer-Taylor Power Station
PBLUFF = Pacific Bluffs
PBOX = Pillbox Hill
PROCOB = Procopio Beach
RANCHO = Rancho
RGLEN = Richman Glen
RICHM = Richman
ROCKF = Rockford Hills
RTRAK = Redwood Lights Track
SANAND = San Andreas
SANCHIA = San Chianski Mountain Range
SANDY = Sandy Shores
SKID = Mission Row
SLAB = Stab City
STAD = Maze Bank Arena
STRAW = Strawberry
TATAMO = Tataviam Mountains
TERMINA = Terminal
TEXTI = Textile City
TONGVAH = Tongva Hills
TONGVAV = Tongva Valley
VCANA = Vespucci Canals
VESP = Vespucci
VINE = Vinewood
WINDF = Ron Alternates Wind Farm
WVINE = West Vinewood
ZANCUDO = Zancudo River
ZP_ORT = Port of South Los Santos
ZQ_UAR = Davis Quartz

Full list of zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/zones.json]=]
	GetNameOfZone=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeString(0xCD90657D4C30E1CA,x+.0,y+.0,z+.0)end;---@return string
	SetZoneEnabled=function(zoneId--[[@param zoneId integer]],toggle--[[@param toggle boolean]])return InvokeVoid(0xBA5ECEEA120E5611,zoneId,toggle)end;
	--[=[cellphone range 1- 5 used for signal bar in iFruit phone]=]
	GetZoneScumminess=function(zoneId--[[@param zoneId integer]])return InvokeInt(0x5F7B268D15BA0739,zoneId)end;---@return integer
	--[=[Only used once in the decompiled scripts. Seems to be related to scripted vehicle generators.

Modified example from "am_imp_exp.c4", line 6406:
/* popSchedules[0] = ZONE::GET_ZONE_POPSCHEDULE(ZONE::GET_ZONE_AT_COORDS(891.3, 807.9, 188.1));
etc.
*/
ZONE::OVERRIDE_POPSCHEDULE_VEHICLE_MODEL(popSchedules[index], vehicleHash);
STREAMING::REQUEST_MODEL(vehicleHash);]=]
	OverridePopscheduleVehicleModel=function(scheduleId--[[@param scheduleId integer]],vehicleHash--[[@param vehicleHash integer]])return InvokeVoid(0x5F7D596BAC2E7777,scheduleId,vehicleHash)end;
	--[=[Only used once in the decompiled scripts. Seems to be related to scripted vehicle generators.

Modified example from "am_imp_exp.c4", line 6418:
/* popSchedules[0] = ZONE::GET_ZONE_POPSCHEDULE(ZONE::GET_ZONE_AT_COORDS(891.3, 807.9, 188.1));
etc.
*/
STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(vehicleHash);
ZONE::CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL(popSchedules[index]);]=]
	ClearPopscheduleOverrideVehicleModel=function(scheduleId--[[@param scheduleId integer]])return InvokeVoid(0x5C0DE367AA0D911C,scheduleId)end;
	--[=[Returns a hash representing which part of the map the given coords are located.

Possible return values:
(Hash of) city -> -289320599
(Hash of) countryside -> 2072609373

C# Example :

Ped player = Game.Player.Character;
Hash h = Function.Call<Hash>(Hash.GET_HASH_OF_MAP_AREA_AT_COORDS, player.Position.X, player.Position.Y, player.Position.Z);]=]
	GetHashOfMapAreaAtCoords=function(x--[[@param x number]],y--[[@param y number]],z--[[@param z number]])return InvokeInt(0x7EE64D51E8498728,x+.0,y+.0,z+.0)end;---@return integer
}
